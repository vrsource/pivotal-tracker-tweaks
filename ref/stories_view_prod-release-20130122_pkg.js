(function() {
    var root = this;
    var previousUnderscore = root._;
    var breaker = {};
    var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;
    var slice = ArrayProto.slice, unshift = ArrayProto.unshift, toString = ObjProto.toString, hasOwnProperty = ObjProto.hasOwnProperty;
    var
    nativeForEach = ArrayProto.forEach, nativeMap = ArrayProto.map, nativeReduce = ArrayProto.reduce, nativeReduceRight = ArrayProto.reduceRight, nativeFilter = ArrayProto.filter, nativeEvery = ArrayProto.every, nativeSome = ArrayProto.some, nativeIndexOf = ArrayProto.indexOf, nativeLastIndexOf = ArrayProto.lastIndexOf, nativeIsArray = Array.isArray, nativeKeys = Object.keys, nativeBind = FuncProto.bind;
    var _ = function(obj) {
        return new wrapper(obj);
    };
    if (typeof exports !== 'undefined') {
        if (typeof module !== 'undefined' && module.exports) {
            exports = module.exports = _;
        }
        exports._ = _;
    } else {
        root['_'] = _;
    }
    _.VERSION = '1.3.1';
    var each = _.each = _.forEach = function(obj, iterator, context) {
        if (obj == null)
            return;
        if (nativeForEach && obj.forEach === nativeForEach) {
            obj.forEach(iterator, context);
        } else if (obj.length === +obj.length) {
            for (var i = 0, l = obj.length; i < l; i++) {
                if (i in obj && iterator.call(context, obj[i], i, obj) === breaker)
                    return;
            }
        } else {
            for (var key in obj) {
                if (_.has(obj, key)) {
                    if (iterator.call(context, obj[key], key, obj) === breaker)
                        return;
                }
            }
        }
    };
    _.map = _.collect = function(obj, iterator, context) {
        var results = [];
        if (obj == null)
            return results;
        if (nativeMap && obj.map === nativeMap)
            return obj.map(iterator, context);
        each(obj, function(value, index, list) {
            results[results.length] = iterator.call(context, value, index, list);
        });
        if (obj.length === +obj.length)
            results.length = obj.length;
        return results;
    };
    _.reduce = _.foldl = _.inject = function(obj, iterator, memo, context) {
        var initial = arguments.length > 2;
        if (obj == null)
            obj = [];
        if (nativeReduce && obj.reduce === nativeReduce) {
            if (context)
                iterator = _.bind(iterator, context);
            return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);
        }
        each(obj, function(value, index, list) {
            if (!initial) {
                memo = value;
                initial = true;
            } else {
                memo = iterator.call(context, memo, value, index, list);
            }
        });
        if (!initial)
            throw new TypeError('Reduce of empty array with no initial value');
        return memo;
    };
    _.reduceRight = _.foldr = function(obj, iterator, memo, context) {
        var initial = arguments.length > 2;
        if (obj == null)
            obj = [];
        if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {
            if (context)
                iterator = _.bind(iterator, context);
            return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);
        }
        var reversed = _.toArray(obj).reverse();
        if (context && !initial)
            iterator = _.bind(iterator, context);
        return initial ? _.reduce(reversed, iterator, memo, context) : _.reduce(reversed, iterator);
    };
    _.find = _.detect = function(obj, iterator, context) {
        var result;
        any(obj, function(value, index, list) {
            if (iterator.call(context, value, index, list)) {
                result = value;
                return true;
            }
        });
        return result;
    };
    _.filter = _.select = function(obj, iterator, context) {
        var results = [];
        if (obj == null)
            return results;
        if (nativeFilter && obj.filter === nativeFilter)
            return obj.filter(iterator, context);
        each(obj, function(value, index, list) {
            if (iterator.call(context, value, index, list))
                results[results.length] = value;
        });
        return results;
    };
    _.reject = function(obj, iterator, context) {
        var results = [];
        if (obj == null)
            return results;
        each(obj, function(value, index, list) {
            if (!iterator.call(context, value, index, list))
                results[results.length] = value;
        });
        return results;
    };
    _.every = _.all = function(obj, iterator, context) {
        var result = true;
        if (obj == null)
            return result;
        if (nativeEvery && obj.every === nativeEvery)
            return obj.every(iterator, context);
        each(obj, function(value, index, list) {
            if (!(result = result && iterator.call(context, value, index, list)))
                return breaker;
        });
        return result;
    };
    var any = _.some = _.any = function(obj, iterator, context) {
        iterator || (iterator = _.identity);
        var result = false;
        if (obj == null)
            return result;
        if (nativeSome && obj.some === nativeSome)
            return obj.some(iterator, context);
        each(obj, function(value, index, list) {
            if (result || (result = iterator.call(context, value, index, list)))
                return breaker;
        });
        return !!result;
    };
    _.include = _.contains = function(obj, target) {
        var found = false;
        if (obj == null)
            return found;
        if (nativeIndexOf && obj.indexOf === nativeIndexOf)
            return obj.indexOf(target) != -1;
        found = any(obj, function(value) {
            return value === target;
        });
        return found;
    };
    _.invoke = function(obj, method) {
        var args = slice.call(arguments, 2);
        return _.map(obj, function(value) {
            return (_.isFunction(method) ? method || value : value[method]).apply(value, args);
        });
    };
    _.pluck = function(obj, key) {
        return _.map(obj, function(value) {
            return value[key];
        });
    };
    _.max = function(obj, iterator, context) {
        if (!iterator && _.isArray(obj))
            return Math.max.apply(Math, obj);
        if (!iterator && _.isEmpty(obj))
            return -Infinity;
        var result = {computed: -Infinity};
        each(obj, function(value, index, list) {
            var computed = iterator ? iterator.call(context, value, index, list) : value;
            computed >= result.computed && (result = {value: value,computed: computed});
        });
        return result.value;
    };
    _.min = function(obj, iterator, context) {
        if (!iterator && _.isArray(obj))
            return Math.min.apply(Math, obj);
        if (!iterator && _.isEmpty(obj))
            return Infinity;
        var result = {computed: Infinity};
        each(obj, function(value, index, list) {
            var computed = iterator ? iterator.call(context, value, index, list) : value;
            computed < result.computed && (result = {value: value,computed: computed});
        });
        return result.value;
    };
    _.shuffle = function(obj) {
        var shuffled = [], rand;
        each(obj, function(value, index, list) {
            if (index == 0) {
                shuffled[0] = value;
            } else {
                rand = Math.floor(Math.random() * (index + 1));
                shuffled[index] = shuffled[rand];
                shuffled[rand] = value;
            }
        });
        return shuffled;
    };
    _.sortBy = function(obj, iterator, context) {
        return _.pluck(_.map(obj, function(value, index, list) {
            return {value: value,criteria: iterator.call(context, value, index, list)};
        }).sort(function(left, right) {
            var a = left.criteria, b = right.criteria;
            return a < b ? -1 : a > b ? 1 : 0;
        }), 'value');
    };
    _.groupBy = function(obj, val) {
        var result = {};
        var iterator = _.isFunction(val) ? val : function(obj) {
            return obj[val];
        };
        each(obj, function(value, index) {
            var key = iterator(value, index);
            (result[key] || (result[key] = [])).push(value);
        });
        return result;
    };
    _.sortedIndex = function(array, obj, iterator) {
        iterator || (iterator = _.identity);
        var low = 0, high = array.length;
        while (low < high) {
            var mid = (low + high) >> 1;
            iterator(array[mid]) < iterator(obj) ? low = mid + 1 : high = mid;
        }
        return low;
    };
    _.toArray = function(iterable) {
        if (!iterable)
            return [];
        if (iterable.toArray)
            return iterable.toArray();
        if (_.isArray(iterable))
            return slice.call(iterable);
        if (_.isArguments(iterable))
            return slice.call(iterable);
        return _.values(iterable);
    };
    _.size = function(obj) {
        return _.toArray(obj).length;
    };
    _.first = _.head = function(array, n, guard) {
        return (n != null) && !guard ? slice.call(array, 0, n) : array[0];
    };
    _.initial = function(array, n, guard) {
        return slice.call(array, 0, array.length - ((n == null) || guard ? 1 : n));
    };
    _.last = function(array, n, guard) {
        if ((n != null) && !guard) {
            return slice.call(array, Math.max(array.length - n, 0));
        } else {
            return array[array.length - 1];
        }
    };
    _.rest = _.tail = function(array, index, guard) {
        return slice.call(array, (index == null) || guard ? 1 : index);
    };
    _.compact = function(array) {
        return _.filter(array, function(value) {
            return !!value;
        });
    };
    _.flatten = function(array, shallow) {
        return _.reduce(array, function(memo, value) {
            if (_.isArray(value))
                return memo.concat(shallow ? value : _.flatten(value));
            memo[memo.length] = value;
            return memo;
        }, []);
    };
    _.without = function(array) {
        return _.difference(array, slice.call(arguments, 1));
    };
    _.uniq = _.unique = function(array, isSorted, iterator) {
        var initial = iterator ? _.map(array, iterator) : array;
        var result = [];
        _.reduce(initial, function(memo, el, i) {
            if (0 == i || (isSorted === true ? _.last(memo) != el : !_.include(memo, el))) {
                memo[memo.length] = el;
                result[result.length] = array[i];
            }
            return memo;
        }, []);
        return result;
    };
    _.union = function() {
        return _.uniq(_.flatten(arguments, true));
    };
    _.intersection = _.intersect = function(array) {
        var rest = slice.call(arguments, 1);
        return _.filter(_.uniq(array), function(item) {
            return _.every(rest, function(other) {
                return _.indexOf(other, item) >= 0;
            });
        });
    };
    _.difference = function(array) {
        var rest = _.flatten(slice.call(arguments, 1));
        return _.filter(array, function(value) {
            return !_.include(rest, value);
        });
    };
    _.zip = function() {
        var args = slice.call(arguments);
        var length = _.max(_.pluck(args, 'length'));
        var results = new Array(length);
        for (var i = 0; i < length; i++)
            results[i] = _.pluck(args, "" + i);
        return results;
    };
    _.indexOf = function(array, item, isSorted) {
        if (array == null)
            return -1;
        var i, l;
        if (isSorted) {
            i = _.sortedIndex(array, item);
            return array[i] === item ? i : -1;
        }
        if (nativeIndexOf && array.indexOf === nativeIndexOf)
            return array.indexOf(item);
        for (i = 0, l = array.length; i < l; i++)
            if (i in array && array[i] === item)
                return i;
        return -1;
    };
    _.lastIndexOf = function(array, item) {
        if (array == null)
            return -1;
        if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf)
            return array.lastIndexOf(item);
        var i = array.length;
        while (i--)
            if (i in array && array[i] === item)
                return i;
        return -1;
    };
    _.range = function(start, stop, step) {
        if (arguments.length <= 1) {
            stop = start || 0;
            start = 0;
        }
        step = arguments[2] || 1;
        var len = Math.max(Math.ceil((stop - start) / step), 0);
        var idx = 0;
        var range = new Array(len);
        while (idx < len) {
            range[idx++] = start;
            start += step;
        }
        return range;
    };
    var ctor = function() {
    };
    _.bind = function bind(func, context) {
        var bound, args;
        if (func.bind === nativeBind && nativeBind)
            return nativeBind.apply(func, slice.call(arguments, 1));
        if (!_.isFunction(func))
            throw new TypeError;
        args = slice.call(arguments, 2);
        return bound = function() {
            if (!(this instanceof bound))
                return func.apply(context, args.concat(slice.call(arguments)));
            ctor.prototype = func.prototype;
            var self = new ctor;
            var result = func.apply(self, args.concat(slice.call(arguments)));
            if (Object(result) === result)
                return result;
            return self;
        };
    };
    _.bindAll = function(obj) {
        var funcs = slice.call(arguments, 1);
        if (funcs.length == 0)
            funcs = _.functions(obj);
        each(funcs, function(f) {
            obj[f] = _.bind(obj[f], obj);
        });
        return obj;
    };
    _.memoize = function(func, hasher) {
        var memo = {};
        hasher || (hasher = _.identity);
        return function() {
            var key = hasher.apply(this, arguments);
            return _.has(memo, key) ? memo[key] : (memo[key] = func.apply(this, arguments));
        };
    };
    _.delay = function(func, wait) {
        var args = slice.call(arguments, 2);
        return setTimeout(function() {
            return func.apply(func, args);
        }, wait);
    };
    _.defer = function(func) {
        return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));
    };
    _.throttle = function(func, wait) {
        var context, args, timeout, throttling, more;
        var whenDone = _.debounce(function() {
            more = throttling = false;
        }, wait);
        return function() {
            context = this;
            args = arguments;
            var later = function() {
                timeout = null;
                if (more)
                    func.apply(context, args);
                whenDone();
            };
            if (!timeout)
                timeout = setTimeout(later, wait);
            if (throttling) {
                more = true;
            } else {
                func.apply(context, args);
            }
            whenDone();
            throttling = true;
        };
    };
    _.debounce = function(func, wait) {
        var timeout;
        return function() {
            var context = this, args = arguments;
            var later = function() {
                timeout = null;
                func.apply(context, args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    };
    _.once = function(func) {
        var ran = false, memo;
        return function() {
            if (ran)
                return memo;
            ran = true;
            return memo = func.apply(this, arguments);
        };
    };
    _.wrap = function(func, wrapper) {
        return function() {
            var args = [func].concat(slice.call(arguments, 0));
            return wrapper.apply(this, args);
        };
    };
    _.compose = function() {
        var funcs = arguments;
        return function() {
            var args = arguments;
            for (var i = funcs.length - 1; i >= 0; i--) {
                args = [funcs[i].apply(this, args)];
            }
            return args[0];
        };
    };
    _.after = function(times, func) {
        if (times <= 0)
            return func();
        return function() {
            if (--times < 1) {
                return func.apply(this, arguments);
            }
        };
    };
    _.keys = nativeKeys || function(obj) {
        if (obj !== Object(obj))
            throw new TypeError('Invalid object');
        var keys = [];
        for (var key in obj)
            if (_.has(obj, key))
                keys[keys.length] = key;
        return keys;
    };
    _.values = function(obj) {
        return _.map(obj, _.identity);
    };
    _.functions = _.methods = function(obj) {
        var names = [];
        for (var key in obj) {
            if (_.isFunction(obj[key]))
                names.push(key);
        }
        return names.sort();
    };
    _.extend = function(obj) {
        each(slice.call(arguments, 1), function(source) {
            for (var prop in source) {
                obj[prop] = source[prop];
            }
        });
        return obj;
    };
    _.defaults = function(obj) {
        each(slice.call(arguments, 1), function(source) {
            for (var prop in source) {
                if (obj[prop] == null)
                    obj[prop] = source[prop];
            }
        });
        return obj;
    };
    _.clone = function(obj) {
        if (!_.isObject(obj))
            return obj;
        return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
    };
    _.tap = function(obj, interceptor) {
        interceptor(obj);
        return obj;
    };
    function eq(a, b, stack) {
        if (a === b)
            return a !== 0 || 1 / a == 1 / b;
        if (a == null || b == null)
            return a === b;
        if (a._chain)
            a = a._wrapped;
        if (b._chain)
            b = b._wrapped;
        if (a.isEqual && _.isFunction(a.isEqual))
            return a.isEqual(b);
        if (b.isEqual && _.isFunction(b.isEqual))
            return b.isEqual(a);
        var className = toString.call(a);
        if (className != toString.call(b))
            return false;
        switch (className) {
            case '[object String]':
                return a == String(b);
            case '[object Number]':
                return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);
            case '[object Date]':
            case '[object Boolean]':
                return +a == +b;
            case '[object RegExp]':
                return a.source == b.source && a.global == b.global && a.multiline == b.multiline && a.ignoreCase == b.ignoreCase;
        }
        if (typeof a != 'object' || typeof b != 'object')
            return false;
        var length = stack.length;
        while (length--) {
            if (stack[length] == a)
                return true;
        }
        stack.push(a);
        var size = 0, result = true;
        if (className == '[object Array]') {
            size = a.length;
            result = size == b.length;
            if (result) {
                while (size--) {
                    if (!(result = size in a == size in b && eq(a[size], b[size], stack)))
                        break;
                }
            }
        } else {
            if ('constructor' in a != 'constructor' in b || a.constructor != b.constructor)
                return false;
            for (var key in a) {
                if (_.has(a, key)) {
                    size++;
                    if (!(result = _.has(b, key) && eq(a[key], b[key], stack)))
                        break;
                }
            }
            if (result) {
                for (key in b) {
                    if (_.has(b, key) && !(size--))
                        break;
                }
                result = !size;
            }
        }
        stack.pop();
        return result;
    }
    _.isEqual = function(a, b) {
        return eq(a, b, []);
    };
    _.isEmpty = function(obj) {
        if (_.isArray(obj) || _.isString(obj))
            return obj.length === 0;
        for (var key in obj)
            if (_.has(obj, key))
                return false;
        return true;
    };
    _.isElement = function(obj) {
        return !!(obj && obj.nodeType == 1);
    };
    _.isArray = nativeIsArray || function(obj) {
        return toString.call(obj) == '[object Array]';
    };
    _.isObject = function(obj) {
        return obj === Object(obj);
    };
    _.isArguments = function(obj) {
        return toString.call(obj) == '[object Arguments]';
    };
    if (!_.isArguments(arguments)) {
        _.isArguments = function(obj) {
            return !!(obj && _.has(obj, 'callee'));
        };
    }
    _.isFunction = function(obj) {
        return toString.call(obj) == '[object Function]';
    };
    _.isString = function(obj) {
        return toString.call(obj) == '[object String]';
    };
    _.isNumber = function(obj) {
        return toString.call(obj) == '[object Number]';
    };
    _.isNaN = function(obj) {
        return obj !== obj;
    };
    _.isBoolean = function(obj) {
        return obj === true || obj === false || toString.call(obj) == '[object Boolean]';
    };
    _.isDate = function(obj) {
        return toString.call(obj) == '[object Date]';
    };
    _.isRegExp = function(obj) {
        return toString.call(obj) == '[object RegExp]';
    };
    _.isNull = function(obj) {
        return obj === null;
    };
    _.isUndefined = function(obj) {
        return obj === void 0;
    };
    _.has = function(obj, key) {
        return hasOwnProperty.call(obj, key);
    };
    _.noConflict = function() {
        root._ = previousUnderscore;
        return this;
    };
    _.identity = function(value) {
        return value;
    };
    _.times = function(n, iterator, context) {
        for (var i = 0; i < n; i++)
            iterator.call(context, i);
    };
    _.escape = function(string) {
        return ('' + string).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#x27;').replace(/\//g, '&#x2F;');
    };
    _.mixin = function(obj) {
        each(_.functions(obj), function(name) {
            addToWrapper(name, _[name] = obj[name]);
        });
    };
    var idCounter = 0;
    _.uniqueId = function(prefix) {
        var id = idCounter++;
        return prefix ? prefix + id : id;
    };
    _.templateSettings = {evaluate: /<%([\s\S]+?)%>/g,interpolate: /<%=([\s\S]+?)%>/g,escape: /<%-([\s\S]+?)%>/g};
    var noMatch = /.^/;
    var unescape = function(code) {
        return code.replace(/\\\\/g, '\\').replace(/\\'/g, "'");
    };
    _.template = function(str, data) {
        var c = _.templateSettings;
        var tmpl = 'var __p=[],print=function(){__p.push.apply(__p,arguments);};' + 'with(obj||{}){__p.push(\'' +
        str.replace(/\\/g, '\\\\').replace(/'/g, "\\'").replace(c.escape || noMatch, function(match, code) {
            return "',_.escape(" + unescape(code) + "),'";
        }).replace(c.interpolate || noMatch, function(match, code) {
            return "'," + unescape(code) + ",'";
        }).replace(c.evaluate || noMatch, function(match, code) {
            return "');" + unescape(code).replace(/[\r\n\t]/g, ' ') + ";__p.push('";
        }).replace(/\r/g, '\\r').replace(/\n/g, '\\n').replace(/\t/g, '\\t')
        + "');}return __p.join('');";
        var func = new Function('obj', '_', tmpl);
        if (data)
            return func(data, _);
        return function(data) {
            return func.call(this, data, _);
        };
    };
    _.chain = function(obj) {
        return _(obj).chain();
    };
    var wrapper = function(obj) {
        this._wrapped = obj;
    };
    _.prototype = wrapper.prototype;
    var result = function(obj, chain) {
        return chain ? _(obj).chain() : obj;
    };
    var addToWrapper = function(name, func) {
        wrapper.prototype[name] = function() {
            var args = slice.call(arguments);
            unshift.call(args, this._wrapped);
            return result(func.apply(_, args), this._chain);
        };
    };
    _.mixin(_);
    each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
        var method = ArrayProto[name];
        wrapper.prototype[name] = function() {
            var wrapped = this._wrapped;
            method.apply(wrapped, arguments);
            var length = wrapped.length;
            if ((name == 'shift' || name == 'splice') && length === 0)
                delete wrapped[0];
            return result(wrapped, this._chain);
        };
    });
    each(['concat', 'join', 'slice'], function(name) {
        var method = ArrayProto[name];
        wrapper.prototype[name] = function() {
            return result(method.apply(this._wrapped, arguments), this._chain);
        };
    });
    wrapper.prototype.chain = function() {
        this._chain = true;
        return this;
    };
    wrapper.prototype.value = function() {
        return this._wrapped;
    };
}).call(this);
(function(root) {
    'use strict';
    var nativeTrim = String.prototype.trim;
    var parseNumber = function(source) {
        return source * 1 || 0;
    };
    var strRepeat = function(i, m) {
        for (var o = []; m > 0; o[--m] = i) {
        }
        return o.join('');
    };
    var slice = function(a) {
        return Array.prototype.slice.call(a);
    };
    var defaultToWhiteSpace = function(characters) {
        if (characters) {
            return _s.escapeRegExp(characters);
        }
        return '\\s';
    };
    var sArgs = function(method) {
        return function() {
            var args = slice(arguments);
            for (var i = 0; i < args.length; i++)
                args[i] = args[i] == null ? '' : '' + args[i];
            return method.apply(null, args);
        };
    };
    var sprintf = (function() {
        function get_type(variable) {
            return Object.prototype.toString.call(variable).slice(8, -1).toLowerCase();
        }
        var str_repeat = strRepeat;
        var str_format = function() {
            if (!str_format.cache.hasOwnProperty(arguments[0])) {
                str_format.cache[arguments[0]] = str_format.parse(arguments[0]);
            }
            return str_format.format.call(null, str_format.cache[arguments[0]], arguments);
        };
        str_format.format = function(parse_tree, argv) {
            var cursor = 1, tree_length = parse_tree.length, node_type = '', arg, output = [], i, k, match, pad, pad_character, pad_length;
            for (i = 0; i < tree_length; i++) {
                node_type = get_type(parse_tree[i]);
                if (node_type === 'string') {
                    output.push(parse_tree[i]);
                }
                else if (node_type === 'array') {
                    match = parse_tree[i];
                    if (match[2]) {
                        arg = argv[cursor];
                        for (k = 0; k < match[2].length; k++) {
                            if (!arg.hasOwnProperty(match[2][k])) {
                                throw (sprintf('[_.sprintf] property "%s" does not exist', match[2][k]));
                            }
                            arg = arg[match[2][k]];
                        }
                    } else if (match[1]) {
                        arg = argv[match[1]];
                    }
                    else {
                        arg = argv[cursor++];
                    }
                    if (/[^s]/.test(match[8]) && (get_type(arg) != 'number')) {
                        throw (sprintf('[_.sprintf] expecting number but found %s', get_type(arg)));
                    }
                    switch (match[8]) {
                        case 'b':
                            arg = arg.toString(2);
                            break;
                        case 'c':
                            arg = String.fromCharCode(arg);
                            break;
                        case 'd':
                            arg = parseInt(arg, 10);
                            break;
                        case 'e':
                            arg = match[7] ? arg.toExponential(match[7]) : arg.toExponential();
                            break;
                        case 'f':
                            arg = match[7] ? parseFloat(arg).toFixed(match[7]) : parseFloat(arg);
                            break;
                        case 'o':
                            arg = arg.toString(8);
                            break;
                        case 's':
                            arg = ((arg = String(arg)) && match[7] ? arg.substring(0, match[7]) : arg);
                            break;
                        case 'u':
                            arg = Math.abs(arg);
                            break;
                        case 'x':
                            arg = arg.toString(16);
                            break;
                        case 'X':
                            arg = arg.toString(16).toUpperCase();
                            break;
                    }
                    arg = (/[def]/.test(match[8]) && match[3] && arg >= 0 ? '+' + arg : arg);
                    pad_character = match[4] ? match[4] == '0' ? '0' : match[4].charAt(1) : ' ';
                    pad_length = match[6] - String(arg).length;
                    pad = match[6] ? str_repeat(pad_character, pad_length) : '';
                    output.push(match[5] ? arg + pad : pad + arg);
                }
            }
            return output.join('');
        };
        str_format.cache = {};
        str_format.parse = function(fmt) {
            var _fmt = fmt, match = [], parse_tree = [], arg_names = 0;
            while (_fmt) {
                if ((match = /^[^\x25]+/.exec(_fmt)) !== null) {
                    parse_tree.push(match[0]);
                }
                else if ((match = /^\x25{2}/.exec(_fmt)) !== null) {
                    parse_tree.push('%');
                }
                else if ((match = /^\x25(?:([1-9]\d*)\$|\(([^\)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-fosuxX])/.exec(_fmt)) !== null) {
                    if (match[2]) {
                        arg_names |= 1;
                        var field_list = [], replacement_field = match[2], field_match = [];
                        if ((field_match = /^([a-z_][a-z_\d]*)/i.exec(replacement_field)) !== null) {
                            field_list.push(field_match[1]);
                            while ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {
                                if ((field_match = /^\.([a-z_][a-z_\d]*)/i.exec(replacement_field)) !== null) {
                                    field_list.push(field_match[1]);
                                }
                                else if ((field_match = /^\[(\d+)\]/.exec(replacement_field)) !== null) {
                                    field_list.push(field_match[1]);
                                }
                                else {
                                    throw ('[_.sprintf] huh?');
                                }
                            }
                        }
                        else {
                            throw ('[_.sprintf] huh?');
                        }
                        match[2] = field_list;
                    }
                    else {
                        arg_names |= 2;
                    }
                    if (arg_names === 3) {
                        throw ('[_.sprintf] mixing positional and named placeholders is not (yet) supported');
                    }
                    parse_tree.push(match);
                }
                else {
                    throw ('[_.sprintf] huh?');
                }
                _fmt = _fmt.substring(match[0].length);
            }
            return parse_tree;
        };
        return str_format;
    })();
    var _s = {VERSION: '2.0.0',isBlank: sArgs(function(str) {
            return (/^\s*$/).test(str);
        }),stripTags: sArgs(function(str) {
            return str.replace(/<\/?[^>]+>/ig, '');
        }),capitalize: sArgs(function(str) {
            return str.charAt(0).toUpperCase() + str.substring(1).toLowerCase();
        }),chop: sArgs(function(str, step) {
            step = parseNumber(step) || str.length;
            var arr = [];
            for (var i = 0; i < str.length; ) {
                arr.push(str.slice(i, i + step));
                i = i + step;
            }
            return arr;
        }),clean: sArgs(function(str) {
            return _s.strip(str.replace(/\s+/g, ' '));
        }),count: sArgs(function(str, substr) {
            var count = 0, index;
            for (var i = 0; i < str.length; ) {
                index = str.indexOf(substr, i);
                index >= 0 && count++;
                i = i + (index >= 0 ? index : 0) + substr.length;
            }
            return count;
        }),chars: sArgs(function(str) {
            return str.split('');
        }),escapeHTML: sArgs(function(str) {
            return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, "&apos;");
        }),unescapeHTML: sArgs(function(str) {
            return str.replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&quot;/g, '"').replace(/&apos;/g, "'").replace(/&amp;/g, '&');
        }),escapeRegExp: sArgs(function(str) {
            return str.replace(/([-.*+?^${}()|[\]\/\\])/g, '\\$1');
        }),insert: sArgs(function(str, i, substr) {
            var arr = str.split('');
            arr.splice(parseNumber(i), 0, substr);
            return arr.join('');
        }),include: sArgs(function(str, needle) {
            return str.indexOf(needle) !== -1;
        }),join: sArgs(function(sep) {
            var args = slice(arguments);
            return args.join(args.shift());
        }),lines: sArgs(function(str) {
            return str.split("\n");
        }),reverse: sArgs(function(str) {
            return Array.prototype.reverse.apply(String(str).split('')).join('');
        }),splice: sArgs(function(str, i, howmany, substr) {
            var arr = str.split('');
            arr.splice(parseNumber(i), parseNumber(howmany), substr);
            return arr.join('');
        }),startsWith: sArgs(function(str, starts) {
            return str.length >= starts.length && str.substring(0, starts.length) === starts;
        }),endsWith: sArgs(function(str, ends) {
            return str.length >= ends.length && str.substring(str.length - ends.length) === ends;
        }),succ: sArgs(function(str) {
            var arr = str.split('');
            arr.splice(str.length - 1, 1, String.fromCharCode(str.charCodeAt(str.length - 1) + 1));
            return arr.join('');
        }),titleize: sArgs(function(str) {
            var arr = str.split(' '), word;
            for (var i = 0; i < arr.length; i++) {
                word = arr[i].split('');
                if (typeof word[0] !== 'undefined')
                    word[0] = word[0].toUpperCase();
                i + 1 === arr.length ? arr[i] = word.join('') : arr[i] = word.join('') + ' ';
            }
            return arr.join('');
        }),camelize: sArgs(function(str) {
            return _s.trim(str).replace(/(\-|_|\s)+(.)?/g, function(match, separator, chr) {
                return chr ? chr.toUpperCase() : '';
            });
        }),underscored: function(str) {
            return _s.trim(str).replace(/([a-z\d])([A-Z]+)/g, '$1_$2').replace(/\-|\s+/g, '_').toLowerCase();
        },dasherize: function(str) {
            return _s.trim(str).replace(/([a-z\d])([A-Z]+)/g, '$1-$2').replace(/^([A-Z]+)/, '-$1').replace(/\_|\s+/g, '-').toLowerCase();
        },humanize: function(str) {
            return _s.capitalize(this.underscored(str).replace(/_id$/, '').replace(/_/g, ' '));
        },trim: sArgs(function(str, characters) {
            if (!characters && nativeTrim) {
                return nativeTrim.call(str);
            }
            characters = defaultToWhiteSpace(characters);
            return str.replace(new RegExp('\^[' + characters + ']+|[' + characters + ']+$', 'g'), '');
        }),ltrim: sArgs(function(str, characters) {
            characters = defaultToWhiteSpace(characters);
            return str.replace(new RegExp('\^[' + characters + ']+', 'g'), '');
        }),rtrim: sArgs(function(str, characters) {
            characters = defaultToWhiteSpace(characters);
            return str.replace(new RegExp('[' + characters + ']+$', 'g'), '');
        }),truncate: sArgs(function(str, length, truncateStr) {
            truncateStr = truncateStr || '...';
            length = parseNumber(length);
            return str.length > length ? str.slice(0, length) + truncateStr : str;
        }),prune: sArgs(function(str, length, pruneStr) {
            var isWordChar = function(c) {
                return ((c.toUpperCase() != c.toLowerCase()) || /[-_\d]/.test(c));
            }
            var template = '';
            var pruned = '';
            var i = 0;
            pruneStr = pruneStr || '...';
            length = parseNumber(length);
            for (i in str) {
                template += (isWordChar(str[i])) ? 'A' : ' ';
            }
            if (template.substring(length - 1, length + 1).search(/^\w\w$/) === 0)
                pruned = _s.rtrim(template.slice(0, length).replace(/([\W][\w]*)$/, ''));
            else
                pruned = _s.rtrim(template.slice(0, length));
            pruned = pruned.replace(/\W+$/, '');
            return (pruned.length + pruneStr.length > str.length) ? str : str.substring(0, pruned.length) + pruneStr;
        }),words: function(str, delimiter) {
            return String(str).split(delimiter || " ");
        },pad: sArgs(function(str, length, padStr, type) {
            var padding = '', padlen = 0;
            length = parseNumber(length);
            if (!padStr) {
                padStr = ' ';
            }
            else if (padStr.length > 1) {
                padStr = padStr.charAt(0);
            }
            switch (type) {
                case 'right':
                    padlen = (length - str.length);
                    padding = strRepeat(padStr, padlen);
                    str = str + padding;
                    break;
                case 'both':
                    padlen = (length - str.length);
                    padding = {'left': strRepeat(padStr, Math.ceil(padlen / 2)),'right': strRepeat(padStr, Math.floor(padlen / 2))};
                    str = padding.left + str + padding.right;
                    break;
                default:
                    padlen = (length - str.length);
                    padding = strRepeat(padStr, padlen);
                    ;
                    str = padding + str;
            }
            return str;
        }),lpad: function(str, length, padStr) {
            return _s.pad(str, length, padStr);
        },rpad: function(str, length, padStr) {
            return _s.pad(str, length, padStr, 'right');
        },lrpad: function(str, length, padStr) {
            return _s.pad(str, length, padStr, 'both');
        },sprintf: sprintf,vsprintf: function(fmt, argv) {
            argv.unshift(fmt);
            return sprintf.apply(null, argv);
        },toNumber: function(str, decimals) {
            var num = parseNumber(parseNumber(str).toFixed(parseNumber(decimals)));
            return (!(num === 0 && (str !== "0" && str !== 0))) ? num : Number.NaN;
        },strRight: sArgs(function(sourceStr, sep) {
            var pos = (!sep) ? -1 : sourceStr.indexOf(sep);
            return (pos != -1) ? sourceStr.slice(pos + sep.length, sourceStr.length) : sourceStr;
        }),strRightBack: sArgs(function(sourceStr, sep) {
            var pos = (!sep) ? -1 : sourceStr.lastIndexOf(sep);
            return (pos != -1) ? sourceStr.slice(pos + sep.length, sourceStr.length) : sourceStr;
        }),strLeft: sArgs(function(sourceStr, sep) {
            var pos = (!sep) ? -1 : sourceStr.indexOf(sep);
            return (pos != -1) ? sourceStr.slice(0, pos) : sourceStr;
        }),strLeftBack: sArgs(function(sourceStr, sep) {
            var pos = sourceStr.lastIndexOf(sep);
            return (pos != -1) ? sourceStr.slice(0, pos) : sourceStr;
        }),exports: function() {
            var result = {};
            for (var prop in this) {
                if (!this.hasOwnProperty(prop) || prop == 'include' || prop == 'contains' || prop == 'reverse')
                    continue;
                result[prop] = this[prop];
            }
            return result;
        }};
    _s.strip = _s.trim;
    _s.lstrip = _s.ltrim;
    _s.rstrip = _s.rtrim;
    _s.center = _s.lrpad;
    _s.ljust = _s.lpad;
    _s.rjust = _s.rpad;
    _s.contains = _s.include;
    if (typeof exports !== 'undefined') {
        if (typeof module !== 'undefined' && module.exports) {
            module.exports = _s;
        }
        exports._s = _s;
    } else if (typeof root._ !== 'undefined') {
        root._.string = _s;
        root._.str = root._.string;
    } else {
        root._ = {string: _s,str: _s};
    }
}(this || window));
(function(_) {
    if (_.str && _.str.exports) {
        _.mixin(_.str.exports());
    }
    _.mixin({classify: function(str) {
            var s = _(str).trim().replace(/(\-|_|\s)+(.)?/g, function(match, separator, chr) {
                return chr ? chr.toUpperCase() : '';
            });
            return s.charAt(0).toUpperCase() + s.substring(1);
        },except: function(obj) {
            if (obj === null) {
                return obj;
            }
            var args;
            if (arguments.length === 2 && _(arguments[1]).isArray()) {
                args = arguments[1];
            } else {
                args = Array.prototype.slice.call(arguments, 1);
            }
            var result = _(obj).clone();
            _(args).each(function(arg) {
                delete result[arg];
            });
            return result;
        },namespace: function(obj, ns) {
            return _(ns.split('.')).inject(function(base, n) {
                if (typeof (base[n]) === 'undefined') {
                    base[n] = {};
                }
                return base[n];
            }, obj);
        },only: function(obj) {
            function only() {
                var args = _(arguments);
                return _(obj).inject(function(result, value, key) {
                    if (args.include(key)) {
                        result[key] = value;
                    }
                    return result;
                }, {});
            }
            if (arguments.length === 2 && _(arguments[1]).isArray()) {
                return only.apply(_, arguments[1]);
            } else {
                return only.apply(_, Array.prototype.slice.call(arguments, 1));
            }
        },pluralize: function(string, number, options) {
            options = options || {};
            var result = parseInt(number, 10);
            return result + (options.includeSpace ? ' ' : '') + string + (result === 1 ? '' : 's');
        }});
})(_);
(function(window, undefined) {
    var document = window.document, navigator = window.navigator, location = window.location;
    var jQuery = (function() {
        var jQuery = function(selector, context) {
            return new jQuery.fn.init(selector, context, rootjQuery);
        }, _jQuery = window.jQuery, _$ = window.$, rootjQuery, quickExpr = /^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/, rnotwhite = /\S/, trimLeft = /^\s+/, trimRight = /\s+$/, rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>)?$/, rvalidchars = /^[\],:{}\s]*$/, rvalidescape = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, rvalidtokens = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g, rwebkit = /(webkit)[ \/]([\w.]+)/, ropera = /(opera)(?:.*version)?[ \/]([\w.]+)/, rmsie = /(msie) ([\w.]+)/, rmozilla = /(mozilla)(?:.*? rv:([\w.]+))?/, rdashAlpha = /-([a-z]|[0-9])/ig, rmsPrefix = /^-ms-/, fcamelCase = function(all, letter) {
            return (letter + "").toUpperCase();
        }, userAgent = navigator.userAgent, browserMatch, readyList, DOMContentLoaded, toString = Object.prototype.toString, hasOwn = Object.prototype.hasOwnProperty, push = Array.prototype.push, slice = Array.prototype.slice, trim = String.prototype.trim, indexOf = Array.prototype.indexOf, class2type = {};
        jQuery.fn = jQuery.prototype = {constructor: jQuery,init: function(selector, context, rootjQuery) {
                var match, elem, ret, doc;
                if (!selector) {
                    return this;
                }
                if (selector.nodeType) {
                    this.context = this[0] = selector;
                    this.length = 1;
                    return this;
                }
                if (selector === "body" && !context && document.body) {
                    this.context = document;
                    this[0] = document.body;
                    this.selector = selector;
                    this.length = 1;
                    return this;
                }
                if (typeof selector === "string") {
                    if (selector.charAt(0) === "<" && selector.charAt(selector.length - 1) === ">" && selector.length >= 3) {
                        match = [null, selector, null];
                    } else {
                        match = quickExpr.exec(selector);
                    }
                    if (match && (match[1] || !context)) {
                        if (match[1]) {
                            context = context instanceof jQuery ? context[0] : context;
                            doc = (context ? context.ownerDocument || context : document);
                            ret = rsingleTag.exec(selector);
                            if (ret) {
                                if (jQuery.isPlainObject(context)) {
                                    selector = [document.createElement(ret[1])];
                                    jQuery.fn.attr.call(selector, context, true);
                                } else {
                                    selector = [doc.createElement(ret[1])];
                                }
                            } else {
                                ret = jQuery.buildFragment([match[1]], [doc]);
                                selector = (ret.cacheable ? jQuery.clone(ret.fragment) : ret.fragment).childNodes;
                            }
                            return jQuery.merge(this, selector);
                        } else {
                            elem = document.getElementById(match[2]);
                            if (elem && elem.parentNode) {
                                if (elem.id !== match[2]) {
                                    return rootjQuery.find(selector);
                                }
                                this.length = 1;
                                this[0] = elem;
                            }
                            this.context = document;
                            this.selector = selector;
                            return this;
                        }
                    } else if (!context || context.jquery) {
                        return (context || rootjQuery).find(selector);
                    } else {
                        return this.constructor(context).find(selector);
                    }
                } else if (jQuery.isFunction(selector)) {
                    return rootjQuery.ready(selector);
                }
                if (selector.selector !== undefined) {
                    this.selector = selector.selector;
                    this.context = selector.context;
                }
                return jQuery.makeArray(selector, this);
            },selector: "",jquery: "1.7.1",length: 0,size: function() {
                return this.length;
            },toArray: function() {
                return slice.call(this, 0);
            },get: function(num) {
                return num == null ? this.toArray() : (num < 0 ? this[this.length + num] : this[num]);
            },pushStack: function(elems, name, selector) {
                var ret = this.constructor();
                if (jQuery.isArray(elems)) {
                    push.apply(ret, elems);
                } else {
                    jQuery.merge(ret, elems);
                }
                ret.prevObject = this;
                ret.context = this.context;
                if (name === "find") {
                    ret.selector = this.selector + (this.selector ? " " : "") + selector;
                } else if (name) {
                    ret.selector = this.selector + "." + name + "(" + selector + ")";
                }
                return ret;
            },each: function(callback, args) {
                return jQuery.each(this, callback, args);
            },ready: function(fn) {
                jQuery.bindReady();
                readyList.add(fn);
                return this;
            },eq: function(i) {
                i = +i;
                return i === -1 ? this.slice(i) : this.slice(i, i + 1);
            },first: function() {
                return this.eq(0);
            },last: function() {
                return this.eq(-1);
            },slice: function() {
                return this.pushStack(slice.apply(this, arguments), "slice", slice.call(arguments).join(","));
            },map: function(callback) {
                return this.pushStack(jQuery.map(this, function(elem, i) {
                    return callback.call(elem, i, elem);
                }));
            },end: function() {
                return this.prevObject || this.constructor(null);
            },push: push,sort: [].sort,splice: [].splice};
        jQuery.fn.init.prototype = jQuery.fn;
        jQuery.extend = jQuery.fn.extend = function() {
            var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {}, i = 1, length = arguments.length, deep = false;
            if (typeof target === "boolean") {
                deep = target;
                target = arguments[1] || {};
                i = 2;
            }
            if (typeof target !== "object" && !jQuery.isFunction(target)) {
                target = {};
            }
            if (length === i) {
                target = this;
                --i;
            }
            for (; i < length; i++) {
                if ((options = arguments[i]) != null) {
                    for (name in options) {
                        src = target[name];
                        copy = options[name];
                        if (target === copy) {
                            continue;
                        }
                        if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {
                            if (copyIsArray) {
                                copyIsArray = false;
                                clone = src && jQuery.isArray(src) ? src : [];
                            } else {
                                clone = src && jQuery.isPlainObject(src) ? src : {};
                            }
                            target[name] = jQuery.extend(deep, clone, copy);
                        } else if (copy !== undefined) {
                            target[name] = copy;
                        }
                    }
                }
            }
            return target;
        };
        jQuery.extend({noConflict: function(deep) {
                if (window.$ === jQuery) {
                    window.$ = _$;
                }
                if (deep && window.jQuery === jQuery) {
                    window.jQuery = _jQuery;
                }
                return jQuery;
            },isReady: false,readyWait: 1,holdReady: function(hold) {
                if (hold) {
                    jQuery.readyWait++;
                } else {
                    jQuery.ready(true);
                }
            },ready: function(wait) {
                if ((wait === true && !--jQuery.readyWait) || (wait !== true && !jQuery.isReady)) {
                    if (!document.body) {
                        return setTimeout(jQuery.ready, 1);
                    }
                    jQuery.isReady = true;
                    if (wait !== true && --jQuery.readyWait > 0) {
                        return;
                    }
                    readyList.fireWith(document, [jQuery]);
                    if (jQuery.fn.trigger) {
                        jQuery(document).trigger("ready").off("ready");
                    }
                }
            },bindReady: function() {
                if (readyList) {
                    return;
                }
                readyList = jQuery.Callbacks("once memory");
                if (document.readyState === "complete") {
                    return setTimeout(jQuery.ready, 1);
                }
                if (document.addEventListener) {
                    document.addEventListener("DOMContentLoaded", DOMContentLoaded, false);
                    window.addEventListener("load", jQuery.ready, false);
                } else if (document.attachEvent) {
                    document.attachEvent("onreadystatechange", DOMContentLoaded);
                    window.attachEvent("onload", jQuery.ready);
                    var toplevel = false;
                    try {
                        toplevel = window.frameElement == null;
                    } catch (e) {
                    }
                    if (document.documentElement.doScroll && toplevel) {
                        doScrollCheck();
                    }
                }
            },isFunction: function(obj) {
                return jQuery.type(obj) === "function";
            },isArray: Array.isArray || function(obj) {
                return jQuery.type(obj) === "array";
            },isWindow: function(obj) {
                return obj && typeof obj === "object" && "setInterval" in obj;
            },isNumeric: function(obj) {
                return !isNaN(parseFloat(obj)) && isFinite(obj);
            },type: function(obj) {
                return obj == null ? String(obj) : class2type[toString.call(obj)] || "object";
            },isPlainObject: function(obj) {
                if (!obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow(obj)) {
                    return false;
                }
                try {
                    if (obj.constructor && !hasOwn.call(obj, "constructor") && !hasOwn.call(obj.constructor.prototype, "isPrototypeOf")) {
                        return false;
                    }
                } catch (e) {
                    return false;
                }
                var key;
                for (key in obj) {
                }
                return key === undefined || hasOwn.call(obj, key);
            },isEmptyObject: function(obj) {
                for (var name in obj) {
                    return false;
                }
                return true;
            },error: function(msg) {
                throw new Error(msg);
            },parseJSON: function(data) {
                if (typeof data !== "string" || !data) {
                    return null;
                }
                data = jQuery.trim(data);
                if (window.JSON && window.JSON.parse) {
                    return window.JSON.parse(data);
                }
                if (rvalidchars.test(data.replace(rvalidescape, "@").replace(rvalidtokens, "]").replace(rvalidbraces, ""))) {
                    return (new Function("return " + data))();
                }
                jQuery.error("Invalid JSON: " + data);
            },parseXML: function(data) {
                var xml, tmp;
                try {
                    if (window.DOMParser) {
                        tmp = new DOMParser();
                        xml = tmp.parseFromString(data, "text/xml");
                    } else {
                        xml = new ActiveXObject("Microsoft.XMLDOM");
                        xml.async = "false";
                        xml.loadXML(data);
                    }
                } catch (e) {
                    xml = undefined;
                }
                if (!xml || !xml.documentElement || xml.getElementsByTagName("parsererror").length) {
                    jQuery.error("Invalid XML: " + data);
                }
                return xml;
            },noop: function() {
            },globalEval: function(data) {
                if (data && rnotwhite.test(data)) {
                    (window.execScript || function(data) {
                        window["eval"].call(window, data);
                    })(data);
                }
            },camelCase: function(string) {
                return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
            },nodeName: function(elem, name) {
                return elem.nodeName && elem.nodeName.toUpperCase() === name.toUpperCase();
            },each: function(object, callback, args) {
                var name, i = 0, length = object.length, isObj = length === undefined || jQuery.isFunction(object);
                if (args) {
                    if (isObj) {
                        for (name in object) {
                            if (callback.apply(object[name], args) === false) {
                                break;
                            }
                        }
                    } else {
                        for (; i < length; ) {
                            if (callback.apply(object[i++], args) === false) {
                                break;
                            }
                        }
                    }
                } else {
                    if (isObj) {
                        for (name in object) {
                            if (callback.call(object[name], name, object[name]) === false) {
                                break;
                            }
                        }
                    } else {
                        for (; i < length; ) {
                            if (callback.call(object[i], i, object[i++]) === false) {
                                break;
                            }
                        }
                    }
                }
                return object;
            },trim: trim ? function(text) {
                return text == null ? "" : trim.call(text);
            } : function(text) {
                return text == null ? "" : text.toString().replace(trimLeft, "").replace(trimRight, "");
            },makeArray: function(array, results) {
                var ret = results || [];
                if (array != null) {
                    var type = jQuery.type(array);
                    if (array.length == null || type === "string" || type === "function" || type === "regexp" || jQuery.isWindow(array)) {
                        push.call(ret, array);
                    } else {
                        jQuery.merge(ret, array);
                    }
                }
                return ret;
            },inArray: function(elem, array, i) {
                var len;
                if (array) {
                    if (indexOf) {
                        return indexOf.call(array, elem, i);
                    }
                    len = array.length;
                    i = i ? i < 0 ? Math.max(0, len + i) : i : 0;
                    for (; i < len; i++) {
                        if (i in array && array[i] === elem) {
                            return i;
                        }
                    }
                }
                return -1;
            },merge: function(first, second) {
                var i = first.length, j = 0;
                if (typeof second.length === "number") {
                    for (var l = second.length; j < l; j++) {
                        first[i++] = second[j];
                    }
                } else {
                    while (second[j] !== undefined) {
                        first[i++] = second[j++];
                    }
                }
                first.length = i;
                return first;
            },grep: function(elems, callback, inv) {
                var ret = [], retVal;
                inv = !!inv;
                for (var i = 0, length = elems.length; i < length; i++) {
                    retVal = !!callback(elems[i], i);
                    if (inv !== retVal) {
                        ret.push(elems[i]);
                    }
                }
                return ret;
            },map: function(elems, callback, arg) {
                var value, key, ret = [], i = 0, length = elems.length, isArray = elems instanceof jQuery || length !== undefined && typeof length === "number" && ((length > 0 && elems[0] && elems[length - 1]) || length === 0 || jQuery.isArray(elems));
                if (isArray) {
                    for (; i < length; i++) {
                        value = callback(elems[i], i, arg);
                        if (value != null) {
                            ret[ret.length] = value;
                        }
                    }
                } else {
                    for (key in elems) {
                        value = callback(elems[key], key, arg);
                        if (value != null) {
                            ret[ret.length] = value;
                        }
                    }
                }
                return ret.concat.apply([], ret);
            },guid: 1,proxy: function(fn, context) {
                if (typeof context === "string") {
                    var tmp = fn[context];
                    context = fn;
                    fn = tmp;
                }
                if (!jQuery.isFunction(fn)) {
                    return undefined;
                }
                var args = slice.call(arguments, 2), proxy = function() {
                    return fn.apply(context, args.concat(slice.call(arguments)));
                };
                proxy.guid = fn.guid = fn.guid || proxy.guid || jQuery.guid++;
                return proxy;
            },access: function(elems, key, value, exec, fn, pass) {
                var length = elems.length;
                if (typeof key === "object") {
                    for (var k in key) {
                        jQuery.access(elems, k, key[k], exec, fn, value);
                    }
                    return elems;
                }
                if (value !== undefined) {
                    exec = !pass && exec && jQuery.isFunction(value);
                    for (var i = 0; i < length; i++) {
                        fn(elems[i], key, exec ? value.call(elems[i], i, fn(elems[i], key)) : value, pass);
                    }
                    return elems;
                }
                return length ? fn(elems[0], key) : undefined;
            },now: function() {
                return (new Date()).getTime();
            },uaMatch: function(ua) {
                ua = ua.toLowerCase();
                var match = rwebkit.exec(ua) || ropera.exec(ua) || rmsie.exec(ua) || ua.indexOf("compatible") < 0 && rmozilla.exec(ua) || [];
                return {browser: match[1] || "",version: match[2] || "0"};
            },sub: function() {
                function jQuerySub(selector, context) {
                    return new jQuerySub.fn.init(selector, context);
                }
                jQuery.extend(true, jQuerySub, this);
                jQuerySub.superclass = this;
                jQuerySub.fn = jQuerySub.prototype = this();
                jQuerySub.fn.constructor = jQuerySub;
                jQuerySub.sub = this.sub;
                jQuerySub.fn.init = function init(selector, context) {
                    if (context && context instanceof jQuery && !(context instanceof jQuerySub)) {
                        context = jQuerySub(context);
                    }
                    return jQuery.fn.init.call(this, selector, context, rootjQuerySub);
                };
                jQuerySub.fn.init.prototype = jQuerySub.fn;
                var rootjQuerySub = jQuerySub(document);
                return jQuerySub;
            },browser: {}});
        jQuery.each("Boolean Number String Function Array Date RegExp Object".split(" "), function(i, name) {
            class2type["[object " + name + "]"] = name.toLowerCase();
        });
        browserMatch = jQuery.uaMatch(userAgent);
        if (browserMatch.browser) {
            jQuery.browser[browserMatch.browser] = true;
            jQuery.browser.version = browserMatch.version;
        }
        if (jQuery.browser.webkit) {
            jQuery.browser.safari = true;
        }
        if (rnotwhite.test("\xA0")) {
            trimLeft = /^[\s\xA0]+/;
            trimRight = /[\s\xA0]+$/;
        }
        rootjQuery = jQuery(document);
        if (document.addEventListener) {
            DOMContentLoaded = function() {
                document.removeEventListener("DOMContentLoaded", DOMContentLoaded, false);
                jQuery.ready();
            };
        } else if (document.attachEvent) {
            DOMContentLoaded = function() {
                if (document.readyState === "complete") {
                    document.detachEvent("onreadystatechange", DOMContentLoaded);
                    jQuery.ready();
                }
            };
        }
        function doScrollCheck() {
            if (jQuery.isReady) {
                return;
            }
            try {
                document.documentElement.doScroll("left");
            } catch (e) {
                setTimeout(doScrollCheck, 1);
                return;
            }
            jQuery.ready();
        }
        return jQuery;
    })();
    var flagsCache = {};
    function createFlags(flags) {
        var object = flagsCache[flags] = {}, i, length;
        flags = flags.split(/\s+/);
        for (i = 0, length = flags.length; i < length; i++) {
            object[flags[i]] = true;
        }
        return object;
    }
    jQuery.Callbacks = function(flags) {
        flags = flags ? (flagsCache[flags] || createFlags(flags)) : {};
        var
        list = [], stack = [], memory, firing, firingStart, firingLength, firingIndex, add = function(args) {
            var i, length, elem, type, actual;
            for (i = 0, length = args.length; i < length; i++) {
                elem = args[i];
                type = jQuery.type(elem);
                if (type === "array") {
                    add(elem);
                } else if (type === "function") {
                    if (!flags.unique || !self.has(elem)) {
                        list.push(elem);
                    }
                }
            }
        }, fire = function(context, args) {
            args = args || [];
            memory = !flags.memory || [context, args];
            firing = true;
            firingIndex = firingStart || 0;
            firingStart = 0;
            firingLength = list.length;
            for (; list && firingIndex < firingLength; firingIndex++) {
                if (list[firingIndex].apply(context, args) === false && flags.stopOnFalse) {
                    memory = true;
                    break;
                }
            }
            firing = false;
            if (list) {
                if (!flags.once) {
                    if (stack && stack.length) {
                        memory = stack.shift();
                        self.fireWith(memory[0], memory[1]);
                    }
                } else if (memory === true) {
                    self.disable();
                } else {
                    list = [];
                }
            }
        }, self = {add: function() {
                if (list) {
                    var length = list.length;
                    add(arguments);
                    if (firing) {
                        firingLength = list.length;
                    } else if (memory && memory !== true) {
                        firingStart = length;
                        fire(memory[0], memory[1]);
                    }
                }
                return this;
            },remove: function() {
                if (list) {
                    var args = arguments, argIndex = 0, argLength = args.length;
                    for (; argIndex < argLength; argIndex++) {
                        for (var i = 0; i < list.length; i++) {
                            if (args[argIndex] === list[i]) {
                                if (firing) {
                                    if (i <= firingLength) {
                                        firingLength--;
                                        if (i <= firingIndex) {
                                            firingIndex--;
                                        }
                                    }
                                }
                                list.splice(i--, 1);
                                if (flags.unique) {
                                    break;
                                }
                            }
                        }
                    }
                }
                return this;
            },has: function(fn) {
                if (list) {
                    var i = 0, length = list.length;
                    for (; i < length; i++) {
                        if (fn === list[i]) {
                            return true;
                        }
                    }
                }
                return false;
            },empty: function() {
                list = [];
                return this;
            },disable: function() {
                list = stack = memory = undefined;
                return this;
            },disabled: function() {
                return !list;
            },lock: function() {
                stack = undefined;
                if (!memory || memory === true) {
                    self.disable();
                }
                return this;
            },locked: function() {
                return !stack;
            },fireWith: function(context, args) {
                if (stack) {
                    if (firing) {
                        if (!flags.once) {
                            stack.push([context, args]);
                        }
                    } else if (!(flags.once && memory)) {
                        fire(context, args);
                    }
                }
                return this;
            },fire: function() {
                self.fireWith(this, arguments);
                return this;
            },fired: function() {
                return !!memory;
            }};
        return self;
    };
    var
    sliceDeferred = [].slice;
    jQuery.extend({Deferred: function(func) {
            var doneList = jQuery.Callbacks("once memory"), failList = jQuery.Callbacks("once memory"), progressList = jQuery.Callbacks("memory"), state = "pending", lists = {resolve: doneList,reject: failList,notify: progressList}, promise = {done: doneList.add,fail: failList.add,progress: progressList.add,state: function() {
                    return state;
                },isResolved: doneList.fired,isRejected: failList.fired,then: function(doneCallbacks, failCallbacks, progressCallbacks) {
                    deferred.done(doneCallbacks).fail(failCallbacks).progress(progressCallbacks);
                    return this;
                },always: function() {
                    deferred.done.apply(deferred, arguments).fail.apply(deferred, arguments);
                    return this;
                },pipe: function(fnDone, fnFail, fnProgress) {
                    return jQuery.Deferred(function(newDefer) {
                        jQuery.each({done: [fnDone, "resolve"],fail: [fnFail, "reject"],progress: [fnProgress, "notify"]}, function(handler, data) {
                            var fn = data[0], action = data[1], returned;
                            if (jQuery.isFunction(fn)) {
                                deferred[handler](function() {
                                    returned = fn.apply(this, arguments);
                                    if (returned && jQuery.isFunction(returned.promise)) {
                                        returned.promise().then(newDefer.resolve, newDefer.reject, newDefer.notify);
                                    } else {
                                        newDefer[action + "With"](this === deferred ? newDefer : this, [returned]);
                                    }
                                });
                            } else {
                                deferred[handler](newDefer[action]);
                            }
                        });
                    }).promise();
                },promise: function(obj) {
                    if (obj == null) {
                        obj = promise;
                    } else {
                        for (var key in promise) {
                            obj[key] = promise[key];
                        }
                    }
                    return obj;
                }}, deferred = promise.promise({}), key;
            for (key in lists) {
                deferred[key] = lists[key].fire;
                deferred[key + "With"] = lists[key].fireWith;
            }
            deferred.done(function() {
                state = "resolved";
            }, failList.disable, progressList.lock).fail(function() {
                state = "rejected";
            }, doneList.disable, progressList.lock);
            if (func) {
                func.call(deferred, deferred);
            }
            return deferred;
        },when: function(firstParam) {
            var args = sliceDeferred.call(arguments, 0), i = 0, length = args.length, pValues = new Array(length), count = length, pCount = length, deferred = length <= 1 && firstParam && jQuery.isFunction(firstParam.promise) ? firstParam : jQuery.Deferred(), promise = deferred.promise();
            function resolveFunc(i) {
                return function(value) {
                    args[i] = arguments.length > 1 ? sliceDeferred.call(arguments, 0) : value;
                    if (!(--count)) {
                        deferred.resolveWith(deferred, args);
                    }
                };
            }
            function progressFunc(i) {
                return function(value) {
                    pValues[i] = arguments.length > 1 ? sliceDeferred.call(arguments, 0) : value;
                    deferred.notifyWith(promise, pValues);
                };
            }
            if (length > 1) {
                for (; i < length; i++) {
                    if (args[i] && args[i].promise && jQuery.isFunction(args[i].promise)) {
                        args[i].promise().then(resolveFunc(i), deferred.reject, progressFunc(i));
                    } else {
                        --count;
                    }
                }
                if (!count) {
                    deferred.resolveWith(deferred, args);
                }
            } else if (deferred !== firstParam) {
                deferred.resolveWith(deferred, length ? [firstParam] : []);
            }
            return promise;
        }});
    jQuery.support = (function() {
        var support, all, a, select, opt, input, marginDiv, fragment, tds, events, eventName, i, isSupported, div = document.createElement("div"), documentElement = document.documentElement;
        div.setAttribute("className", "t");
        div.innerHTML = "   <link/><table></table><a href='/a' style='top:1px;float:left;opacity:.55;'>a</a><input type='checkbox'/>";
        all = div.getElementsByTagName("*");
        a = div.getElementsByTagName("a")[0];
        if (!all || !all.length || !a) {
            return {};
        }
        select = document.createElement("select");
        opt = select.appendChild(document.createElement("option"));
        input = div.getElementsByTagName("input")[0];
        support = {leadingWhitespace: (div.firstChild.nodeType === 3),tbody: !div.getElementsByTagName("tbody").length,htmlSerialize: !!div.getElementsByTagName("link").length,style: /top/.test(a.getAttribute("style")),hrefNormalized: (a.getAttribute("href") === "/a"),opacity: /^0.55/.test(a.style.opacity),cssFloat: !!a.style.cssFloat,checkOn: (input.value === "on"),optSelected: opt.selected,getSetAttribute: div.className !== "t",enctype: !!document.createElement("form").enctype,html5Clone: document.createElement("nav").cloneNode(true).outerHTML !== "<:nav></:nav>",submitBubbles: true,changeBubbles: true,focusinBubbles: false,deleteExpando: true,noCloneEvent: true,inlineBlockNeedsLayout: false,shrinkWrapBlocks: false,reliableMarginRight: true};
        input.checked = true;
        support.noCloneChecked = input.cloneNode(true).checked;
        select.disabled = true;
        support.optDisabled = !opt.disabled;
        try {
            delete div.test;
        } catch (e) {
            support.deleteExpando = false;
        }
        if (!div.addEventListener && div.attachEvent && div.fireEvent) {
            div.attachEvent("onclick", function() {
                support.noCloneEvent = false;
            });
            div.cloneNode(true).fireEvent("onclick");
        }
        input = document.createElement("input");
        input.value = "t";
        input.setAttribute("type", "radio");
        support.radioValue = input.value === "t";
        input.setAttribute("checked", "checked");
        div.appendChild(input);
        fragment = document.createDocumentFragment();
        fragment.appendChild(div.lastChild);
        support.checkClone = fragment.cloneNode(true).cloneNode(true).lastChild.checked;
        support.appendChecked = input.checked;
        fragment.removeChild(input);
        fragment.appendChild(div);
        div.innerHTML = "";
        if (window.getComputedStyle) {
            marginDiv = document.createElement("div");
            marginDiv.style.width = "0";
            marginDiv.style.marginRight = "0";
            div.style.width = "2px";
            div.appendChild(marginDiv);
            support.reliableMarginRight = (parseInt((window.getComputedStyle(marginDiv, null) || {marginRight: 0}).marginRight, 10) || 0) === 0;
        }
        if (div.attachEvent) {
            for (i in {submit: 1,change: 1,focusin: 1}) {
                eventName = "on" + i;
                isSupported = (eventName in div);
                if (!isSupported) {
                    div.setAttribute(eventName, "return;");
                    isSupported = (typeof div[eventName] === "function");
                }
                support[i + "Bubbles"] = isSupported;
            }
        }
        fragment.removeChild(div);
        fragment = select = opt = marginDiv = div = input = null;
        jQuery(function() {
            var container, outer, inner, table, td, offsetSupport, conMarginTop, ptlm, vb, style, html, body = document.getElementsByTagName("body")[0];
            if (!body) {
                return;
            }
            conMarginTop = 1;
            ptlm = "position:absolute;top:0;left:0;width:1px;height:1px;margin:0;";
            vb = "visibility:hidden;border:0;";
            style = "style='" + ptlm + "border:5px solid #000;padding:0;'";
            html = "<div " + style + "><div></div></div>" + "<table " + style + " cellpadding='0' cellspacing='0'>" + "<tr><td></td></tr></table>";
            container = document.createElement("div");
            container.style.cssText = vb + "width:0;height:0;position:static;top:0;margin-top:" + conMarginTop + "px";
            body.insertBefore(container, body.firstChild);
            div = document.createElement("div");
            container.appendChild(div);
            div.innerHTML = "<table><tr><td style='padding:0;border:0;display:none'></td><td>t</td></tr></table>";
            tds = div.getElementsByTagName("td");
            isSupported = (tds[0].offsetHeight === 0);
            tds[0].style.display = "";
            tds[1].style.display = "none";
            support.reliableHiddenOffsets = isSupported && (tds[0].offsetHeight === 0);
            div.innerHTML = "";
            div.style.width = div.style.paddingLeft = "1px";
            jQuery.boxModel = support.boxModel = div.offsetWidth === 2;
            if (typeof div.style.zoom !== "undefined") {
                div.style.display = "inline";
                div.style.zoom = 1;
                support.inlineBlockNeedsLayout = (div.offsetWidth === 2);
                div.style.display = "";
                div.innerHTML = "<div style='width:4px;'></div>";
                support.shrinkWrapBlocks = (div.offsetWidth !== 2);
            }
            div.style.cssText = ptlm + vb;
            div.innerHTML = html;
            outer = div.firstChild;
            inner = outer.firstChild;
            td = outer.nextSibling.firstChild.firstChild;
            offsetSupport = {doesNotAddBorder: (inner.offsetTop !== 5),doesAddBorderForTableAndCells: (td.offsetTop === 5)};
            inner.style.position = "fixed";
            inner.style.top = "20px";
            offsetSupport.fixedPosition = (inner.offsetTop === 20 || inner.offsetTop === 15);
            inner.style.position = inner.style.top = "";
            outer.style.overflow = "hidden";
            outer.style.position = "relative";
            offsetSupport.subtractsBorderForOverflowNotVisible = (inner.offsetTop === -5);
            offsetSupport.doesNotIncludeMarginInBodyOffset = (body.offsetTop !== conMarginTop);
            body.removeChild(container);
            div = container = null;
            jQuery.extend(support, offsetSupport);
        });
        return support;
    })();
    var rbrace = /^(?:\{.*\}|\[.*\])$/, rmultiDash = /([A-Z])/g;
    jQuery.extend({cache: {},uuid: 0,expando: "jQuery" + (jQuery.fn.jquery + Math.random()).replace(/\D/g, ""),noData: {"embed": true,"object": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000","applet": true},hasData: function(elem) {
            elem = elem.nodeType ? jQuery.cache[elem[jQuery.expando]] : elem[jQuery.expando];
            return !!elem && !isEmptyDataObject(elem);
        },data: function(elem, name, data, pvt) {
            if (!jQuery.acceptData(elem)) {
                return;
            }
            var privateCache, thisCache, ret, internalKey = jQuery.expando, getByName = typeof name === "string", isNode = elem.nodeType, cache = isNode ? jQuery.cache : elem, id = isNode ? elem[internalKey] : elem[internalKey] && internalKey, isEvents = name === "events";
            if ((!id || !cache[id] || (!isEvents && !pvt && !cache[id].data)) && getByName && data === undefined) {
                return;
            }
            if (!id) {
                if (isNode) {
                    elem[internalKey] = id = ++jQuery.uuid;
                } else {
                    id = internalKey;
                }
            }
            if (!cache[id]) {
                cache[id] = {};
                if (!isNode) {
                    cache[id].toJSON = jQuery.noop;
                }
            }
            if (typeof name === "object" || typeof name === "function") {
                if (pvt) {
                    cache[id] = jQuery.extend(cache[id], name);
                } else {
                    cache[id].data = jQuery.extend(cache[id].data, name);
                }
            }
            privateCache = thisCache = cache[id];
            if (!pvt) {
                if (!thisCache.data) {
                    thisCache.data = {};
                }
                thisCache = thisCache.data;
            }
            if (data !== undefined) {
                thisCache[jQuery.camelCase(name)] = data;
            }
            if (isEvents && !thisCache[name]) {
                return privateCache.events;
            }
            if (getByName) {
                ret = thisCache[name];
                if (ret == null) {
                    ret = thisCache[jQuery.camelCase(name)];
                }
            } else {
                ret = thisCache;
            }
            return ret;
        },removeData: function(elem, name, pvt) {
            if (!jQuery.acceptData(elem)) {
                return;
            }
            var thisCache, i, l, internalKey = jQuery.expando, isNode = elem.nodeType, cache = isNode ? jQuery.cache : elem, id = isNode ? elem[internalKey] : internalKey;
            if (!cache[id]) {
                return;
            }
            if (name) {
                thisCache = pvt ? cache[id] : cache[id].data;
                if (thisCache) {
                    if (!jQuery.isArray(name)) {
                        if (name in thisCache) {
                            name = [name];
                        } else {
                            name = jQuery.camelCase(name);
                            if (name in thisCache) {
                                name = [name];
                            } else {
                                name = name.split(" ");
                            }
                        }
                    }
                    for (i = 0, l = name.length; i < l; i++) {
                        delete thisCache[name[i]];
                    }
                    if (!(pvt ? isEmptyDataObject : jQuery.isEmptyObject)(thisCache)) {
                        return;
                    }
                }
            }
            if (!pvt) {
                delete cache[id].data;
                if (!isEmptyDataObject(cache[id])) {
                    return;
                }
            }
            if (jQuery.support.deleteExpando || !cache.setInterval) {
                delete cache[id];
            } else {
                cache[id] = null;
            }
            if (isNode) {
                if (jQuery.support.deleteExpando) {
                    delete elem[internalKey];
                } else if (elem.removeAttribute) {
                    elem.removeAttribute(internalKey);
                } else {
                    elem[internalKey] = null;
                }
            }
        },_data: function(elem, name, data) {
            return jQuery.data(elem, name, data, true);
        },acceptData: function(elem) {
            if (elem.nodeName) {
                var match = jQuery.noData[elem.nodeName.toLowerCase()];
                if (match) {
                    return !(match === true || elem.getAttribute("classid") !== match);
                }
            }
            return true;
        }});
    jQuery.fn.extend({data: function(key, value) {
            var parts, attr, name, data = null;
            if (typeof key === "undefined") {
                if (this.length) {
                    data = jQuery.data(this[0]);
                    if (this[0].nodeType === 1 && !jQuery._data(this[0], "parsedAttrs")) {
                        attr = this[0].attributes;
                        for (var i = 0, l = attr.length; i < l; i++) {
                            name = attr[i].name;
                            if (name.indexOf("data-") === 0) {
                                name = jQuery.camelCase(name.substring(5));
                                dataAttr(this[0], name, data[name]);
                            }
                        }
                        jQuery._data(this[0], "parsedAttrs", true);
                    }
                }
                return data;
            } else if (typeof key === "object") {
                return this.each(function() {
                    jQuery.data(this, key);
                });
            }
            parts = key.split(".");
            parts[1] = parts[1] ? "." + parts[1] : "";
            if (value === undefined) {
                data = this.triggerHandler("getData" + parts[1] + "!", [parts[0]]);
                if (data === undefined && this.length) {
                    data = jQuery.data(this[0], key);
                    data = dataAttr(this[0], key, data);
                }
                return data === undefined && parts[1] ? this.data(parts[0]) : data;
            } else {
                return this.each(function() {
                    var self = jQuery(this), args = [parts[0], value];
                    self.triggerHandler("setData" + parts[1] + "!", args);
                    jQuery.data(this, key, value);
                    self.triggerHandler("changeData" + parts[1] + "!", args);
                });
            }
        },removeData: function(key) {
            return this.each(function() {
                jQuery.removeData(this, key);
            });
        }});
    function dataAttr(elem, key, data) {
        if (data === undefined && elem.nodeType === 1) {
            var name = "data-" + key.replace(rmultiDash, "-$1").toLowerCase();
            data = elem.getAttribute(name);
            if (typeof data === "string") {
                try {
                    data = data === "true" ? true : data === "false" ? false : data === "null" ? null : jQuery.isNumeric(data) ? parseFloat(data) : rbrace.test(data) ? jQuery.parseJSON(data) : data;
                } catch (e) {
                }
                jQuery.data(elem, key, data);
            } else {
                data = undefined;
            }
        }
        return data;
    }
    function isEmptyDataObject(obj) {
        for (var name in obj) {
            if (name === "data" && jQuery.isEmptyObject(obj[name])) {
                continue;
            }
            if (name !== "toJSON") {
                return false;
            }
        }
        return true;
    }
    function handleQueueMarkDefer(elem, type, src) {
        var deferDataKey = type + "defer", queueDataKey = type + "queue", markDataKey = type + "mark", defer = jQuery._data(elem, deferDataKey);
        if (defer && (src === "queue" || !jQuery._data(elem, queueDataKey)) && (src === "mark" || !jQuery._data(elem, markDataKey))) {
            setTimeout(function() {
                if (!jQuery._data(elem, queueDataKey) && !jQuery._data(elem, markDataKey)) {
                    jQuery.removeData(elem, deferDataKey, true);
                    defer.fire();
                }
            }, 0);
        }
    }
    jQuery.extend({_mark: function(elem, type) {
            if (elem) {
                type = (type || "fx") + "mark";
                jQuery._data(elem, type, (jQuery._data(elem, type) || 0) + 1);
            }
        },_unmark: function(force, elem, type) {
            if (force !== true) {
                type = elem;
                elem = force;
                force = false;
            }
            if (elem) {
                type = type || "fx";
                var key = type + "mark", count = force ? 0 : ((jQuery._data(elem, key) || 1) - 1);
                if (count) {
                    jQuery._data(elem, key, count);
                } else {
                    jQuery.removeData(elem, key, true);
                    handleQueueMarkDefer(elem, type, "mark");
                }
            }
        },queue: function(elem, type, data) {
            var q;
            if (elem) {
                type = (type || "fx") + "queue";
                q = jQuery._data(elem, type);
                if (data) {
                    if (!q || jQuery.isArray(data)) {
                        q = jQuery._data(elem, type, jQuery.makeArray(data));
                    } else {
                        q.push(data);
                    }
                }
                return q || [];
            }
        },dequeue: function(elem, type) {
            type = type || "fx";
            var queue = jQuery.queue(elem, type), fn = queue.shift(), hooks = {};
            if (fn === "inprogress") {
                fn = queue.shift();
            }
            if (fn) {
                if (type === "fx") {
                    queue.unshift("inprogress");
                }
                jQuery._data(elem, type + ".run", hooks);
                fn.call(elem, function() {
                    jQuery.dequeue(elem, type);
                }, hooks);
            }
            if (!queue.length) {
                jQuery.removeData(elem, type + "queue " + type + ".run", true);
                handleQueueMarkDefer(elem, type, "queue");
            }
        }});
    jQuery.fn.extend({queue: function(type, data) {
            if (typeof type !== "string") {
                data = type;
                type = "fx";
            }
            if (data === undefined) {
                return jQuery.queue(this[0], type);
            }
            return this.each(function() {
                var queue = jQuery.queue(this, type, data);
                if (type === "fx" && queue[0] !== "inprogress") {
                    jQuery.dequeue(this, type);
                }
            });
        },dequeue: function(type) {
            return this.each(function() {
                jQuery.dequeue(this, type);
            });
        },delay: function(time, type) {
            time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
            type = type || "fx";
            return this.queue(type, function(next, hooks) {
                var timeout = setTimeout(next, time);
                hooks.stop = function() {
                    clearTimeout(timeout);
                };
            });
        },clearQueue: function(type) {
            return this.queue(type || "fx", []);
        },promise: function(type, object) {
            if (typeof type !== "string") {
                object = type;
                type = undefined;
            }
            type = type || "fx";
            var defer = jQuery.Deferred(), elements = this, i = elements.length, count = 1, deferDataKey = type + "defer", queueDataKey = type + "queue", markDataKey = type + "mark", tmp;
            function resolve() {
                if (!(--count)) {
                    defer.resolveWith(elements, [elements]);
                }
            }
            while (i--) {
                if ((tmp = jQuery.data(elements[i], deferDataKey, undefined, true) || (jQuery.data(elements[i], queueDataKey, undefined, true) || jQuery.data(elements[i], markDataKey, undefined, true)) && jQuery.data(elements[i], deferDataKey, jQuery.Callbacks("once memory"), true))) {
                    count++;
                    tmp.add(resolve);
                }
            }
            resolve();
            return defer.promise();
        }});
    var rclass = /[\n\t\r]/g, rspace = /\s+/, rreturn = /\r/g, rtype = /^(?:button|input)$/i, rfocusable = /^(?:button|input|object|select|textarea)$/i, rclickable = /^a(?:rea)?$/i, rboolean = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i, getSetAttribute = jQuery.support.getSetAttribute, nodeHook, boolHook, fixSpecified;
    jQuery.fn.extend({attr: function(name, value) {
            return jQuery.access(this, name, value, true, jQuery.attr);
        },removeAttr: function(name) {
            return this.each(function() {
                jQuery.removeAttr(this, name);
            });
        },prop: function(name, value) {
            return jQuery.access(this, name, value, true, jQuery.prop);
        },removeProp: function(name) {
            name = jQuery.propFix[name] || name;
            return this.each(function() {
                try {
                    this[name] = undefined;
                    delete this[name];
                } catch (e) {
                }
            });
        },addClass: function(value) {
            var classNames, i, l, elem, setClass, c, cl;
            if (jQuery.isFunction(value)) {
                return this.each(function(j) {
                    jQuery(this).addClass(value.call(this, j, this.className));
                });
            }
            if (value && typeof value === "string") {
                classNames = value.split(rspace);
                for (i = 0, l = this.length; i < l; i++) {
                    elem = this[i];
                    if (elem.nodeType === 1) {
                        if (!elem.className && classNames.length === 1) {
                            elem.className = value;
                        } else {
                            setClass = " " + elem.className + " ";
                            for (c = 0, cl = classNames.length; c < cl; c++) {
                                if (!~setClass.indexOf(" " + classNames[c] + " ")) {
                                    setClass += classNames[c] + " ";
                                }
                            }
                            elem.className = jQuery.trim(setClass);
                        }
                    }
                }
            }
            return this;
        },removeClass: function(value) {
            var classNames, i, l, elem, className, c, cl;
            if (jQuery.isFunction(value)) {
                return this.each(function(j) {
                    jQuery(this).removeClass(value.call(this, j, this.className));
                });
            }
            if ((value && typeof value === "string") || value === undefined) {
                classNames = (value || "").split(rspace);
                for (i = 0, l = this.length; i < l; i++) {
                    elem = this[i];
                    if (elem.nodeType === 1 && elem.className) {
                        if (value) {
                            className = (" " + elem.className + " ").replace(rclass, " ");
                            for (c = 0, cl = classNames.length; c < cl; c++) {
                                className = className.replace(" " + classNames[c] + " ", " ");
                            }
                            elem.className = jQuery.trim(className);
                        } else {
                            elem.className = "";
                        }
                    }
                }
            }
            return this;
        },toggleClass: function(value, stateVal) {
            var type = typeof value, isBool = typeof stateVal === "boolean";
            if (jQuery.isFunction(value)) {
                return this.each(function(i) {
                    jQuery(this).toggleClass(value.call(this, i, this.className, stateVal), stateVal);
                });
            }
            return this.each(function() {
                if (type === "string") {
                    var className, i = 0, self = jQuery(this), state = stateVal, classNames = value.split(rspace);
                    while ((className = classNames[i++])) {
                        state = isBool ? state : !self.hasClass(className);
                        self[state ? "addClass" : "removeClass"](className);
                    }
                } else if (type === "undefined" || type === "boolean") {
                    if (this.className) {
                        jQuery._data(this, "__className__", this.className);
                    }
                    this.className = this.className || value === false ? "" : jQuery._data(this, "__className__") || "";
                }
            });
        },hasClass: function(selector) {
            var className = " " + selector + " ", i = 0, l = this.length;
            for (; i < l; i++) {
                if (this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf(className) > -1) {
                    return true;
                }
            }
            return false;
        },val: function(value) {
            var hooks, ret, isFunction, elem = this[0];
            if (!arguments.length) {
                if (elem) {
                    hooks = jQuery.valHooks[elem.nodeName.toLowerCase()] || jQuery.valHooks[elem.type];
                    if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {
                        return ret;
                    }
                    ret = elem.value;
                    return typeof ret === "string" ? ret.replace(rreturn, "") : ret == null ? "" : ret;
                }
                return;
            }
            isFunction = jQuery.isFunction(value);
            return this.each(function(i) {
                var self = jQuery(this), val;
                if (this.nodeType !== 1) {
                    return;
                }
                if (isFunction) {
                    val = value.call(this, i, self.val());
                } else {
                    val = value;
                }
                if (val == null) {
                    val = "";
                } else if (typeof val === "number") {
                    val += "";
                } else if (jQuery.isArray(val)) {
                    val = jQuery.map(val, function(value) {
                        return value == null ? "" : value + "";
                    });
                }
                hooks = jQuery.valHooks[this.nodeName.toLowerCase()] || jQuery.valHooks[this.type];
                if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
                    this.value = val;
                }
            });
        }});
    jQuery.extend({valHooks: {option: {get: function(elem) {
                    var val = elem.attributes.value;
                    return !val || val.specified ? elem.value : elem.text;
                }},select: {get: function(elem) {
                    var value, i, max, option, index = elem.selectedIndex, values = [], options = elem.options, one = elem.type === "select-one";
                    if (index < 0) {
                        return null;
                    }
                    i = one ? index : 0;
                    max = one ? index + 1 : options.length;
                    for (; i < max; i++) {
                        option = options[i];
                        if (option.selected && (jQuery.support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null) && (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, "optgroup"))) {
                            value = jQuery(option).val();
                            if (one) {
                                return value;
                            }
                            values.push(value);
                        }
                    }
                    if (one && !values.length && options.length) {
                        return jQuery(options[index]).val();
                    }
                    return values;
                },set: function(elem, value) {
                    var values = jQuery.makeArray(value);
                    jQuery(elem).find("option").each(function() {
                        this.selected = jQuery.inArray(jQuery(this).val(), values) >= 0;
                    });
                    if (!values.length) {
                        elem.selectedIndex = -1;
                    }
                    return values;
                }}},attrFn: {val: true,css: true,html: true,text: true,data: true,width: true,height: true,offset: true},attr: function(elem, name, value, pass) {
            var ret, hooks, notxml, nType = elem.nodeType;
            if (!elem || nType === 3 || nType === 8 || nType === 2) {
                return;
            }
            if (pass && name in jQuery.attrFn) {
                return jQuery(elem)[name](value);
            }
            if (typeof elem.getAttribute === "undefined") {
                return jQuery.prop(elem, name, value);
            }
            notxml = nType !== 1 || !jQuery.isXMLDoc(elem);
            if (notxml) {
                name = name.toLowerCase();
                hooks = jQuery.attrHooks[name] || (rboolean.test(name) ? boolHook : nodeHook);
            }
            if (value !== undefined) {
                if (value === null) {
                    jQuery.removeAttr(elem, name);
                    return;
                } else if (hooks && "set" in hooks && notxml && (ret = hooks.set(elem, value, name)) !== undefined) {
                    return ret;
                } else {
                    elem.setAttribute(name, "" + value);
                    return value;
                }
            } else if (hooks && "get" in hooks && notxml && (ret = hooks.get(elem, name)) !== null) {
                return ret;
            } else {
                ret = elem.getAttribute(name);
                return ret === null ? undefined : ret;
            }
        },removeAttr: function(elem, value) {
            var propName, attrNames, name, l, i = 0;
            if (value && elem.nodeType === 1) {
                attrNames = value.toLowerCase().split(rspace);
                l = attrNames.length;
                for (; i < l; i++) {
                    name = attrNames[i];
                    if (name) {
                        propName = jQuery.propFix[name] || name;
                        jQuery.attr(elem, name, "");
                        elem.removeAttribute(getSetAttribute ? name : propName);
                        if (rboolean.test(name) && propName in elem) {
                            elem[propName] = false;
                        }
                    }
                }
            }
        },attrHooks: {type: {set: function(elem, value) {
                    if (rtype.test(elem.nodeName) && elem.parentNode) {
                        jQuery.error("type property can't be changed");
                    } else if (!jQuery.support.radioValue && value === "radio" && jQuery.nodeName(elem, "input")) {
                        var val = elem.value;
                        elem.setAttribute("type", value);
                        if (val) {
                            elem.value = val;
                        }
                        return value;
                    }
                }},value: {get: function(elem, name) {
                    if (nodeHook && jQuery.nodeName(elem, "button")) {
                        return nodeHook.get(elem, name);
                    }
                    return name in elem ? elem.value : null;
                },set: function(elem, value, name) {
                    if (nodeHook && jQuery.nodeName(elem, "button")) {
                        return nodeHook.set(elem, value, name);
                    }
                    elem.value = value;
                }}},propFix: {tabindex: "tabIndex",readonly: "readOnly","for": "htmlFor","class": "className",maxlength: "maxLength",cellspacing: "cellSpacing",cellpadding: "cellPadding",rowspan: "rowSpan",colspan: "colSpan",usemap: "useMap",frameborder: "frameBorder",contenteditable: "contentEditable"},prop: function(elem, name, value) {
            var ret, hooks, notxml, nType = elem.nodeType;
            if (!elem || nType === 3 || nType === 8 || nType === 2) {
                return;
            }
            notxml = nType !== 1 || !jQuery.isXMLDoc(elem);
            if (notxml) {
                name = jQuery.propFix[name] || name;
                hooks = jQuery.propHooks[name];
            }
            if (value !== undefined) {
                if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
                    return ret;
                } else {
                    return (elem[name] = value);
                }
            } else {
                if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
                    return ret;
                } else {
                    return elem[name];
                }
            }
        },propHooks: {tabIndex: {get: function(elem) {
                    var attributeNode = elem.getAttributeNode("tabindex");
                    return attributeNode && attributeNode.specified ? parseInt(attributeNode.value, 10) : rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href ? 0 : undefined;
                }}}});
    jQuery.attrHooks.tabindex = jQuery.propHooks.tabIndex;
    boolHook = {get: function(elem, name) {
            var attrNode, property = jQuery.prop(elem, name);
            return property === true || typeof property !== "boolean" && (attrNode = elem.getAttributeNode(name)) && attrNode.nodeValue !== false ? name.toLowerCase() : undefined;
        },set: function(elem, value, name) {
            var propName;
            if (value === false) {
                jQuery.removeAttr(elem, name);
            } else {
                propName = jQuery.propFix[name] || name;
                if (propName in elem) {
                    elem[propName] = true;
                }
                elem.setAttribute(name, name.toLowerCase());
            }
            return name;
        }};
    if (!getSetAttribute) {
        fixSpecified = {name: true,id: true};
        nodeHook = jQuery.valHooks.button = {get: function(elem, name) {
                var ret;
                ret = elem.getAttributeNode(name);
                return ret && (fixSpecified[name] ? ret.nodeValue !== "" : ret.specified) ? ret.nodeValue : undefined;
            },set: function(elem, value, name) {
                var ret = elem.getAttributeNode(name);
                if (!ret) {
                    ret = document.createAttribute(name);
                    elem.setAttributeNode(ret);
                }
                return (ret.nodeValue = value + "");
            }};
        jQuery.attrHooks.tabindex.set = nodeHook.set;
        jQuery.each(["width", "height"], function(i, name) {
            jQuery.attrHooks[name] = jQuery.extend(jQuery.attrHooks[name], {set: function(elem, value) {
                    if (value === "") {
                        elem.setAttribute(name, "auto");
                        return value;
                    }
                }});
        });
        jQuery.attrHooks.contenteditable = {get: nodeHook.get,set: function(elem, value, name) {
                if (value === "") {
                    value = "false";
                }
                nodeHook.set(elem, value, name);
            }};
    }
    if (!jQuery.support.hrefNormalized) {
        jQuery.each(["href", "src", "width", "height"], function(i, name) {
            jQuery.attrHooks[name] = jQuery.extend(jQuery.attrHooks[name], {get: function(elem) {
                    var ret = elem.getAttribute(name, 2);
                    return ret === null ? undefined : ret;
                }});
        });
    }
    if (!jQuery.support.style) {
        jQuery.attrHooks.style = {get: function(elem) {
                return elem.style.cssText.toLowerCase() || undefined;
            },set: function(elem, value) {
                return (elem.style.cssText = "" + value);
            }};
    }
    if (!jQuery.support.optSelected) {
        jQuery.propHooks.selected = jQuery.extend(jQuery.propHooks.selected, {get: function(elem) {
                var parent = elem.parentNode;
                if (parent) {
                    parent.selectedIndex;
                    if (parent.parentNode) {
                        parent.parentNode.selectedIndex;
                    }
                }
                return null;
            }});
    }
    if (!jQuery.support.enctype) {
        jQuery.propFix.enctype = "encoding";
    }
    if (!jQuery.support.checkOn) {
        jQuery.each(["radio", "checkbox"], function() {
            jQuery.valHooks[this] = {get: function(elem) {
                    return elem.getAttribute("value") === null ? "on" : elem.value;
                }};
        });
    }
    jQuery.each(["radio", "checkbox"], function() {
        jQuery.valHooks[this] = jQuery.extend(jQuery.valHooks[this], {set: function(elem, value) {
                if (jQuery.isArray(value)) {
                    return (elem.checked = jQuery.inArray(jQuery(elem).val(), value) >= 0);
                }
            }});
    });
    var rformElems = /^(?:textarea|input|select)$/i, rtypenamespace = /^([^\.]*)?(?:\.(.+))?$/, rhoverHack = /\bhover(\.\S+)?\b/, rkeyEvent = /^key/, rmouseEvent = /^(?:mouse|contextmenu)|click/, rfocusMorph = /^(?:focusinfocus|focusoutblur)$/, rquickIs = /^(\w*)(?:#([\w\-]+))?(?:\.([\w\-]+))?$/, quickParse = function(selector) {
        var quick = rquickIs.exec(selector);
        if (quick) {
            quick[1] = (quick[1] || "").toLowerCase();
            quick[3] = quick[3] && new RegExp("(?:^|\\s)" + quick[3] + "(?:\\s|$)");
        }
        return quick;
    }, quickIs = function(elem, m) {
        var attrs = elem.attributes || {};
        return ((!m[1] || elem.nodeName.toLowerCase() === m[1]) && (!m[2] || (attrs.id || {}).value === m[2]) && (!m[3] || m[3].test((attrs["class"] || {}).value)));
    }, hoverHack = function(events) {
        return jQuery.event.special.hover ? events : events.replace(rhoverHack, "mouseenter$1 mouseleave$1");
    };
    jQuery.event = {add: function(elem, types, handler, data, selector) {
            var elemData, eventHandle, events, t, tns, type, namespaces, handleObj, handleObjIn, quick, handlers, special;
            if (elem.nodeType === 3 || elem.nodeType === 8 || !types || !handler || !(elemData = jQuery._data(elem))) {
                return;
            }
            if (handler.handler) {
                handleObjIn = handler;
                handler = handleObjIn.handler;
            }
            if (!handler.guid) {
                handler.guid = jQuery.guid++;
            }
            events = elemData.events;
            if (!events) {
                elemData.events = events = {};
            }
            eventHandle = elemData.handle;
            if (!eventHandle) {
                elemData.handle = eventHandle = function(e) {
                    return typeof jQuery !== "undefined" && (!e || jQuery.event.triggered !== e.type) ? jQuery.event.dispatch.apply(eventHandle.elem, arguments) : undefined;
                };
                eventHandle.elem = elem;
            }
            types = jQuery.trim(hoverHack(types)).split(" ");
            for (t = 0; t < types.length; t++) {
                tns = rtypenamespace.exec(types[t]) || [];
                type = tns[1];
                namespaces = (tns[2] || "").split(".").sort();
                special = jQuery.event.special[type] || {};
                type = (selector ? special.delegateType : special.bindType) || type;
                special = jQuery.event.special[type] || {};
                handleObj = jQuery.extend({type: type,origType: tns[1],data: data,handler: handler,guid: handler.guid,selector: selector,quick: quickParse(selector),namespace: namespaces.join(".")}, handleObjIn);
                handlers = events[type];
                if (!handlers) {
                    handlers = events[type] = [];
                    handlers.delegateCount = 0;
                    if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
                        if (elem.addEventListener) {
                            elem.addEventListener(type, eventHandle, false);
                        } else if (elem.attachEvent) {
                            elem.attachEvent("on" + type, eventHandle);
                        }
                    }
                }
                if (special.add) {
                    special.add.call(elem, handleObj);
                    if (!handleObj.handler.guid) {
                        handleObj.handler.guid = handler.guid;
                    }
                }
                if (selector) {
                    handlers.splice(handlers.delegateCount++, 0, handleObj);
                } else {
                    handlers.push(handleObj);
                }
                jQuery.event.global[type] = true;
            }
            elem = null;
        },global: {},remove: function(elem, types, handler, selector, mappedTypes) {
            var elemData = jQuery.hasData(elem) && jQuery._data(elem), t, tns, type, origType, namespaces, origCount, j, events, special, handle, eventType, handleObj;
            if (!elemData || !(events = elemData.events)) {
                return;
            }
            types = jQuery.trim(hoverHack(types || "")).split(" ");
            for (t = 0; t < types.length; t++) {
                tns = rtypenamespace.exec(types[t]) || [];
                type = origType = tns[1];
                namespaces = tns[2];
                if (!type) {
                    for (type in events) {
                        jQuery.event.remove(elem, type + types[t], handler, selector, true);
                    }
                    continue;
                }
                special = jQuery.event.special[type] || {};
                type = (selector ? special.delegateType : special.bindType) || type;
                eventType = events[type] || [];
                origCount = eventType.length;
                namespaces = namespaces ? new RegExp("(^|\\.)" + namespaces.split(".").sort().join("\\.(?:.*\\.)?") + "(\\.|$)") : null;
                for (j = 0; j < eventType.length; j++) {
                    handleObj = eventType[j];
                    if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!namespaces || namespaces.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
                        eventType.splice(j--, 1);
                        if (handleObj.selector) {
                            eventType.delegateCount--;
                        }
                        if (special.remove) {
                            special.remove.call(elem, handleObj);
                        }
                    }
                }
                if (eventType.length === 0 && origCount !== eventType.length) {
                    if (!special.teardown || special.teardown.call(elem, namespaces) === false) {
                        jQuery.removeEvent(elem, type, elemData.handle);
                    }
                    delete events[type];
                }
            }
            if (jQuery.isEmptyObject(events)) {
                handle = elemData.handle;
                if (handle) {
                    handle.elem = null;
                }
                jQuery.removeData(elem, ["events", "handle"], true);
            }
        },customEvent: {"getData": true,"setData": true,"changeData": true},trigger: function(event, data, elem, onlyHandlers) {
            if (elem && (elem.nodeType === 3 || elem.nodeType === 8)) {
                return;
            }
            var type = event.type || event, namespaces = [], cache, exclusive, i, cur, old, ontype, special, handle, eventPath, bubbleType;
            if (rfocusMorph.test(type + jQuery.event.triggered)) {
                return;
            }
            if (type.indexOf("!") >= 0) {
                type = type.slice(0, -1);
                exclusive = true;
            }
            if (type.indexOf(".") >= 0) {
                namespaces = type.split(".");
                type = namespaces.shift();
                namespaces.sort();
            }
            if ((!elem || jQuery.event.customEvent[type]) && !jQuery.event.global[type]) {
                return;
            }
            event = typeof event === "object" ? event[jQuery.expando] ? event : new jQuery.Event(type, event) : new jQuery.Event(type);
            event.type = type;
            event.isTrigger = true;
            event.exclusive = exclusive;
            event.namespace = namespaces.join(".");
            event.namespace_re = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.)?") + "(\\.|$)") : null;
            ontype = type.indexOf(":") < 0 ? "on" + type : "";
            if (!elem) {
                cache = jQuery.cache;
                for (i in cache) {
                    if (cache[i].events && cache[i].events[type]) {
                        jQuery.event.trigger(event, data, cache[i].handle.elem, true);
                    }
                }
                return;
            }
            event.result = undefined;
            if (!event.target) {
                event.target = elem;
            }
            data = data != null ? jQuery.makeArray(data) : [];
            data.unshift(event);
            special = jQuery.event.special[type] || {};
            if (special.trigger && special.trigger.apply(elem, data) === false) {
                return;
            }
            eventPath = [[elem, special.bindType || type]];
            if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {
                bubbleType = special.delegateType || type;
                cur = rfocusMorph.test(bubbleType + type) ? elem : elem.parentNode;
                old = null;
                for (; cur; cur = cur.parentNode) {
                    eventPath.push([cur, bubbleType]);
                    old = cur;
                }
                if (old && old === elem.ownerDocument) {
                    eventPath.push([old.defaultView || old.parentWindow || window, bubbleType]);
                }
            }
            for (i = 0; i < eventPath.length && !event.isPropagationStopped(); i++) {
                cur = eventPath[i][0];
                event.type = eventPath[i][1];
                handle = (jQuery._data(cur, "events") || {})[event.type] && jQuery._data(cur, "handle");
                if (handle) {
                    handle.apply(cur, data);
                }
                handle = ontype && cur[ontype];
                if (handle && jQuery.acceptData(cur) && handle.apply(cur, data) === false) {
                    event.preventDefault();
                }
            }
            event.type = type;
            if (!onlyHandlers && !event.isDefaultPrevented()) {
                if ((!special._default || special._default.apply(elem.ownerDocument, data) === false) && !(type === "click" && jQuery.nodeName(elem, "a")) && jQuery.acceptData(elem)) {
                    if (ontype && elem[type] && ((type !== "focus" && type !== "blur") || event.target.offsetWidth !== 0) && !jQuery.isWindow(elem)) {
                        old = elem[ontype];
                        if (old) {
                            elem[ontype] = null;
                        }
                        jQuery.event.triggered = type;
                        elem[type]();
                        jQuery.event.triggered = undefined;
                        if (old) {
                            elem[ontype] = old;
                        }
                    }
                }
            }
            return event.result;
        },dispatch: function(event) {
            event = jQuery.event.fix(event || window.event);
            var handlers = ((jQuery._data(this, "events") || {})[event.type] || []), delegateCount = handlers.delegateCount, args = [].slice.call(arguments, 0), run_all = !event.exclusive && !event.namespace, handlerQueue = [], i, j, cur, jqcur, ret, selMatch, matched, matches, handleObj, sel, related;
            args[0] = event;
            event.delegateTarget = this;
            if (delegateCount && !event.target.disabled && !(event.button && event.type === "click")) {
                jqcur = jQuery(this);
                jqcur.context = this.ownerDocument || this;
                for (cur = event.target; cur != this; cur = cur.parentNode || this) {
                    selMatch = {};
                    matches = [];
                    jqcur[0] = cur;
                    for (i = 0; i < delegateCount; i++) {
                        handleObj = handlers[i];
                        sel = handleObj.selector;
                        if (selMatch[sel] === undefined) {
                            selMatch[sel] = (handleObj.quick ? quickIs(cur, handleObj.quick) : jqcur.is(sel));
                        }
                        if (selMatch[sel]) {
                            matches.push(handleObj);
                        }
                    }
                    if (matches.length) {
                        handlerQueue.push({elem: cur,matches: matches});
                    }
                }
            }
            if (handlers.length > delegateCount) {
                handlerQueue.push({elem: this,matches: handlers.slice(delegateCount)});
            }
            for (i = 0; i < handlerQueue.length && !event.isPropagationStopped(); i++) {
                matched = handlerQueue[i];
                event.currentTarget = matched.elem;
                for (j = 0; j < matched.matches.length && !event.isImmediatePropagationStopped(); j++) {
                    handleObj = matched.matches[j];
                    if (run_all || (!event.namespace && !handleObj.namespace) || event.namespace_re && event.namespace_re.test(handleObj.namespace)) {
                        event.data = handleObj.data;
                        event.handleObj = handleObj;
                        ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);
                        if (ret !== undefined) {
                            event.result = ret;
                            if (ret === false) {
                                event.preventDefault();
                                event.stopPropagation();
                            }
                        }
                    }
                }
            }
            return event.result;
        },props: "attrChange attrName relatedNode srcElement altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks: {},keyHooks: {props: "char charCode key keyCode".split(" "),filter: function(event, original) {
                if (event.which == null) {
                    event.which = original.charCode != null ? original.charCode : original.keyCode;
                }
                return event;
            }},mouseHooks: {props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter: function(event, original) {
                var eventDoc, doc, body, button = original.button, fromElement = original.fromElement;
                if (event.pageX == null && original.clientX != null) {
                    eventDoc = event.target.ownerDocument || document;
                    doc = eventDoc.documentElement;
                    body = eventDoc.body;
                    event.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
                    event.pageY = original.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
                }
                if (!event.relatedTarget && fromElement) {
                    event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
                }
                if (!event.which && button !== undefined) {
                    event.which = (button & 1 ? 1 : (button & 2 ? 3 : (button & 4 ? 2 : 0)));
                }
                return event;
            }},fix: function(event) {
            if (event[jQuery.expando]) {
                return event;
            }
            var i, prop, originalEvent = event, fixHook = jQuery.event.fixHooks[event.type] || {}, copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;
            event = jQuery.Event(originalEvent);
            for (i = copy.length; i; ) {
                prop = copy[--i];
                event[prop] = originalEvent[prop];
            }
            if (!event.target) {
                event.target = originalEvent.srcElement || document;
            }
            if (event.target.nodeType === 3) {
                event.target = event.target.parentNode;
            }
            if (event.metaKey === undefined) {
                event.metaKey = event.ctrlKey;
            }
            return fixHook.filter ? fixHook.filter(event, originalEvent) : event;
        },special: {ready: {setup: jQuery.bindReady},load: {noBubble: true},focus: {delegateType: "focusin"},blur: {delegateType: "focusout"},beforeunload: {setup: function(data, namespaces, eventHandle) {
                    if (jQuery.isWindow(this)) {
                        this.onbeforeunload = eventHandle;
                    }
                },teardown: function(namespaces, eventHandle) {
                    if (this.onbeforeunload === eventHandle) {
                        this.onbeforeunload = null;
                    }
                }}},simulate: function(type, elem, event, bubble) {
            var e = jQuery.extend(new jQuery.Event(), event, {type: type,isSimulated: true,originalEvent: {}});
            if (bubble) {
                jQuery.event.trigger(e, null, elem);
            } else {
                jQuery.event.dispatch.call(elem, e);
            }
            if (e.isDefaultPrevented()) {
                event.preventDefault();
            }
        }};
    jQuery.event.handle = jQuery.event.dispatch;
    jQuery.removeEvent = document.removeEventListener ? function(elem, type, handle) {
        if (elem.removeEventListener) {
            elem.removeEventListener(type, handle, false);
        }
    } : function(elem, type, handle) {
        if (elem.detachEvent) {
            elem.detachEvent("on" + type, handle);
        }
    };
    jQuery.Event = function(src, props) {
        if (!(this instanceof jQuery.Event)) {
            return new jQuery.Event(src, props);
        }
        if (src && src.type) {
            this.originalEvent = src;
            this.type = src.type;
            this.isDefaultPrevented = (src.defaultPrevented || src.returnValue === false || src.getPreventDefault && src.getPreventDefault()) ? returnTrue : returnFalse;
        } else {
            this.type = src;
        }
        if (props) {
            jQuery.extend(this, props);
        }
        this.timeStamp = src && src.timeStamp || jQuery.now();
        this[jQuery.expando] = true;
    };
    function returnFalse() {
        return false;
    }
    function returnTrue() {
        return true;
    }
    jQuery.Event.prototype = {preventDefault: function() {
            this.isDefaultPrevented = returnTrue;
            var e = this.originalEvent;
            if (!e) {
                return;
            }
            if (e.preventDefault) {
                e.preventDefault();
            } else {
                e.returnValue = false;
            }
        },stopPropagation: function() {
            this.isPropagationStopped = returnTrue;
            var e = this.originalEvent;
            if (!e) {
                return;
            }
            if (e.stopPropagation) {
                e.stopPropagation();
            }
            e.cancelBubble = true;
        },stopImmediatePropagation: function() {
            this.isImmediatePropagationStopped = returnTrue;
            this.stopPropagation();
        },isDefaultPrevented: returnFalse,isPropagationStopped: returnFalse,isImmediatePropagationStopped: returnFalse};
    jQuery.each({mouseenter: "mouseover",mouseleave: "mouseout"}, function(orig, fix) {
        jQuery.event.special[orig] = {delegateType: fix,bindType: fix,handle: function(event) {
                var target = this, related = event.relatedTarget, handleObj = event.handleObj, selector = handleObj.selector, ret;
                if (!related || (related !== target && !jQuery.contains(target, related))) {
                    event.type = handleObj.origType;
                    ret = handleObj.handler.apply(this, arguments);
                    event.type = fix;
                }
                return ret;
            }};
    });
    if (!jQuery.support.submitBubbles) {
        jQuery.event.special.submit = {setup: function() {
                if (jQuery.nodeName(this, "form")) {
                    return false;
                }
                jQuery.event.add(this, "click._submit keypress._submit", function(e) {
                    var elem = e.target, form = jQuery.nodeName(elem, "input") || jQuery.nodeName(elem, "button") ? elem.form : undefined;
                    if (form && !form._submit_attached) {
                        jQuery.event.add(form, "submit._submit", function(event) {
                            if (this.parentNode && !event.isTrigger) {
                                jQuery.event.simulate("submit", this.parentNode, event, true);
                            }
                        });
                        form._submit_attached = true;
                    }
                });
            },teardown: function() {
                if (jQuery.nodeName(this, "form")) {
                    return false;
                }
                jQuery.event.remove(this, "._submit");
            }};
    }
    if (!jQuery.support.changeBubbles) {
        jQuery.event.special.change = {setup: function() {
                if (rformElems.test(this.nodeName)) {
                    if (this.type === "checkbox" || this.type === "radio") {
                        jQuery.event.add(this, "propertychange._change", function(event) {
                            if (event.originalEvent.propertyName === "checked") {
                                this._just_changed = true;
                            }
                        });
                        jQuery.event.add(this, "click._change", function(event) {
                            if (this._just_changed && !event.isTrigger) {
                                this._just_changed = false;
                                jQuery.event.simulate("change", this, event, true);
                            }
                        });
                    }
                    return false;
                }
                jQuery.event.add(this, "beforeactivate._change", function(e) {
                    var elem = e.target;
                    if (rformElems.test(elem.nodeName) && !elem._change_attached) {
                        jQuery.event.add(elem, "change._change", function(event) {
                            if (this.parentNode && !event.isSimulated && !event.isTrigger) {
                                jQuery.event.simulate("change", this.parentNode, event, true);
                            }
                        });
                        elem._change_attached = true;
                    }
                });
            },handle: function(event) {
                var elem = event.target;
                if (this !== elem || event.isSimulated || event.isTrigger || (elem.type !== "radio" && elem.type !== "checkbox")) {
                    return event.handleObj.handler.apply(this, arguments);
                }
            },teardown: function() {
                jQuery.event.remove(this, "._change");
                return rformElems.test(this.nodeName);
            }};
    }
    if (!jQuery.support.focusinBubbles) {
        jQuery.each({focus: "focusin",blur: "focusout"}, function(orig, fix) {
            var attaches = 0, handler = function(event) {
                jQuery.event.simulate(fix, event.target, jQuery.event.fix(event), true);
            };
            jQuery.event.special[fix] = {setup: function() {
                    if (attaches++ === 0) {
                        document.addEventListener(orig, handler, true);
                    }
                },teardown: function() {
                    if (--attaches === 0) {
                        document.removeEventListener(orig, handler, true);
                    }
                }};
        });
    }
    jQuery.fn.extend({on: function(types, selector, data, fn, one) {
            var origFn, type;
            if (typeof types === "object") {
                if (typeof selector !== "string") {
                    data = selector;
                    selector = undefined;
                }
                for (type in types) {
                    this.on(type, selector, data, types[type], one);
                }
                return this;
            }
            if (data == null && fn == null) {
                fn = selector;
                data = selector = undefined;
            } else if (fn == null) {
                if (typeof selector === "string") {
                    fn = data;
                    data = undefined;
                } else {
                    fn = data;
                    data = selector;
                    selector = undefined;
                }
            }
            if (fn === false) {
                fn = returnFalse;
            } else if (!fn) {
                return this;
            }
            if (one === 1) {
                origFn = fn;
                fn = function(event) {
                    jQuery().off(event);
                    return origFn.apply(this, arguments);
                };
                fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
            }
            return this.each(function() {
                jQuery.event.add(this, types, fn, data, selector);
            });
        },one: function(types, selector, data, fn) {
            return this.on.call(this, types, selector, data, fn, 1);
        },off: function(types, selector, fn) {
            if (types && types.preventDefault && types.handleObj) {
                var handleObj = types.handleObj;
                jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.type + "." + handleObj.namespace : handleObj.type, handleObj.selector, handleObj.handler);
                return this;
            }
            if (typeof types === "object") {
                for (var type in types) {
                    this.off(type, selector, types[type]);
                }
                return this;
            }
            if (selector === false || typeof selector === "function") {
                fn = selector;
                selector = undefined;
            }
            if (fn === false) {
                fn = returnFalse;
            }
            return this.each(function() {
                jQuery.event.remove(this, types, fn, selector);
            });
        },bind: function(types, data, fn) {
            return this.on(types, null, data, fn);
        },unbind: function(types, fn) {
            return this.off(types, null, fn);
        },live: function(types, data, fn) {
            jQuery(this.context).on(types, this.selector, data, fn);
            return this;
        },die: function(types, fn) {
            jQuery(this.context).off(types, this.selector || "**", fn);
            return this;
        },delegate: function(selector, types, data, fn) {
            return this.on(types, selector, data, fn);
        },undelegate: function(selector, types, fn) {
            return arguments.length == 1 ? this.off(selector, "**") : this.off(types, selector, fn);
        },trigger: function(type, data) {
            return this.each(function() {
                jQuery.event.trigger(type, data, this);
            });
        },triggerHandler: function(type, data) {
            if (this[0]) {
                return jQuery.event.trigger(type, data, this[0], true);
            }
        },toggle: function(fn) {
            var args = arguments, guid = fn.guid || jQuery.guid++, i = 0, toggler = function(event) {
                var lastToggle = (jQuery._data(this, "lastToggle" + fn.guid) || 0) % i;
                jQuery._data(this, "lastToggle" + fn.guid, lastToggle + 1);
                event.preventDefault();
                return args[lastToggle].apply(this, arguments) || false;
            };
            toggler.guid = guid;
            while (i < args.length) {
                args[i++].guid = guid;
            }
            return this.click(toggler);
        },hover: function(fnOver, fnOut) {
            return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
        }});
    jQuery.each(("blur focus focusin focusout load resize scroll unload click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup error contextmenu").split(" "), function(i, name) {
        jQuery.fn[name] = function(data, fn) {
            if (fn == null) {
                fn = data;
                data = null;
            }
            return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
        };
        if (jQuery.attrFn) {
            jQuery.attrFn[name] = true;
        }
        if (rkeyEvent.test(name)) {
            jQuery.event.fixHooks[name] = jQuery.event.keyHooks;
        }
        if (rmouseEvent.test(name)) {
            jQuery.event.fixHooks[name] = jQuery.event.mouseHooks;
        }
    });
    (function() {
        var chunker = /((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^\[\]]*\]|['"][^'"]*['"]|[^\[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g, expando = "sizcache" + (Math.random() + '').replace('.', ''), done = 0, toString = Object.prototype.toString, hasDuplicate = false, baseHasDuplicate = true, rBackslash = /\\/g, rReturn = /\r\n/g, rNonWord = /\W/;
        [0, 0].sort(function() {
            baseHasDuplicate = false;
            return 0;
        });
        var Sizzle = function(selector, context, results, seed) {
            results = results || [];
            context = context || document;
            var origContext = context;
            if (context.nodeType !== 1 && context.nodeType !== 9) {
                return [];
            }
            if (!selector || typeof selector !== "string") {
                return results;
            }
            var m, set, checkSet, extra, ret, cur, pop, i, prune = true, contextXML = Sizzle.isXML(context), parts = [], soFar = selector;
            do {
                chunker.exec("");
                m = chunker.exec(soFar);
                if (m) {
                    soFar = m[3];
                    parts.push(m[1]);
                    if (m[2]) {
                        extra = m[3];
                        break;
                    }
                }
            } while (m);
            if (parts.length > 1 && origPOS.exec(selector)) {
                if (parts.length === 2 && Expr.relative[parts[0]]) {
                    set = posProcess(parts[0] + parts[1], context, seed);
                } else {
                    set = Expr.relative[parts[0]] ? [context] : Sizzle(parts.shift(), context);
                    while (parts.length) {
                        selector = parts.shift();
                        if (Expr.relative[selector]) {
                            selector += parts.shift();
                        }
                        set = posProcess(selector, set, seed);
                    }
                }
            } else {
                if (!seed && parts.length > 1 && context.nodeType === 9 && !contextXML && Expr.match.ID.test(parts[0]) && !Expr.match.ID.test(parts[parts.length - 1])) {
                    ret = Sizzle.find(parts.shift(), context, contextXML);
                    context = ret.expr ? Sizzle.filter(ret.expr, ret.set)[0] : ret.set[0];
                }
                if (context) {
                    ret = seed ? {expr: parts.pop(),set: makeArray(seed)} : Sizzle.find(parts.pop(), parts.length === 1 && (parts[0] === "~" || parts[0] === "+") && context.parentNode ? context.parentNode : context, contextXML);
                    set = ret.expr ? Sizzle.filter(ret.expr, ret.set) : ret.set;
                    if (parts.length > 0) {
                        checkSet = makeArray(set);
                    } else {
                        prune = false;
                    }
                    while (parts.length) {
                        cur = parts.pop();
                        pop = cur;
                        if (!Expr.relative[cur]) {
                            cur = "";
                        } else {
                            pop = parts.pop();
                        }
                        if (pop == null) {
                            pop = context;
                        }
                        Expr.relative[cur](checkSet, pop, contextXML);
                    }
                } else {
                    checkSet = parts = [];
                }
            }
            if (!checkSet) {
                checkSet = set;
            }
            if (!checkSet) {
                Sizzle.error(cur || selector);
            }
            if (toString.call(checkSet) === "[object Array]") {
                if (!prune) {
                    results.push.apply(results, checkSet);
                } else if (context && context.nodeType === 1) {
                    for (i = 0; checkSet[i] != null; i++) {
                        if (checkSet[i] && (checkSet[i] === true || checkSet[i].nodeType === 1 && Sizzle.contains(context, checkSet[i]))) {
                            results.push(set[i]);
                        }
                    }
                } else {
                    for (i = 0; checkSet[i] != null; i++) {
                        if (checkSet[i] && checkSet[i].nodeType === 1) {
                            results.push(set[i]);
                        }
                    }
                }
            } else {
                makeArray(checkSet, results);
            }
            if (extra) {
                Sizzle(extra, origContext, results, seed);
                Sizzle.uniqueSort(results);
            }
            return results;
        };
        Sizzle.uniqueSort = function(results) {
            if (sortOrder) {
                hasDuplicate = baseHasDuplicate;
                results.sort(sortOrder);
                if (hasDuplicate) {
                    for (var i = 1; i < results.length; i++) {
                        if (results[i] === results[i - 1]) {
                            results.splice(i--, 1);
                        }
                    }
                }
            }
            return results;
        };
        Sizzle.matches = function(expr, set) {
            return Sizzle(expr, null, null, set);
        };
        Sizzle.matchesSelector = function(node, expr) {
            return Sizzle(expr, null, null, [node]).length > 0;
        };
        Sizzle.find = function(expr, context, isXML) {
            var set, i, len, match, type, left;
            if (!expr) {
                return [];
            }
            for (i = 0, len = Expr.order.length; i < len; i++) {
                type = Expr.order[i];
                if ((match = Expr.leftMatch[type].exec(expr))) {
                    left = match[1];
                    match.splice(1, 1);
                    if (left.substr(left.length - 1) !== "\\") {
                        match[1] = (match[1] || "").replace(rBackslash, "");
                        set = Expr.find[type](match, context, isXML);
                        if (set != null) {
                            expr = expr.replace(Expr.match[type], "");
                            break;
                        }
                    }
                }
            }
            if (!set) {
                set = typeof context.getElementsByTagName !== "undefined" ? context.getElementsByTagName("*") : [];
            }
            return {set: set,expr: expr};
        };
        Sizzle.filter = function(expr, set, inplace, not) {
            var match, anyFound, type, found, item, filter, left, i, pass, old = expr, result = [], curLoop = set, isXMLFilter = set && set[0] && Sizzle.isXML(set[0]);
            while (expr && set.length) {
                for (type in Expr.filter) {
                    if ((match = Expr.leftMatch[type].exec(expr)) != null && match[2]) {
                        filter = Expr.filter[type];
                        left = match[1];
                        anyFound = false;
                        match.splice(1, 1);
                        if (left.substr(left.length - 1) === "\\") {
                            continue;
                        }
                        if (curLoop === result) {
                            result = [];
                        }
                        if (Expr.preFilter[type]) {
                            match = Expr.preFilter[type](match, curLoop, inplace, result, not, isXMLFilter);
                            if (!match) {
                                anyFound = found = true;
                            } else if (match === true) {
                                continue;
                            }
                        }
                        if (match) {
                            for (i = 0; (item = curLoop[i]) != null; i++) {
                                if (item) {
                                    found = filter(item, match, i, curLoop);
                                    pass = not ^ found;
                                    if (inplace && found != null) {
                                        if (pass) {
                                            anyFound = true;
                                        } else {
                                            curLoop[i] = false;
                                        }
                                    } else if (pass) {
                                        result.push(item);
                                        anyFound = true;
                                    }
                                }
                            }
                        }
                        if (found !== undefined) {
                            if (!inplace) {
                                curLoop = result;
                            }
                            expr = expr.replace(Expr.match[type], "");
                            if (!anyFound) {
                                return [];
                            }
                            break;
                        }
                    }
                }
                if (expr === old) {
                    if (anyFound == null) {
                        Sizzle.error(expr);
                    } else {
                        break;
                    }
                }
                old = expr;
            }
            return curLoop;
        };
        Sizzle.error = function(msg) {
            throw new Error("Syntax error, unrecognized expression: " + msg);
        };
        var getText = Sizzle.getText = function(elem) {
            var i, node, nodeType = elem.nodeType, ret = "";
            if (nodeType) {
                if (nodeType === 1 || nodeType === 9) {
                    if (typeof elem.textContent === 'string') {
                        return elem.textContent;
                    } else if (typeof elem.innerText === 'string') {
                        return elem.innerText.replace(rReturn, '');
                    } else {
                        for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                            ret += getText(elem);
                        }
                    }
                } else if (nodeType === 3 || nodeType === 4) {
                    return elem.nodeValue;
                }
            } else {
                for (i = 0; (node = elem[i]); i++) {
                    if (node.nodeType !== 8) {
                        ret += getText(node);
                    }
                }
            }
            return ret;
        };
        var Expr = Sizzle.selectors = {order: ["ID", "NAME", "TAG"],match: {ID: /#((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,CLASS: /\.((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,NAME: /\[name=['"]*((?:[\w\u00c0-\uFFFF\-]|\\.)+)['"]*\]/,ATTR: /\[\s*((?:[\w\u00c0-\uFFFF\-]|\\.)+)\s*(?:(\S?=)\s*(?:(['"])(.*?)\3|(#?(?:[\w\u00c0-\uFFFF\-]|\\.)*)|)|)\s*\]/,TAG: /^((?:[\w\u00c0-\uFFFF\*\-]|\\.)+)/,CHILD: /:(only|nth|last|first)-child(?:\(\s*(even|odd|(?:[+\-]?\d+|(?:[+\-]?\d*)?n\s*(?:[+\-]\s*\d+)?))\s*\))?/,POS: /:(nth|eq|gt|lt|first|last|even|odd)(?:\((\d*)\))?(?=[^\-]|$)/,PSEUDO: /:((?:[\w\u00c0-\uFFFF\-]|\\.)+)(?:\((['"]?)((?:\([^\)]+\)|[^\(\)]*)+)\2\))?/},leftMatch: {},attrMap: {"class": "className","for": "htmlFor"},attrHandle: {href: function(elem) {
                    return elem.getAttribute("href");
                },type: function(elem) {
                    return elem.getAttribute("type");
                }},relative: {"+": function(checkSet, part) {
                    var isPartStr = typeof part === "string", isTag = isPartStr && !rNonWord.test(part), isPartStrNotTag = isPartStr && !isTag;
                    if (isTag) {
                        part = part.toLowerCase();
                    }
                    for (var i = 0, l = checkSet.length, elem; i < l; i++) {
                        if ((elem = checkSet[i])) {
                            while ((elem = elem.previousSibling) && elem.nodeType !== 1) {
                            }
                            checkSet[i] = isPartStrNotTag || elem && elem.nodeName.toLowerCase() === part ? elem || false : elem === part;
                        }
                    }
                    if (isPartStrNotTag) {
                        Sizzle.filter(part, checkSet, true);
                    }
                },">": function(checkSet, part) {
                    var elem, isPartStr = typeof part === "string", i = 0, l = checkSet.length;
                    if (isPartStr && !rNonWord.test(part)) {
                        part = part.toLowerCase();
                        for (; i < l; i++) {
                            elem = checkSet[i];
                            if (elem) {
                                var parent = elem.parentNode;
                                checkSet[i] = parent.nodeName.toLowerCase() === part ? parent : false;
                            }
                        }
                    } else {
                        for (; i < l; i++) {
                            elem = checkSet[i];
                            if (elem) {
                                checkSet[i] = isPartStr ? elem.parentNode : elem.parentNode === part;
                            }
                        }
                        if (isPartStr) {
                            Sizzle.filter(part, checkSet, true);
                        }
                    }
                },"": function(checkSet, part, isXML) {
                    var nodeCheck, doneName = done++, checkFn = dirCheck;
                    if (typeof part === "string" && !rNonWord.test(part)) {
                        part = part.toLowerCase();
                        nodeCheck = part;
                        checkFn = dirNodeCheck;
                    }
                    checkFn("parentNode", part, doneName, checkSet, nodeCheck, isXML);
                },"~": function(checkSet, part, isXML) {
                    var nodeCheck, doneName = done++, checkFn = dirCheck;
                    if (typeof part === "string" && !rNonWord.test(part)) {
                        part = part.toLowerCase();
                        nodeCheck = part;
                        checkFn = dirNodeCheck;
                    }
                    checkFn("previousSibling", part, doneName, checkSet, nodeCheck, isXML);
                }},find: {ID: function(match, context, isXML) {
                    if (typeof context.getElementById !== "undefined" && !isXML) {
                        var m = context.getElementById(match[1]);
                        return m && m.parentNode ? [m] : [];
                    }
                },NAME: function(match, context) {
                    if (typeof context.getElementsByName !== "undefined") {
                        var ret = [], results = context.getElementsByName(match[1]);
                        for (var i = 0, l = results.length; i < l; i++) {
                            if (results[i].getAttribute("name") === match[1]) {
                                ret.push(results[i]);
                            }
                        }
                        return ret.length === 0 ? null : ret;
                    }
                },TAG: function(match, context) {
                    if (typeof context.getElementsByTagName !== "undefined") {
                        return context.getElementsByTagName(match[1]);
                    }
                }},preFilter: {CLASS: function(match, curLoop, inplace, result, not, isXML) {
                    match = " " + match[1].replace(rBackslash, "") + " ";
                    if (isXML) {
                        return match;
                    }
                    for (var i = 0, elem; (elem = curLoop[i]) != null; i++) {
                        if (elem) {
                            if (not ^ (elem.className && (" " + elem.className + " ").replace(/[\t\n\r]/g, " ").indexOf(match) >= 0)) {
                                if (!inplace) {
                                    result.push(elem);
                                }
                            } else if (inplace) {
                                curLoop[i] = false;
                            }
                        }
                    }
                    return false;
                },ID: function(match) {
                    return match[1].replace(rBackslash, "");
                },TAG: function(match, curLoop) {
                    return match[1].replace(rBackslash, "").toLowerCase();
                },CHILD: function(match) {
                    if (match[1] === "nth") {
                        if (!match[2]) {
                            Sizzle.error(match[0]);
                        }
                        match[2] = match[2].replace(/^\+|\s*/g, '');
                        var test = /(-?)(\d*)(?:n([+\-]?\d*))?/.exec(match[2] === "even" && "2n" || match[2] === "odd" && "2n+1" || !/\D/.test(match[2]) && "0n+" + match[2] || match[2]);
                        match[2] = (test[1] + (test[2] || 1)) - 0;
                        match[3] = test[3] - 0;
                    }
                    else if (match[2]) {
                        Sizzle.error(match[0]);
                    }
                    match[0] = done++;
                    return match;
                },ATTR: function(match, curLoop, inplace, result, not, isXML) {
                    var name = match[1] = match[1].replace(rBackslash, "");
                    if (!isXML && Expr.attrMap[name]) {
                        match[1] = Expr.attrMap[name];
                    }
                    match[4] = (match[4] || match[5] || "").replace(rBackslash, "");
                    if (match[2] === "~=") {
                        match[4] = " " + match[4] + " ";
                    }
                    return match;
                },PSEUDO: function(match, curLoop, inplace, result, not) {
                    if (match[1] === "not") {
                        if ((chunker.exec(match[3]) || "").length > 1 || /^\w/.test(match[3])) {
                            match[3] = Sizzle(match[3], null, null, curLoop);
                        } else {
                            var ret = Sizzle.filter(match[3], curLoop, inplace, true ^ not);
                            if (!inplace) {
                                result.push.apply(result, ret);
                            }
                            return false;
                        }
                    } else if (Expr.match.POS.test(match[0]) || Expr.match.CHILD.test(match[0])) {
                        return true;
                    }
                    return match;
                },POS: function(match) {
                    match.unshift(true);
                    return match;
                }},filters: {enabled: function(elem) {
                    return elem.disabled === false && elem.type !== "hidden";
                },disabled: function(elem) {
                    return elem.disabled === true;
                },checked: function(elem) {
                    return elem.checked === true;
                },selected: function(elem) {
                    if (elem.parentNode) {
                        elem.parentNode.selectedIndex;
                    }
                    return elem.selected === true;
                },parent: function(elem) {
                    return !!elem.firstChild;
                },empty: function(elem) {
                    return !elem.firstChild;
                },has: function(elem, i, match) {
                    return !!Sizzle(match[3], elem).length;
                },header: function(elem) {
                    return (/h\d/i).test(elem.nodeName);
                },text: function(elem) {
                    var attr = elem.getAttribute("type"), type = elem.type;
                    return elem.nodeName.toLowerCase() === "input" && "text" === type && (attr === type || attr === null);
                },radio: function(elem) {
                    return elem.nodeName.toLowerCase() === "input" && "radio" === elem.type;
                },checkbox: function(elem) {
                    return elem.nodeName.toLowerCase() === "input" && "checkbox" === elem.type;
                },file: function(elem) {
                    return elem.nodeName.toLowerCase() === "input" && "file" === elem.type;
                },password: function(elem) {
                    return elem.nodeName.toLowerCase() === "input" && "password" === elem.type;
                },submit: function(elem) {
                    var name = elem.nodeName.toLowerCase();
                    return (name === "input" || name === "button") && "submit" === elem.type;
                },image: function(elem) {
                    return elem.nodeName.toLowerCase() === "input" && "image" === elem.type;
                },reset: function(elem) {
                    var name = elem.nodeName.toLowerCase();
                    return (name === "input" || name === "button") && "reset" === elem.type;
                },button: function(elem) {
                    var name = elem.nodeName.toLowerCase();
                    return name === "input" && "button" === elem.type || name === "button";
                },input: function(elem) {
                    return (/input|select|textarea|button/i).test(elem.nodeName);
                },focus: function(elem) {
                    return elem === elem.ownerDocument.activeElement;
                }},setFilters: {first: function(elem, i) {
                    return i === 0;
                },last: function(elem, i, match, array) {
                    return i === array.length - 1;
                },even: function(elem, i) {
                    return i % 2 === 0;
                },odd: function(elem, i) {
                    return i % 2 === 1;
                },lt: function(elem, i, match) {
                    return i < match[3] - 0;
                },gt: function(elem, i, match) {
                    return i > match[3] - 0;
                },nth: function(elem, i, match) {
                    return match[3] - 0 === i;
                },eq: function(elem, i, match) {
                    return match[3] - 0 === i;
                }},filter: {PSEUDO: function(elem, match, i, array) {
                    var name = match[1], filter = Expr.filters[name];
                    if (filter) {
                        return filter(elem, i, match, array);
                    } else if (name === "contains") {
                        return (elem.textContent || elem.innerText || getText([elem]) || "").indexOf(match[3]) >= 0;
                    } else if (name === "not") {
                        var not = match[3];
                        for (var j = 0, l = not.length; j < l; j++) {
                            if (not[j] === elem) {
                                return false;
                            }
                        }
                        return true;
                    } else {
                        Sizzle.error(name);
                    }
                },CHILD: function(elem, match) {
                    var first, last, doneName, parent, cache, count, diff, type = match[1], node = elem;
                    switch (type) {
                        case "only":
                        case "first":
                            while ((node = node.previousSibling)) {
                                if (node.nodeType === 1) {
                                    return false;
                                }
                            }
                            if (type === "first") {
                                return true;
                            }
                            node = elem;
                        case "last":
                            while ((node = node.nextSibling)) {
                                if (node.nodeType === 1) {
                                    return false;
                                }
                            }
                            return true;
                        case "nth":
                            first = match[2];
                            last = match[3];
                            if (first === 1 && last === 0) {
                                return true;
                            }
                            doneName = match[0];
                            parent = elem.parentNode;
                            if (parent && (parent[expando] !== doneName || !elem.nodeIndex)) {
                                count = 0;
                                for (node = parent.firstChild; node; node = node.nextSibling) {
                                    if (node.nodeType === 1) {
                                        node.nodeIndex = ++count;
                                    }
                                }
                                parent[expando] = doneName;
                            }
                            diff = elem.nodeIndex - last;
                            if (first === 0) {
                                return diff === 0;
                            } else {
                                return (diff % first === 0 && diff / first >= 0);
                            }
                    }
                },ID: function(elem, match) {
                    return elem.nodeType === 1 && elem.getAttribute("id") === match;
                },TAG: function(elem, match) {
                    return (match === "*" && elem.nodeType === 1) || !!elem.nodeName && elem.nodeName.toLowerCase() === match;
                },CLASS: function(elem, match) {
                    return (" " + (elem.className || elem.getAttribute("class")) + " ").indexOf(match) > -1;
                },ATTR: function(elem, match) {
                    var name = match[1], result = Sizzle.attr ? Sizzle.attr(elem, name) : Expr.attrHandle[name] ? Expr.attrHandle[name](elem) : elem[name] != null ? elem[name] : elem.getAttribute(name), value = result + "", type = match[2], check = match[4];
                    return result == null ? type === "!=" : !type && Sizzle.attr ? result != null : type === "=" ? value === check : type === "*=" ? value.indexOf(check) >= 0 : type === "~=" ? (" " + value + " ").indexOf(check) >= 0 : !check ? value && result !== false : type === "!=" ? value !== check : type === "^=" ? value.indexOf(check) === 0 : type === "$=" ? value.substr(value.length - check.length) === check : type === "|=" ? value === check || value.substr(0, check.length + 1) === check + "-" : false;
                },POS: function(elem, match, i, array) {
                    var name = match[2], filter = Expr.setFilters[name];
                    if (filter) {
                        return filter(elem, i, match, array);
                    }
                }}};
        var origPOS = Expr.match.POS, fescape = function(all, num) {
            return "\\" + (num - 0 + 1);
        };
        for (var type in Expr.match) {
            Expr.match[type] = new RegExp(Expr.match[type].source + (/(?![^\[]*\])(?![^\(]*\))/.source));
            Expr.leftMatch[type] = new RegExp(/(^(?:.|\r|\n)*?)/.source + Expr.match[type].source.replace(/\\(\d+)/g, fescape));
        }
        var makeArray = function(array, results) {
            array = Array.prototype.slice.call(array, 0);
            if (results) {
                results.push.apply(results, array);
                return results;
            }
            return array;
        };
        try {
            Array.prototype.slice.call(document.documentElement.childNodes, 0)[0].nodeType;
        } catch (e) {
            makeArray = function(array, results) {
                var i = 0, ret = results || [];
                if (toString.call(array) === "[object Array]") {
                    Array.prototype.push.apply(ret, array);
                } else {
                    if (typeof array.length === "number") {
                        for (var l = array.length; i < l; i++) {
                            ret.push(array[i]);
                        }
                    } else {
                        for (; array[i]; i++) {
                            ret.push(array[i]);
                        }
                    }
                }
                return ret;
            };
        }
        var sortOrder, siblingCheck;
        if (document.documentElement.compareDocumentPosition) {
            sortOrder = function(a, b) {
                if (a === b) {
                    hasDuplicate = true;
                    return 0;
                }
                if (!a.compareDocumentPosition || !b.compareDocumentPosition) {
                    return a.compareDocumentPosition ? -1 : 1;
                }
                return a.compareDocumentPosition(b) & 4 ? -1 : 1;
            };
        } else {
            sortOrder = function(a, b) {
                if (a === b) {
                    hasDuplicate = true;
                    return 0;
                } else if (a.sourceIndex && b.sourceIndex) {
                    return a.sourceIndex - b.sourceIndex;
                }
                var al, bl, ap = [], bp = [], aup = a.parentNode, bup = b.parentNode, cur = aup;
                if (aup === bup) {
                    return siblingCheck(a, b);
                } else if (!aup) {
                    return -1;
                } else if (!bup) {
                    return 1;
                }
                while (cur) {
                    ap.unshift(cur);
                    cur = cur.parentNode;
                }
                cur = bup;
                while (cur) {
                    bp.unshift(cur);
                    cur = cur.parentNode;
                }
                al = ap.length;
                bl = bp.length;
                for (var i = 0; i < al && i < bl; i++) {
                    if (ap[i] !== bp[i]) {
                        return siblingCheck(ap[i], bp[i]);
                    }
                }
                return i === al ? siblingCheck(a, bp[i], -1) : siblingCheck(ap[i], b, 1);
            };
            siblingCheck = function(a, b, ret) {
                if (a === b) {
                    return ret;
                }
                var cur = a.nextSibling;
                while (cur) {
                    if (cur === b) {
                        return -1;
                    }
                    cur = cur.nextSibling;
                }
                return 1;
            };
        }
        (function() {
            var form = document.createElement("div"), id = "script" + (new Date()).getTime(), root = document.documentElement;
            form.innerHTML = "<a name='" + id + "'/>";
            root.insertBefore(form, root.firstChild);
            if (document.getElementById(id)) {
                Expr.find.ID = function(match, context, isXML) {
                    if (typeof context.getElementById !== "undefined" && !isXML) {
                        var m = context.getElementById(match[1]);
                        return m ? m.id === match[1] || typeof m.getAttributeNode !== "undefined" && m.getAttributeNode("id").nodeValue === match[1] ? [m] : undefined : [];
                    }
                };
                Expr.filter.ID = function(elem, match) {
                    var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
                    return elem.nodeType === 1 && node && node.nodeValue === match;
                };
            }
            root.removeChild(form);
            root = form = null;
        })();
        (function() {
            var div = document.createElement("div");
            div.appendChild(document.createComment(""));
            if (div.getElementsByTagName("*").length > 0) {
                Expr.find.TAG = function(match, context) {
                    var results = context.getElementsByTagName(match[1]);
                    if (match[1] === "*") {
                        var tmp = [];
                        for (var i = 0; results[i]; i++) {
                            if (results[i].nodeType === 1) {
                                tmp.push(results[i]);
                            }
                        }
                        results = tmp;
                    }
                    return results;
                };
            }
            div.innerHTML = "<a href='#'></a>";
            if (div.firstChild && typeof div.firstChild.getAttribute !== "undefined" && div.firstChild.getAttribute("href") !== "#") {
                Expr.attrHandle.href = function(elem) {
                    return elem.getAttribute("href", 2);
                };
            }
            div = null;
        })();
        if (document.querySelectorAll) {
            (function() {
                var oldSizzle = Sizzle, div = document.createElement("div"), id = "__sizzle__";
                div.innerHTML = "<p class='TEST'></p>";
                if (div.querySelectorAll && div.querySelectorAll(".TEST").length === 0) {
                    return;
                }
                Sizzle = function(query, context, extra, seed) {
                    context = context || document;
                    if (!seed && !Sizzle.isXML(context)) {
                        var match = /^(\w+$)|^\.([\w\-]+$)|^#([\w\-]+$)/.exec(query);
                        if (match && (context.nodeType === 1 || context.nodeType === 9)) {
                            if (match[1]) {
                                return makeArray(context.getElementsByTagName(query), extra);
                            } else if (match[2] && Expr.find.CLASS && context.getElementsByClassName) {
                                return makeArray(context.getElementsByClassName(match[2]), extra);
                            }
                        }
                        if (context.nodeType === 9) {
                            if (query === "body" && context.body) {
                                return makeArray([context.body], extra);
                            } else if (match && match[3]) {
                                var elem = context.getElementById(match[3]);
                                if (elem && elem.parentNode) {
                                    if (elem.id === match[3]) {
                                        return makeArray([elem], extra);
                                    }
                                } else {
                                    return makeArray([], extra);
                                }
                            }
                            try {
                                return makeArray(context.querySelectorAll(query), extra);
                            } catch (qsaError) {
                            }
                        } else if (context.nodeType === 1 && context.nodeName.toLowerCase() !== "object") {
                            var oldContext = context, old = context.getAttribute("id"), nid = old || id, hasParent = context.parentNode, relativeHierarchySelector = /^\s*[+~]/.test(query);
                            if (!old) {
                                context.setAttribute("id", nid);
                            } else {
                                nid = nid.replace(/'/g, "\\$&");
                            }
                            if (relativeHierarchySelector && hasParent) {
                                context = context.parentNode;
                            }
                            try {
                                if (!relativeHierarchySelector || hasParent) {
                                    return makeArray(context.querySelectorAll("[id='" + nid + "'] " + query), extra);
                                }
                            } catch (pseudoError) {
                            }finally {
                                if (!old) {
                                    oldContext.removeAttribute("id");
                                }
                            }
                        }
                    }
                    return oldSizzle(query, context, extra, seed);
                };
                for (var prop in oldSizzle) {
                    Sizzle[prop] = oldSizzle[prop];
                }
                div = null;
            })();
        }
        (function() {
            var html = document.documentElement, matches = html.matchesSelector || html.mozMatchesSelector || html.webkitMatchesSelector || html.msMatchesSelector;
            if (matches) {
                var disconnectedMatch = !matches.call(document.createElement("div"), "div"), pseudoWorks = false;
                try {
                    matches.call(document.documentElement, "[test!='']:sizzle");
                } catch (pseudoError) {
                    pseudoWorks = true;
                }
                Sizzle.matchesSelector = function(node, expr) {
                    expr = expr.replace(/\=\s*([^'"\]]*)\s*\]/g, "='$1']");
                    if (!Sizzle.isXML(node)) {
                        try {
                            if (pseudoWorks || !Expr.match.PSEUDO.test(expr) && !/!=/.test(expr)) {
                                var ret = matches.call(node, expr);
                                if (ret || !disconnectedMatch || node.document && node.document.nodeType !== 11) {
                                    return ret;
                                }
                            }
                        } catch (e) {
                        }
                    }
                    return Sizzle(expr, null, null, [node]).length > 0;
                };
            }
        })();
        (function() {
            var div = document.createElement("div");
            div.innerHTML = "<div class='test e'></div><div class='test'></div>";
            if (!div.getElementsByClassName || div.getElementsByClassName("e").length === 0) {
                return;
            }
            div.lastChild.className = "e";
            if (div.getElementsByClassName("e").length === 1) {
                return;
            }
            Expr.order.splice(1, 0, "CLASS");
            Expr.find.CLASS = function(match, context, isXML) {
                if (typeof context.getElementsByClassName !== "undefined" && !isXML) {
                    return context.getElementsByClassName(match[1]);
                }
            };
            div = null;
        })();
        function dirNodeCheck(dir, cur, doneName, checkSet, nodeCheck, isXML) {
            for (var i = 0, l = checkSet.length; i < l; i++) {
                var elem = checkSet[i];
                if (elem) {
                    var match = false;
                    elem = elem[dir];
                    while (elem) {
                        if (elem[expando] === doneName) {
                            match = checkSet[elem.sizset];
                            break;
                        }
                        if (elem.nodeType === 1 && !isXML) {
                            elem[expando] = doneName;
                            elem.sizset = i;
                        }
                        if (elem.nodeName.toLowerCase() === cur) {
                            match = elem;
                            break;
                        }
                        elem = elem[dir];
                    }
                    checkSet[i] = match;
                }
            }
        }
        function dirCheck(dir, cur, doneName, checkSet, nodeCheck, isXML) {
            for (var i = 0, l = checkSet.length; i < l; i++) {
                var elem = checkSet[i];
                if (elem) {
                    var match = false;
                    elem = elem[dir];
                    while (elem) {
                        if (elem[expando] === doneName) {
                            match = checkSet[elem.sizset];
                            break;
                        }
                        if (elem.nodeType === 1) {
                            if (!isXML) {
                                elem[expando] = doneName;
                                elem.sizset = i;
                            }
                            if (typeof cur !== "string") {
                                if (elem === cur) {
                                    match = true;
                                    break;
                                }
                            } else if (Sizzle.filter(cur, [elem]).length > 0) {
                                match = elem;
                                break;
                            }
                        }
                        elem = elem[dir];
                    }
                    checkSet[i] = match;
                }
            }
        }
        if (document.documentElement.contains) {
            Sizzle.contains = function(a, b) {
                return a !== b && (a.contains ? a.contains(b) : true);
            };
        } else if (document.documentElement.compareDocumentPosition) {
            Sizzle.contains = function(a, b) {
                return !!(a.compareDocumentPosition(b) & 16);
            };
        } else {
            Sizzle.contains = function() {
                return false;
            };
        }
        Sizzle.isXML = function(elem) {
            var documentElement = (elem ? elem.ownerDocument || elem : 0).documentElement;
            return documentElement ? documentElement.nodeName !== "HTML" : false;
        };
        var posProcess = function(selector, context, seed) {
            var match, tmpSet = [], later = "", root = context.nodeType ? [context] : context;
            while ((match = Expr.match.PSEUDO.exec(selector))) {
                later += match[0];
                selector = selector.replace(Expr.match.PSEUDO, "");
            }
            selector = Expr.relative[selector] ? selector + "*" : selector;
            for (var i = 0, l = root.length; i < l; i++) {
                Sizzle(selector, root[i], tmpSet, seed);
            }
            return Sizzle.filter(later, tmpSet);
        };
        Sizzle.attr = jQuery.attr;
        Sizzle.selectors.attrMap = {};
        jQuery.find = Sizzle;
        jQuery.expr = Sizzle.selectors;
        jQuery.expr[":"] = jQuery.expr.filters;
        jQuery.unique = Sizzle.uniqueSort;
        jQuery.text = Sizzle.getText;
        jQuery.isXMLDoc = Sizzle.isXML;
        jQuery.contains = Sizzle.contains;
    })();
    var runtil = /Until$/, rparentsprev = /^(?:parents|prevUntil|prevAll)/, rmultiselector = /,/, isSimple = /^.[^:#\[\.,]*$/, slice = Array.prototype.slice, POS = jQuery.expr.match.POS, guaranteedUnique = {children: true,contents: true,next: true,prev: true};
    jQuery.fn.extend({find: function(selector) {
            var self = this, i, l;
            if (typeof selector !== "string") {
                return jQuery(selector).filter(function() {
                    for (i = 0, l = self.length; i < l; i++) {
                        if (jQuery.contains(self[i], this)) {
                            return true;
                        }
                    }
                });
            }
            var ret = this.pushStack("", "find", selector), length, n, r;
            for (i = 0, l = this.length; i < l; i++) {
                length = ret.length;
                jQuery.find(selector, this[i], ret);
                if (i > 0) {
                    for (n = length; n < ret.length; n++) {
                        for (r = 0; r < length; r++) {
                            if (ret[r] === ret[n]) {
                                ret.splice(n--, 1);
                                break;
                            }
                        }
                    }
                }
            }
            return ret;
        },has: function(target) {
            var targets = jQuery(target);
            return this.filter(function() {
                for (var i = 0, l = targets.length; i < l; i++) {
                    if (jQuery.contains(this, targets[i])) {
                        return true;
                    }
                }
            });
        },not: function(selector) {
            return this.pushStack(winnow(this, selector, false), "not", selector);
        },filter: function(selector) {
            return this.pushStack(winnow(this, selector, true), "filter", selector);
        },is: function(selector) {
            return !!selector && (typeof selector === "string" ? POS.test(selector) ? jQuery(selector, this.context).index(this[0]) >= 0 : jQuery.filter(selector, this).length > 0 : this.filter(selector).length > 0);
        },closest: function(selectors, context) {
            var ret = [], i, l, cur = this[0];
            if (jQuery.isArray(selectors)) {
                var level = 1;
                while (cur && cur.ownerDocument && cur !== context) {
                    for (i = 0; i < selectors.length; i++) {
                        if (jQuery(cur).is(selectors[i])) {
                            ret.push({selector: selectors[i],elem: cur,level: level});
                        }
                    }
                    cur = cur.parentNode;
                    level++;
                }
                return ret;
            }
            var pos = POS.test(selectors) || typeof selectors !== "string" ? jQuery(selectors, context || this.context) : 0;
            for (i = 0, l = this.length; i < l; i++) {
                cur = this[i];
                while (cur) {
                    if (pos ? pos.index(cur) > -1 : jQuery.find.matchesSelector(cur, selectors)) {
                        ret.push(cur);
                        break;
                    } else {
                        cur = cur.parentNode;
                        if (!cur || !cur.ownerDocument || cur === context || cur.nodeType === 11) {
                            break;
                        }
                    }
                }
            }
            ret = ret.length > 1 ? jQuery.unique(ret) : ret;
            return this.pushStack(ret, "closest", selectors);
        },index: function(elem) {
            if (!elem) {
                return (this[0] && this[0].parentNode) ? this.prevAll().length : -1;
            }
            if (typeof elem === "string") {
                return jQuery.inArray(this[0], jQuery(elem));
            }
            return jQuery.inArray(elem.jquery ? elem[0] : elem, this);
        },add: function(selector, context) {
            var set = typeof selector === "string" ? jQuery(selector, context) : jQuery.makeArray(selector && selector.nodeType ? [selector] : selector), all = jQuery.merge(this.get(), set);
            return this.pushStack(isDisconnected(set[0]) || isDisconnected(all[0]) ? all : jQuery.unique(all));
        },andSelf: function() {
            return this.add(this.prevObject);
        }});
    function isDisconnected(node) {
        return !node || !node.parentNode || node.parentNode.nodeType === 11;
    }
    jQuery.each({parent: function(elem) {
            var parent = elem.parentNode;
            return parent && parent.nodeType !== 11 ? parent : null;
        },parents: function(elem) {
            return jQuery.dir(elem, "parentNode");
        },parentsUntil: function(elem, i, until) {
            return jQuery.dir(elem, "parentNode", until);
        },next: function(elem) {
            return jQuery.nth(elem, 2, "nextSibling");
        },prev: function(elem) {
            return jQuery.nth(elem, 2, "previousSibling");
        },nextAll: function(elem) {
            return jQuery.dir(elem, "nextSibling");
        },prevAll: function(elem) {
            return jQuery.dir(elem, "previousSibling");
        },nextUntil: function(elem, i, until) {
            return jQuery.dir(elem, "nextSibling", until);
        },prevUntil: function(elem, i, until) {
            return jQuery.dir(elem, "previousSibling", until);
        },siblings: function(elem) {
            return jQuery.sibling(elem.parentNode.firstChild, elem);
        },children: function(elem) {
            return jQuery.sibling(elem.firstChild);
        },contents: function(elem) {
            return jQuery.nodeName(elem, "iframe") ? elem.contentDocument || elem.contentWindow.document : jQuery.makeArray(elem.childNodes);
        }}, function(name, fn) {
        jQuery.fn[name] = function(until, selector) {
            var ret = jQuery.map(this, fn, until);
            if (!runtil.test(name)) {
                selector = until;
            }
            if (selector && typeof selector === "string") {
                ret = jQuery.filter(selector, ret);
            }
            ret = this.length > 1 && !guaranteedUnique[name] ? jQuery.unique(ret) : ret;
            if ((this.length > 1 || rmultiselector.test(selector)) && rparentsprev.test(name)) {
                ret = ret.reverse();
            }
            return this.pushStack(ret, name, slice.call(arguments).join(","));
        };
    });
    jQuery.extend({filter: function(expr, elems, not) {
            if (not) {
                expr = ":not(" + expr + ")";
            }
            return elems.length === 1 ? jQuery.find.matchesSelector(elems[0], expr) ? [elems[0]] : [] : jQuery.find.matches(expr, elems);
        },dir: function(elem, dir, until) {
            var matched = [], cur = elem[dir];
            while (cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery(cur).is(until))) {
                if (cur.nodeType === 1) {
                    matched.push(cur);
                }
                cur = cur[dir];
            }
            return matched;
        },nth: function(cur, result, dir, elem) {
            result = result || 1;
            var num = 0;
            for (; cur; cur = cur[dir]) {
                if (cur.nodeType === 1 && ++num === result) {
                    break;
                }
            }
            return cur;
        },sibling: function(n, elem) {
            var r = [];
            for (; n; n = n.nextSibling) {
                if (n.nodeType === 1 && n !== elem) {
                    r.push(n);
                }
            }
            return r;
        }});
    function winnow(elements, qualifier, keep) {
        qualifier = qualifier || 0;
        if (jQuery.isFunction(qualifier)) {
            return jQuery.grep(elements, function(elem, i) {
                var retVal = !!qualifier.call(elem, i, elem);
                return retVal === keep;
            });
        } else if (qualifier.nodeType) {
            return jQuery.grep(elements, function(elem, i) {
                return (elem === qualifier) === keep;
            });
        } else if (typeof qualifier === "string") {
            var filtered = jQuery.grep(elements, function(elem) {
                return elem.nodeType === 1;
            });
            if (isSimple.test(qualifier)) {
                return jQuery.filter(qualifier, filtered, !keep);
            } else {
                qualifier = jQuery.filter(qualifier, filtered);
            }
        }
        return jQuery.grep(elements, function(elem, i) {
            return (jQuery.inArray(elem, qualifier) >= 0) === keep;
        });
    }
    function createSafeFragment(document) {
        var list = nodeNames.split("|"), safeFrag = document.createDocumentFragment();
        if (safeFrag.createElement) {
            while (list.length) {
                safeFrag.createElement(list.pop());
            }
        }
        return safeFrag;
    }
    var nodeNames = "abbr|article|aside|audio|canvas|datalist|details|figcaption|figure|footer|" + "header|hgroup|mark|meter|nav|output|progress|section|summary|time|video", rinlinejQuery = / jQuery\d+="(?:\d+|null)"/g, rleadingWhitespace = /^\s+/, rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/ig, rtagName = /<([\w:]+)/, rtbody = /<tbody/i, rhtml = /<|&#?\w+;/, rnoInnerhtml = /<(?:script|style)/i, rnocache = /<(?:script|object|embed|option|style)/i, rnoshimcache = new RegExp("<(?:" + nodeNames + ")", "i"), rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i, rscriptType = /\/(java|ecma)script/i, rcleanScript = /^\s*<!(?:\[CDATA\[|\-\-)/, wrapMap = {option: [1, "<select multiple='multiple'>", "</select>"],legend: [1, "<fieldset>", "</fieldset>"],thead: [1, "<table>", "</table>"],tr: [2, "<table><tbody>", "</tbody></table>"],td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],col: [2, "<table><tbody></tbody><colgroup>", "</colgroup></table>"],area: [1, "<map>", "</map>"],_default: [0, "", ""]}, safeFragment = createSafeFragment(document);
    wrapMap.optgroup = wrapMap.option;
    wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
    wrapMap.th = wrapMap.td;
    if (!jQuery.support.htmlSerialize) {
        wrapMap._default = [1, "div<div>", "</div>"];
    }
    jQuery.fn.extend({text: function(text) {
            if (jQuery.isFunction(text)) {
                return this.each(function(i) {
                    var self = jQuery(this);
                    self.text(text.call(this, i, self.text()));
                });
            }
            if (typeof text !== "object" && text !== undefined) {
                return this.empty().append((this[0] && this[0].ownerDocument || document).createTextNode(text));
            }
            return jQuery.text(this);
        },wrapAll: function(html) {
            if (jQuery.isFunction(html)) {
                return this.each(function(i) {
                    jQuery(this).wrapAll(html.call(this, i));
                });
            }
            if (this[0]) {
                var wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);
                if (this[0].parentNode) {
                    wrap.insertBefore(this[0]);
                }
                wrap.map(function() {
                    var elem = this;
                    while (elem.firstChild && elem.firstChild.nodeType === 1) {
                        elem = elem.firstChild;
                    }
                    return elem;
                }).append(this);
            }
            return this;
        },wrapInner: function(html) {
            if (jQuery.isFunction(html)) {
                return this.each(function(i) {
                    jQuery(this).wrapInner(html.call(this, i));
                });
            }
            return this.each(function() {
                var self = jQuery(this), contents = self.contents();
                if (contents.length) {
                    contents.wrapAll(html);
                } else {
                    self.append(html);
                }
            });
        },wrap: function(html) {
            var isFunction = jQuery.isFunction(html);
            return this.each(function(i) {
                jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
            });
        },unwrap: function() {
            return this.parent().each(function() {
                if (!jQuery.nodeName(this, "body")) {
                    jQuery(this).replaceWith(this.childNodes);
                }
            }).end();
        },append: function() {
            return this.domManip(arguments, true, function(elem) {
                if (this.nodeType === 1) {
                    this.appendChild(elem);
                }
            });
        },prepend: function() {
            return this.domManip(arguments, true, function(elem) {
                if (this.nodeType === 1) {
                    this.insertBefore(elem, this.firstChild);
                }
            });
        },before: function() {
            if (this[0] && this[0].parentNode) {
                return this.domManip(arguments, false, function(elem) {
                    this.parentNode.insertBefore(elem, this);
                });
            } else if (arguments.length) {
                var set = jQuery.clean(arguments);
                set.push.apply(set, this.toArray());
                return this.pushStack(set, "before", arguments);
            }
        },after: function() {
            if (this[0] && this[0].parentNode) {
                return this.domManip(arguments, false, function(elem) {
                    this.parentNode.insertBefore(elem, this.nextSibling);
                });
            } else if (arguments.length) {
                var set = this.pushStack(this, "after", arguments);
                set.push.apply(set, jQuery.clean(arguments));
                return set;
            }
        },remove: function(selector, keepData) {
            for (var i = 0, elem; (elem = this[i]) != null; i++) {
                if (!selector || jQuery.filter(selector, [elem]).length) {
                    if (!keepData && elem.nodeType === 1) {
                        jQuery.cleanData(elem.getElementsByTagName("*"));
                        jQuery.cleanData([elem]);
                    }
                    if (elem.parentNode) {
                        elem.parentNode.removeChild(elem);
                    }
                }
            }
            return this;
        },empty: function() {
            for (var i = 0, elem; (elem = this[i]) != null; i++) {
                if (elem.nodeType === 1) {
                    jQuery.cleanData(elem.getElementsByTagName("*"));
                }
                while (elem.firstChild) {
                    elem.removeChild(elem.firstChild);
                }
            }
            return this;
        },clone: function(dataAndEvents, deepDataAndEvents) {
            dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
            deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
            return this.map(function() {
                return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
            });
        },html: function(value) {
            if (value === undefined) {
                return this[0] && this[0].nodeType === 1 ? this[0].innerHTML.replace(rinlinejQuery, "") : null;
            } else if (typeof value === "string" && !rnoInnerhtml.test(value) && (jQuery.support.leadingWhitespace || !rleadingWhitespace.test(value)) && !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {
                value = value.replace(rxhtmlTag, "<$1></$2>");
                try {
                    for (var i = 0, l = this.length; i < l; i++) {
                        if (this[i].nodeType === 1) {
                            jQuery.cleanData(this[i].getElementsByTagName("*"));
                            this[i].innerHTML = value;
                        }
                    }
                } catch (e) {
                    this.empty().append(value);
                }
            } else if (jQuery.isFunction(value)) {
                this.each(function(i) {
                    var self = jQuery(this);
                    self.html(value.call(this, i, self.html()));
                });
            } else {
                this.empty().append(value);
            }
            return this;
        },replaceWith: function(value) {
            if (this[0] && this[0].parentNode) {
                if (jQuery.isFunction(value)) {
                    return this.each(function(i) {
                        var self = jQuery(this), old = self.html();
                        self.replaceWith(value.call(this, i, old));
                    });
                }
                if (typeof value !== "string") {
                    value = jQuery(value).detach();
                }
                return this.each(function() {
                    var next = this.nextSibling, parent = this.parentNode;
                    jQuery(this).remove();
                    if (next) {
                        jQuery(next).before(value);
                    } else {
                        jQuery(parent).append(value);
                    }
                });
            } else {
                return this.length ? this.pushStack(jQuery(jQuery.isFunction(value) ? value() : value), "replaceWith", value) : this;
            }
        },detach: function(selector) {
            return this.remove(selector, true);
        },domManip: function(args, table, callback) {
            var results, first, fragment, parent, value = args[0], scripts = [];
            if (!jQuery.support.checkClone && arguments.length === 3 && typeof value === "string" && rchecked.test(value)) {
                return this.each(function() {
                    jQuery(this).domManip(args, table, callback, true);
                });
            }
            if (jQuery.isFunction(value)) {
                return this.each(function(i) {
                    var self = jQuery(this);
                    args[0] = value.call(this, i, table ? self.html() : undefined);
                    self.domManip(args, table, callback);
                });
            }
            if (this[0]) {
                parent = value && value.parentNode;
                if (jQuery.support.parentNode && parent && parent.nodeType === 11 && parent.childNodes.length === this.length) {
                    results = {fragment: parent};
                } else {
                    results = jQuery.buildFragment(args, this, scripts);
                }
                fragment = results.fragment;
                if (fragment.childNodes.length === 1) {
                    first = fragment = fragment.firstChild;
                } else {
                    first = fragment.firstChild;
                }
                if (first) {
                    table = table && jQuery.nodeName(first, "tr");
                    for (var i = 0, l = this.length, lastIndex = l - 1; i < l; i++) {
                        callback.call(table ? root(this[i], first) : this[i], results.cacheable || (l > 1 && i < lastIndex) ? jQuery.clone(fragment, true, true) : fragment);
                    }
                }
                if (scripts.length) {
                    jQuery.each(scripts, evalScript);
                }
            }
            return this;
        }});
    function root(elem, cur) {
        return jQuery.nodeName(elem, "table") ? (elem.getElementsByTagName("tbody")[0] || elem.appendChild(elem.ownerDocument.createElement("tbody"))) : elem;
    }
    function cloneCopyEvent(src, dest) {
        if (dest.nodeType !== 1 || !jQuery.hasData(src)) {
            return;
        }
        var type, i, l, oldData = jQuery._data(src), curData = jQuery._data(dest, oldData), events = oldData.events;
        if (events) {
            delete curData.handle;
            curData.events = {};
            for (type in events) {
                for (i = 0, l = events[type].length; i < l; i++) {
                    jQuery.event.add(dest, type + (events[type][i].namespace ? "." : "") + events[type][i].namespace, events[type][i], events[type][i].data);
                }
            }
        }
        if (curData.data) {
            curData.data = jQuery.extend({}, curData.data);
        }
    }
    function cloneFixAttributes(src, dest) {
        var nodeName;
        if (dest.nodeType !== 1) {
            return;
        }
        if (dest.clearAttributes) {
            dest.clearAttributes();
        }
        if (dest.mergeAttributes) {
            dest.mergeAttributes(src);
        }
        nodeName = dest.nodeName.toLowerCase();
        if (nodeName === "object") {
            dest.outerHTML = src.outerHTML;
        } else if (nodeName === "input" && (src.type === "checkbox" || src.type === "radio")) {
            if (src.checked) {
                dest.defaultChecked = dest.checked = src.checked;
            }
            if (dest.value !== src.value) {
                dest.value = src.value;
            }
        } else if (nodeName === "option") {
            dest.selected = src.defaultSelected;
        } else if (nodeName === "input" || nodeName === "textarea") {
            dest.defaultValue = src.defaultValue;
        }
        dest.removeAttribute(jQuery.expando);
    }
    jQuery.buildFragment = function(args, nodes, scripts) {
        var fragment, cacheable, cacheresults, doc, first = args[0];
        if (nodes && nodes[0]) {
            doc = nodes[0].ownerDocument || nodes[0];
        }
        if (!doc.createDocumentFragment) {
            doc = document;
        }
        if (args.length === 1 && typeof first === "string" && first.length < 512 && doc === document && first.charAt(0) === "<" && !rnocache.test(first) && (jQuery.support.checkClone || !rchecked.test(first)) && (jQuery.support.html5Clone || !rnoshimcache.test(first))) {
            cacheable = true;
            cacheresults = jQuery.fragments[first];
            if (cacheresults && cacheresults !== 1) {
                fragment = cacheresults;
            }
        }
        if (!fragment) {
            fragment = doc.createDocumentFragment();
            jQuery.clean(args, doc, fragment, scripts);
        }
        if (cacheable) {
            jQuery.fragments[first] = cacheresults ? fragment : 1;
        }
        return {fragment: fragment,cacheable: cacheable};
    };
    jQuery.fragments = {};
    jQuery.each({appendTo: "append",prependTo: "prepend",insertBefore: "before",insertAfter: "after",replaceAll: "replaceWith"}, function(name, original) {
        jQuery.fn[name] = function(selector) {
            var ret = [], insert = jQuery(selector), parent = this.length === 1 && this[0].parentNode;
            if (parent && parent.nodeType === 11 && parent.childNodes.length === 1 && insert.length === 1) {
                insert[original](this[0]);
                return this;
            } else {
                for (var i = 0, l = insert.length; i < l; i++) {
                    var elems = (i > 0 ? this.clone(true) : this).get();
                    jQuery(insert[i])[original](elems);
                    ret = ret.concat(elems);
                }
                return this.pushStack(ret, name, insert.selector);
            }
        };
    });
    function getAll(elem) {
        if (typeof elem.getElementsByTagName !== "undefined") {
            return elem.getElementsByTagName("*");
        } else if (typeof elem.querySelectorAll !== "undefined") {
            return elem.querySelectorAll("*");
        } else {
            return [];
        }
    }
    function fixDefaultChecked(elem) {
        if (elem.type === "checkbox" || elem.type === "radio") {
            elem.defaultChecked = elem.checked;
        }
    }
    function findInputs(elem) {
        var nodeName = (elem.nodeName || "").toLowerCase();
        if (nodeName === "input") {
            fixDefaultChecked(elem);
        } else if (nodeName !== "script" && typeof elem.getElementsByTagName !== "undefined") {
            jQuery.grep(elem.getElementsByTagName("input"), fixDefaultChecked);
        }
    }
    function shimCloneNode(elem) {
        var div = document.createElement("div");
        safeFragment.appendChild(div);
        div.innerHTML = elem.outerHTML;
        return div.firstChild;
    }
    jQuery.extend({clone: function(elem, dataAndEvents, deepDataAndEvents) {
            var srcElements, destElements, i, clone = jQuery.support.html5Clone || !rnoshimcache.test("<" + elem.nodeName) ? elem.cloneNode(true) : shimCloneNode(elem);
            if ((!jQuery.support.noCloneEvent || !jQuery.support.noCloneChecked) && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
                cloneFixAttributes(elem, clone);
                srcElements = getAll(elem);
                destElements = getAll(clone);
                for (i = 0; srcElements[i]; ++i) {
                    if (destElements[i]) {
                        cloneFixAttributes(srcElements[i], destElements[i]);
                    }
                }
            }
            if (dataAndEvents) {
                cloneCopyEvent(elem, clone);
                if (deepDataAndEvents) {
                    srcElements = getAll(elem);
                    destElements = getAll(clone);
                    for (i = 0; srcElements[i]; ++i) {
                        cloneCopyEvent(srcElements[i], destElements[i]);
                    }
                }
            }
            srcElements = destElements = null;
            return clone;
        },clean: function(elems, context, fragment, scripts) {
            var checkScriptType;
            context = context || document;
            if (typeof context.createElement === "undefined") {
                context = context.ownerDocument || context[0] && context[0].ownerDocument || document;
            }
            var ret = [], j;
            for (var i = 0, elem; (elem = elems[i]) != null; i++) {
                if (typeof elem === "number") {
                    elem += "";
                }
                if (!elem) {
                    continue;
                }
                if (typeof elem === "string") {
                    if (!rhtml.test(elem)) {
                        elem = context.createTextNode(elem);
                    } else {
                        elem = elem.replace(rxhtmlTag, "<$1></$2>");
                        var tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase(), wrap = wrapMap[tag] || wrapMap._default, depth = wrap[0], div = context.createElement("div");
                        if (context === document) {
                            safeFragment.appendChild(div);
                        } else {
                            createSafeFragment(context).appendChild(div);
                        }
                        div.innerHTML = wrap[1] + elem + wrap[2];
                        while (depth--) {
                            div = div.lastChild;
                        }
                        if (!jQuery.support.tbody) {
                            var hasBody = rtbody.test(elem), tbody = tag === "table" && !hasBody ? div.firstChild && div.firstChild.childNodes : wrap[1] === "<table>" && !hasBody ? div.childNodes : [];
                            for (j = tbody.length - 1; j >= 0; --j) {
                                if (jQuery.nodeName(tbody[j], "tbody") && !tbody[j].childNodes.length) {
                                    tbody[j].parentNode.removeChild(tbody[j]);
                                }
                            }
                        }
                        if (!jQuery.support.leadingWhitespace && rleadingWhitespace.test(elem)) {
                            div.insertBefore(context.createTextNode(rleadingWhitespace.exec(elem)[0]), div.firstChild);
                        }
                        elem = div.childNodes;
                    }
                }
                var len;
                if (!jQuery.support.appendChecked) {
                    if (elem[0] && typeof (len = elem.length) === "number") {
                        for (j = 0; j < len; j++) {
                            findInputs(elem[j]);
                        }
                    } else {
                        findInputs(elem);
                    }
                }
                if (elem.nodeType) {
                    ret.push(elem);
                } else {
                    ret = jQuery.merge(ret, elem);
                }
            }
            if (fragment) {
                checkScriptType = function(elem) {
                    return !elem.type || rscriptType.test(elem.type);
                };
                for (i = 0; ret[i]; i++) {
                    if (scripts && jQuery.nodeName(ret[i], "script") && (!ret[i].type || ret[i].type.toLowerCase() === "text/javascript")) {
                        scripts.push(ret[i].parentNode ? ret[i].parentNode.removeChild(ret[i]) : ret[i]);
                    } else {
                        if (ret[i].nodeType === 1) {
                            var jsTags = jQuery.grep(ret[i].getElementsByTagName("script"), checkScriptType);
                            ret.splice.apply(ret, [i + 1, 0].concat(jsTags));
                        }
                        fragment.appendChild(ret[i]);
                    }
                }
            }
            return ret;
        },cleanData: function(elems) {
            var data, id, cache = jQuery.cache, special = jQuery.event.special, deleteExpando = jQuery.support.deleteExpando;
            for (var i = 0, elem; (elem = elems[i]) != null; i++) {
                if (elem.nodeName && jQuery.noData[elem.nodeName.toLowerCase()]) {
                    continue;
                }
                id = elem[jQuery.expando];
                if (id) {
                    data = cache[id];
                    if (data && data.events) {
                        for (var type in data.events) {
                            if (special[type]) {
                                jQuery.event.remove(elem, type);
                            } else {
                                jQuery.removeEvent(elem, type, data.handle);
                            }
                        }
                        if (data.handle) {
                            data.handle.elem = null;
                        }
                    }
                    if (deleteExpando) {
                        delete elem[jQuery.expando];
                    } else if (elem.removeAttribute) {
                        elem.removeAttribute(jQuery.expando);
                    }
                    delete cache[id];
                }
            }
        }});
    function evalScript(i, elem) {
        if (elem.src) {
            jQuery.ajax({url: elem.src,async: false,dataType: "script"});
        } else {
            jQuery.globalEval((elem.text || elem.textContent || elem.innerHTML || "").replace(rcleanScript, "/*$0*/"));
        }
        if (elem.parentNode) {
            elem.parentNode.removeChild(elem);
        }
    }
    var ralpha = /alpha\([^)]*\)/i, ropacity = /opacity=([^)]*)/, rupper = /([A-Z]|^ms)/g, rnumpx = /^-?\d+(?:px)?$/i, rnum = /^-?\d/, rrelNum = /^([\-+])=([\-+.\de]+)/, cssShow = {position: "absolute",visibility: "hidden",display: "block"}, cssWidth = ["Left", "Right"], cssHeight = ["Top", "Bottom"], curCSS, getComputedStyle, currentStyle;
    jQuery.fn.css = function(name, value) {
        if (arguments.length === 2 && value === undefined) {
            return this;
        }
        return jQuery.access(this, name, value, true, function(elem, name, value) {
            return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
        });
    };
    jQuery.extend({cssHooks: {opacity: {get: function(elem, computed) {
                    if (computed) {
                        var ret = curCSS(elem, "opacity", "opacity");
                        return ret === "" ? "1" : ret;
                    } else {
                        return elem.style.opacity;
                    }
                }}},cssNumber: {"fillOpacity": true,"fontWeight": true,"lineHeight": true,"opacity": true,"orphans": true,"widows": true,"zIndex": true,"zoom": true},cssProps: {"float": jQuery.support.cssFloat ? "cssFloat" : "styleFloat"},style: function(elem, name, value, extra) {
            if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
                return;
            }
            var ret, type, origName = jQuery.camelCase(name), style = elem.style, hooks = jQuery.cssHooks[origName];
            name = jQuery.cssProps[origName] || origName;
            if (value !== undefined) {
                type = typeof value;
                if (type === "string" && (ret = rrelNum.exec(value))) {
                    value = (+(ret[1] + 1) * +ret[2]) + parseFloat(jQuery.css(elem, name));
                    type = "number";
                }
                if (value == null || type === "number" && isNaN(value)) {
                    return;
                }
                if (type === "number" && !jQuery.cssNumber[origName]) {
                    value += "px";
                }
                if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value)) !== undefined) {
                    try {
                        style[name] = value;
                    } catch (e) {
                    }
                }
            } else {
                if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
                    return ret;
                }
                return style[name];
            }
        },css: function(elem, name, extra) {
            var ret, hooks;
            name = jQuery.camelCase(name);
            hooks = jQuery.cssHooks[name];
            name = jQuery.cssProps[name] || name;
            if (name === "cssFloat") {
                name = "float";
            }
            if (hooks && "get" in hooks && (ret = hooks.get(elem, true, extra)) !== undefined) {
                return ret;
            } else if (curCSS) {
                return curCSS(elem, name);
            }
        },swap: function(elem, options, callback) {
            var old = {};
            for (var name in options) {
                old[name] = elem.style[name];
                elem.style[name] = options[name];
            }
            callback.call(elem);
            for (name in options) {
                elem.style[name] = old[name];
            }
        }});
    jQuery.curCSS = jQuery.css;
    jQuery.each(["height", "width"], function(i, name) {
        jQuery.cssHooks[name] = {get: function(elem, computed, extra) {
                var val;
                if (computed) {
                    if (elem.offsetWidth !== 0) {
                        return getWH(elem, name, extra);
                    } else {
                        jQuery.swap(elem, cssShow, function() {
                            val = getWH(elem, name, extra);
                        });
                    }
                    return val;
                }
            },set: function(elem, value) {
                if (rnumpx.test(value)) {
                    value = parseFloat(value);
                    if (value >= 0) {
                        return value + "px";
                    }
                } else {
                    return value;
                }
            }};
    });
    if (!jQuery.support.opacity) {
        jQuery.cssHooks.opacity = {get: function(elem, computed) {
                return ropacity.test((computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "") ? (parseFloat(RegExp.$1) / 100) + "" : computed ? "1" : "";
            },set: function(elem, value) {
                var style = elem.style, currentStyle = elem.currentStyle, opacity = jQuery.isNumeric(value) ? "alpha(opacity=" + value * 100 + ")" : "", filter = currentStyle && currentStyle.filter || style.filter || "";
                style.zoom = 1;
                if (value >= 1 && jQuery.trim(filter.replace(ralpha, "")) === "") {
                    style.removeAttribute("filter");
                    if (currentStyle && !currentStyle.filter) {
                        return;
                    }
                }
                style.filter = ralpha.test(filter) ? filter.replace(ralpha, opacity) : filter + " " + opacity;
            }};
    }
    jQuery(function() {
        if (!jQuery.support.reliableMarginRight) {
            jQuery.cssHooks.marginRight = {get: function(elem, computed) {
                    var ret;
                    jQuery.swap(elem, {"display": "inline-block"}, function() {
                        if (computed) {
                            ret = curCSS(elem, "margin-right", "marginRight");
                        } else {
                            ret = elem.style.marginRight;
                        }
                    });
                    return ret;
                }};
        }
    });
    if (document.defaultView && document.defaultView.getComputedStyle) {
        getComputedStyle = function(elem, name) {
            var ret, defaultView, computedStyle;
            name = name.replace(rupper, "-$1").toLowerCase();
            if ((defaultView = elem.ownerDocument.defaultView) && (computedStyle = defaultView.getComputedStyle(elem, null))) {
                ret = computedStyle.getPropertyValue(name);
                if (ret === "" && !jQuery.contains(elem.ownerDocument.documentElement, elem)) {
                    ret = jQuery.style(elem, name);
                }
            }
            return ret;
        };
    }
    if (document.documentElement.currentStyle) {
        currentStyle = function(elem, name) {
            var left, rsLeft, uncomputed, ret = elem.currentStyle && elem.currentStyle[name], style = elem.style;
            if (ret === null && style && (uncomputed = style[name])) {
                ret = uncomputed;
            }
            if (!rnumpx.test(ret) && rnum.test(ret)) {
                left = style.left;
                rsLeft = elem.runtimeStyle && elem.runtimeStyle.left;
                if (rsLeft) {
                    elem.runtimeStyle.left = elem.currentStyle.left;
                }
                style.left = name === "fontSize" ? "1em" : (ret || 0);
                ret = style.pixelLeft + "px";
                style.left = left;
                if (rsLeft) {
                    elem.runtimeStyle.left = rsLeft;
                }
            }
            return ret === "" ? "auto" : ret;
        };
    }
    curCSS = getComputedStyle || currentStyle;
    function getWH(elem, name, extra) {
        var val = name === "width" ? elem.offsetWidth : elem.offsetHeight, which = name === "width" ? cssWidth : cssHeight, i = 0, len = which.length;
        if (val > 0) {
            if (extra !== "border") {
                for (; i < len; i++) {
                    if (!extra) {
                        val -= parseFloat(jQuery.css(elem, "padding" + which[i])) || 0;
                    }
                    if (extra === "margin") {
                        val += parseFloat(jQuery.css(elem, extra + which[i])) || 0;
                    } else {
                        val -= parseFloat(jQuery.css(elem, "border" + which[i] + "Width")) || 0;
                    }
                }
            }
            return val + "px";
        }
        val = curCSS(elem, name, name);
        if (val < 0 || val == null) {
            val = elem.style[name] || 0;
        }
        val = parseFloat(val) || 0;
        if (extra) {
            for (; i < len; i++) {
                val += parseFloat(jQuery.css(elem, "padding" + which[i])) || 0;
                if (extra !== "padding") {
                    val += parseFloat(jQuery.css(elem, "border" + which[i] + "Width")) || 0;
                }
                if (extra === "margin") {
                    val += parseFloat(jQuery.css(elem, extra + which[i])) || 0;
                }
            }
        }
        return val + "px";
    }
    if (jQuery.expr && jQuery.expr.filters) {
        jQuery.expr.filters.hidden = function(elem) {
            var width = elem.offsetWidth, height = elem.offsetHeight;
            return (width === 0 && height === 0) || (!jQuery.support.reliableHiddenOffsets && ((elem.style && elem.style.display) || jQuery.css(elem, "display")) === "none");
        };
        jQuery.expr.filters.visible = function(elem) {
            return !jQuery.expr.filters.hidden(elem);
        };
    }
    var r20 = /%20/g, rbracket = /\[\]$/, rCRLF = /\r?\n/g, rhash = /#.*$/, rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, rinput = /^(?:color|date|datetime|datetime-local|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i, rlocalProtocol = /^(?:about|app|app\-storage|.+\-extension|file|res|widget):$/, rnoContent = /^(?:GET|HEAD)$/, rprotocol = /^\/\//, rquery = /\?/, rscript = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, rselectTextarea = /^(?:select|textarea)/i, rspacesAjax = /\s+/, rts = /([?&])_=[^&]*/, rurl = /^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+))?)?/, _load = jQuery.fn.load, prefilters = {}, transports = {}, ajaxLocation, ajaxLocParts, allTypes = ["*/"] + ["*"];
    try {
        ajaxLocation = location.href;
    } catch (e) {
        ajaxLocation = document.createElement("a");
        ajaxLocation.href = "";
        ajaxLocation = ajaxLocation.href;
    }
    ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || [];
    function addToPrefiltersOrTransports(structure) {
        return function(dataTypeExpression, func) {
            if (typeof dataTypeExpression !== "string") {
                func = dataTypeExpression;
                dataTypeExpression = "*";
            }
            if (jQuery.isFunction(func)) {
                var dataTypes = dataTypeExpression.toLowerCase().split(rspacesAjax), i = 0, length = dataTypes.length, dataType, list, placeBefore;
                for (; i < length; i++) {
                    dataType = dataTypes[i];
                    placeBefore = /^\+/.test(dataType);
                    if (placeBefore) {
                        dataType = dataType.substr(1) || "*";
                    }
                    list = structure[dataType] = structure[dataType] || [];
                    list[placeBefore ? "unshift" : "push"](func);
                }
            }
        };
    }
    function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR, dataType, inspected) {
        dataType = dataType || options.dataTypes[0];
        inspected = inspected || {};
        inspected[dataType] = true;
        var list = structure[dataType], i = 0, length = list ? list.length : 0, executeOnly = (structure === prefilters), selection;
        for (; i < length && (executeOnly || !selection); i++) {
            selection = list[i](options, originalOptions, jqXHR);
            if (typeof selection === "string") {
                if (!executeOnly || inspected[selection]) {
                    selection = undefined;
                } else {
                    options.dataTypes.unshift(selection);
                    selection = inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR, selection, inspected);
                }
            }
        }
        if ((executeOnly || !selection) && !inspected["*"]) {
            selection = inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR, "*", inspected);
        }
        return selection;
    }
    function ajaxExtend(target, src) {
        var key, deep, flatOptions = jQuery.ajaxSettings.flatOptions || {};
        for (key in src) {
            if (src[key] !== undefined) {
                (flatOptions[key] ? target : (deep || (deep = {})))[key] = src[key];
            }
        }
        if (deep) {
            jQuery.extend(true, target, deep);
        }
    }
    jQuery.fn.extend({load: function(url, params, callback) {
            if (typeof url !== "string" && _load) {
                return _load.apply(this, arguments);
            } else if (!this.length) {
                return this;
            }
            var off = url.indexOf(" ");
            if (off >= 0) {
                var selector = url.slice(off, url.length);
                url = url.slice(0, off);
            }
            var type = "GET";
            if (params) {
                if (jQuery.isFunction(params)) {
                    callback = params;
                    params = undefined;
                } else if (typeof params === "object") {
                    params = jQuery.param(params, jQuery.ajaxSettings.traditional);
                    type = "POST";
                }
            }
            var self = this;
            jQuery.ajax({url: url,type: type,dataType: "html",data: params,complete: function(jqXHR, status, responseText) {
                    responseText = jqXHR.responseText;
                    if (jqXHR.isResolved()) {
                        jqXHR.done(function(r) {
                            responseText = r;
                        });
                        self.html(selector ? jQuery("<div>").append(responseText.replace(rscript, "")).find(selector) : responseText);
                    }
                    if (callback) {
                        self.each(callback, [responseText, status, jqXHR]);
                    }
                }});
            return this;
        },serialize: function() {
            return jQuery.param(this.serializeArray());
        },serializeArray: function() {
            return this.map(function() {
                return this.elements ? jQuery.makeArray(this.elements) : this;
            }).filter(function() {
                return this.name && !this.disabled && (this.checked || rselectTextarea.test(this.nodeName) || rinput.test(this.type));
            }).map(function(i, elem) {
                var val = jQuery(this).val();
                return val == null ? null : jQuery.isArray(val) ? jQuery.map(val, function(val, i) {
                    return {name: elem.name,value: val.replace(rCRLF, "\r\n")};
                }) : {name: elem.name,value: val.replace(rCRLF, "\r\n")};
            }).get();
        }});
    jQuery.each("ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split(" "), function(i, o) {
        jQuery.fn[o] = function(f) {
            return this.on(o, f);
        };
    });
    jQuery.each(["get", "post"], function(i, method) {
        jQuery[method] = function(url, data, callback, type) {
            if (jQuery.isFunction(data)) {
                type = type || callback;
                callback = data;
                data = undefined;
            }
            return jQuery.ajax({type: method,url: url,data: data,success: callback,dataType: type});
        };
    });
    jQuery.extend({getScript: function(url, callback) {
            return jQuery.get(url, undefined, callback, "script");
        },getJSON: function(url, data, callback) {
            return jQuery.get(url, data, callback, "json");
        },ajaxSetup: function(target, settings) {
            if (settings) {
                ajaxExtend(target, jQuery.ajaxSettings);
            } else {
                settings = target;
                target = jQuery.ajaxSettings;
            }
            ajaxExtend(target, settings);
            return target;
        },ajaxSettings: {url: ajaxLocation,isLocal: rlocalProtocol.test(ajaxLocParts[1]),global: true,type: "GET",contentType: "application/x-www-form-urlencoded",processData: true,async: true,accepts: {xml: "application/xml, text/xml",html: "text/html",text: "text/plain",json: "application/json, text/javascript","*": allTypes},contents: {xml: /xml/,html: /html/,json: /json/},responseFields: {xml: "responseXML",text: "responseText"},converters: {"* text": window.String,"text html": true,"text json": jQuery.parseJSON,"text xml": jQuery.parseXML},flatOptions: {context: true,url: true}},ajaxPrefilter: addToPrefiltersOrTransports(prefilters),ajaxTransport: addToPrefiltersOrTransports(transports),ajax: function(url, options) {
            if (typeof url === "object") {
                options = url;
                url = undefined;
            }
            options = options || {};
            var
            s = jQuery.ajaxSetup({}, options), callbackContext = s.context || s, globalEventContext = callbackContext !== s && (callbackContext.nodeType || callbackContext instanceof jQuery) ? jQuery(callbackContext) : jQuery.event, deferred = jQuery.Deferred(), completeDeferred = jQuery.Callbacks("once memory"), statusCode = s.statusCode || {}, ifModifiedKey, requestHeaders = {}, requestHeadersNames = {}, responseHeadersString, responseHeaders, transport, timeoutTimer, parts, state = 0, fireGlobals, i, jqXHR = {readyState: 0,setRequestHeader: function(name, value) {
                    if (!state) {
                        var lname = name.toLowerCase();
                        name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;
                        requestHeaders[name] = value;
                    }
                    return this;
                },getAllResponseHeaders: function() {
                    return state === 2 ? responseHeadersString : null;
                },getResponseHeader: function(key) {
                    var match;
                    if (state === 2) {
                        if (!responseHeaders) {
                            responseHeaders = {};
                            while ((match = rheaders.exec(responseHeadersString))) {
                                responseHeaders[match[1].toLowerCase()] = match[2];
                            }
                        }
                        match = responseHeaders[key.toLowerCase()];
                    }
                    return match === undefined ? null : match;
                },overrideMimeType: function(type) {
                    if (!state) {
                        s.mimeType = type;
                    }
                    return this;
                },abort: function(statusText) {
                    statusText = statusText || "abort";
                    if (transport) {
                        transport.abort(statusText);
                    }
                    done(0, statusText);
                    return this;
                }};
            function done(status, nativeStatusText, responses, headers) {
                if (state === 2) {
                    return;
                }
                state = 2;
                if (timeoutTimer) {
                    clearTimeout(timeoutTimer);
                }
                transport = undefined;
                responseHeadersString = headers || "";
                jqXHR.readyState = status > 0 ? 4 : 0;
                var isSuccess, success, error, statusText = nativeStatusText, response = responses ? ajaxHandleResponses(s, jqXHR, responses) : undefined, lastModified, etag;
                if (status >= 200 && status < 300 || status === 304) {
                    if (s.ifModified) {
                        if ((lastModified = jqXHR.getResponseHeader("Last-Modified"))) {
                            jQuery.lastModified[ifModifiedKey] = lastModified;
                        }
                        if ((etag = jqXHR.getResponseHeader("Etag"))) {
                            jQuery.etag[ifModifiedKey] = etag;
                        }
                    }
                    if (status === 304) {
                        statusText = "notmodified";
                        isSuccess = true;
                    } else {
                        try {
                            success = ajaxConvert(s, response);
                            statusText = "success";
                            isSuccess = true;
                        } catch (e) {
                            statusText = "parsererror";
                            error = e;
                        }
                    }
                } else {
                    error = statusText;
                    if (!statusText || status) {
                        statusText = "error";
                        if (status < 0) {
                            status = 0;
                        }
                    }
                }
                jqXHR.status = status;
                jqXHR.statusText = "" + (nativeStatusText || statusText);
                if (isSuccess) {
                    deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
                } else {
                    deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
                }
                jqXHR.statusCode(statusCode);
                statusCode = undefined;
                if (fireGlobals) {
                    globalEventContext.trigger("ajax" + (isSuccess ? "Success" : "Error"), [jqXHR, s, isSuccess ? success : error]);
                }
                completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);
                if (fireGlobals) {
                    globalEventContext.trigger("ajaxComplete", [jqXHR, s]);
                    if (!(--jQuery.active)) {
                        jQuery.event.trigger("ajaxStop");
                    }
                }
            }
            deferred.promise(jqXHR);
            jqXHR.success = jqXHR.done;
            jqXHR.error = jqXHR.fail;
            jqXHR.complete = completeDeferred.add;
            jqXHR.statusCode = function(map) {
                if (map) {
                    var tmp;
                    if (state < 2) {
                        for (tmp in map) {
                            statusCode[tmp] = [statusCode[tmp], map[tmp]];
                        }
                    } else {
                        tmp = map[jqXHR.status];
                        jqXHR.then(tmp, tmp);
                    }
                }
                return this;
            };
            s.url = ((url || s.url) + "").replace(rhash, "").replace(rprotocol, ajaxLocParts[1] + "//");
            s.dataTypes = jQuery.trim(s.dataType || "*").toLowerCase().split(rspacesAjax);
            if (s.crossDomain == null) {
                parts = rurl.exec(s.url.toLowerCase());
                s.crossDomain = !!(parts && (parts[1] != ajaxLocParts[1] || parts[2] != ajaxLocParts[2] || (parts[3] || (parts[1] === "http:" ? 80 : 443)) != (ajaxLocParts[3] || (ajaxLocParts[1] === "http:" ? 80 : 443))));
            }
            if (s.data && s.processData && typeof s.data !== "string") {
                s.data = jQuery.param(s.data, s.traditional);
            }
            inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);
            if (state === 2) {
                return false;
            }
            fireGlobals = s.global;
            s.type = s.type.toUpperCase();
            s.hasContent = !rnoContent.test(s.type);
            if (fireGlobals && jQuery.active++ === 0) {
                jQuery.event.trigger("ajaxStart");
            }
            if (!s.hasContent) {
                if (s.data) {
                    s.url += (rquery.test(s.url) ? "&" : "?") + s.data;
                    delete s.data;
                }
                ifModifiedKey = s.url;
                if (s.cache === false) {
                    var ts = jQuery.now(), ret = s.url.replace(rts, "$1_=" + ts);
                    s.url = ret + ((ret === s.url) ? (rquery.test(s.url) ? "&" : "?") + "_=" + ts : "");
                }
            }
            if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
                jqXHR.setRequestHeader("Content-Type", s.contentType);
            }
            if (s.ifModified) {
                ifModifiedKey = ifModifiedKey || s.url;
                if (jQuery.lastModified[ifModifiedKey]) {
                    jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[ifModifiedKey]);
                }
                if (jQuery.etag[ifModifiedKey]) {
                    jqXHR.setRequestHeader("If-None-Match", jQuery.etag[ifModifiedKey]);
                }
            }
            jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]);
            for (i in s.headers) {
                jqXHR.setRequestHeader(i, s.headers[i]);
            }
            if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)) {
                jqXHR.abort();
                return false;
            }
            for (i in {success: 1,error: 1,complete: 1}) {
                jqXHR[i](s[i]);
            }
            transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);
            if (!transport) {
                done(-1, "No Transport");
            } else {
                jqXHR.readyState = 1;
                if (fireGlobals) {
                    globalEventContext.trigger("ajaxSend", [jqXHR, s]);
                }
                if (s.async && s.timeout > 0) {
                    timeoutTimer = setTimeout(function() {
                        jqXHR.abort("timeout");
                    }, s.timeout);
                }
                try {
                    state = 1;
                    transport.send(requestHeaders, done);
                } catch (e) {
                    if (state < 2) {
                        done(-1, e);
                    } else {
                        throw e;
                    }
                }
            }
            return jqXHR;
        },param: function(a, traditional) {
            var s = [], add = function(key, value) {
                value = jQuery.isFunction(value) ? value() : value;
                s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value);
            };
            if (traditional === undefined) {
                traditional = jQuery.ajaxSettings.traditional;
            }
            if (jQuery.isArray(a) || (a.jquery && !jQuery.isPlainObject(a))) {
                jQuery.each(a, function() {
                    add(this.name, this.value);
                });
            } else {
                for (var prefix in a) {
                    buildParams(prefix, a[prefix], traditional, add);
                }
            }
            return s.join("&").replace(r20, "+");
        }});
    function buildParams(prefix, obj, traditional, add) {
        if (jQuery.isArray(obj)) {
            jQuery.each(obj, function(i, v) {
                if (traditional || rbracket.test(prefix)) {
                    add(prefix, v);
                } else {
                    buildParams(prefix + "[" + (typeof v === "object" || jQuery.isArray(v) ? i : "") + "]", v, traditional, add);
                }
            });
        } else if (!traditional && obj != null && typeof obj === "object") {
            for (var name in obj) {
                buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
            }
        } else {
            add(prefix, obj);
        }
    }
    jQuery.extend({active: 0,lastModified: {},etag: {}});
    function ajaxHandleResponses(s, jqXHR, responses) {
        var contents = s.contents, dataTypes = s.dataTypes, responseFields = s.responseFields, ct, type, finalDataType, firstDataType;
        for (type in responseFields) {
            if (type in responses) {
                jqXHR[responseFields[type]] = responses[type];
            }
        }
        while (dataTypes[0] === "*") {
            dataTypes.shift();
            if (ct === undefined) {
                ct = s.mimeType || jqXHR.getResponseHeader("content-type");
            }
        }
        if (ct) {
            for (type in contents) {
                if (contents[type] && contents[type].test(ct)) {
                    dataTypes.unshift(type);
                    break;
                }
            }
        }
        if (dataTypes[0] in responses) {
            finalDataType = dataTypes[0];
        } else {
            for (type in responses) {
                if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
                    finalDataType = type;
                    break;
                }
                if (!firstDataType) {
                    firstDataType = type;
                }
            }
            finalDataType = finalDataType || firstDataType;
        }
        if (finalDataType) {
            if (finalDataType !== dataTypes[0]) {
                dataTypes.unshift(finalDataType);
            }
            return responses[finalDataType];
        }
    }
    function ajaxConvert(s, response) {
        if (s.dataFilter) {
            response = s.dataFilter(response, s.dataType);
        }
        var dataTypes = s.dataTypes, converters = {}, i, key, length = dataTypes.length, tmp, current = dataTypes[0], prev, conversion, conv, conv1, conv2;
        for (i = 1; i < length; i++) {
            if (i === 1) {
                for (key in s.converters) {
                    if (typeof key === "string") {
                        converters[key.toLowerCase()] = s.converters[key];
                    }
                }
            }
            prev = current;
            current = dataTypes[i];
            if (current === "*") {
                current = prev;
            } else if (prev !== "*" && prev !== current) {
                conversion = prev + " " + current;
                conv = converters[conversion] || converters["* " + current];
                if (!conv) {
                    conv2 = undefined;
                    for (conv1 in converters) {
                        tmp = conv1.split(" ");
                        if (tmp[0] === prev || tmp[0] === "*") {
                            conv2 = converters[tmp[1] + " " + current];
                            if (conv2) {
                                conv1 = converters[conv1];
                                if (conv1 === true) {
                                    conv = conv2;
                                } else if (conv2 === true) {
                                    conv = conv1;
                                }
                                break;
                            }
                        }
                    }
                }
                if (!(conv || conv2)) {
                    jQuery.error("No conversion from " + conversion.replace(" ", " to "));
                }
                if (conv !== true) {
                    response = conv ? conv(response) : conv2(conv1(response));
                }
            }
        }
        return response;
    }
    var jsc = jQuery.now(), jsre = /(\=)\?(&|$)|\?\?/i;
    jQuery.ajaxSetup({jsonp: "callback",jsonpCallback: function() {
            return jQuery.expando + "_" + (jsc++);
        }});
    jQuery.ajaxPrefilter("json jsonp", function(s, originalSettings, jqXHR) {
        var inspectData = s.contentType === "application/x-www-form-urlencoded" && (typeof s.data === "string");
        if (s.dataTypes[0] === "jsonp" || s.jsonp !== false && (jsre.test(s.url) || inspectData && jsre.test(s.data))) {
            var responseContainer, jsonpCallback = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback, previous = window[jsonpCallback], url = s.url, data = s.data, replace = "$1" + jsonpCallback + "$2";
            if (s.jsonp !== false) {
                url = url.replace(jsre, replace);
                if (s.url === url) {
                    if (inspectData) {
                        data = data.replace(jsre, replace);
                    }
                    if (s.data === data) {
                        url += (/\?/.test(url) ? "&" : "?") + s.jsonp + "=" + jsonpCallback;
                    }
                }
            }
            s.url = url;
            s.data = data;
            window[jsonpCallback] = function(response) {
                responseContainer = [response];
            };
            jqXHR.always(function() {
                window[jsonpCallback] = previous;
                if (responseContainer && jQuery.isFunction(previous)) {
                    window[jsonpCallback](responseContainer[0]);
                }
            });
            s.converters["script json"] = function() {
                if (!responseContainer) {
                    jQuery.error(jsonpCallback + " was not called");
                }
                return responseContainer[0];
            };
            s.dataTypes[0] = "json";
            return "script";
        }
    });
    jQuery.ajaxSetup({accepts: {script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents: {script: /javascript|ecmascript/},converters: {"text script": function(text) {
                jQuery.globalEval(text);
                return text;
            }}});
    jQuery.ajaxPrefilter("script", function(s) {
        if (s.cache === undefined) {
            s.cache = false;
        }
        if (s.crossDomain) {
            s.type = "GET";
            s.global = false;
        }
    });
    jQuery.ajaxTransport("script", function(s) {
        if (s.crossDomain) {
            var script, head = document.head || document.getElementsByTagName("head")[0] || document.documentElement;
            return {send: function(_, callback) {
                    script = document.createElement("script");
                    script.async = "async";
                    if (s.scriptCharset) {
                        script.charset = s.scriptCharset;
                    }
                    script.src = s.url;
                    script.onload = script.onreadystatechange = function(_, isAbort) {
                        if (isAbort || !script.readyState || /loaded|complete/.test(script.readyState)) {
                            script.onload = script.onreadystatechange = null;
                            if (head && script.parentNode) {
                                head.removeChild(script);
                            }
                            script = undefined;
                            if (!isAbort) {
                                callback(200, "success");
                            }
                        }
                    };
                    head.insertBefore(script, head.firstChild);
                },abort: function() {
                    if (script) {
                        script.onload(0, 1);
                    }
                }};
        }
    });
    var
    xhrOnUnloadAbort = window.ActiveXObject ? function() {
        for (var key in xhrCallbacks) {
            xhrCallbacks[key](0, 1);
        }
    } : false, xhrId = 0, xhrCallbacks;
    function createStandardXHR() {
        try {
            return new window.XMLHttpRequest();
        } catch (e) {
        }
    }
    function createActiveXHR() {
        try {
            return new window.ActiveXObject("Microsoft.XMLHTTP");
        } catch (e) {
        }
    }
    jQuery.ajaxSettings.xhr = window.ActiveXObject ? function() {
        return !this.isLocal && createStandardXHR() || createActiveXHR();
    } : createStandardXHR;
    (function(xhr) {
        jQuery.extend(jQuery.support, {ajax: !!xhr,cors: !!xhr && ("withCredentials" in xhr)});
    })(jQuery.ajaxSettings.xhr());
    if (jQuery.support.ajax) {
        jQuery.ajaxTransport(function(s) {
            if (!s.crossDomain || jQuery.support.cors) {
                var callback;
                return {send: function(headers, complete) {
                        var xhr = s.xhr(), handle, i;
                        if (s.username) {
                            xhr.open(s.type, s.url, s.async, s.username, s.password);
                        } else {
                            xhr.open(s.type, s.url, s.async);
                        }
                        if (s.xhrFields) {
                            for (i in s.xhrFields) {
                                xhr[i] = s.xhrFields[i];
                            }
                        }
                        if (s.mimeType && xhr.overrideMimeType) {
                            xhr.overrideMimeType(s.mimeType);
                        }
                        if (!s.crossDomain && !headers["X-Requested-With"]) {
                            headers["X-Requested-With"] = "XMLHttpRequest";
                        }
                        try {
                            for (i in headers) {
                                xhr.setRequestHeader(i, headers[i]);
                            }
                        } catch (_) {
                        }
                        xhr.send((s.hasContent && s.data) || null);
                        callback = function(_, isAbort) {
                            var status, statusText, responseHeaders, responses, xml;
                            try {
                                if (callback && (isAbort || xhr.readyState === 4)) {
                                    callback = undefined;
                                    if (handle) {
                                        xhr.onreadystatechange = jQuery.noop;
                                        if (xhrOnUnloadAbort) {
                                            delete xhrCallbacks[handle];
                                        }
                                    }
                                    if (isAbort) {
                                        if (xhr.readyState !== 4) {
                                            xhr.abort();
                                        }
                                    } else {
                                        status = xhr.status;
                                        responseHeaders = xhr.getAllResponseHeaders();
                                        responses = {};
                                        xml = xhr.responseXML;
                                        if (xml && xml.documentElement) {
                                            responses.xml = xml;
                                        }
                                        responses.text = xhr.responseText;
                                        try {
                                            statusText = xhr.statusText;
                                        } catch (e) {
                                            statusText = "";
                                        }
                                        if (!status && s.isLocal && !s.crossDomain) {
                                            status = responses.text ? 200 : 404;
                                        } else if (status === 1223) {
                                            status = 204;
                                        }
                                    }
                                }
                            } catch (firefoxAccessException) {
                                if (!isAbort) {
                                    complete(-1, firefoxAccessException);
                                }
                            }
                            if (responses) {
                                complete(status, statusText, responses, responseHeaders);
                            }
                        };
                        if (!s.async || xhr.readyState === 4) {
                            callback();
                        } else {
                            handle = ++xhrId;
                            if (xhrOnUnloadAbort) {
                                if (!xhrCallbacks) {
                                    xhrCallbacks = {};
                                    jQuery(window).unload(xhrOnUnloadAbort);
                                }
                                xhrCallbacks[handle] = callback;
                            }
                            xhr.onreadystatechange = callback;
                        }
                    },abort: function() {
                        if (callback) {
                            callback(0, 1);
                        }
                    }};
            }
        });
    }
    var elemdisplay = {}, iframe, iframeDoc, rfxtypes = /^(?:toggle|show|hide)$/, rfxnum = /^([+\-]=)?([\d+.\-]+)([a-z%]*)$/i, timerId, fxAttrs = [["height", "marginTop", "marginBottom", "paddingTop", "paddingBottom"], ["width", "marginLeft", "marginRight", "paddingLeft", "paddingRight"], ["opacity"]], fxNow;
    jQuery.fn.extend({show: function(speed, easing, callback) {
            var elem, display;
            if (speed || speed === 0) {
                return this.animate(genFx("show", 3), speed, easing, callback);
            } else {
                for (var i = 0, j = this.length; i < j; i++) {
                    elem = this[i];
                    if (elem.style) {
                        display = elem.style.display;
                        if (!jQuery._data(elem, "olddisplay") && display === "none") {
                            display = elem.style.display = "";
                        }
                        if (display === "" && jQuery.css(elem, "display") === "none") {
                            jQuery._data(elem, "olddisplay", defaultDisplay(elem.nodeName));
                        }
                    }
                }
                for (i = 0; i < j; i++) {
                    elem = this[i];
                    if (elem.style) {
                        display = elem.style.display;
                        if (display === "" || display === "none") {
                            elem.style.display = jQuery._data(elem, "olddisplay") || "";
                        }
                    }
                }
                return this;
            }
        },hide: function(speed, easing, callback) {
            if (speed || speed === 0) {
                return this.animate(genFx("hide", 3), speed, easing, callback);
            } else {
                var elem, display, i = 0, j = this.length;
                for (; i < j; i++) {
                    elem = this[i];
                    if (elem.style) {
                        display = jQuery.css(elem, "display");
                        if (display !== "none" && !jQuery._data(elem, "olddisplay")) {
                            jQuery._data(elem, "olddisplay", display);
                        }
                    }
                }
                for (i = 0; i < j; i++) {
                    if (this[i].style) {
                        this[i].style.display = "none";
                    }
                }
                return this;
            }
        },_toggle: jQuery.fn.toggle,toggle: function(fn, fn2, callback) {
            var bool = typeof fn === "boolean";
            if (jQuery.isFunction(fn) && jQuery.isFunction(fn2)) {
                this._toggle.apply(this, arguments);
            } else if (fn == null || bool) {
                this.each(function() {
                    var state = bool ? fn : jQuery(this).is(":hidden");
                    jQuery(this)[state ? "show" : "hide"]();
                });
            } else {
                this.animate(genFx("toggle", 3), fn, fn2, callback);
            }
            return this;
        },fadeTo: function(speed, to, easing, callback) {
            return this.filter(":hidden").css("opacity", 0).show().end().animate({opacity: to}, speed, easing, callback);
        },animate: function(prop, speed, easing, callback) {
            var optall = jQuery.speed(speed, easing, callback);
            if (jQuery.isEmptyObject(prop)) {
                return this.each(optall.complete, [false]);
            }
            prop = jQuery.extend({}, prop);
            function doAnimation() {
                if (optall.queue === false) {
                    jQuery._mark(this);
                }
                var opt = jQuery.extend({}, optall), isElement = this.nodeType === 1, hidden = isElement && jQuery(this).is(":hidden"), name, val, p, e, parts, start, end, unit, method;
                opt.animatedProperties = {};
                for (p in prop) {
                    name = jQuery.camelCase(p);
                    if (p !== name) {
                        prop[name] = prop[p];
                        delete prop[p];
                    }
                    val = prop[name];
                    if (jQuery.isArray(val)) {
                        opt.animatedProperties[name] = val[1];
                        val = prop[name] = val[0];
                    } else {
                        opt.animatedProperties[name] = opt.specialEasing && opt.specialEasing[name] || opt.easing || 'swing';
                    }
                    if (val === "hide" && hidden || val === "show" && !hidden) {
                        return opt.complete.call(this);
                    }
                    if (isElement && (name === "height" || name === "width")) {
                        opt.overflow = [this.style.overflow, this.style.overflowX, this.style.overflowY];
                        if (jQuery.css(this, "display") === "inline" && jQuery.css(this, "float") === "none") {
                            if (!jQuery.support.inlineBlockNeedsLayout || defaultDisplay(this.nodeName) === "inline") {
                                this.style.display = "inline-block";
                            } else {
                                this.style.zoom = 1;
                            }
                        }
                    }
                }
                if (opt.overflow != null) {
                    this.style.overflow = "hidden";
                }
                for (p in prop) {
                    e = new jQuery.fx(this, opt, p);
                    val = prop[p];
                    if (rfxtypes.test(val)) {
                        method = jQuery._data(this, "toggle" + p) || (val === "toggle" ? hidden ? "show" : "hide" : 0);
                        if (method) {
                            jQuery._data(this, "toggle" + p, method === "show" ? "hide" : "show");
                            e[method]();
                        } else {
                            e[val]();
                        }
                    } else {
                        parts = rfxnum.exec(val);
                        start = e.cur();
                        if (parts) {
                            end = parseFloat(parts[2]);
                            unit = parts[3] || (jQuery.cssNumber[p] ? "" : "px");
                            if (unit !== "px") {
                                jQuery.style(this, p, (end || 1) + unit);
                                start = ((end || 1) / e.cur()) * start;
                                jQuery.style(this, p, start + unit);
                            }
                            if (parts[1]) {
                                end = ((parts[1] === "-=" ? -1 : 1) * end) + start;
                            }
                            e.custom(start, end, unit);
                        } else {
                            e.custom(start, val, "");
                        }
                    }
                }
                return true;
            }
            return optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
        },stop: function(type, clearQueue, gotoEnd) {
            if (typeof type !== "string") {
                gotoEnd = clearQueue;
                clearQueue = type;
                type = undefined;
            }
            if (clearQueue && type !== false) {
                this.queue(type || "fx", []);
            }
            return this.each(function() {
                var index, hadTimers = false, timers = jQuery.timers, data = jQuery._data(this);
                if (!gotoEnd) {
                    jQuery._unmark(true, this);
                }
                function stopQueue(elem, data, index) {
                    var hooks = data[index];
                    jQuery.removeData(elem, index, true);
                    hooks.stop(gotoEnd);
                }
                if (type == null) {
                    for (index in data) {
                        if (data[index] && data[index].stop && index.indexOf(".run") === index.length - 4) {
                            stopQueue(this, data, index);
                        }
                    }
                } else if (data[index = type + ".run"] && data[index].stop) {
                    stopQueue(this, data, index);
                }
                for (index = timers.length; index--; ) {
                    if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
                        if (gotoEnd) {
                            timers[index](true);
                        } else {
                            timers[index].saveState();
                        }
                        hadTimers = true;
                        timers.splice(index, 1);
                    }
                }
                if (!(gotoEnd && hadTimers)) {
                    jQuery.dequeue(this, type);
                }
            });
        }});
    function createFxNow() {
        setTimeout(clearFxNow, 0);
        return (fxNow = jQuery.now());
    }
    function clearFxNow() {
        fxNow = undefined;
    }
    function genFx(type, num) {
        var obj = {};
        jQuery.each(fxAttrs.concat.apply([], fxAttrs.slice(0, num)), function() {
            obj[this] = type;
        });
        return obj;
    }
    jQuery.each({slideDown: genFx("show", 1),slideUp: genFx("hide", 1),slideToggle: genFx("toggle", 1),fadeIn: {opacity: "show"},fadeOut: {opacity: "hide"},fadeToggle: {opacity: "toggle"}}, function(name, props) {
        jQuery.fn[name] = function(speed, easing, callback) {
            return this.animate(props, speed, easing, callback);
        };
    });
    jQuery.extend({speed: function(speed, easing, fn) {
            var opt = speed && typeof speed === "object" ? jQuery.extend({}, speed) : {complete: fn || !fn && easing || jQuery.isFunction(speed) && speed,duration: speed,easing: fn && easing || easing && !jQuery.isFunction(easing) && easing};
            opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration : opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default;
            if (opt.queue == null || opt.queue === true) {
                opt.queue = "fx";
            }
            opt.old = opt.complete;
            opt.complete = function(noUnmark) {
                if (jQuery.isFunction(opt.old)) {
                    opt.old.call(this);
                }
                if (opt.queue) {
                    jQuery.dequeue(this, opt.queue);
                } else if (noUnmark !== false) {
                    jQuery._unmark(this);
                }
            };
            return opt;
        },easing: {linear: function(p, n, firstNum, diff) {
                return firstNum + diff * p;
            },swing: function(p, n, firstNum, diff) {
                return ((-Math.cos(p * Math.PI) / 2) + 0.5) * diff + firstNum;
            }},timers: [],fx: function(elem, options, prop) {
            this.options = options;
            this.elem = elem;
            this.prop = prop;
            options.orig = options.orig || {};
        }});
    jQuery.fx.prototype = {update: function() {
            if (this.options.step) {
                this.options.step.call(this.elem, this.now, this);
            }
            (jQuery.fx.step[this.prop] || jQuery.fx.step._default)(this);
        },cur: function() {
            if (this.elem[this.prop] != null && (!this.elem.style || this.elem.style[this.prop] == null)) {
                return this.elem[this.prop];
            }
            var parsed, r = jQuery.css(this.elem, this.prop);
            return isNaN(parsed = parseFloat(r)) ? !r || r === "auto" ? 0 : r : parsed;
        },custom: function(from, to, unit) {
            var self = this, fx = jQuery.fx;
            this.startTime = fxNow || createFxNow();
            this.end = to;
            this.now = this.start = from;
            this.pos = this.state = 0;
            this.unit = unit || this.unit || (jQuery.cssNumber[this.prop] ? "" : "px");
            function t(gotoEnd) {
                return self.step(gotoEnd);
            }
            t.queue = this.options.queue;
            t.elem = this.elem;
            t.saveState = function() {
                if (self.options.hide && jQuery._data(self.elem, "fxshow" + self.prop) === undefined) {
                    jQuery._data(self.elem, "fxshow" + self.prop, self.start);
                }
            };
            if (t() && jQuery.timers.push(t) && !timerId) {
                timerId = setInterval(fx.tick, fx.interval);
            }
        },show: function() {
            var dataShow = jQuery._data(this.elem, "fxshow" + this.prop);
            this.options.orig[this.prop] = dataShow || jQuery.style(this.elem, this.prop);
            this.options.show = true;
            if (dataShow !== undefined) {
                this.custom(this.cur(), dataShow);
            } else {
                this.custom(this.prop === "width" || this.prop === "height" ? 1 : 0, this.cur());
            }
            jQuery(this.elem).show();
        },hide: function() {
            this.options.orig[this.prop] = jQuery._data(this.elem, "fxshow" + this.prop) || jQuery.style(this.elem, this.prop);
            this.options.hide = true;
            this.custom(this.cur(), 0);
        },step: function(gotoEnd) {
            var p, n, complete, t = fxNow || createFxNow(), done = true, elem = this.elem, options = this.options;
            if (gotoEnd || t >= options.duration + this.startTime) {
                this.now = this.end;
                this.pos = this.state = 1;
                this.update();
                options.animatedProperties[this.prop] = true;
                for (p in options.animatedProperties) {
                    if (options.animatedProperties[p] !== true) {
                        done = false;
                    }
                }
                if (done) {
                    if (options.overflow != null && !jQuery.support.shrinkWrapBlocks) {
                        jQuery.each(["", "X", "Y"], function(index, value) {
                            elem.style["overflow" + value] = options.overflow[index];
                        });
                    }
                    if (options.hide) {
                        jQuery(elem).hide();
                    }
                    if (options.hide || options.show) {
                        for (p in options.animatedProperties) {
                            jQuery.style(elem, p, options.orig[p]);
                            jQuery.removeData(elem, "fxshow" + p, true);
                            jQuery.removeData(elem, "toggle" + p, true);
                        }
                    }
                    complete = options.complete;
                    if (complete) {
                        options.complete = false;
                        complete.call(elem);
                    }
                }
                return false;
            } else {
                if (options.duration == Infinity) {
                    this.now = t;
                } else {
                    n = t - this.startTime;
                    this.state = n / options.duration;
                    this.pos = jQuery.easing[options.animatedProperties[this.prop]](this.state, n, 0, 1, options.duration);
                    this.now = this.start + ((this.end - this.start) * this.pos);
                }
                this.update();
            }
            return true;
        }};
    jQuery.extend(jQuery.fx, {tick: function() {
            var timer, timers = jQuery.timers, i = 0;
            for (; i < timers.length; i++) {
                timer = timers[i];
                if (!timer() && timers[i] === timer) {
                    timers.splice(i--, 1);
                }
            }
            if (!timers.length) {
                jQuery.fx.stop();
            }
        },interval: 13,stop: function() {
            clearInterval(timerId);
            timerId = null;
        },speeds: {slow: 600,fast: 200,_default: 400},step: {opacity: function(fx) {
                jQuery.style(fx.elem, "opacity", fx.now);
            },_default: function(fx) {
                if (fx.elem.style && fx.elem.style[fx.prop] != null) {
                    fx.elem.style[fx.prop] = fx.now + fx.unit;
                } else {
                    fx.elem[fx.prop] = fx.now;
                }
            }}});
    jQuery.each(["width", "height"], function(i, prop) {
        jQuery.fx.step[prop] = function(fx) {
            jQuery.style(fx.elem, prop, Math.max(0, fx.now) + fx.unit);
        };
    });
    if (jQuery.expr && jQuery.expr.filters) {
        jQuery.expr.filters.animated = function(elem) {
            return jQuery.grep(jQuery.timers, function(fn) {
                return elem === fn.elem;
            }).length;
        };
    }
    function defaultDisplay(nodeName) {
        if (!elemdisplay[nodeName]) {
            var body = document.body, elem = jQuery("<" + nodeName + ">").appendTo(body), display = elem.css("display");
            elem.remove();
            if (display === "none" || display === "") {
                if (!iframe) {
                    iframe = document.createElement("iframe");
                    iframe.frameBorder = iframe.width = iframe.height = 0;
                }
                body.appendChild(iframe);
                if (!iframeDoc || !iframe.createElement) {
                    iframeDoc = (iframe.contentWindow || iframe.contentDocument).document;
                    iframeDoc.write((document.compatMode === "CSS1Compat" ? "<!doctype html>" : "") + "<html><body>");
                    iframeDoc.close();
                }
                elem = iframeDoc.createElement(nodeName);
                iframeDoc.body.appendChild(elem);
                display = jQuery.css(elem, "display");
                body.removeChild(iframe);
            }
            elemdisplay[nodeName] = display;
        }
        return elemdisplay[nodeName];
    }
    var rtable = /^t(?:able|d|h)$/i, rroot = /^(?:body|html)$/i;
    if ("getBoundingClientRect" in document.documentElement) {
        jQuery.fn.offset = function(options) {
            var elem = this[0], box;
            if (options) {
                return this.each(function(i) {
                    jQuery.offset.setOffset(this, options, i);
                });
            }
            if (!elem || !elem.ownerDocument) {
                return null;
            }
            if (elem === elem.ownerDocument.body) {
                return jQuery.offset.bodyOffset(elem);
            }
            try {
                box = elem.getBoundingClientRect();
            } catch (e) {
            }
            var doc = elem.ownerDocument, docElem = doc.documentElement;
            if (!box || !jQuery.contains(docElem, elem)) {
                return box ? {top: box.top,left: box.left} : {top: 0,left: 0};
            }
            var body = doc.body, win = getWindow(doc), clientTop = docElem.clientTop || body.clientTop || 0, clientLeft = docElem.clientLeft || body.clientLeft || 0, scrollTop = win.pageYOffset || jQuery.support.boxModel && docElem.scrollTop || body.scrollTop, scrollLeft = win.pageXOffset || jQuery.support.boxModel && docElem.scrollLeft || body.scrollLeft, top = box.top + scrollTop - clientTop, left = box.left + scrollLeft - clientLeft;
            return {top: top,left: left};
        };
    } else {
        jQuery.fn.offset = function(options) {
            var elem = this[0];
            if (options) {
                return this.each(function(i) {
                    jQuery.offset.setOffset(this, options, i);
                });
            }
            if (!elem || !elem.ownerDocument) {
                return null;
            }
            if (elem === elem.ownerDocument.body) {
                return jQuery.offset.bodyOffset(elem);
            }
            var computedStyle, offsetParent = elem.offsetParent, prevOffsetParent = elem, doc = elem.ownerDocument, docElem = doc.documentElement, body = doc.body, defaultView = doc.defaultView, prevComputedStyle = defaultView ? defaultView.getComputedStyle(elem, null) : elem.currentStyle, top = elem.offsetTop, left = elem.offsetLeft;
            while ((elem = elem.parentNode) && elem !== body && elem !== docElem) {
                if (jQuery.support.fixedPosition && prevComputedStyle.position === "fixed") {
                    break;
                }
                computedStyle = defaultView ? defaultView.getComputedStyle(elem, null) : elem.currentStyle;
                top -= elem.scrollTop;
                left -= elem.scrollLeft;
                if (elem === offsetParent) {
                    top += elem.offsetTop;
                    left += elem.offsetLeft;
                    if (jQuery.support.doesNotAddBorder && !(jQuery.support.doesAddBorderForTableAndCells && rtable.test(elem.nodeName))) {
                        top += parseFloat(computedStyle.borderTopWidth) || 0;
                        left += parseFloat(computedStyle.borderLeftWidth) || 0;
                    }
                    prevOffsetParent = offsetParent;
                    offsetParent = elem.offsetParent;
                }
                if (jQuery.support.subtractsBorderForOverflowNotVisible && computedStyle.overflow !== "visible") {
                    top += parseFloat(computedStyle.borderTopWidth) || 0;
                    left += parseFloat(computedStyle.borderLeftWidth) || 0;
                }
                prevComputedStyle = computedStyle;
            }
            if (prevComputedStyle.position === "relative" || prevComputedStyle.position === "static") {
                top += body.offsetTop;
                left += body.offsetLeft;
            }
            if (jQuery.support.fixedPosition && prevComputedStyle.position === "fixed") {
                top += Math.max(docElem.scrollTop, body.scrollTop);
                left += Math.max(docElem.scrollLeft, body.scrollLeft);
            }
            return {top: top,left: left};
        };
    }
    jQuery.offset = {bodyOffset: function(body) {
            var top = body.offsetTop, left = body.offsetLeft;
            if (jQuery.support.doesNotIncludeMarginInBodyOffset) {
                top += parseFloat(jQuery.css(body, "marginTop")) || 0;
                left += parseFloat(jQuery.css(body, "marginLeft")) || 0;
            }
            return {top: top,left: left};
        },setOffset: function(elem, options, i) {
            var position = jQuery.css(elem, "position");
            if (position === "static") {
                elem.style.position = "relative";
            }
            var curElem = jQuery(elem), curOffset = curElem.offset(), curCSSTop = jQuery.css(elem, "top"), curCSSLeft = jQuery.css(elem, "left"), calculatePosition = (position === "absolute" || position === "fixed") && jQuery.inArray("auto", [curCSSTop, curCSSLeft]) > -1, props = {}, curPosition = {}, curTop, curLeft;
            if (calculatePosition) {
                curPosition = curElem.position();
                curTop = curPosition.top;
                curLeft = curPosition.left;
            } else {
                curTop = parseFloat(curCSSTop) || 0;
                curLeft = parseFloat(curCSSLeft) || 0;
            }
            if (jQuery.isFunction(options)) {
                options = options.call(elem, i, curOffset);
            }
            if (options.top != null) {
                props.top = (options.top - curOffset.top) + curTop;
            }
            if (options.left != null) {
                props.left = (options.left - curOffset.left) + curLeft;
            }
            if ("using" in options) {
                options.using.call(elem, props);
            } else {
                curElem.css(props);
            }
        }};
    jQuery.fn.extend({position: function() {
            if (!this[0]) {
                return null;
            }
            var elem = this[0], offsetParent = this.offsetParent(), offset = this.offset(), parentOffset = rroot.test(offsetParent[0].nodeName) ? {top: 0,left: 0} : offsetParent.offset();
            offset.top -= parseFloat(jQuery.css(elem, "marginTop")) || 0;
            offset.left -= parseFloat(jQuery.css(elem, "marginLeft")) || 0;
            parentOffset.top += parseFloat(jQuery.css(offsetParent[0], "borderTopWidth")) || 0;
            parentOffset.left += parseFloat(jQuery.css(offsetParent[0], "borderLeftWidth")) || 0;
            return {top: offset.top - parentOffset.top,left: offset.left - parentOffset.left};
        },offsetParent: function() {
            return this.map(function() {
                var offsetParent = this.offsetParent || document.body;
                while (offsetParent && (!rroot.test(offsetParent.nodeName) && jQuery.css(offsetParent, "position") === "static")) {
                    offsetParent = offsetParent.offsetParent;
                }
                return offsetParent;
            });
        }});
    jQuery.each(["Left", "Top"], function(i, name) {
        var method = "scroll" + name;
        jQuery.fn[method] = function(val) {
            var elem, win;
            if (val === undefined) {
                elem = this[0];
                if (!elem) {
                    return null;
                }
                win = getWindow(elem);
                return win ? ("pageXOffset" in win) ? win[i ? "pageYOffset" : "pageXOffset"] : jQuery.support.boxModel && win.document.documentElement[method] || win.document.body[method] : elem[method];
            }
            return this.each(function() {
                win = getWindow(this);
                if (win) {
                    win.scrollTo(!i ? val : jQuery(win).scrollLeft(), i ? val : jQuery(win).scrollTop());
                } else {
                    this[method] = val;
                }
            });
        };
    });
    function getWindow(elem) {
        return jQuery.isWindow(elem) ? elem : elem.nodeType === 9 ? elem.defaultView || elem.parentWindow : false;
    }
    jQuery.each(["Height", "Width"], function(i, name) {
        var type = name.toLowerCase();
        jQuery.fn["inner" + name] = function() {
            var elem = this[0];
            return elem ? elem.style ? parseFloat(jQuery.css(elem, type, "padding")) : this[type]() : null;
        };
        jQuery.fn["outer" + name] = function(margin) {
            var elem = this[0];
            return elem ? elem.style ? parseFloat(jQuery.css(elem, type, margin ? "margin" : "border")) : this[type]() : null;
        };
        jQuery.fn[type] = function(size) {
            var elem = this[0];
            if (!elem) {
                return size == null ? null : this;
            }
            if (jQuery.isFunction(size)) {
                return this.each(function(i) {
                    var self = jQuery(this);
                    self[type](size.call(this, i, self[type]()));
                });
            }
            if (jQuery.isWindow(elem)) {
                var docElemProp = elem.document.documentElement["client" + name], body = elem.document.body;
                return elem.document.compatMode === "CSS1Compat" && docElemProp || body && body["client" + name] || docElemProp;
            } else if (elem.nodeType === 9) {
                return Math.max(elem.documentElement["client" + name], elem.body["scroll" + name], elem.documentElement["scroll" + name], elem.body["offset" + name], elem.documentElement["offset" + name]);
            } else if (size === undefined) {
                var orig = jQuery.css(elem, type), ret = parseFloat(orig);
                return jQuery.isNumeric(ret) ? ret : orig;
            } else {
                return this.css(type, typeof size === "string" ? size : size + "px");
            }
        };
    });
    window.jQuery = window.$ = jQuery;
    if (typeof define === "function" && define.amd && define.amd.jQuery) {
        define("jquery", [], function() {
            return jQuery;
        });
    }
})(window);
;
jQuery.effects || (function($, undefined) {
    $.effects = {};
    $.each(['backgroundColor', 'borderBottomColor', 'borderLeftColor', 'borderRightColor', 'borderTopColor', 'borderColor', 'color', 'outlineColor'], function(i, attr) {
        $.fx.step[attr] = function(fx) {
            if (!fx.colorInit) {
                fx.start = getColor(fx.elem, attr);
                fx.end = getRGB(fx.end);
                fx.colorInit = true;
            }
            fx.elem.style[attr] = 'rgb(' +
            Math.max(Math.min(parseInt((fx.pos * (fx.end[0] - fx.start[0])) + fx.start[0], 10), 255), 0) + ',' +
            Math.max(Math.min(parseInt((fx.pos * (fx.end[1] - fx.start[1])) + fx.start[1], 10), 255), 0) + ',' +
            Math.max(Math.min(parseInt((fx.pos * (fx.end[2] - fx.start[2])) + fx.start[2], 10), 255), 0) + ')';
        };
    });
    function getRGB(color) {
        var result;
        if (color && color.constructor == Array && color.length == 3)
            return color;
        if (result = /rgb\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*\)/.exec(color))
            return [parseInt(result[1], 10), parseInt(result[2], 10), parseInt(result[3], 10)];
        if (result = /rgb\(\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*\)/.exec(color))
            return [parseFloat(result[1]) * 2.55, parseFloat(result[2]) * 2.55, parseFloat(result[3]) * 2.55];
        if (result = /#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/.exec(color))
            return [parseInt(result[1], 16), parseInt(result[2], 16), parseInt(result[3], 16)];
        if (result = /#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])/.exec(color))
            return [parseInt(result[1] + result[1], 16), parseInt(result[2] + result[2], 16), parseInt(result[3] + result[3], 16)];
        if (result = /rgba\(0, 0, 0, 0\)/.exec(color))
            return colors['transparent'];
        return colors[$.trim(color).toLowerCase()];
    }
    function getColor(elem, attr) {
        var color;
        do {
            color = $.curCSS(elem, attr);
            if (color != '' && color != 'transparent' || $.nodeName(elem, "body"))
                break;
            attr = "backgroundColor";
        } while (elem = elem.parentNode);
        return getRGB(color);
    }
    ;
    var colors = {aqua: [0, 255, 255],azure: [240, 255, 255],beige: [245, 245, 220],black: [0, 0, 0],blue: [0, 0, 255],brown: [165, 42, 42],cyan: [0, 255, 255],darkblue: [0, 0, 139],darkcyan: [0, 139, 139],darkgrey: [169, 169, 169],darkgreen: [0, 100, 0],darkkhaki: [189, 183, 107],darkmagenta: [139, 0, 139],darkolivegreen: [85, 107, 47],darkorange: [255, 140, 0],darkorchid: [153, 50, 204],darkred: [139, 0, 0],darksalmon: [233, 150, 122],darkviolet: [148, 0, 211],fuchsia: [255, 0, 255],gold: [255, 215, 0],green: [0, 128, 0],indigo: [75, 0, 130],khaki: [240, 230, 140],lightblue: [173, 216, 230],lightcyan: [224, 255, 255],lightgreen: [144, 238, 144],lightgrey: [211, 211, 211],lightpink: [255, 182, 193],lightyellow: [255, 255, 224],lime: [0, 255, 0],magenta: [255, 0, 255],maroon: [128, 0, 0],navy: [0, 0, 128],olive: [128, 128, 0],orange: [255, 165, 0],pink: [255, 192, 203],purple: [128, 0, 128],violet: [128, 0, 128],red: [255, 0, 0],silver: [192, 192, 192],white: [255, 255, 255],yellow: [255, 255, 0],transparent: [255, 255, 255]};
    var classAnimationActions = ['add', 'remove', 'toggle'], shorthandStyles = {border: 1,borderBottom: 1,borderColor: 1,borderLeft: 1,borderRight: 1,borderTop: 1,borderWidth: 1,margin: 1,padding: 1};
    function getElementStyles() {
        var style = document.defaultView ? document.defaultView.getComputedStyle(this, null) : this.currentStyle, newStyle = {}, key, camelCase;
        if (style && style.length && style[0] && style[style[0]]) {
            var len = style.length;
            while (len--) {
                key = style[len];
                if (typeof style[key] == 'string') {
                    camelCase = key.replace(/\-(\w)/g, function(all, letter) {
                        return letter.toUpperCase();
                    });
                    newStyle[camelCase] = style[key];
                }
            }
        } else {
            for (key in style) {
                if (typeof style[key] === 'string') {
                    newStyle[key] = style[key];
                }
            }
        }
        return newStyle;
    }
    function filterStyles(styles) {
        var name, value;
        for (name in styles) {
            value = styles[name];
            if (value == null || $.isFunction(value) || name in shorthandStyles || (/scrollbar/).test(name) || (!(/color/i).test(name) && isNaN(parseFloat(value)))) {
                delete styles[name];
            }
        }
        return styles;
    }
    function styleDifference(oldStyle, newStyle) {
        var diff = {_: 0}, name;
        for (name in newStyle) {
            if (oldStyle[name] != newStyle[name]) {
                diff[name] = newStyle[name];
            }
        }
        return diff;
    }
    $.effects.animateClass = function(value, duration, easing, callback) {
        if ($.isFunction(easing)) {
            callback = easing;
            easing = null;
        }
        return this.queue(function() {
            var that = $(this), originalStyleAttr = that.attr('style') || ' ', originalStyle = filterStyles(getElementStyles.call(this)), newStyle, className = that.attr('class');
            $.each(classAnimationActions, function(i, action) {
                if (value[action]) {
                    that[action + 'Class'](value[action]);
                }
            });
            newStyle = filterStyles(getElementStyles.call(this));
            that.attr('class', className);
            that.animate(styleDifference(originalStyle, newStyle), {queue: false,duration: duration,easding: easing,complete: function() {
                    $.each(classAnimationActions, function(i, action) {
                        if (value[action]) {
                            that[action + 'Class'](value[action]);
                        }
                    });
                    if (typeof that.attr('style') == 'object') {
                        that.attr('style').cssText = '';
                        that.attr('style').cssText = originalStyleAttr;
                    } else {
                        that.attr('style', originalStyleAttr);
                    }
                    if (callback) {
                        callback.apply(this, arguments);
                    }
                    $.dequeue(this);
                }});
        });
    };
    $.fn.extend({_addClass: $.fn.addClass,addClass: function(classNames, speed, easing, callback) {
            return speed ? $.effects.animateClass.apply(this, [{add: classNames}, speed, easing, callback]) : this._addClass(classNames);
        },_removeClass: $.fn.removeClass,removeClass: function(classNames, speed, easing, callback) {
            return speed ? $.effects.animateClass.apply(this, [{remove: classNames}, speed, easing, callback]) : this._removeClass(classNames);
        },_toggleClass: $.fn.toggleClass,toggleClass: function(classNames, force, speed, easing, callback) {
            if (typeof force == "boolean" || force === undefined) {
                if (!speed) {
                    return this._toggleClass(classNames, force);
                } else {
                    return $.effects.animateClass.apply(this, [(force ? {add: classNames} : {remove: classNames}), speed, easing, callback]);
                }
            } else {
                return $.effects.animateClass.apply(this, [{toggle: classNames}, force, speed, easing]);
            }
        },switchClass: function(remove, add, speed, easing, callback) {
            return $.effects.animateClass.apply(this, [{add: add,remove: remove}, speed, easing, callback]);
        }});
    $.extend($.effects, {version: "@VERSION",save: function(element, set) {
            for (var i = 0; i < set.length; i++) {
                if (set[i] !== null)
                    element.data("ec.storage." + set[i], element[0].style[set[i]]);
            }
        },restore: function(element, set) {
            for (var i = 0; i < set.length; i++) {
                if (set[i] !== null)
                    element.css(set[i], element.data("ec.storage." + set[i]));
            }
        },setMode: function(el, mode) {
            if (mode == 'toggle')
                mode = el.is(':hidden') ? 'show' : 'hide';
            return mode;
        },getBaseline: function(origin, original) {
            var y, x;
            switch (origin[0]) {
                case 'top':
                    y = 0;
                    break;
                case 'middle':
                    y = 0.5;
                    break;
                case 'bottom':
                    y = 1;
                    break;
                default:
                    y = origin[0] / original.height;
            }
            ;
            switch (origin[1]) {
                case 'left':
                    x = 0;
                    break;
                case 'center':
                    x = 0.5;
                    break;
                case 'right':
                    x = 1;
                    break;
                default:
                    x = origin[1] / original.width;
            }
            ;
            return {x: x,y: y};
        },createWrapper: function(element) {
            if (element.parent().is('.ui-effects-wrapper')) {
                return element.parent();
            }
            var props = {width: element.outerWidth(true),height: element.outerHeight(true),'float': element.css('float')}, wrapper = $('<div></div>').addClass('ui-effects-wrapper').css({fontSize: '100%',background: 'transparent',border: 'none',margin: 0,padding: 0});
            element.wrap(wrapper);
            wrapper = element.parent();
            if (element.css('position') == 'static') {
                wrapper.css({position: 'relative'});
                element.css({position: 'relative'});
            } else {
                $.extend(props, {position: element.css('position'),zIndex: element.css('z-index')});
                $.each(['top', 'left', 'bottom', 'right'], function(i, pos) {
                    props[pos] = element.css(pos);
                    if (isNaN(parseInt(props[pos], 10))) {
                        props[pos] = 'auto';
                    }
                });
                element.css({position: 'relative',top: 0,left: 0,right: 'auto',bottom: 'auto'});
            }
            return wrapper.css(props).show();
        },removeWrapper: function(element) {
            if (element.parent().is('.ui-effects-wrapper'))
                return element.parent().replaceWith(element);
            return element;
        },setTransition: function(element, list, factor, value) {
            value = value || {};
            $.each(list, function(i, x) {
                unit = element.cssUnit(x);
                if (unit[0] > 0)
                    value[x] = unit[0] * factor + unit[1];
            });
            return value;
        }});
    function _normalizeArguments(effect, options, speed, callback) {
        if (typeof effect == 'object') {
            callback = options;
            speed = null;
            options = effect;
            effect = options.effect;
        }
        if ($.isFunction(options)) {
            callback = options;
            speed = null;
            options = {};
        }
        if (typeof options == 'number' || $.fx.speeds[options]) {
            callback = speed;
            speed = options;
            options = {};
        }
        if ($.isFunction(speed)) {
            callback = speed;
            speed = null;
        }
        options = options || {};
        speed = speed || options.duration;
        speed = $.fx.off ? 0 : typeof speed == 'number' ? speed : speed in $.fx.speeds ? $.fx.speeds[speed] : $.fx.speeds._default;
        callback = callback || options.complete;
        return [effect, options, speed, callback];
    }
    function standardSpeed(speed) {
        if (!speed || typeof speed === "number" || $.fx.speeds[speed]) {
            return true;
        }
        if (typeof speed === "string" && !$.effects[speed]) {
            return true;
        }
        return false;
    }
    $.fn.extend({effect: function(effect, options, speed, callback) {
            var args = _normalizeArguments.apply(this, arguments), args2 = {options: args[1],duration: args[2],callback: args[3]}, mode = args2.options.mode, effectMethod = $.effects[effect];
            if ($.fx.off || !effectMethod) {
                if (mode) {
                    return this[mode](args2.duration, args2.callback);
                } else {
                    return this.each(function() {
                        if (args2.callback) {
                            args2.callback.call(this);
                        }
                    });
                }
            }
            return effectMethod.call(this, args2);
        },_show: $.fn.show,show: function(speed) {
            if (standardSpeed(speed)) {
                return this._show.apply(this, arguments);
            } else {
                var args = _normalizeArguments.apply(this, arguments);
                args[1].mode = 'show';
                return this.effect.apply(this, args);
            }
        },_hide: $.fn.hide,hide: function(speed) {
            if (standardSpeed(speed)) {
                return this._hide.apply(this, arguments);
            } else {
                var args = _normalizeArguments.apply(this, arguments);
                args[1].mode = 'hide';
                return this.effect.apply(this, args);
            }
        },__toggle: $.fn.toggle,toggle: function(speed) {
            if (standardSpeed(speed) || typeof speed === "boolean" || $.isFunction(speed)) {
                return this.__toggle.apply(this, arguments);
            } else {
                var args = _normalizeArguments.apply(this, arguments);
                args[1].mode = 'toggle';
                return this.effect.apply(this, args);
            }
        },cssUnit: function(key) {
            var style = this.css(key), val = [];
            $.each(['em', 'px', '%', 'pt'], function(i, unit) {
                if (style.indexOf(unit) > 0)
                    val = [parseFloat(style), unit];
            });
            return val;
        }});
    $.easing.jswing = $.easing.swing;
    $.extend($.easing, {def: 'easeOutQuad',swing: function(x, t, b, c, d) {
            return $.easing[$.easing.def](x, t, b, c, d);
        },easeInQuad: function(x, t, b, c, d) {
            return c * (t /= d) * t + b;
        },easeOutQuad: function(x, t, b, c, d) {
            return -c * (t /= d) * (t - 2) + b;
        },easeInOutQuad: function(x, t, b, c, d) {
            if ((t /= d / 2) < 1)
                return c / 2 * t * t + b;
            return -c / 2 * ((--t) * (t - 2) - 1) + b;
        },easeInCubic: function(x, t, b, c, d) {
            return c * (t /= d) * t * t + b;
        },easeOutCubic: function(x, t, b, c, d) {
            return c * ((t = t / d - 1) * t * t + 1) + b;
        },easeInOutCubic: function(x, t, b, c, d) {
            if ((t /= d / 2) < 1)
                return c / 2 * t * t * t + b;
            return c / 2 * ((t -= 2) * t * t + 2) + b;
        },easeInQuart: function(x, t, b, c, d) {
            return c * (t /= d) * t * t * t + b;
        },easeOutQuart: function(x, t, b, c, d) {
            return -c * ((t = t / d - 1) * t * t * t - 1) + b;
        },easeInOutQuart: function(x, t, b, c, d) {
            if ((t /= d / 2) < 1)
                return c / 2 * t * t * t * t + b;
            return -c / 2 * ((t -= 2) * t * t * t - 2) + b;
        },easeInQuint: function(x, t, b, c, d) {
            return c * (t /= d) * t * t * t * t + b;
        },easeOutQuint: function(x, t, b, c, d) {
            return c * ((t = t / d - 1) * t * t * t * t + 1) + b;
        },easeInOutQuint: function(x, t, b, c, d) {
            if ((t /= d / 2) < 1)
                return c / 2 * t * t * t * t * t + b;
            return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;
        },easeInSine: function(x, t, b, c, d) {
            return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;
        },easeOutSine: function(x, t, b, c, d) {
            return c * Math.sin(t / d * (Math.PI / 2)) + b;
        },easeInOutSine: function(x, t, b, c, d) {
            return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;
        },easeInExpo: function(x, t, b, c, d) {
            return (t == 0) ? b : c * Math.pow(2, 10 * (t / d - 1)) + b;
        },easeOutExpo: function(x, t, b, c, d) {
            return (t == d) ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;
        },easeInOutExpo: function(x, t, b, c, d) {
            if (t == 0)
                return b;
            if (t == d)
                return b + c;
            if ((t /= d / 2) < 1)
                return c / 2 * Math.pow(2, 10 * (t - 1)) + b;
            return c / 2 * (-Math.pow(2, -10 * --t) + 2) + b;
        },easeInCirc: function(x, t, b, c, d) {
            return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;
        },easeOutCirc: function(x, t, b, c, d) {
            return c * Math.sqrt(1 - (t = t / d - 1) * t) + b;
        },easeInOutCirc: function(x, t, b, c, d) {
            if ((t /= d / 2) < 1)
                return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;
            return c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;
        },easeInElastic: function(x, t, b, c, d) {
            var s = 1.70158;
            var p = 0;
            var a = c;
            if (t == 0)
                return b;
            if ((t /= d) == 1)
                return b + c;
            if (!p)
                p = d * .3;
            if (a < Math.abs(c)) {
                a = c;
                var s = p / 4;
            }
            else
                var s = p / (2 * Math.PI) * Math.asin(c / a);
            return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;
        },easeOutElastic: function(x, t, b, c, d) {
            var s = 1.70158;
            var p = 0;
            var a = c;
            if (t == 0)
                return b;
            if ((t /= d) == 1)
                return b + c;
            if (!p)
                p = d * .3;
            if (a < Math.abs(c)) {
                a = c;
                var s = p / 4;
            }
            else
                var s = p / (2 * Math.PI) * Math.asin(c / a);
            return a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b;
        },easeInOutElastic: function(x, t, b, c, d) {
            var s = 1.70158;
            var p = 0;
            var a = c;
            if (t == 0)
                return b;
            if ((t /= d / 2) == 2)
                return b + c;
            if (!p)
                p = d * (.3 * 1.5);
            if (a < Math.abs(c)) {
                a = c;
                var s = p / 4;
            }
            else
                var s = p / (2 * Math.PI) * Math.asin(c / a);
            if (t < 1)
                return -.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;
            return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p) * .5 + c + b;
        },easeInBack: function(x, t, b, c, d, s) {
            if (s == undefined)
                s = 1.70158;
            return c * (t /= d) * t * ((s + 1) * t - s) + b;
        },easeOutBack: function(x, t, b, c, d, s) {
            if (s == undefined)
                s = 1.70158;
            return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;
        },easeInOutBack: function(x, t, b, c, d, s) {
            if (s == undefined)
                s = 1.70158;
            if ((t /= d / 2) < 1)
                return c / 2 * (t * t * (((s *= (1.525)) + 1) * t - s)) + b;
            return c / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2) + b;
        },easeInBounce: function(x, t, b, c, d) {
            return c - $.easing.easeOutBounce(x, d - t, 0, c, d) + b;
        },easeOutBounce: function(x, t, b, c, d) {
            if ((t /= d) < (1 / 2.75)) {
                return c * (7.5625 * t * t) + b;
            } else if (t < (2 / 2.75)) {
                return c * (7.5625 * (t -= (1.5 / 2.75)) * t + .75) + b;
            } else if (t < (2.5 / 2.75)) {
                return c * (7.5625 * (t -= (2.25 / 2.75)) * t + .9375) + b;
            } else {
                return c * (7.5625 * (t -= (2.625 / 2.75)) * t + .984375) + b;
            }
        },easeInOutBounce: function(x, t, b, c, d) {
            if (t < d / 2)
                return $.easing.easeInBounce(x, t * 2, 0, c, d) * .5 + b;
            return $.easing.easeOutBounce(x, t * 2 - d, 0, c, d) * .5 + c * .5 + b;
        }});
})(jQuery);
(function($, undefined) {
    $.effects.highlight = function(o) {
        return this.queue(function() {
            var elem = $(this), props = ['backgroundImage', 'backgroundColor', 'opacity'], mode = $.effects.setMode(elem, o.options.mode || 'show'), animation = {backgroundColor: elem.css('backgroundColor')};
            if (mode == 'hide') {
                animation.opacity = 0;
            }
            $.effects.save(elem, props);
            elem.show().css({backgroundImage: 'none',backgroundColor: o.options.color || '#ffff99'}).animate(animation, {queue: false,duration: o.duration,easing: o.options.easing,complete: function() {
                    (mode == 'hide' && elem.hide());
                    $.effects.restore(elem, props);
                    (mode == 'show' && !$.support.opacity && this.style.removeAttribute('filter'));
                    (o.callback && o.callback.apply(this, arguments));
                    elem.dequeue();
                }});
        });
    };
})(jQuery);
(function($, undefined) {
    $.ui = $.ui || {};
    if ($.ui.version) {
        return;
    }
    $.extend($.ui, {version: "@VERSION",keyCode: {ALT: 18,BACKSPACE: 8,CAPS_LOCK: 20,COMMA: 188,COMMAND: 91,COMMAND_LEFT: 91,COMMAND_RIGHT: 93,CONTROL: 17,DELETE: 46,DOWN: 40,END: 35,ENTER: 13,ESCAPE: 27,HOME: 36,INSERT: 45,LEFT: 37,MENU: 93,NUMPAD_ADD: 107,NUMPAD_DECIMAL: 110,NUMPAD_DIVIDE: 111,NUMPAD_ENTER: 108,NUMPAD_MULTIPLY: 106,NUMPAD_SUBTRACT: 109,PAGE_DOWN: 34,PAGE_UP: 33,PERIOD: 190,RIGHT: 39,SHIFT: 16,SPACE: 32,TAB: 9,UP: 38,WINDOWS: 91}});
    $.fn.extend({_focus: $.fn.focus,focus: function(delay, fn) {
            return typeof delay === "number" ? this.each(function() {
                var elem = this;
                setTimeout(function() {
                    $(elem).focus();
                    if (fn) {
                        fn.call(elem);
                    }
                }, delay);
            }) : this._focus.apply(this, arguments);
        },scrollParent: function() {
            var scrollParent;
            if (($.browser.msie && (/(static|relative)/).test(this.css('position'))) || (/absolute/).test(this.css('position'))) {
                scrollParent = this.parents().filter(function() {
                    return (/(relative|absolute|fixed)/).test($.curCSS(this, 'position', 1)) && (/(auto|scroll)/).test($.curCSS(this, 'overflow', 1) + $.curCSS(this, 'overflow-y', 1) + $.curCSS(this, 'overflow-x', 1));
                }).eq(0);
            } else {
                scrollParent = this.parents().filter(function() {
                    return (/(auto|scroll)/).test($.curCSS(this, 'overflow', 1) + $.curCSS(this, 'overflow-y', 1) + $.curCSS(this, 'overflow-x', 1));
                }).eq(0);
            }
            return (/fixed/).test(this.css('position')) || !scrollParent.length ? $(document) : scrollParent;
        },zIndex: function(zIndex) {
            if (zIndex !== undefined) {
                return this.css("zIndex", zIndex);
            }
            if (this.length) {
                var elem = $(this[0]), position, value;
                while (elem.length && elem[0] !== document) {
                    position = elem.css("position");
                    if (position === "absolute" || position === "relative" || position === "fixed") {
                        value = parseInt(elem.css("zIndex"), 10);
                        if (!isNaN(value) && value !== 0) {
                            return value;
                        }
                    }
                    elem = elem.parent();
                }
            }
            return 0;
        },disableSelection: function() {
            return this.bind(($.support.selectstart ? "selectstart" : "mousedown") + ".ui-disableSelection", function(event) {
                event.preventDefault();
            });
        },enableSelection: function() {
            return this.unbind(".ui-disableSelection");
        }});
    $.each(["Width", "Height"], function(i, name) {
        var side = name === "Width" ? ["Left", "Right"] : ["Top", "Bottom"], type = name.toLowerCase(), orig = {innerWidth: $.fn.innerWidth,innerHeight: $.fn.innerHeight,outerWidth: $.fn.outerWidth,outerHeight: $.fn.outerHeight};
        function reduce(elem, size, border, margin) {
            $.each(side, function() {
                size -= parseFloat($.curCSS(elem, "padding" + this, true)) || 0;
                if (border) {
                    size -= parseFloat($.curCSS(elem, "border" + this + "Width", true)) || 0;
                }
                if (margin) {
                    size -= parseFloat($.curCSS(elem, "margin" + this, true)) || 0;
                }
            });
            return size;
        }
        $.fn["inner" + name] = function(size) {
            if (size === undefined) {
                return orig["inner" + name].call(this);
            }
            return this.each(function() {
                $(this).css(type, reduce(this, size) + "px");
            });
        };
        $.fn["outer" + name] = function(size, margin) {
            if (typeof size !== "number") {
                return orig["outer" + name].call(this, size);
            }
            return this.each(function() {
                $(this).css(type, reduce(this, size, true, margin) + "px");
            });
        };
    });
    function focusable(element, isTabIndexNotNaN) {
        var nodeName = element.nodeName.toLowerCase();
        if ("area" === nodeName) {
            var map = element.parentNode, mapName = map.name, img;
            if (!element.href || !mapName || map.nodeName.toLowerCase() !== "map") {
                return false;
            }
            img = $("img[usemap=#" + mapName + "]")[0];
            return !!img && visible(img);
        }
        return (/input|select|textarea|button|object/.test(nodeName) ? !element.disabled : "a" == nodeName ? element.href || isTabIndexNotNaN : isTabIndexNotNaN) && visible(element);
    }
    function visible(element) {
        return !$(element).parents().andSelf().filter(function() {
            return $.curCSS(this, "visibility") === "hidden" || $.expr.filters.hidden(this);
        }).length;
    }
    $.extend($.expr[":"], {data: function(elem, i, match) {
            return !!$.data(elem, match[3]);
        },focusable: function(element) {
            return focusable(element, !isNaN($.attr(element, "tabindex")));
        },tabbable: function(element) {
            var tabIndex = $.attr(element, "tabindex"), isTabIndexNaN = isNaN(tabIndex);
            return (isTabIndexNaN || tabIndex >= 0) && focusable(element, !isTabIndexNaN);
        }});
    $(function() {
        var body = document.body, div = body.appendChild(div = document.createElement("div"));
        $.extend(div.style, {minHeight: "100px",height: "auto",padding: 0,borderWidth: 0});
        $.support.minHeight = div.offsetHeight === 100;
        $.support.selectstart = "onselectstart" in div;
        body.removeChild(div).style.display = "none";
    });
    $.extend($.ui, {plugin: {add: function(module, option, set) {
                var proto = $.ui[module].prototype;
                for (var i in set) {
                    proto.plugins[i] = proto.plugins[i] || [];
                    proto.plugins[i].push([option, set[i]]);
                }
            },call: function(instance, name, args) {
                var set = instance.plugins[name];
                if (!set || !instance.element[0].parentNode) {
                    return;
                }
                for (var i = 0; i < set.length; i++) {
                    if (instance.options[set[i][0]]) {
                        set[i][1].apply(instance.element, args);
                    }
                }
            }},contains: function(a, b) {
            return document.compareDocumentPosition ? a.compareDocumentPosition(b) & 16 : a !== b && a.contains(b);
        },hasScroll: function(el, a) {
            if ($(el).css("overflow") === "hidden") {
                return false;
            }
            var scroll = (a && a === "left") ? "scrollLeft" : "scrollTop", has = false;
            if (el[scroll] > 0) {
                return true;
            }
            el[scroll] = 1;
            has = (el[scroll] > 0);
            el[scroll] = 0;
            return has;
        },isOverAxis: function(x, reference, size) {
            return (x > reference) && (x < (reference + size));
        },isOver: function(y, x, top, left, height, width) {
            return $.ui.isOverAxis(y, top, height) && $.ui.isOverAxis(x, left, width);
        }});
})(jQuery);
(function($, undefined) {
    if ($.cleanData) {
        var _cleanData = $.cleanData;
        $.cleanData = function(elems) {
            for (var i = 0, elem; (elem = elems[i]) != null; i++) {
                $(elem).triggerHandler("remove");
            }
            _cleanData(elems);
        };
    } else {
        var _remove = $.fn.remove;
        $.fn.remove = function(selector, keepData) {
            return this.each(function() {
                if (!keepData) {
                    if (!selector || $.filter(selector, [this]).length) {
                        $("*", this).add([this]).each(function() {
                            $(this).triggerHandler("remove");
                        });
                    }
                }
                return _remove.call($(this), selector, keepData);
            });
        };
    }
    $.widget = function(name, base, prototype) {
        var namespace = name.split(".")[0], fullName;
        name = name.split(".")[1];
        fullName = namespace + "-" + name;
        if (!prototype) {
            prototype = base;
            base = $.Widget;
        }
        $.expr[":"][fullName] = function(elem) {
            return !!$.data(elem, name);
        };
        $[namespace] = $[namespace] || {};
        $[namespace][name] = function(options, element) {
            if (arguments.length) {
                this._createWidget(options, element);
            }
        };
        var basePrototype = new base();
        basePrototype.options = $.extend(true, {}, basePrototype.options);
        $[namespace][name].prototype = $.extend(true, basePrototype, {namespace: namespace,widgetName: name,widgetEventPrefix: $[namespace][name].prototype.widgetEventPrefix || name,widgetBaseClass: fullName}, prototype);
        $.widget.bridge(name, $[namespace][name]);
    };
    $.widget.bridge = function(name, object) {
        $.fn[name] = function(options) {
            var isMethodCall = typeof options === "string", args = Array.prototype.slice.call(arguments, 1), returnValue = this;
            options = !isMethodCall && args.length ? $.extend.apply(null, [true, options].concat(args)) : options;
            if (isMethodCall && options.charAt(0) === "_") {
                return returnValue;
            }
            if (isMethodCall) {
                this.each(function() {
                    var instance = $.data(this, name), methodValue = instance && $.isFunction(instance[options]) ? instance[options].apply(instance, args) : instance;
                    if (methodValue !== instance && methodValue !== undefined) {
                        returnValue = methodValue;
                        return false;
                    }
                });
            } else {
                this.each(function() {
                    var instance = $.data(this, name);
                    if (instance) {
                        instance.option(options || {})._init();
                    } else {
                        $.data(this, name, new object(options, this));
                    }
                });
            }
            return returnValue;
        };
    };
    $.Widget = function(options, element) {
        if (arguments.length) {
            this._createWidget(options, element);
        }
    };
    $.Widget.prototype = {widgetName: "widget",widgetEventPrefix: "",options: {disabled: false},_createWidget: function(options, element) {
            $.data(element, this.widgetName, this);
            this.element = $(element);
            this.options = $.extend(true, {}, this.options, this._getCreateOptions(), options);
            var self = this;
            this.element.bind("remove." + this.widgetName, function() {
                self.destroy();
            });
            this._create();
            this._trigger("create");
            this._init();
        },_getCreateOptions: function() {
            return $.metadata && $.metadata.get(this.element[0])[this.widgetName];
        },_create: function() {
        },_init: function() {
        },destroy: function() {
            this.element.unbind("." + this.widgetName).removeData(this.widgetName);
            this.widget().unbind("." + this.widgetName).removeAttr("aria-disabled").removeClass(this.widgetBaseClass + "-disabled " + "ui-state-disabled");
        },widget: function() {
            return this.element;
        },option: function(key, value) {
            var options = key;
            if (arguments.length === 0) {
                return $.extend({}, this.options);
            }
            if (typeof key === "string") {
                if (value === undefined) {
                    return this.options[key];
                }
                options = {};
                options[key] = value;
            }
            this._setOptions(options);
            return this;
        },_setOptions: function(options) {
            var self = this;
            $.each(options, function(key, value) {
                self._setOption(key, value);
            });
            return this;
        },_setOption: function(key, value) {
            this.options[key] = value;
            if (key === "disabled") {
                this.widget()
                [value ? "addClass" : "removeClass"](this.widgetBaseClass + "-disabled" + " " + "ui-state-disabled").attr("aria-disabled", value);
            }
            return this;
        },enable: function() {
            return this._setOption("disabled", false);
        },disable: function() {
            return this._setOption("disabled", true);
        },_trigger: function(type, event, data) {
            var callback = this.options[type];
            event = $.Event(event);
            event.type = (type === this.widgetEventPrefix ? type : this.widgetEventPrefix + type).toLowerCase();
            data = data || {};
            if (event.originalEvent) {
                for (var i = $.event.props.length, prop; i; ) {
                    prop = $.event.props[--i];
                    event[prop] = event.originalEvent[prop];
                }
            }
            this.element.trigger(event, data);
            return !($.isFunction(callback) && callback.call(this.element[0], event, data) === false || event.isDefaultPrevented());
        }};
})(jQuery);
(function($, undefined) {
    $.ui = $.ui || {};
    var horizontalPositions = /left|center|right/, verticalPositions = /top|center|bottom/, center = "center", _position = $.fn.position, _offset = $.fn.offset;
    $.fn.position = function(options) {
        if (!options || !options.of) {
            return _position.apply(this, arguments);
        }
        options = $.extend({}, options);
        var target = $(options.of), targetElem = target[0], collision = (options.collision || "flip").split(" "), offset = options.offset ? options.offset.split(" ") : [0, 0], targetWidth, targetHeight, basePosition;
        if (targetElem.nodeType === 9) {
            targetWidth = target.width();
            targetHeight = target.height();
            basePosition = {top: 0,left: 0};
        } else if (targetElem.setTimeout) {
            targetWidth = target.width();
            targetHeight = target.height();
            basePosition = {top: target.scrollTop(),left: target.scrollLeft()};
        } else if (targetElem.preventDefault) {
            options.at = "left top";
            targetWidth = targetHeight = 0;
            basePosition = {top: options.of.pageY,left: options.of.pageX};
        } else {
            targetWidth = target.outerWidth();
            targetHeight = target.outerHeight();
            basePosition = target.offset();
        }
        $.each(["my", "at"], function() {
            var pos = (options[this] || "").split(" ");
            if (pos.length === 1) {
                pos = horizontalPositions.test(pos[0]) ? pos.concat([center]) : verticalPositions.test(pos[0]) ? [center].concat(pos) : [center, center];
            }
            pos[0] = horizontalPositions.test(pos[0]) ? pos[0] : center;
            pos[1] = verticalPositions.test(pos[1]) ? pos[1] : center;
            options[this] = pos;
        });
        if (collision.length === 1) {
            collision[1] = collision[0];
        }
        offset[0] = parseInt(offset[0], 10) || 0;
        if (offset.length === 1) {
            offset[1] = offset[0];
        }
        offset[1] = parseInt(offset[1], 10) || 0;
        if (options.at[0] === "right") {
            basePosition.left += targetWidth;
        } else if (options.at[0] === center) {
            basePosition.left += targetWidth / 2;
        }
        if (options.at[1] === "bottom") {
            basePosition.top += targetHeight;
        } else if (options.at[1] === center) {
            basePosition.top += targetHeight / 2;
        }
        basePosition.left += offset[0];
        basePosition.top += offset[1];
        return this.each(function() {
            var elem = $(this), elemWidth = elem.outerWidth(), elemHeight = elem.outerHeight(), marginLeft = parseInt($.curCSS(this, "marginLeft", true)) || 0, marginTop = parseInt($.curCSS(this, "marginTop", true)) || 0, collisionWidth = elemWidth + marginLeft +
            (parseInt($.curCSS(this, "marginRight", true)) || 0), collisionHeight = elemHeight + marginTop +
            (parseInt($.curCSS(this, "marginBottom", true)) || 0), position = $.extend({}, basePosition), collisionPosition;
            if (options.my[0] === "right") {
                position.left -= elemWidth;
            } else if (options.my[0] === center) {
                position.left -= elemWidth / 2;
            }
            if (options.my[1] === "bottom") {
                position.top -= elemHeight;
            } else if (options.my[1] === center) {
                position.top -= elemHeight / 2;
            }
            position.left = Math.round(position.left);
            position.top = Math.round(position.top);
            collisionPosition = {left: position.left - marginLeft,top: position.top - marginTop};
            $.each(["left", "top"], function(i, dir) {
                if ($.ui.position[collision[i]]) {
                    $.ui.position[collision[i]][dir](position, {targetWidth: targetWidth,targetHeight: targetHeight,elemWidth: elemWidth,elemHeight: elemHeight,collisionPosition: collisionPosition,collisionWidth: collisionWidth,collisionHeight: collisionHeight,offset: offset,my: options.my,at: options.at});
                }
            });
            if ($.fn.bgiframe) {
                elem.bgiframe();
            }
            elem.offset($.extend(position, {using: options.using}));
        });
    };
    $.ui.position = {fit: {left: function(position, data) {
                var win = $(window), over = data.collisionPosition.left + data.collisionWidth - win.width() - win.scrollLeft();
                position.left = over > 0 ? position.left - over : Math.max(position.left - data.collisionPosition.left, position.left);
            },top: function(position, data) {
                var win = $(window), over = data.collisionPosition.top + data.collisionHeight - win.height() - win.scrollTop();
                position.top = over > 0 ? position.top - over : Math.max(position.top - data.collisionPosition.top, position.top);
            }},flip: {left: function(position, data) {
                if (data.at[0] === center) {
                    return;
                }
                var win = $(window), over = data.collisionPosition.left + data.collisionWidth - win.width() - win.scrollLeft(), myOffset = data.my[0] === "left" ? -data.elemWidth : data.my[0] === "right" ? data.elemWidth : 0, atOffset = data.at[0] === "left" ? data.targetWidth : -data.targetWidth, offset = -2 * data.offset[0];
                position.left += data.collisionPosition.left < 0 ? myOffset + atOffset + offset : over > 0 ? myOffset + atOffset + offset : 0;
            },top: function(position, data) {
                if (data.at[1] === center) {
                    return;
                }
                var win = $(window), over = data.collisionPosition.top + data.collisionHeight - win.height() - win.scrollTop(), myOffset = data.my[1] === "top" ? -data.elemHeight : data.my[1] === "bottom" ? data.elemHeight : 0, atOffset = data.at[1] === "top" ? data.targetHeight : -data.targetHeight, offset = -2 * data.offset[1];
                position.top += data.collisionPosition.top < 0 ? myOffset + atOffset + offset : over > 0 ? myOffset + atOffset + offset : 0;
            }}};
    if (!$.offset.setOffset) {
        $.offset.setOffset = function(elem, options) {
            if (/static/.test($.curCSS(elem, "position"))) {
                elem.style.position = "relative";
            }
            var curElem = $(elem), curOffset = curElem.offset(), curTop = parseInt($.curCSS(elem, "top", true), 10) || 0, curLeft = parseInt($.curCSS(elem, "left", true), 10) || 0, props = {top: (options.top - curOffset.top) + curTop,left: (options.left - curOffset.left) + curLeft};
            if ('using' in options) {
                options.using.call(elem, props);
            } else {
                curElem.css(props);
            }
        };
        $.fn.offset = function(options) {
            var elem = this[0];
            if (!elem || !elem.ownerDocument) {
                return null;
            }
            if (options) {
                return this.each(function() {
                    $.offset.setOffset(this, options);
                });
            }
            return _offset.call(this);
        };
    }
}(jQuery));
(function($, undefined) {
    var mouseHandled = false;
    $(document).mousedown(function(e) {
        mouseHandled = false;
    });
    $.widget("ui.mouse", {options: {cancel: ':input,option',distance: 1,delay: 0},_mouseInit: function() {
            var self = this;
            this.element.bind('mousedown.' + this.widgetName, function(event) {
                return self._mouseDown(event);
            }).bind('click.' + this.widgetName, function(event) {
                if (true === $.data(event.target, self.widgetName + '.preventClickEvent')) {
                    $.removeData(event.target, self.widgetName + '.preventClickEvent');
                    event.stopImmediatePropagation();
                    return false;
                }
            });
            this.started = false;
        },_mouseDestroy: function() {
            this.element.unbind('.' + this.widgetName);
        },_mouseDown: function(event) {
            if (mouseHandled) {
                return
            }
            ;
            (this._mouseStarted && this._mouseUp(event));
            this._mouseDownEvent = event;
            var self = this, btnIsLeft = (event.which == 1), elIsCancel = (typeof this.options.cancel == "string" ? $(event.target).parents().add(event.target).filter(this.options.cancel).length : false);
            if (!btnIsLeft || elIsCancel || !this._mouseCapture(event)) {
                return true;
            }
            this.mouseDelayMet = !this.options.delay;
            if (!this.mouseDelayMet) {
                this._mouseDelayTimer = setTimeout(function() {
                    self.mouseDelayMet = true;
                }, this.options.delay);
            }
            if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
                this._mouseStarted = (this._mouseStart(event) !== false);
                if (!this._mouseStarted) {
                    event.preventDefault();
                    return true;
                }
            }
            if (true === $.data(event.target, this.widgetName + '.preventClickEvent')) {
                $.removeData(event.target, this.widgetName + '.preventClickEvent');
            }
            this._mouseMoveDelegate = function(event) {
                return self._mouseMove(event);
            };
            this._mouseUpDelegate = function(event) {
                return self._mouseUp(event);
            };
            $(document).bind('mousemove.' + this.widgetName, this._mouseMoveDelegate).bind('mouseup.' + this.widgetName, this._mouseUpDelegate);
            event.preventDefault();
            mouseHandled = true;
            return true;
        },_mouseMove: function(event) {
            if ($.browser.msie && !(document.documentMode >= 9) && !event.button) {
                return this._mouseUp(event);
            }
            if (this._mouseStarted) {
                this._mouseDrag(event);
                return event.preventDefault();
            }
            if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
                this._mouseStarted = (this._mouseStart(this._mouseDownEvent, event) !== false);
                (this._mouseStarted ? this._mouseDrag(event) : this._mouseUp(event));
            }
            return !this._mouseStarted;
        },_mouseUp: function(event) {
            $(document).unbind('mousemove.' + this.widgetName, this._mouseMoveDelegate).unbind('mouseup.' + this.widgetName, this._mouseUpDelegate);
            if (this._mouseStarted) {
                this._mouseStarted = false;
                if (event.target == this._mouseDownEvent.target) {
                    $.data(event.target, this.widgetName + '.preventClickEvent', true);
                }
                this._mouseStop(event);
            }
            return false;
        },_mouseDistanceMet: function(event) {
            return (Math.max(Math.abs(this._mouseDownEvent.pageX - event.pageX), Math.abs(this._mouseDownEvent.pageY - event.pageY)) >= this.options.distance);
        },_mouseDelayMet: function(event) {
            return this.mouseDelayMet;
        },_mouseStart: function(event) {
        },_mouseDrag: function(event) {
        },_mouseStop: function(event) {
        },_mouseCapture: function(event) {
            return true;
        }});
})(jQuery);
(function($, undefined) {
    $.widget("ui.draggable", $.ui.mouse, {widgetEventPrefix: "drag",options: {addClasses: true,appendTo: "parent",axis: false,connectToSortable: false,containment: false,cursor: "auto",cursorAt: false,grid: false,handle: false,helper: "original",iframeFix: false,opacity: false,refreshPositions: false,revert: false,revertDuration: 500,scope: "default",scroll: true,scrollSensitivity: 20,scrollSpeed: 20,snap: false,snapMode: "both",snapTolerance: 20,stack: false,zIndex: false},_create: function() {
            if (this.options.helper == 'original' && !(/^(?:r|a|f)/).test(this.element.css("position")))
                this.element[0].style.position = 'relative';
            (this.options.addClasses && this.element.addClass("ui-draggable"));
            (this.options.disabled && this.element.addClass("ui-draggable-disabled"));
            this._mouseInit();
        },destroy: function() {
            if (!this.element.data('draggable'))
                return;
            this.element.removeData("draggable").unbind(".draggable").removeClass("ui-draggable"
            + " ui-draggable-dragging"
            + " ui-draggable-disabled");
            this._mouseDestroy();
            return this;
        },_mouseCapture: function(event) {
            var o = this.options;
            if (this.helper || o.disabled || $(event.target).is('.ui-resizable-handle'))
                return false;
            this.handle = this._getHandle(event);
            if (!this.handle)
                return false;
            $(o.iframeFix === true ? "iframe" : o.iframeFix).each(function() {
                $('<div class="ui-draggable-iframeFix" style="background: #fff;"></div>').css({width: this.offsetWidth + "px",height: this.offsetHeight + "px",position: "absolute",opacity: "0.001",zIndex: 1000}).css($(this).offset()).appendTo("body");
            });
            return true;
        },_mouseStart: function(event) {
            var o = this.options;
            this.helper = this._createHelper(event);
            this._cacheHelperProportions();
            if ($.ui.ddmanager)
                $.ui.ddmanager.current = this;
            this._cacheMargins();
            this.cssPosition = this.helper.css("position");
            this.scrollParent = this.helper.scrollParent();
            this.offset = this.positionAbs = this.element.offset();
            this.offset = {top: this.offset.top - this.margins.top,left: this.offset.left - this.margins.left};
            $.extend(this.offset, {click: {left: event.pageX - this.offset.left,top: event.pageY - this.offset.top},parent: this._getParentOffset(),relative: this._getRelativeOffset()});
            this.originalPosition = this.position = this._generatePosition(event);
            this.originalPageX = event.pageX;
            this.originalPageY = event.pageY;
            (o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt));
            if (o.containment)
                this._setContainment();
            if (this._trigger("start", event) === false) {
                this._clear();
                return false;
            }
            this._cacheHelperProportions();
            if ($.ui.ddmanager && !o.dropBehaviour)
                $.ui.ddmanager.prepareOffsets(this, event);
            this.helper.addClass("ui-draggable-dragging");
            this._mouseDrag(event, true);
            return true;
        },_mouseDrag: function(event, noPropagation) {
            this.position = this._generatePosition(event);
            this.positionAbs = this._convertPositionTo("absolute");
            if (!noPropagation) {
                var ui = this._uiHash();
                if (this._trigger('drag', event, ui) === false) {
                    this._mouseUp({});
                    return false;
                }
                this.position = ui.position;
            }
            if (!this.options.axis || this.options.axis != "y")
                this.helper[0].style.left = this.position.left + 'px';
            if (!this.options.axis || this.options.axis != "x")
                this.helper[0].style.top = this.position.top + 'px';
            if ($.ui.ddmanager)
                $.ui.ddmanager.drag(this, event);
            return false;
        },_mouseStop: function(event) {
            var dropped = false;
            if ($.ui.ddmanager && !this.options.dropBehaviour)
                dropped = $.ui.ddmanager.drop(this, event);
            if (this.dropped) {
                dropped = this.dropped;
                this.dropped = false;
            }
            if ((!this.element[0] || !this.element[0].parentNode) && this.options.helper == "original")
                return false;
            if ((this.options.revert == "invalid" && !dropped) || (this.options.revert == "valid" && dropped) || this.options.revert === true || ($.isFunction(this.options.revert) && this.options.revert.call(this.element, dropped))) {
                var self = this;
                $(this.helper).animate(this.originalPosition, parseInt(this.options.revertDuration, 10), function() {
                    if (self._trigger("stop", event) !== false) {
                        self._clear();
                    }
                });
            } else {
                if (this._trigger("stop", event) !== false) {
                    this._clear();
                }
            }
            return false;
        },_mouseUp: function(event) {
            if (this.options.iframeFix === true) {
                $("div.ui-draggable-iframeFix").each(function() {
                    this.parentNode.removeChild(this);
                });
            }
            return $.ui.mouse.prototype._mouseUp.call(this, event);
        },cancel: function() {
            if (this.helper.is(".ui-draggable-dragging")) {
                this._mouseUp({});
            } else {
                this._clear();
            }
            return this;
        },_getHandle: function(event) {
            var handle = !this.options.handle || !$(this.options.handle, this.element).length ? true : false;
            $(this.options.handle, this.element).find("*").andSelf().each(function() {
                if (this == event.target)
                    handle = true;
            });
            return handle;
        },_createHelper: function(event) {
            var o = this.options;
            var helper = $.isFunction(o.helper) ? $(o.helper.apply(this.element[0], [event])) : (o.helper == 'clone' ? this.element.clone().removeAttr('id') : this.element);
            if (!helper.parents('body').length)
                helper.appendTo((o.appendTo == 'parent' ? this.element[0].parentNode : o.appendTo));
            if (helper[0] != this.element[0] && !(/(fixed|absolute)/).test(helper.css("position")))
                helper.css("position", "absolute");
            return helper;
        },_adjustOffsetFromHelper: function(obj) {
            if (typeof obj == 'string') {
                obj = obj.split(' ');
            }
            if ($.isArray(obj)) {
                obj = {left: +obj[0],top: +obj[1] || 0};
            }
            if ('left' in obj) {
                this.offset.click.left = obj.left + this.margins.left;
            }
            if ('right' in obj) {
                this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
            }
            if ('top' in obj) {
                this.offset.click.top = obj.top + this.margins.top;
            }
            if ('bottom' in obj) {
                this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
            }
        },_getParentOffset: function() {
            this.offsetParent = this.helper.offsetParent();
            var po = this.offsetParent.offset();
            if (this.cssPosition == 'absolute' && this.scrollParent[0] != document && $.ui.contains(this.scrollParent[0], this.offsetParent[0])) {
                po.left += this.scrollParent.scrollLeft();
                po.top += this.scrollParent.scrollTop();
            }
            if ((this.offsetParent[0] == document.body) || (this.offsetParent[0].tagName && this.offsetParent[0].tagName.toLowerCase() == 'html' && $.browser.msie))
                po = {top: 0,left: 0};
            return {top: po.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0),left: po.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0)};
        },_getRelativeOffset: function() {
            if (this.cssPosition == "relative") {
                var p = this.element.position();
                return {top: p.top - (parseInt(this.helper.css("top"), 10) || 0) + this.scrollParent.scrollTop(),left: p.left - (parseInt(this.helper.css("left"), 10) || 0) + this.scrollParent.scrollLeft()};
            } else {
                return {top: 0,left: 0};
            }
        },_cacheMargins: function() {
            this.margins = {left: (parseInt(this.element.css("marginLeft"), 10) || 0),top: (parseInt(this.element.css("marginTop"), 10) || 0),right: (parseInt(this.element.css("marginRight"), 10) || 0),bottom: (parseInt(this.element.css("marginBottom"), 10) || 0)};
        },_cacheHelperProportions: function() {
            this.helperProportions = {width: this.helper.outerWidth(),height: this.helper.outerHeight()};
        },_setContainment: function() {
            var o = this.options;
            if (o.containment == 'parent')
                o.containment = this.helper[0].parentNode;
            if (o.containment == 'document' || o.containment == 'window')
                this.containment = [(o.containment == 'document' ? 0 : $(window).scrollLeft()) - this.offset.relative.left - this.offset.parent.left, (o.containment == 'document' ? 0 : $(window).scrollTop()) - this.offset.relative.top - this.offset.parent.top, (o.containment == 'document' ? 0 : $(window).scrollLeft()) + $(o.containment == 'document' ? document : window).width() - this.helperProportions.width - this.margins.left, (o.containment == 'document' ? 0 : $(window).scrollTop()) + ($(o.containment == 'document' ? document : window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top];
            if (!(/^(document|window|parent)$/).test(o.containment) && o.containment.constructor != Array) {
                var c = $(o.containment);
                var ce = c[0];
                if (!ce)
                    return;
                var co = c.offset();
                var over = ($(ce).css("overflow") != 'hidden');
                this.containment = [(parseInt($(ce).css("borderLeftWidth"), 10) || 0) + (parseInt($(ce).css("paddingLeft"), 10) || 0), (parseInt($(ce).css("borderTopWidth"), 10) || 0) + (parseInt($(ce).css("paddingTop"), 10) || 0), (over ? Math.max(ce.scrollWidth, ce.offsetWidth) : ce.offsetWidth) - (parseInt($(ce).css("borderLeftWidth"), 10) || 0) - (parseInt($(ce).css("paddingRight"), 10) || 0) - this.helperProportions.width - this.margins.left - this.margins.right, (over ? Math.max(ce.scrollHeight, ce.offsetHeight) : ce.offsetHeight) - (parseInt($(ce).css("borderTopWidth"), 10) || 0) - (parseInt($(ce).css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top - this.margins.bottom];
                this.relative_container = c;
            } else if (o.containment.constructor == Array) {
                this.containment = o.containment;
            }
        },_convertPositionTo: function(d, pos) {
            if (!pos)
                pos = this.position;
            var mod = d == "absolute" ? 1 : -1;
            var o = this.options, scroll = this.cssPosition == 'absolute' && !(this.scrollParent[0] != document && $.ui.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent, scrollIsRootNode = (/(html|body)/i).test(scroll[0].tagName);
            return {top: (pos.top
                + this.offset.relative.top * mod
                + this.offset.parent.top * mod
                - ($.browser.safari && $.browser.version < 526 && this.cssPosition == 'fixed' ? 0 : (this.cssPosition == 'fixed' ? -this.scrollParent.scrollTop() : (scrollIsRootNode ? 0 : scroll.scrollTop())) * mod)),left: (pos.left
                + this.offset.relative.left * mod
                + this.offset.parent.left * mod
                - ($.browser.safari && $.browser.version < 526 && this.cssPosition == 'fixed' ? 0 : (this.cssPosition == 'fixed' ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft()) * mod))};
        },_generatePosition: function(event) {
            var o = this.options, scroll = this.cssPosition == 'absolute' && !(this.scrollParent[0] != document && $.ui.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent, scrollIsRootNode = (/(html|body)/i).test(scroll[0].tagName);
            var pageX = event.pageX;
            var pageY = event.pageY;
            if (this.originalPosition) {
                var containment;
                if (this.containment) {
                    if (this.relative_container) {
                        var co = this.relative_container.offset();
                        containment = [this.containment[0] + co.left, this.containment[1] + co.top, this.containment[2] + co.left, this.containment[3] + co.top];
                    }
                    else {
                        containment = this.containment;
                    }
                    if (event.pageX - this.offset.click.left < containment[0])
                        pageX = containment[0] + this.offset.click.left;
                    if (event.pageY - this.offset.click.top < containment[1])
                        pageY = containment[1] + this.offset.click.top;
                    if (event.pageX - this.offset.click.left > containment[2])
                        pageX = containment[2] + this.offset.click.left;
                    if (event.pageY - this.offset.click.top > containment[3])
                        pageY = containment[3] + this.offset.click.top;
                }
                if (o.grid) {
                    var top = this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1];
                    pageY = containment ? (!(top - this.offset.click.top < containment[1] || top - this.offset.click.top > containment[3]) ? top : (!(top - this.offset.click.top < containment[1]) ? top - o.grid[1] : top + o.grid[1])) : top;
                    var left = this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0];
                    pageX = containment ? (!(left - this.offset.click.left < containment[0] || left - this.offset.click.left > containment[2]) ? left : (!(left - this.offset.click.left < containment[0]) ? left - o.grid[0] : left + o.grid[0])) : left;
                }
            }
            return {top: (pageY
                - this.offset.click.top
                - this.offset.relative.top
                - this.offset.parent.top
                + ($.browser.safari && $.browser.version < 526 && this.cssPosition == 'fixed' ? 0 : (this.cssPosition == 'fixed' ? -this.scrollParent.scrollTop() : (scrollIsRootNode ? 0 : scroll.scrollTop())))),left: (pageX
                - this.offset.click.left
                - this.offset.relative.left
                - this.offset.parent.left
                + ($.browser.safari && $.browser.version < 526 && this.cssPosition == 'fixed' ? 0 : (this.cssPosition == 'fixed' ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft())))};
        },_clear: function() {
            this.helper.removeClass("ui-draggable-dragging");
            if (this.helper[0] != this.element[0] && !this.cancelHelperRemoval)
                this.helper.remove();
            this.helper = null;
            this.cancelHelperRemoval = false;
        },_trigger: function(type, event, ui) {
            ui = ui || this._uiHash();
            $.ui.plugin.call(this, type, [event, ui]);
            if (type == "drag")
                this.positionAbs = this._convertPositionTo("absolute");
            return $.Widget.prototype._trigger.call(this, type, event, ui);
        },plugins: {},_uiHash: function(event) {
            return {helper: this.helper,position: this.position,originalPosition: this.originalPosition,offset: this.positionAbs};
        }});
    $.extend($.ui.draggable, {version: "@VERSION"});
    $.ui.plugin.add("draggable", "connectToSortable", {start: function(event, ui) {
            var inst = $(this).data("draggable"), o = inst.options, uiSortable = $.extend({}, ui, {item: inst.element});
            inst.sortables = [];
            $(o.connectToSortable).each(function() {
                var sortable = $.data(this, 'sortable');
                if (sortable && !sortable.options.disabled) {
                    inst.sortables.push({instance: sortable,shouldRevert: sortable.options.revert});
                    sortable.refreshPositions();
                    sortable._trigger("activate", event, uiSortable);
                }
            });
        },stop: function(event, ui) {
            var inst = $(this).data("draggable"), uiSortable = $.extend({}, ui, {item: inst.element});
            $.each(inst.sortables, function() {
                if (this.instance.isOver) {
                    this.instance.isOver = 0;
                    inst.cancelHelperRemoval = true;
                    this.instance.cancelHelperRemoval = false;
                    if (this.shouldRevert)
                        this.instance.options.revert = true;
                    this.instance._mouseStop(event);
                    this.instance.options.helper = this.instance.options._helper;
                    if (inst.options.helper == 'original')
                        this.instance.currentItem.css({top: 'auto',left: 'auto'});
                } else {
                    this.instance.cancelHelperRemoval = false;
                    this.instance._trigger("deactivate", event, uiSortable);
                }
            });
        },drag: function(event, ui) {
            var inst = $(this).data("draggable"), self = this;
            var checkPos = function(o) {
                var dyClick = this.offset.click.top, dxClick = this.offset.click.left;
                var helperTop = this.positionAbs.top, helperLeft = this.positionAbs.left;
                var itemHeight = o.height, itemWidth = o.width;
                var itemTop = o.top, itemLeft = o.left;
                return $.ui.isOver(helperTop + dyClick, helperLeft + dxClick, itemTop, itemLeft, itemHeight, itemWidth);
            };
            $.each(inst.sortables, function(i) {
                this.instance.positionAbs = inst.positionAbs;
                this.instance.helperProportions = inst.helperProportions;
                this.instance.offset.click = inst.offset.click;
                if (this.instance._intersectsWith(this.instance.containerCache)) {
                    if (!this.instance.isOver) {
                        this.instance.isOver = 1;
                        this.instance.currentItem = $(self).clone().removeAttr('id').appendTo(this.instance.element).data("sortable-item", true);
                        this.instance.options._helper = this.instance.options.helper;
                        this.instance.options.helper = function() {
                            return ui.helper[0];
                        };
                        event.target = this.instance.currentItem[0];
                        this.instance._mouseCapture(event, true);
                        this.instance._mouseStart(event, true, true);
                        this.instance.offset.click.top = inst.offset.click.top;
                        this.instance.offset.click.left = inst.offset.click.left;
                        this.instance.offset.parent.left -= inst.offset.parent.left - this.instance.offset.parent.left;
                        this.instance.offset.parent.top -= inst.offset.parent.top - this.instance.offset.parent.top;
                        inst._trigger("toSortable", event);
                        inst.dropped = this.instance.element;
                        inst.currentItem = inst.element;
                        this.instance.fromOutside = inst;
                    }
                    if (this.instance.currentItem)
                        this.instance._mouseDrag(event);
                } else {
                    if (this.instance.isOver) {
                        this.instance.isOver = 0;
                        this.instance.cancelHelperRemoval = true;
                        this.instance.options.revert = false;
                        this.instance._trigger('out', event, this.instance._uiHash(this.instance));
                        this.instance._mouseStop(event, true);
                        this.instance.options.helper = this.instance.options._helper;
                        this.instance.currentItem.remove();
                        if (this.instance.placeholder)
                            this.instance.placeholder.remove();
                        inst._trigger("fromSortable", event);
                        inst.dropped = false;
                    }
                }
                ;
            });
        }});
    $.ui.plugin.add("draggable", "cursor", {start: function(event, ui) {
            var t = $('body'), o = $(this).data('draggable').options;
            if (t.css("cursor"))
                o._cursor = t.css("cursor");
            t.css("cursor", o.cursor);
        },stop: function(event, ui) {
            var o = $(this).data('draggable').options;
            if (o._cursor)
                $('body').css("cursor", o._cursor);
        }});
    $.ui.plugin.add("draggable", "opacity", {start: function(event, ui) {
            var t = $(ui.helper), o = $(this).data('draggable').options;
            if (t.css("opacity"))
                o._opacity = t.css("opacity");
            t.css('opacity', o.opacity);
        },stop: function(event, ui) {
            var o = $(this).data('draggable').options;
            if (o._opacity)
                $(ui.helper).css('opacity', o._opacity);
        }});
    $.ui.plugin.add("draggable", "scroll", {start: function(event, ui) {
            var i = $(this).data("draggable");
            if (i.scrollParent[0] != document && i.scrollParent[0].tagName != 'HTML')
                i.overflowOffset = i.scrollParent.offset();
        },drag: function(event, ui) {
            var i = $(this).data("draggable"), o = i.options, scrolled = false;
            if (i.scrollParent[0] != document && i.scrollParent[0].tagName != 'HTML') {
                if (!o.axis || o.axis != 'x') {
                    if ((i.overflowOffset.top + i.scrollParent[0].offsetHeight) - event.pageY < o.scrollSensitivity)
                        i.scrollParent[0].scrollTop = scrolled = i.scrollParent[0].scrollTop + o.scrollSpeed;
                    else if (event.pageY - i.overflowOffset.top < o.scrollSensitivity)
                        i.scrollParent[0].scrollTop = scrolled = i.scrollParent[0].scrollTop - o.scrollSpeed;
                }
                if (!o.axis || o.axis != 'y') {
                    if ((i.overflowOffset.left + i.scrollParent[0].offsetWidth) - event.pageX < o.scrollSensitivity)
                        i.scrollParent[0].scrollLeft = scrolled = i.scrollParent[0].scrollLeft + o.scrollSpeed;
                    else if (event.pageX - i.overflowOffset.left < o.scrollSensitivity)
                        i.scrollParent[0].scrollLeft = scrolled = i.scrollParent[0].scrollLeft - o.scrollSpeed;
                }
            } else {
                if (!o.axis || o.axis != 'x') {
                    if (event.pageY - $(document).scrollTop() < o.scrollSensitivity)
                        scrolled = $(document).scrollTop($(document).scrollTop() - o.scrollSpeed);
                    else if ($(window).height() - (event.pageY - $(document).scrollTop()) < o.scrollSensitivity)
                        scrolled = $(document).scrollTop($(document).scrollTop() + o.scrollSpeed);
                }
                if (!o.axis || o.axis != 'y') {
                    if (event.pageX - $(document).scrollLeft() < o.scrollSensitivity)
                        scrolled = $(document).scrollLeft($(document).scrollLeft() - o.scrollSpeed);
                    else if ($(window).width() - (event.pageX - $(document).scrollLeft()) < o.scrollSensitivity)
                        scrolled = $(document).scrollLeft($(document).scrollLeft() + o.scrollSpeed);
                }
            }
            if (scrolled !== false && $.ui.ddmanager && !o.dropBehaviour)
                $.ui.ddmanager.prepareOffsets(i, event);
        }});
    $.ui.plugin.add("draggable", "snap", {start: function(event, ui) {
            var i = $(this).data("draggable"), o = i.options;
            i.snapElements = [];
            $(o.snap.constructor != String ? (o.snap.items || ':data(draggable)') : o.snap).each(function() {
                var $t = $(this);
                var $o = $t.offset();
                if (this != i.element[0])
                    i.snapElements.push({item: this,width: $t.outerWidth(),height: $t.outerHeight(),top: $o.top,left: $o.left});
            });
        },drag: function(event, ui) {
            var inst = $(this).data("draggable"), o = inst.options;
            var d = o.snapTolerance;
            var x1 = ui.offset.left, x2 = x1 + inst.helperProportions.width, y1 = ui.offset.top, y2 = y1 + inst.helperProportions.height;
            for (var i = inst.snapElements.length - 1; i >= 0; i--) {
                var l = inst.snapElements[i].left, r = l + inst.snapElements[i].width, t = inst.snapElements[i].top, b = t + inst.snapElements[i].height;
                if (!((l - d < x1 && x1 < r + d && t - d < y1 && y1 < b + d) || (l - d < x1 && x1 < r + d && t - d < y2 && y2 < b + d) || (l - d < x2 && x2 < r + d && t - d < y1 && y1 < b + d) || (l - d < x2 && x2 < r + d && t - d < y2 && y2 < b + d))) {
                    if (inst.snapElements[i].snapping)
                        (inst.options.snap.release && inst.options.snap.release.call(inst.element, event, $.extend(inst._uiHash(), {snapItem: inst.snapElements[i].item})));
                    inst.snapElements[i].snapping = false;
                    continue;
                }
                if (o.snapMode != 'inner') {
                    var ts = Math.abs(t - y2) <= d;
                    var bs = Math.abs(b - y1) <= d;
                    var ls = Math.abs(l - x2) <= d;
                    var rs = Math.abs(r - x1) <= d;
                    if (ts)
                        ui.position.top = inst._convertPositionTo("relative", {top: t - inst.helperProportions.height,left: 0}).top - inst.margins.top;
                    if (bs)
                        ui.position.top = inst._convertPositionTo("relative", {top: b,left: 0}).top - inst.margins.top;
                    if (ls)
                        ui.position.left = inst._convertPositionTo("relative", {top: 0,left: l - inst.helperProportions.width}).left - inst.margins.left;
                    if (rs)
                        ui.position.left = inst._convertPositionTo("relative", {top: 0,left: r}).left - inst.margins.left;
                }
                var first = (ts || bs || ls || rs);
                if (o.snapMode != 'outer') {
                    var ts = Math.abs(t - y1) <= d;
                    var bs = Math.abs(b - y2) <= d;
                    var ls = Math.abs(l - x1) <= d;
                    var rs = Math.abs(r - x2) <= d;
                    if (ts)
                        ui.position.top = inst._convertPositionTo("relative", {top: t,left: 0}).top - inst.margins.top;
                    if (bs)
                        ui.position.top = inst._convertPositionTo("relative", {top: b - inst.helperProportions.height,left: 0}).top - inst.margins.top;
                    if (ls)
                        ui.position.left = inst._convertPositionTo("relative", {top: 0,left: l}).left - inst.margins.left;
                    if (rs)
                        ui.position.left = inst._convertPositionTo("relative", {top: 0,left: r - inst.helperProportions.width}).left - inst.margins.left;
                }
                if (!inst.snapElements[i].snapping && (ts || bs || ls || rs || first))
                    (inst.options.snap.snap && inst.options.snap.snap.call(inst.element, event, $.extend(inst._uiHash(), {snapItem: inst.snapElements[i].item})));
                inst.snapElements[i].snapping = (ts || bs || ls || rs || first);
            }
            ;
        }});
    $.ui.plugin.add("draggable", "stack", {start: function(event, ui) {
            var o = $(this).data("draggable").options;
            var group = $.makeArray($(o.stack)).sort(function(a, b) {
                return (parseInt($(a).css("zIndex"), 10) || 0) - (parseInt($(b).css("zIndex"), 10) || 0);
            });
            if (!group.length) {
                return;
            }
            var min = parseInt(group[0].style.zIndex) || 0;
            $(group).each(function(i) {
                this.style.zIndex = min + i;
            });
            this[0].style.zIndex = min + group.length;
        }});
    $.ui.plugin.add("draggable", "zIndex", {start: function(event, ui) {
            var t = $(ui.helper), o = $(this).data("draggable").options;
            if (t.css("zIndex"))
                o._zIndex = t.css("zIndex");
            t.css('zIndex', o.zIndex);
        },stop: function(event, ui) {
            var o = $(this).data("draggable").options;
            if (o._zIndex)
                $(ui.helper).css('zIndex', o._zIndex);
        }});
})(jQuery);
(function($, undefined) {
    $.widget("ui.droppable", {widgetEventPrefix: "drop",options: {accept: '*',activeClass: false,addClasses: true,greedy: false,hoverClass: false,scope: 'default',tolerance: 'intersect'},_create: function() {
            var o = this.options, accept = o.accept;
            this.isover = 0;
            this.isout = 1;
            this.accept = $.isFunction(accept) ? accept : function(d) {
                return d.is(accept);
            };
            this.proportions = {width: this.element[0].offsetWidth,height: this.element[0].offsetHeight};
            $.ui.ddmanager.droppables[o.scope] = $.ui.ddmanager.droppables[o.scope] || [];
            $.ui.ddmanager.droppables[o.scope].push(this);
            (o.addClasses && this.element.addClass("ui-droppable"));
        },destroy: function() {
            var drop = $.ui.ddmanager.droppables[this.options.scope];
            for (var i = 0; i < drop.length; i++)
                if (drop[i] == this)
                    drop.splice(i, 1);
            this.element.removeClass("ui-droppable ui-droppable-disabled").removeData("droppable").unbind(".droppable");
            return this;
        },_setOption: function(key, value) {
            if (key == 'accept') {
                this.accept = $.isFunction(value) ? value : function(d) {
                    return d.is(value);
                };
            }
            $.Widget.prototype._setOption.apply(this, arguments);
        },_activate: function(event) {
            var draggable = $.ui.ddmanager.current;
            if (this.options.activeClass)
                this.element.addClass(this.options.activeClass);
            (draggable && this._trigger('activate', event, this.ui(draggable)));
        },_deactivate: function(event) {
            var draggable = $.ui.ddmanager.current;
            if (this.options.activeClass)
                this.element.removeClass(this.options.activeClass);
            (draggable && this._trigger('deactivate', event, this.ui(draggable)));
        },_over: function(event) {
            var draggable = $.ui.ddmanager.current;
            if (!draggable || (draggable.currentItem || draggable.element)[0] == this.element[0])
                return;
            if (this.accept.call(this.element[0], (draggable.currentItem || draggable.element))) {
                if (this.options.hoverClass)
                    this.element.addClass(this.options.hoverClass);
                this._trigger('over', event, this.ui(draggable));
            }
        },_out: function(event) {
            var draggable = $.ui.ddmanager.current;
            if (!draggable || (draggable.currentItem || draggable.element)[0] == this.element[0])
                return;
            if (this.accept.call(this.element[0], (draggable.currentItem || draggable.element))) {
                if (this.options.hoverClass)
                    this.element.removeClass(this.options.hoverClass);
                this._trigger('out', event, this.ui(draggable));
            }
        },_drop: function(event, custom) {
            var draggable = custom || $.ui.ddmanager.current;
            if (!draggable || (draggable.currentItem || draggable.element)[0] == this.element[0])
                return false;
            var childrenIntersection = false;
            this.element.find(":data(droppable)").not(".ui-draggable-dragging").each(function() {
                var inst = $.data(this, 'droppable');
                if (inst.options.greedy && !inst.options.disabled && inst.options.scope == draggable.options.scope && inst.accept.call(inst.element[0], (draggable.currentItem || draggable.element)) && $.ui.intersect(draggable, $.extend(inst, {offset: inst.element.offset()}), inst.options.tolerance)) {
                    childrenIntersection = true;
                    return false;
                }
            });
            if (childrenIntersection)
                return false;
            if (this.accept.call(this.element[0], (draggable.currentItem || draggable.element))) {
                if (this.options.activeClass)
                    this.element.removeClass(this.options.activeClass);
                if (this.options.hoverClass)
                    this.element.removeClass(this.options.hoverClass);
                this._trigger('drop', event, this.ui(draggable));
                return this.element;
            }
            return false;
        },ui: function(c) {
            return {draggable: (c.currentItem || c.element),helper: c.helper,position: c.position,offset: c.positionAbs};
        }});
    $.extend($.ui.droppable, {version: "@VERSION"});
    $.ui.intersect = function(draggable, droppable, toleranceMode) {
        if (!droppable.offset)
            return false;
        var x1 = (draggable.positionAbs || draggable.position.absolute).left, x2 = x1 + draggable.helperProportions.width, y1 = (draggable.positionAbs || draggable.position.absolute).top, y2 = y1 + draggable.helperProportions.height;
        var l = droppable.offset.left, r = l + droppable.proportions.width, t = droppable.offset.top, b = t + droppable.proportions.height;
        switch (toleranceMode) {
            case 'fit':
                return (l <= x1 && x2 <= r && t <= y1 && y2 <= b);
                break;
            case 'intersect':
                return (l < x1 + (draggable.helperProportions.width / 2) && x2 - (draggable.helperProportions.width / 2) < r && t < y1 + (draggable.helperProportions.height / 2) && y2 - (draggable.helperProportions.height / 2) < b);
                break;
            case 'pointer':
                var draggableLeft = ((draggable.positionAbs || draggable.position.absolute).left + (draggable.clickOffset || draggable.offset.click).left), draggableTop = ((draggable.positionAbs || draggable.position.absolute).top + (draggable.clickOffset || draggable.offset.click).top), isOver = $.ui.isOver(draggableTop, draggableLeft, t, l, droppable.proportions.height, droppable.proportions.width);
                return isOver;
                break;
            case 'touch':
                return ((y1 >= t && y1 <= b) || (y2 >= t && y2 <= b) || (y1 < t && y2 > b)) && ((x1 >= l && x1 <= r) || (x2 >= l && x2 <= r) || (x1 < l && x2 > r));
                break;
            default:
                return false;
                break;
        }
    };
    $.ui.ddmanager = {current: null,droppables: {'default': []},prepareOffsets: function(t, event) {
            var m = $.ui.ddmanager.droppables[t.options.scope] || [];
            var type = event ? event.type : null;
            var list = (t.currentItem || t.element).find(":data(droppable)").andSelf();
            droppablesLoop: for (var i = 0; i < m.length; i++) {
                if (m[i].options.disabled || (t && !m[i].accept.call(m[i].element[0], (t.currentItem || t.element))))
                    continue;
                for (var j = 0; j < list.length; j++) {
                    if (list[j] == m[i].element[0]) {
                        m[i].proportions.height = 0;
                        continue droppablesLoop;
                    }
                }
                ;
                m[i].visible = m[i].element.css("display") != "none";
                if (!m[i].visible)
                    continue;
                if (type == "mousedown")
                    m[i]._activate.call(m[i], event);
                m[i].offset = m[i].element.offset();
                m[i].proportions = {width: m[i].element[0].offsetWidth,height: m[i].element[0].offsetHeight};
            }
        },drop: function(draggable, event) {
            var dropped = false;
            $.each($.ui.ddmanager.droppables[draggable.options.scope] || [], function() {
                if (!this.options)
                    return;
                if (!this.options.disabled && this.visible && $.ui.intersect(draggable, this, this.options.tolerance))
                    dropped = dropped || this._drop.call(this, event);
                if (!this.options.disabled && this.visible && this.accept.call(this.element[0], (draggable.currentItem || draggable.element))) {
                    this.isout = 1;
                    this.isover = 0;
                    this._deactivate.call(this, event);
                }
            });
            return dropped;
        },drag: function(draggable, event) {
            if (draggable.options.refreshPositions)
                $.ui.ddmanager.prepareOffsets(draggable, event);
            $.each($.ui.ddmanager.droppables[draggable.options.scope] || [], function() {
                if (this.options.disabled || this.greedyChild || !this.visible)
                    return;
                var intersects = $.ui.intersect(draggable, this, this.options.tolerance);
                var c = !intersects && this.isover == 1 ? 'isout' : (intersects && this.isover == 0 ? 'isover' : null);
                if (!c)
                    return;
                var parentInstance;
                if (this.options.greedy) {
                    var parent = this.element.parents(':data(droppable):eq(0)');
                    if (parent.length) {
                        parentInstance = $.data(parent[0], 'droppable');
                        parentInstance.greedyChild = (c == 'isover' ? 1 : 0);
                    }
                }
                if (parentInstance && c == 'isover') {
                    parentInstance['isover'] = 0;
                    parentInstance['isout'] = 1;
                    parentInstance._out.call(parentInstance, event);
                }
                this[c] = 1;
                this[c == 'isout' ? 'isover' : 'isout'] = 0;
                this[c == "isover" ? "_over" : "_out"].call(this, event);
                if (parentInstance && c == 'isout') {
                    parentInstance['isout'] = 0;
                    parentInstance['isover'] = 1;
                    parentInstance._over.call(parentInstance, event);
                }
            });
        }};
})(jQuery);
(function($, undefined) {
    $.widget("ui.sortable", $.ui.mouse, {widgetEventPrefix: "sort",options: {appendTo: "parent",axis: false,connectWith: false,containment: false,cursor: 'auto',cursorAt: false,dropOnEmpty: true,forcePlaceholderSize: false,forceHelperSize: false,grid: false,handle: false,helper: "original",items: '> *',opacity: false,placeholder: false,revert: false,scroll: true,scrollSensitivity: 20,scrollSpeed: 20,scope: "default",tolerance: "intersect",zIndex: 1000},_create: function() {
            var o = this.options;
            this.containerCache = {};
            this.element.addClass("ui-sortable");
            this.refresh();
            this.floating = this.items.length ? o.axis === 'x' || (/left|right/).test(this.items[0].item.css('float')) || (/inline|table-cell/).test(this.items[0].item.css('display')) : false;
            this.offset = this.element.offset();
            this._mouseInit();
        },destroy: function() {
            this.element.removeClass("ui-sortable ui-sortable-disabled").removeData("sortable").unbind(".sortable");
            this._mouseDestroy();
            for (var i = this.items.length - 1; i >= 0; i--)
                this.items[i].item.removeData("sortable-item");
            return this;
        },_setOption: function(key, value) {
            if (key === "disabled") {
                this.options[key] = value;
                this.widget()
                [value ? "addClass" : "removeClass"]("ui-sortable-disabled");
            } else {
                $.Widget.prototype._setOption.apply(this, arguments);
            }
        },_mouseCapture: function(event, overrideHandle) {
            if (this.reverting) {
                return false;
            }
            if (this.options.disabled || this.options.type == 'static')
                return false;
            this._refreshItems(event);
            var currentItem = null, self = this, nodes = $(event.target).parents().each(function() {
                if ($.data(this, 'sortable-item') == self) {
                    currentItem = $(this);
                    return false;
                }
            });
            if ($.data(event.target, 'sortable-item') == self)
                currentItem = $(event.target);
            if (!currentItem)
                return false;
            if (this.options.handle && !overrideHandle) {
                var validHandle = false;
                $(this.options.handle, currentItem).find("*").andSelf().each(function() {
                    if (this == event.target)
                        validHandle = true;
                });
                if (!validHandle)
                    return false;
            }
            this.currentItem = currentItem;
            this._removeCurrentsFromItems();
            return true;
        },_mouseStart: function(event, overrideHandle, noActivation) {
            var o = this.options, self = this;
            this.currentContainer = this;
            this.refreshPositions();
            this.helper = this._createHelper(event);
            this._cacheHelperProportions();
            this._cacheMargins();
            this.scrollParent = this.helper.scrollParent();
            this.offset = this.currentItem.offset();
            this.offset = {top: this.offset.top - this.margins.top,left: this.offset.left - this.margins.left};
            this.helper.css("position", "absolute");
            this.cssPosition = this.helper.css("position");
            $.extend(this.offset, {click: {left: event.pageX - this.offset.left,top: event.pageY - this.offset.top},parent: this._getParentOffset(),relative: this._getRelativeOffset()});
            this.originalPosition = this._generatePosition(event);
            this.originalPageX = event.pageX;
            this.originalPageY = event.pageY;
            (o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt));
            this.domPosition = {prev: this.currentItem.prev()[0],parent: this.currentItem.parent()[0]};
            if (this.helper[0] != this.currentItem[0]) {
                this.currentItem.hide();
            }
            this._createPlaceholder();
            if (o.containment)
                this._setContainment();
            if (o.cursor) {
                if ($('body').css("cursor"))
                    this._storedCursor = $('body').css("cursor");
                $('body').css("cursor", o.cursor);
            }
            if (o.opacity) {
                if (this.helper.css("opacity"))
                    this._storedOpacity = this.helper.css("opacity");
                this.helper.css("opacity", o.opacity);
            }
            if (o.zIndex) {
                if (this.helper.css("zIndex"))
                    this._storedZIndex = this.helper.css("zIndex");
                this.helper.css("zIndex", o.zIndex);
            }
            if (this.scrollParent[0] != document && this.scrollParent[0].tagName != 'HTML')
                this.overflowOffset = this.scrollParent.offset();
            this._trigger("start", event, this._uiHash());
            if (!this._preserveHelperProportions)
                this._cacheHelperProportions();
            if (!noActivation) {
                for (var i = this.containers.length - 1; i >= 0; i--) {
                    this.containers[i]._trigger("activate", event, self._uiHash(this));
                }
            }
            if ($.ui.ddmanager)
                $.ui.ddmanager.current = this;
            if ($.ui.ddmanager && !o.dropBehaviour)
                $.ui.ddmanager.prepareOffsets(this, event);
            this.dragging = true;
            this.helper.addClass("ui-sortable-helper");
            this._mouseDrag(event);
            return true;
        },_mouseDrag: function(event) {
            this.position = this._generatePosition(event);
            this.positionAbs = this._convertPositionTo("absolute");
            if (!this.lastPositionAbs) {
                this.lastPositionAbs = this.positionAbs;
            }
            if (this.options.scroll) {
                var o = this.options, scrolled = false;
                if (this.scrollParent[0] != document && this.scrollParent[0].tagName != 'HTML') {
                    if ((this.overflowOffset.top + this.scrollParent[0].offsetHeight) - event.pageY < o.scrollSensitivity)
                        this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop + o.scrollSpeed;
                    else if (event.pageY - this.overflowOffset.top < o.scrollSensitivity)
                        this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop - o.scrollSpeed;
                    if ((this.overflowOffset.left + this.scrollParent[0].offsetWidth) - event.pageX < o.scrollSensitivity)
                        this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft + o.scrollSpeed;
                    else if (event.pageX - this.overflowOffset.left < o.scrollSensitivity)
                        this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft - o.scrollSpeed;
                } else {
                    if (event.pageY - $(document).scrollTop() < o.scrollSensitivity)
                        scrolled = $(document).scrollTop($(document).scrollTop() - o.scrollSpeed);
                    else if ($(window).height() - (event.pageY - $(document).scrollTop()) < o.scrollSensitivity)
                        scrolled = $(document).scrollTop($(document).scrollTop() + o.scrollSpeed);
                    if (event.pageX - $(document).scrollLeft() < o.scrollSensitivity)
                        scrolled = $(document).scrollLeft($(document).scrollLeft() - o.scrollSpeed);
                    else if ($(window).width() - (event.pageX - $(document).scrollLeft()) < o.scrollSensitivity)
                        scrolled = $(document).scrollLeft($(document).scrollLeft() + o.scrollSpeed);
                }
                if (scrolled !== false && $.ui.ddmanager && !o.dropBehaviour)
                    $.ui.ddmanager.prepareOffsets(this, event);
            }
            this.positionAbs = this._convertPositionTo("absolute");
            if (!this.options.axis || this.options.axis != "y")
                this.helper[0].style.left = this.position.left + 'px';
            if (!this.options.axis || this.options.axis != "x")
                this.helper[0].style.top = this.position.top + 'px';
            for (var i = this.items.length - 1; i >= 0; i--) {
                var item = this.items[i], itemElement = item.item[0], intersection = this._intersectsWithPointer(item);
                if (!intersection)
                    continue;
                if (itemElement != this.currentItem[0] && this.placeholder[intersection == 1 ? "next" : "prev"]()[0] != itemElement && !$.ui.contains(this.placeholder[0], itemElement) && (this.options.type == 'semi-dynamic' ? !$.ui.contains(this.element[0], itemElement) : true)) {
                    this.direction = intersection == 1 ? "down" : "up";
                    if (this.options.tolerance == "pointer" || this._intersectsWithSides(item)) {
                        this._rearrange(event, item);
                    } else {
                        break;
                    }
                    this._trigger("change", event, this._uiHash());
                    break;
                }
            }
            this._contactContainers(event);
            if ($.ui.ddmanager)
                $.ui.ddmanager.drag(this, event);
            this._trigger('sort', event, this._uiHash());
            this.lastPositionAbs = this.positionAbs;
            return false;
        },_mouseStop: function(event, noPropagation) {
            if (!event)
                return;
            if ($.ui.ddmanager && !this.options.dropBehaviour)
                $.ui.ddmanager.drop(this, event);
            if (this.options.revert) {
                var self = this;
                var cur = self.placeholder.offset();
                self.reverting = true;
                $(this.helper).animate({left: cur.left - this.offset.parent.left - self.margins.left + (this.offsetParent[0] == document.body ? 0 : this.offsetParent[0].scrollLeft),top: cur.top - this.offset.parent.top - self.margins.top + (this.offsetParent[0] == document.body ? 0 : this.offsetParent[0].scrollTop)}, parseInt(this.options.revert, 10) || 500, function() {
                    self._clear(event);
                });
            } else {
                this._clear(event, noPropagation);
            }
            return false;
        },cancel: function() {
            var self = this;
            if (this.dragging) {
                this._mouseUp({target: null});
                if (this.options.helper == "original")
                    this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper");
                else
                    this.currentItem.show();
                for (var i = this.containers.length - 1; i >= 0; i--) {
                    this.containers[i]._trigger("deactivate", null, self._uiHash(this));
                    if (this.containers[i].containerCache.over) {
                        this.containers[i]._trigger("out", null, self._uiHash(this));
                        this.containers[i].containerCache.over = 0;
                    }
                }
            }
            if (this.placeholder) {
                if (this.placeholder[0].parentNode)
                    this.placeholder[0].parentNode.removeChild(this.placeholder[0]);
                if (this.options.helper != "original" && this.helper && this.helper[0].parentNode)
                    this.helper.remove();
                $.extend(this, {helper: null,dragging: false,reverting: false,_noFinalSort: null});
                if (this.domPosition.prev) {
                    $(this.domPosition.prev).after(this.currentItem);
                } else {
                    $(this.domPosition.parent).prepend(this.currentItem);
                }
            }
            return this;
        },serialize: function(o) {
            var items = this._getItemsAsjQuery(o && o.connected);
            var str = [];
            o = o || {};
            $(items).each(function() {
                var res = ($(o.item || this).attr(o.attribute || 'id') || '').match(o.expression || (/(.+)[-=_](.+)/));
                if (res)
                    str.push((o.key || res[1] + '[]') + '=' + (o.key && o.expression ? res[1] : res[2]));
            });
            if (!str.length && o.key) {
                str.push(o.key + '=');
            }
            return str.join('&');
        },toArray: function(o) {
            var items = this._getItemsAsjQuery(o && o.connected);
            var ret = [];
            o = o || {};
            items.each(function() {
                ret.push($(o.item || this).attr(o.attribute || 'id') || '');
            });
            return ret;
        },_intersectsWith: function(item) {
            var x1 = this.positionAbs.left, x2 = x1 + this.helperProportions.width, y1 = this.positionAbs.top, y2 = y1 + this.helperProportions.height;
            var l = item.left, r = l + item.width, t = item.top, b = t + item.height;
            var dyClick = this.offset.click.top, dxClick = this.offset.click.left;
            var isOverElement = (y1 + dyClick) > t && (y1 + dyClick) < b && (x1 + dxClick) > l && (x1 + dxClick) < r;
            if (this.options.tolerance == "pointer" || this.options.forcePointerForContainers || (this.options.tolerance != "pointer" && this.helperProportions[this.floating ? 'width' : 'height'] > item[this.floating ? 'width' : 'height'])) {
                return isOverElement;
            } else {
                return (l < x1 + (this.helperProportions.width / 2) && x2 - (this.helperProportions.width / 2) < r && t < y1 + (this.helperProportions.height / 2) && y2 - (this.helperProportions.height / 2) < b);
            }
        },_intersectsWithPointer: function(item) {
            var isOverElementHeight = $.ui.isOverAxis(this.positionAbs.top + this.offset.click.top, item.top, item.height), isOverElementWidth = $.ui.isOverAxis(this.positionAbs.left + this.offset.click.left, item.left, item.width), isOverElement = isOverElementHeight && isOverElementWidth, verticalDirection = this._getDragVerticalDirection(), horizontalDirection = this._getDragHorizontalDirection();
            if (!isOverElement)
                return false;
            return this.floating ? (((horizontalDirection && horizontalDirection == "right") || verticalDirection == "down") ? 2 : 1) : (verticalDirection && (verticalDirection == "down" ? 2 : 1));
        },_intersectsWithSides: function(item) {
            var isOverBottomHalf = $.ui.isOverAxis(this.positionAbs.top + this.offset.click.top, item.top + (item.height / 2), item.height), isOverRightHalf = $.ui.isOverAxis(this.positionAbs.left + this.offset.click.left, item.left + (item.width / 2), item.width), verticalDirection = this._getDragVerticalDirection(), horizontalDirection = this._getDragHorizontalDirection();
            if (this.floating && horizontalDirection) {
                return ((horizontalDirection == "right" && isOverRightHalf) || (horizontalDirection == "left" && !isOverRightHalf));
            } else {
                return verticalDirection && ((verticalDirection == "down" && isOverBottomHalf) || (verticalDirection == "up" && !isOverBottomHalf));
            }
        },_getDragVerticalDirection: function() {
            var delta = this.positionAbs.top - this.lastPositionAbs.top;
            return delta != 0 && (delta > 0 ? "down" : "up");
        },_getDragHorizontalDirection: function() {
            var delta = this.positionAbs.left - this.lastPositionAbs.left;
            return delta != 0 && (delta > 0 ? "right" : "left");
        },refresh: function(event) {
            this._refreshItems(event);
            this.refreshPositions();
            return this;
        },_connectWith: function() {
            var options = this.options;
            return options.connectWith.constructor == String ? [options.connectWith] : options.connectWith;
        },_getItemsAsjQuery: function(connected) {
            var self = this;
            var items = [];
            var queries = [];
            var connectWith = this._connectWith();
            if (connectWith && connected) {
                for (var i = connectWith.length - 1; i >= 0; i--) {
                    var cur = $(connectWith[i]);
                    for (var j = cur.length - 1; j >= 0; j--) {
                        var inst = $.data(cur[j], 'sortable');
                        if (inst && inst != this && !inst.options.disabled) {
                            queries.push([$.isFunction(inst.options.items) ? inst.options.items.call(inst.element) : $(inst.options.items, inst.element).not(".ui-sortable-helper").not('.ui-sortable-placeholder'), inst]);
                        }
                    }
                    ;
                }
                ;
            }
            queries.push([$.isFunction(this.options.items) ? this.options.items.call(this.element, null, {options: this.options,item: this.currentItem}) : $(this.options.items, this.element).not(".ui-sortable-helper").not('.ui-sortable-placeholder'), this]);
            for (var i = queries.length - 1; i >= 0; i--) {
                queries[i][0].each(function() {
                    items.push(this);
                });
            }
            ;
            return $(items);
        },_removeCurrentsFromItems: function() {
            var list = this.currentItem.find(":data(sortable-item)");
            for (var i = 0; i < this.items.length; i++) {
                for (var j = 0; j < list.length; j++) {
                    if (list[j] == this.items[i].item[0])
                        this.items.splice(i, 1);
                }
                ;
            }
            ;
        },_refreshItems: function(event) {
            this.items = [];
            this.containers = [this];
            var items = this.items;
            var self = this;
            var queries = [[$.isFunction(this.options.items) ? this.options.items.call(this.element[0], event, {item: this.currentItem}) : $(this.options.items, this.element), this]];
            var connectWith = this._connectWith();
            if (connectWith) {
                for (var i = connectWith.length - 1; i >= 0; i--) {
                    var cur = $(connectWith[i]);
                    for (var j = cur.length - 1; j >= 0; j--) {
                        var inst = $.data(cur[j], 'sortable');
                        if (inst && inst != this && !inst.options.disabled) {
                            queries.push([$.isFunction(inst.options.items) ? inst.options.items.call(inst.element[0], event, {item: this.currentItem}) : $(inst.options.items, inst.element), inst]);
                            this.containers.push(inst);
                        }
                    }
                    ;
                }
                ;
            }
            for (var i = queries.length - 1; i >= 0; i--) {
                var targetData = queries[i][1];
                var _queries = queries[i][0];
                for (var j = 0, queriesLength = _queries.length; j < queriesLength; j++) {
                    var item = $(_queries[j]);
                    item.data('sortable-item', targetData);
                    items.push({item: item,instance: targetData,width: 0,height: 0,left: 0,top: 0});
                }
                ;
            }
            ;
        },refreshPositions: function(fast) {
            if (this.offsetParent && this.helper) {
                this.offset.parent = this._getParentOffset();
            }
            for (var i = this.items.length - 1; i >= 0; i--) {
                var item = this.items[i];
                if (item.instance != this.currentContainer && this.currentContainer && item.item[0] != this.currentItem[0])
                    continue;
                var t = this.options.toleranceElement ? $(this.options.toleranceElement, item.item) : item.item;
                if (!fast) {
                    item.width = t.outerWidth();
                    item.height = t.outerHeight();
                }
                var p = t.offset();
                item.left = p.left;
                item.top = p.top;
            }
            ;
            if (this.options.custom && this.options.custom.refreshContainers) {
                this.options.custom.refreshContainers.call(this);
            } else {
                for (var i = this.containers.length - 1; i >= 0; i--) {
                    var p = this.containers[i].element.offset();
                    this.containers[i].containerCache.left = p.left;
                    this.containers[i].containerCache.top = p.top;
                    this.containers[i].containerCache.width = this.containers[i].element.outerWidth();
                    this.containers[i].containerCache.height = this.containers[i].element.outerHeight();
                }
                ;
            }
            return this;
        },_createPlaceholder: function(that) {
            var self = that || this, o = self.options;
            if (!o.placeholder || o.placeholder.constructor == String) {
                var className = o.placeholder;
                o.placeholder = {element: function() {
                        var el = $(document.createElement(self.currentItem[0].nodeName)).addClass(className || self.currentItem[0].className + " ui-sortable-placeholder").removeClass("ui-sortable-helper")[0];
                        if (!className)
                            el.style.visibility = "hidden";
                        return el;
                    },update: function(container, p) {
                        if (className && !o.forcePlaceholderSize)
                            return;
                        if (!p.height()) {
                            p.height(self.currentItem.innerHeight() - parseInt(self.currentItem.css('paddingTop') || 0, 10) - parseInt(self.currentItem.css('paddingBottom') || 0, 10));
                        }
                        ;
                        if (!p.width()) {
                            p.width(self.currentItem.innerWidth() - parseInt(self.currentItem.css('paddingLeft') || 0, 10) - parseInt(self.currentItem.css('paddingRight') || 0, 10));
                        }
                        ;
                    }};
            }
            self.placeholder = $(o.placeholder.element.call(self.element, self.currentItem));
            self.currentItem.after(self.placeholder);
            o.placeholder.update(self, self.placeholder);
        },_contactContainers: function(event) {
            var innermostContainer = null, innermostIndex = null;
            for (var i = this.containers.length - 1; i >= 0; i--) {
                if ($.ui.contains(this.currentItem[0], this.containers[i].element[0]))
                    continue;
                if (this._intersectsWith(this.containers[i].containerCache)) {
                    if (innermostContainer && $.ui.contains(this.containers[i].element[0], innermostContainer.element[0]))
                        continue;
                    innermostContainer = this.containers[i];
                    innermostIndex = i;
                } else {
                    if (this.containers[i].containerCache.over) {
                        this.containers[i]._trigger("out", event, this._uiHash(this));
                        this.containers[i].containerCache.over = 0;
                    }
                }
            }
            if (!innermostContainer)
                return;
            if (this.containers.length === 1) {
                this.containers[innermostIndex]._trigger("over", event, this._uiHash(this));
                this.containers[innermostIndex].containerCache.over = 1;
            } else if (this.currentContainer != this.containers[innermostIndex]) {
                var dist = 10000;
                var itemWithLeastDistance = null;
                var base = this.positionAbs[this.containers[innermostIndex].floating ? 'left' : 'top'];
                for (var j = this.items.length - 1; j >= 0; j--) {
                    if (!$.ui.contains(this.containers[innermostIndex].element[0], this.items[j].item[0]))
                        continue;
                    var cur = this.items[j][this.containers[innermostIndex].floating ? 'left' : 'top'];
                    if (Math.abs(cur - base) < dist) {
                        dist = Math.abs(cur - base);
                        itemWithLeastDistance = this.items[j];
                    }
                }
                if (!itemWithLeastDistance && !this.options.dropOnEmpty)
                    return;
                this.currentContainer = this.containers[innermostIndex];
                itemWithLeastDistance ? this._rearrange(event, itemWithLeastDistance, null, true) : this._rearrange(event, null, this.containers[innermostIndex].element, true);
                this._trigger("change", event, this._uiHash());
                this.containers[innermostIndex]._trigger("change", event, this._uiHash(this));
                this.options.placeholder.update(this.currentContainer, this.placeholder);
                this.containers[innermostIndex]._trigger("over", event, this._uiHash(this));
                this.containers[innermostIndex].containerCache.over = 1;
            }
        },_createHelper: function(event) {
            var o = this.options;
            var helper = $.isFunction(o.helper) ? $(o.helper.apply(this.element[0], [event, this.currentItem])) : (o.helper == 'clone' ? this.currentItem.clone() : this.currentItem);
            if (!helper.parents('body').length)
                $(o.appendTo != 'parent' ? o.appendTo : this.currentItem[0].parentNode)[0].appendChild(helper[0]);
            if (helper[0] == this.currentItem[0])
                this._storedCSS = {width: this.currentItem[0].style.width,height: this.currentItem[0].style.height,position: this.currentItem.css("position"),top: this.currentItem.css("top"),left: this.currentItem.css("left")};
            if (helper[0].style.width == '' || o.forceHelperSize)
                helper.width(this.currentItem.width());
            if (helper[0].style.height == '' || o.forceHelperSize)
                helper.height(this.currentItem.height());
            return helper;
        },_adjustOffsetFromHelper: function(obj) {
            if (typeof obj == 'string') {
                obj = obj.split(' ');
            }
            if ($.isArray(obj)) {
                obj = {left: +obj[0],top: +obj[1] || 0};
            }
            if ('left' in obj) {
                this.offset.click.left = obj.left + this.margins.left;
            }
            if ('right' in obj) {
                this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
            }
            if ('top' in obj) {
                this.offset.click.top = obj.top + this.margins.top;
            }
            if ('bottom' in obj) {
                this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
            }
        },_getParentOffset: function() {
            this.offsetParent = this.helper.offsetParent();
            var po = this.offsetParent.offset();
            if (this.cssPosition == 'absolute' && this.scrollParent[0] != document && $.ui.contains(this.scrollParent[0], this.offsetParent[0])) {
                po.left += this.scrollParent.scrollLeft();
                po.top += this.scrollParent.scrollTop();
            }
            if ((this.offsetParent[0] == document.body) || (this.offsetParent[0].tagName && this.offsetParent[0].tagName.toLowerCase() == 'html' && $.browser.msie))
                po = {top: 0,left: 0};
            return {top: po.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0),left: po.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0)};
        },_getRelativeOffset: function() {
            if (this.cssPosition == "relative") {
                var p = this.currentItem.position();
                return {top: p.top - (parseInt(this.helper.css("top"), 10) || 0) + this.scrollParent.scrollTop(),left: p.left - (parseInt(this.helper.css("left"), 10) || 0) + this.scrollParent.scrollLeft()};
            } else {
                return {top: 0,left: 0};
            }
        },_cacheMargins: function() {
            this.margins = {left: (parseInt(this.currentItem.css("marginLeft"), 10) || 0),top: (parseInt(this.currentItem.css("marginTop"), 10) || 0)};
        },_cacheHelperProportions: function() {
            this.helperProportions = {width: this.helper.outerWidth(),height: this.helper.outerHeight()};
        },_setContainment: function() {
            var o = this.options;
            if (o.containment == 'parent')
                o.containment = this.helper[0].parentNode;
            if (o.containment == 'document' || o.containment == 'window')
                this.containment = [0 - this.offset.relative.left - this.offset.parent.left, 0 - this.offset.relative.top - this.offset.parent.top, $(o.containment == 'document' ? document : window).width() - this.helperProportions.width - this.margins.left, ($(o.containment == 'document' ? document : window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top];
            if (!(/^(document|window|parent)$/).test(o.containment)) {
                var ce = $(o.containment)[0];
                var co = $(o.containment).offset();
                var over = ($(ce).css("overflow") != 'hidden');
                this.containment = [co.left + (parseInt($(ce).css("borderLeftWidth"), 10) || 0) + (parseInt($(ce).css("paddingLeft"), 10) || 0) - this.margins.left, co.top + (parseInt($(ce).css("borderTopWidth"), 10) || 0) + (parseInt($(ce).css("paddingTop"), 10) || 0) - this.margins.top, co.left + (over ? Math.max(ce.scrollWidth, ce.offsetWidth) : ce.offsetWidth) - (parseInt($(ce).css("borderLeftWidth"), 10) || 0) - (parseInt($(ce).css("paddingRight"), 10) || 0) - this.helperProportions.width - this.margins.left, co.top + (over ? Math.max(ce.scrollHeight, ce.offsetHeight) : ce.offsetHeight) - (parseInt($(ce).css("borderTopWidth"), 10) || 0) - (parseInt($(ce).css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top];
            }
        },_convertPositionTo: function(d, pos) {
            if (!pos)
                pos = this.position;
            var mod = d == "absolute" ? 1 : -1;
            var o = this.options, scroll = this.cssPosition == 'absolute' && !(this.scrollParent[0] != document && $.ui.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent, scrollIsRootNode = (/(html|body)/i).test(scroll[0].tagName);
            return {top: (pos.top
                + this.offset.relative.top * mod
                + this.offset.parent.top * mod
                - ($.browser.safari && this.cssPosition == 'fixed' ? 0 : (this.cssPosition == 'fixed' ? -this.scrollParent.scrollTop() : (scrollIsRootNode ? 0 : scroll.scrollTop())) * mod)),left: (pos.left
                + this.offset.relative.left * mod
                + this.offset.parent.left * mod
                - ($.browser.safari && this.cssPosition == 'fixed' ? 0 : (this.cssPosition == 'fixed' ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft()) * mod))};
        },_generatePosition: function(event) {
            var o = this.options, scroll = this.cssPosition == 'absolute' && !(this.scrollParent[0] != document && $.ui.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent, scrollIsRootNode = (/(html|body)/i).test(scroll[0].tagName);
            if (this.cssPosition == 'relative' && !(this.scrollParent[0] != document && this.scrollParent[0] != this.offsetParent[0])) {
                this.offset.relative = this._getRelativeOffset();
            }
            var pageX = event.pageX;
            var pageY = event.pageY;
            if (this.originalPosition) {
                if (this.containment) {
                    if (event.pageX - this.offset.click.left < this.containment[0])
                        pageX = this.containment[0] + this.offset.click.left;
                    if (event.pageY - this.offset.click.top < this.containment[1])
                        pageY = this.containment[1] + this.offset.click.top;
                    if (event.pageX - this.offset.click.left > this.containment[2])
                        pageX = this.containment[2] + this.offset.click.left;
                    if (event.pageY - this.offset.click.top > this.containment[3])
                        pageY = this.containment[3] + this.offset.click.top;
                }
                if (o.grid) {
                    var top = this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1];
                    pageY = this.containment ? (!(top - this.offset.click.top < this.containment[1] || top - this.offset.click.top > this.containment[3]) ? top : (!(top - this.offset.click.top < this.containment[1]) ? top - o.grid[1] : top + o.grid[1])) : top;
                    var left = this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0];
                    pageX = this.containment ? (!(left - this.offset.click.left < this.containment[0] || left - this.offset.click.left > this.containment[2]) ? left : (!(left - this.offset.click.left < this.containment[0]) ? left - o.grid[0] : left + o.grid[0])) : left;
                }
            }
            return {top: (pageY
                - this.offset.click.top
                - this.offset.relative.top
                - this.offset.parent.top
                + ($.browser.safari && this.cssPosition == 'fixed' ? 0 : (this.cssPosition == 'fixed' ? -this.scrollParent.scrollTop() : (scrollIsRootNode ? 0 : scroll.scrollTop())))),left: (pageX
                - this.offset.click.left
                - this.offset.relative.left
                - this.offset.parent.left
                + ($.browser.safari && this.cssPosition == 'fixed' ? 0 : (this.cssPosition == 'fixed' ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft())))};
        },_rearrange: function(event, i, a, hardRefresh) {
            a ? a[0].appendChild(this.placeholder[0]) : i.item[0].parentNode.insertBefore(this.placeholder[0], (this.direction == 'down' ? i.item[0] : i.item[0].nextSibling));
            this.counter = this.counter ? ++this.counter : 1;
            var self = this, counter = this.counter;
            window.setTimeout(function() {
                if (counter == self.counter)
                    self.refreshPositions(!hardRefresh);
            }, 0);
        },_clear: function(event, noPropagation) {
            this.reverting = false;
            var delayedTriggers = [], self = this;
            if (!this._noFinalSort && this.currentItem[0].parentNode)
                this.placeholder.before(this.currentItem);
            this._noFinalSort = null;
            if (this.helper[0] == this.currentItem[0]) {
                for (var i in this._storedCSS) {
                    if (this._storedCSS[i] == 'auto' || this._storedCSS[i] == 'static')
                        this._storedCSS[i] = '';
                }
                this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper");
            } else {
                this.currentItem.show();
            }
            if (this.fromOutside && !noPropagation)
                delayedTriggers.push(function(event) {
                    this._trigger("receive", event, this._uiHash(this.fromOutside));
                });
            if ((this.fromOutside || this.domPosition.prev != this.currentItem.prev().not(".ui-sortable-helper")[0] || this.domPosition.parent != this.currentItem.parent()[0]) && !noPropagation)
                delayedTriggers.push(function(event) {
                    this._trigger("update", event, this._uiHash());
                });
            if (!$.ui.contains(this.element[0], this.currentItem[0])) {
                if (!noPropagation)
                    delayedTriggers.push(function(event) {
                        this._trigger("remove", event, this._uiHash());
                    });
                for (var i = this.containers.length - 1; i >= 0; i--) {
                    if ($.ui.contains(this.containers[i].element[0], this.currentItem[0]) && !noPropagation) {
                        delayedTriggers.push((function(c) {
                            return function(event) {
                                c._trigger("receive", event, this._uiHash(this));
                            };
                        }).call(this, this.containers[i]));
                        delayedTriggers.push((function(c) {
                            return function(event) {
                                c._trigger("update", event, this._uiHash(this));
                            };
                        }).call(this, this.containers[i]));
                    }
                }
                ;
            }
            ;
            for (var i = this.containers.length - 1; i >= 0; i--) {
                if (!noPropagation)
                    delayedTriggers.push((function(c) {
                        return function(event) {
                            c._trigger("deactivate", event, this._uiHash(this));
                        };
                    }).call(this, this.containers[i]));
                if (this.containers[i].containerCache.over) {
                    delayedTriggers.push((function(c) {
                        return function(event) {
                            c._trigger("out", event, this._uiHash(this));
                        };
                    }).call(this, this.containers[i]));
                    this.containers[i].containerCache.over = 0;
                }
            }
            if (this._storedCursor)
                $('body').css("cursor", this._storedCursor);
            if (this._storedOpacity)
                this.helper.css("opacity", this._storedOpacity);
            if (this._storedZIndex)
                this.helper.css("zIndex", this._storedZIndex == 'auto' ? '' : this._storedZIndex);
            this.dragging = false;
            if (this.cancelHelperRemoval) {
                if (!noPropagation) {
                    this._trigger("beforeStop", event, this._uiHash());
                    for (var i = 0; i < delayedTriggers.length; i++) {
                        delayedTriggers[i].call(this, event);
                    }
                    ;
                    this._trigger("stop", event, this._uiHash());
                }
                return false;
            }
            if (!noPropagation)
                this._trigger("beforeStop", event, this._uiHash());
            this.placeholder[0].parentNode.removeChild(this.placeholder[0]);
            if (this.helper[0] != this.currentItem[0])
                this.helper.remove();
            this.helper = null;
            if (!noPropagation) {
                for (var i = 0; i < delayedTriggers.length; i++) {
                    delayedTriggers[i].call(this, event);
                }
                ;
                this._trigger("stop", event, this._uiHash());
            }
            this.fromOutside = false;
            return true;
        },_trigger: function() {
            if ($.Widget.prototype._trigger.apply(this, arguments) === false) {
                this.cancel();
            }
        },_uiHash: function(inst) {
            var self = inst || this;
            return {helper: self.helper,placeholder: self.placeholder || $([]),position: self.position,originalPosition: self.originalPosition,offset: self.positionAbs,item: self.currentItem,sender: inst ? inst.element : null};
        }});
    $.extend($.ui.sortable, {version: "@VERSION"});
})(jQuery);
(function($, undefined) {
    var lastActive, baseClasses = "ui-button ui-widget ui-state-default ui-corner-all", stateClasses = "ui-state-hover ui-state-active ", typeClasses = "ui-button-icons-only ui-button-icon-only ui-button-text-icons ui-button-text-icon-primary ui-button-text-icon-secondary ui-button-text-only", formResetHandler = function(event) {
        $(":ui-button", event.target.form).each(function() {
            var inst = $(this).data("button");
            setTimeout(function() {
                inst.refresh();
            }, 1);
        });
    }, radioGroup = function(radio) {
        var name = radio.name, form = radio.form, radios = $([]);
        if (name) {
            if (form) {
                radios = $(form).find("[name='" + name + "']");
            } else {
                radios = $("[name='" + name + "']", radio.ownerDocument).filter(function() {
                    return !this.form;
                });
            }
        }
        return radios;
    };
    $.widget("ui.button", {options: {disabled: null,text: true,label: null,icons: {primary: null,secondary: null}},_create: function() {
            this.element.closest("form").unbind("reset.button").bind("reset.button", formResetHandler);
            if (typeof this.options.disabled !== "boolean") {
                this.options.disabled = this.element.attr("disabled");
            }
            this._determineButtonType();
            this.hasTitle = !!this.buttonElement.attr("title");
            var self = this, options = this.options, toggleButton = this.type === "checkbox" || this.type === "radio", hoverClass = "ui-state-hover" + (!toggleButton ? " ui-state-active" : ""), focusClass = "ui-state-focus";
            if (options.label === null) {
                options.label = this.buttonElement.html();
            }
            if (this.element.is(":disabled")) {
                options.disabled = true;
            }
            this.buttonElement.addClass(baseClasses).attr("role", "button").bind("mouseenter.button", function() {
                if (options.disabled) {
                    return;
                }
                $(this).addClass("ui-state-hover");
                if (this === lastActive) {
                    $(this).addClass("ui-state-active");
                }
            }).bind("mouseleave.button", function() {
                if (options.disabled) {
                    return;
                }
                $(this).removeClass(hoverClass);
            }).bind("focus.button", function() {
                $(this).addClass(focusClass);
            }).bind("blur.button", function() {
                $(this).removeClass(focusClass);
            }).bind("click.button", function(event) {
                if (options.disabled) {
                    event.stopImmediatePropagation();
                }
            });
            if (toggleButton) {
                this.element.bind("change.button", function() {
                    self.refresh();
                });
            }
            if (this.type === "checkbox") {
                this.buttonElement.bind("click.button", function() {
                    if (options.disabled) {
                        return false;
                    }
                    $(this).toggleClass("ui-state-active");
                    self.buttonElement.attr("aria-pressed", self.element[0].checked);
                });
            } else if (this.type === "radio") {
                this.buttonElement.bind("click.button", function() {
                    if (options.disabled) {
                        return false;
                    }
                    $(this).addClass("ui-state-active");
                    self.buttonElement.attr("aria-pressed", true);
                    var radio = self.element[0];
                    radioGroup(radio).not(radio).map(function() {
                        return $(this).button("widget")[0];
                    }).removeClass("ui-state-active").attr("aria-pressed", false);
                });
            } else {
                this.buttonElement.bind("mousedown.button", function() {
                    if (options.disabled) {
                        return false;
                    }
                    $(this).addClass("ui-state-active");
                    lastActive = this;
                    $(document).one("mouseup", function() {
                        lastActive = null;
                    });
                }).bind("mouseup.button", function() {
                    if (options.disabled) {
                        return false;
                    }
                    $(this).removeClass("ui-state-active");
                }).bind("keydown.button", function(event) {
                    if (options.disabled) {
                        return false;
                    }
                    if (event.keyCode == $.ui.keyCode.SPACE || event.keyCode == $.ui.keyCode.ENTER) {
                        $(this).addClass("ui-state-active");
                    }
                }).bind("keyup.button", function() {
                    $(this).removeClass("ui-state-active");
                });
                if (this.buttonElement.is("a")) {
                    this.buttonElement.keyup(function(event) {
                        if (event.keyCode === $.ui.keyCode.SPACE) {
                            $(this).click();
                        }
                    });
                }
            }
            this._setOption("disabled", options.disabled);
        },_determineButtonType: function() {
            if (this.element.is(":checkbox")) {
                this.type = "checkbox";
            } else if (this.element.is(":radio")) {
                this.type = "radio";
            } else if (this.element.is("input")) {
                this.type = "input";
            } else {
                this.type = "button";
            }
            if (this.type === "checkbox" || this.type === "radio") {
                var ancestor = this.element.parents().filter(":last"), labelSelector = "label[for=" + this.element.attr("id") + "]";
                this.buttonElement = ancestor.find(labelSelector);
                if (!this.buttonElement.length) {
                    ancestor = ancestor.length ? ancestor.siblings() : this.element.siblings();
                    this.buttonElement = ancestor.filter(labelSelector);
                    if (!this.buttonElement.length) {
                        this.buttonElement = ancestor.find(labelSelector);
                    }
                }
                this.element.addClass("ui-helper-hidden-accessible");
                var checked = this.element.is(":checked");
                if (checked) {
                    this.buttonElement.addClass("ui-state-active");
                }
                this.buttonElement.attr("aria-pressed", checked);
            } else {
                this.buttonElement = this.element;
            }
        },widget: function() {
            return this.buttonElement;
        },destroy: function() {
            this.element.removeClass("ui-helper-hidden-accessible");
            this.buttonElement.removeClass(baseClasses + " " + stateClasses + " " + typeClasses).removeAttr("role").removeAttr("aria-pressed").html(this.buttonElement.find(".ui-button-text").html());
            if (!this.hasTitle) {
                this.buttonElement.removeAttr("title");
            }
            $.Widget.prototype.destroy.call(this);
        },_setOption: function(key, value) {
            $.Widget.prototype._setOption.apply(this, arguments);
            if (key === "disabled") {
                if (value) {
                    this.element.attr("disabled", true);
                } else {
                    this.element.removeAttr("disabled");
                }
            }
            this._resetButton();
        },refresh: function() {
            var isDisabled = this.element.is(":disabled");
            if (isDisabled !== this.options.disabled) {
                this._setOption("disabled", isDisabled);
            }
            if (this.type === "radio") {
                radioGroup(this.element[0]).each(function() {
                    if ($(this).is(":checked")) {
                        $(this).button("widget").addClass("ui-state-active").attr("aria-pressed", true);
                    } else {
                        $(this).button("widget").removeClass("ui-state-active").attr("aria-pressed", false);
                    }
                });
            } else if (this.type === "checkbox") {
                if (this.element.is(":checked")) {
                    this.buttonElement.addClass("ui-state-active").attr("aria-pressed", true);
                } else {
                    this.buttonElement.removeClass("ui-state-active").attr("aria-pressed", false);
                }
            }
        },_resetButton: function() {
            if (this.type === "input") {
                if (this.options.label) {
                    this.element.val(this.options.label);
                }
                return;
            }
            var buttonElement = this.buttonElement.removeClass(typeClasses), buttonText = $("<span></span>").addClass("ui-button-text").html(this.options.label).appendTo(buttonElement.empty()).text(), icons = this.options.icons, multipleIcons = icons.primary && icons.secondary, buttonClasses = [];
            if (icons.primary || icons.secondary) {
                if (this.options.text) {
                    buttonClasses.push("ui-button-text-icon" + (multipleIcons ? "s" : (icons.primary ? "-primary" : "-secondary")));
                }
                if (icons.primary) {
                    buttonElement.prepend("<span class='ui-button-icon-primary ui-icon " + icons.primary + "'></span>");
                }
                if (icons.secondary) {
                    buttonElement.append("<span class='ui-button-icon-secondary ui-icon " + icons.secondary + "'></span>");
                }
                if (!this.options.text) {
                    buttonClasses.push(multipleIcons ? "ui-button-icons-only" : "ui-button-icon-only");
                    if (!this.hasTitle) {
                        buttonElement.attr("title", buttonText);
                    }
                }
            } else {
                buttonClasses.push("ui-button-text-only");
            }
            buttonElement.addClass(buttonClasses.join(" "));
        }});
    $.widget("ui.buttonset", {options: {items: ":button, :submit, :reset, :checkbox, :radio, a, :data(button)"},_create: function() {
            this.element.addClass("ui-buttonset");
        },_init: function() {
            this.refresh();
        },_setOption: function(key, value) {
            if (key === "disabled") {
                this.buttons.button("option", key, value);
            }
            $.Widget.prototype._setOption.apply(this, arguments);
        },refresh: function() {
            this.buttons = this.element.find(this.options.items).filter(":ui-button").button("refresh").end().not(":ui-button").button().end().map(function() {
                return $(this).button("widget")[0];
            }).removeClass("ui-corner-all ui-corner-left ui-corner-right").filter(":first").addClass("ui-corner-left").end().filter(":last").addClass("ui-corner-right").end().end();
        },destroy: function() {
            this.element.removeClass("ui-buttonset");
            this.buttons.map(function() {
                return $(this).button("widget")[0];
            }).removeClass("ui-corner-left ui-corner-right").end().button("destroy");
            $.Widget.prototype.destroy.call(this);
        }});
}(jQuery));
(function($, undefined) {
    $.widget("ui.progressbar", {options: {value: 0,max: 100},min: 0,_create: function() {
            this.element.addClass("ui-progressbar ui-widget ui-widget-content ui-corner-all").attr({role: "progressbar","aria-valuemin": this.min,"aria-valuemax": this.options.max,"aria-valuenow": this._value()});
            this.valueDiv = $("<div class='ui-progressbar-value ui-widget-header ui-corner-left'></div>").appendTo(this.element);
            this.oldValue = this._value();
            this._refreshValue();
        },destroy: function() {
            this.element.removeClass("ui-progressbar ui-widget ui-widget-content ui-corner-all").removeAttr("role").removeAttr("aria-valuemin").removeAttr("aria-valuemax").removeAttr("aria-valuenow");
            this.valueDiv.remove();
            $.Widget.prototype.destroy.apply(this, arguments);
        },value: function(newValue) {
            if (newValue === undefined) {
                return this._value();
            }
            this._setOption("value", newValue);
            return this;
        },_setOption: function(key, value) {
            if (key === "value") {
                this.options.value = value;
                this._refreshValue();
                if (this._value() === this.options.max) {
                    this._trigger("complete");
                }
            }
            $.Widget.prototype._setOption.apply(this, arguments);
        },_value: function() {
            var val = this.options.value;
            if (typeof val !== "number") {
                val = 0;
            }
            return Math.min(this.options.max, Math.max(this.min, val));
        },_percentage: function() {
            return 100 * this._value() / this.options.max;
        },_refreshValue: function() {
            var value = this.value();
            var percentage = this._percentage();
            if (this.oldValue !== value) {
                this.oldValue = value;
                this._trigger("change");
            }
            this.valueDiv.toggle(value > this.min).toggleClass("ui-corner-right", value === this.options.max).width(percentage.toFixed(0) + "%");
            this.element.attr("aria-valuenow", value);
        }});
    $.extend($.ui.progressbar, {version: "@VERSION"});
})(jQuery);
(function($, undefined) {
    var requestIndex = 0;
    $.widget("ui.autocomplete", {options: {appendTo: "body",autoFocus: false,delay: 300,minLength: 1,position: {my: "left top",at: "left bottom",collision: "none"},source: null},pending: 0,_create: function() {
            var self = this, doc = this.element[0].ownerDocument, suppressKeyPress;
            this.element.addClass("ui-autocomplete-input").attr("autocomplete", "off").attr({role: "textbox","aria-autocomplete": "list","aria-haspopup": "true"}).bind("keydown.autocomplete", function(event) {
                if (self.options.disabled || self.element.attr("readonly")) {
                    return;
                }
                suppressKeyPress = false;
                var keyCode = $.ui.keyCode;
                switch (event.keyCode) {
                    case keyCode.PAGE_UP:
                        self._move("previousPage", event);
                        break;
                    case keyCode.PAGE_DOWN:
                        self._move("nextPage", event);
                        break;
                    case keyCode.UP:
                        self._move("previous", event);
                        event.preventDefault();
                        break;
                    case keyCode.DOWN:
                        self._move("next", event);
                        event.preventDefault();
                        break;
                    case keyCode.ENTER:
                    case keyCode.NUMPAD_ENTER:
                        if (self.menu.active) {
                            suppressKeyPress = true;
                            event.preventDefault();
                        }
                    case keyCode.TAB:
                        if (!self.menu.active) {
                            return;
                        }
                        self.menu.select(event);
                        break;
                    case keyCode.ESCAPE:
                        self.element.val(self.term);
                        self.close(event);
                        break;
                    default:
                        clearTimeout(self.searching);
                        self.searching = setTimeout(function() {
                            if (self.term != self.element.val()) {
                                self.selectedItem = null;
                                self.search(null, event);
                            }
                        }, self.options.delay);
                        break;
                }
            }).bind("keypress.autocomplete", function(event) {
                if (suppressKeyPress) {
                    suppressKeyPress = false;
                    event.preventDefault();
                }
            }).bind("focus.autocomplete", function() {
                if (self.options.disabled) {
                    return;
                }
                self.selectedItem = null;
                self.previous = self.element.val();
            }).bind("blur.autocomplete", function(event) {
                if (self.options.disabled) {
                    return;
                }
                clearTimeout(self.searching);
                self.closing = setTimeout(function() {
                    self.close(event);
                    self._change(event);
                }, 150);
            });
            this._initSource();
            this.response = function() {
                return self._response.apply(self, arguments);
            };
            this.menu = $("<ul></ul>").addClass("ui-autocomplete").appendTo($(this.options.appendTo || "body", doc)[0]).mousedown(function(event) {
                var menuElement = self.menu.element[0];
                if (!$(event.target).closest(".ui-menu-item").length) {
                    setTimeout(function() {
                        $(document).one('mousedown', function(event) {
                            if (event.target !== self.element[0] && event.target !== menuElement && !$.ui.contains(menuElement, event.target)) {
                                self.close();
                            }
                        });
                    }, 1);
                }
                setTimeout(function() {
                    clearTimeout(self.closing);
                }, 13);
            }).menu({focus: function(event, ui) {
                    var item = ui.item.data("item.autocomplete");
                    if (false !== self._trigger("focus", event, {item: item})) {
                        if (/^key/.test(event.originalEvent.type)) {
                            self.element.val(item.value);
                        }
                    }
                },selected: function(event, ui) {
                    var item = ui.item.data("item.autocomplete"), previous = self.previous;
                    if (self.element[0] !== doc.activeElement) {
                        self.element.focus();
                        self.previous = previous;
                        setTimeout(function() {
                            self.previous = previous;
                            self.selectedItem = item;
                        }, 1);
                    }
                    if (false !== self._trigger("select", event, {item: item})) {
                        self.element.val(item.value);
                    }
                    self.term = self.element.val();
                    self.close(event);
                    self.selectedItem = item;
                },blur: function(event, ui) {
                    if (self.menu.element.is(":visible") && (self.element.val() !== self.term)) {
                        self.element.val(self.term);
                    }
                }}).zIndex(this.element.zIndex() + 1).css({top: 0,left: 0}).hide().data("menu");
            if ($.fn.bgiframe) {
                this.menu.element.bgiframe();
            }
        },destroy: function() {
            this.element.removeClass("ui-autocomplete-input").removeAttr("autocomplete").removeAttr("role").removeAttr("aria-autocomplete").removeAttr("aria-haspopup");
            this.menu.element.remove();
            $.Widget.prototype.destroy.call(this);
        },_setOption: function(key, value) {
            $.Widget.prototype._setOption.apply(this, arguments);
            if (key === "source") {
                this._initSource();
            }
            if (key === "appendTo") {
                this.menu.element.appendTo($(value || "body", this.element[0].ownerDocument)[0])
            }
            if (key === "disabled" && value && this.xhr) {
                this.xhr.abort();
            }
        },_initSource: function() {
            var self = this, array, url;
            if ($.isArray(this.options.source)) {
                array = this.options.source;
                this.source = function(request, response) {
                    response($.ui.autocomplete.filter(array, request.term));
                };
            } else if (typeof this.options.source === "string") {
                url = this.options.source;
                this.source = function(request, response) {
                    if (self.xhr) {
                        self.xhr.abort();
                    }
                    self.xhr = $.ajax({url: url,data: request,dataType: "json",autocompleteRequest: ++requestIndex,success: function(data, status) {
                            if (this.autocompleteRequest === requestIndex) {
                                response(data);
                            }
                        },error: function() {
                            if (this.autocompleteRequest === requestIndex) {
                                response([]);
                            }
                        }});
                };
            } else {
                this.source = this.options.source;
            }
        },search: function(value, event) {
            value = value != null ? value : this.element.val();
            this.term = this.element.val();
            if (value.length < this.options.minLength) {
                return this.close(event);
            }
            clearTimeout(this.closing);
            if (this._trigger("search", event) === false) {
                return;
            }
            return this._search(value);
        },_search: function(value) {
            this.pending++;
            this.element.addClass("ui-autocomplete-loading");
            this.source({term: value}, this.response);
        },_response: function(content) {
            if (!this.options.disabled && content && content.length) {
                content = this._normalize(content);
                this._suggest(content);
                this._trigger("open");
            } else {
                this.close();
            }
            this.pending--;
            if (!this.pending) {
                this.element.removeClass("ui-autocomplete-loading");
            }
        },close: function(event) {
            clearTimeout(this.closing);
            if (this.menu.element.is(":visible")) {
                this.menu.element.hide();
                this.menu.deactivate();
                this._trigger("close", event);
            }
        },_change: function(event) {
            if (this.previous !== this.element.val()) {
                this._trigger("change", event, {item: this.selectedItem});
            }
        },_normalize: function(items) {
            if (items.length && items[0].label && items[0].value) {
                return items;
            }
            return $.map(items, function(item) {
                if (typeof item === "string") {
                    return {label: item,value: item};
                }
                return $.extend({label: item.label || item.value,value: item.value || item.label}, item);
            });
        },_suggest: function(items) {
            var ul = this.menu.element.empty().zIndex(this.element.zIndex() + 1);
            this._renderMenu(ul, items);
            this.menu.deactivate();
            this.menu.refresh();
            ul.show();
            this._resizeMenu();
            ul.position($.extend({of: this.element}, this.options.position));
            if (this.options.autoFocus) {
                this.menu.next(new $.Event("mouseover"));
            }
        },_resizeMenu: function() {
            var ul = this.menu.element;
            ul.outerWidth(Math.max(ul.width("").outerWidth(), this.element.outerWidth()));
        },_renderMenu: function(ul, items) {
            var self = this;
            $.each(items, function(index, item) {
                self._renderItem(ul, item);
            });
        },_renderItem: function(ul, item) {
            return $("<li></li>").data("item.autocomplete", item).append($("<a></a>").text(item.label)).appendTo(ul);
        },_move: function(direction, event) {
            if (!this.menu.element.is(":visible")) {
                this.search(null, event);
                return;
            }
            if (this.menu.first() && /^previous/.test(direction) || this.menu.last() && /^next/.test(direction)) {
                this.element.val(this.term);
                this.menu.deactivate();
                return;
            }
            this.menu[direction](event);
        },widget: function() {
            return this.menu.element;
        }});
    $.extend($.ui.autocomplete, {escapeRegex: function(value) {
            return value.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
        },filter: function(array, term) {
            var matcher = new RegExp($.ui.autocomplete.escapeRegex(term), "i");
            return $.grep(array, function(value) {
                return matcher.test(value.label || value.value || value);
            });
        }});
}(jQuery));
(function($) {
    $.widget("ui.menu", {_create: function() {
            var self = this;
            this.element.addClass("ui-menu ui-widget ui-widget-content ui-corner-all").attr({role: "listbox","aria-activedescendant": "ui-active-menuitem"}).click(function(event) {
                if (!$(event.target).closest(".ui-menu-item a").length) {
                    return;
                }
                event.preventDefault();
                self.select(event);
            });
            this.refresh();
        },refresh: function() {
            var self = this;
            var items = this.element.children("li:not(.ui-menu-item):has(a)").addClass("ui-menu-item").attr("role", "menuitem");
            items.children("a").addClass("ui-corner-all").attr("tabindex", -1).mouseenter(function(event) {
                self.activate(event, $(this).parent());
            }).mouseleave(function() {
                self.deactivate();
            });
        },activate: function(event, item) {
            this.deactivate();
            if (this.hasScroll()) {
                var offset = item.offset().top - this.element.offset().top, scroll = this.element.scrollTop(), elementHeight = this.element.height();
                if (offset < 0) {
                    this.element.scrollTop(scroll + offset);
                } else if (offset >= elementHeight) {
                    this.element.scrollTop(scroll + offset - elementHeight + item.height());
                }
            }
            this.active = item.eq(0).children("a").addClass("ui-state-hover").attr("id", "ui-active-menuitem").end();
            this._trigger("focus", event, {item: item});
        },deactivate: function() {
            if (!this.active) {
                return;
            }
            this.active.children("a").removeClass("ui-state-hover").removeAttr("id");
            this._trigger("blur");
            this.active = null;
        },next: function(event) {
            this.move("next", ".ui-menu-item:first", event);
        },previous: function(event) {
            this.move("prev", ".ui-menu-item:last", event);
        },first: function() {
            return this.active && !this.active.prevAll(".ui-menu-item").length;
        },last: function() {
            return this.active && !this.active.nextAll(".ui-menu-item").length;
        },move: function(direction, edge, event) {
            if (!this.active) {
                this.activate(event, this.element.children(edge));
                return;
            }
            var next = this.active[direction + "All"](".ui-menu-item").eq(0);
            if (next.length) {
                this.activate(event, next);
            } else {
                this.activate(event, this.element.children(edge));
            }
        },nextPage: function(event) {
            if (this.hasScroll()) {
                if (!this.active || this.last()) {
                    this.activate(event, this.element.children(".ui-menu-item:first"));
                    return;
                }
                var base = this.active.offset().top, height = this.element.height(), result = this.element.children(".ui-menu-item").filter(function() {
                    var close = $(this).offset().top - base - height + $(this).height();
                    return close < 10 && close > -10;
                });
                if (!result.length) {
                    result = this.element.children(".ui-menu-item:last");
                }
                this.activate(event, result);
            } else {
                this.activate(event, this.element.children(".ui-menu-item").filter(!this.active || this.last() ? ":first" : ":last"));
            }
        },previousPage: function(event) {
            if (this.hasScroll()) {
                if (!this.active || this.first()) {
                    this.activate(event, this.element.children(".ui-menu-item:last"));
                    return;
                }
                var base = this.active.offset().top, height = this.element.height();
                result = this.element.children(".ui-menu-item").filter(function() {
                    var close = $(this).offset().top - base + height - $(this).height();
                    return close < 10 && close > -10;
                });
                if (!result.length) {
                    result = this.element.children(".ui-menu-item:first");
                }
                this.activate(event, result);
            } else {
                this.activate(event, this.element.children(".ui-menu-item").filter(!this.active || this.first() ? ":last" : ":first"));
            }
        },hasScroll: function() {
            return this.element.height() < this.element[$.fn.prop ? "prop" : "attr"]("scrollHeight");
        },select: function(event) {
            this._trigger("selected", event, {item: this.active});
        }});
}(jQuery));
(function($, undefined) {
    $.extend($.ui, {datepicker: {version: "@VERSION"}});
    var PROP_NAME = 'datepicker';
    var dpuuid = new Date().getTime();
    var instActive;
    function Datepicker() {
        this.debug = false;
        this._curInst = null;
        this._keyEvent = false;
        this._disabledInputs = [];
        this._datepickerShowing = false;
        this._inDialog = false;
        this._mainDivId = 'ui-datepicker-div';
        this._inlineClass = 'ui-datepicker-inline';
        this._appendClass = 'ui-datepicker-append';
        this._triggerClass = 'ui-datepicker-trigger';
        this._dialogClass = 'ui-datepicker-dialog';
        this._disableClass = 'ui-datepicker-disabled';
        this._unselectableClass = 'ui-datepicker-unselectable';
        this._currentClass = 'ui-datepicker-current-day';
        this._dayOverClass = 'ui-datepicker-days-cell-over';
        this.regional = [];
        this.regional[''] = {closeText: 'Done',prevText: 'Prev',nextText: 'Next',currentText: 'Today',monthNames: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],dayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],dayNamesShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],dayNamesMin: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],weekHeader: 'Wk',dateFormat: 'mm/dd/yy',firstDay: 0,isRTL: false,showMonthAfterYear: false,yearSuffix: ''};
        this._defaults = {showOn: 'focus',showAnim: 'fadeIn',showOptions: {},defaultDate: null,appendText: '',buttonText: '...',buttonImage: '',buttonImageOnly: false,hideIfNoPrevNext: false,navigationAsDateFormat: false,gotoCurrent: false,changeMonth: false,changeYear: false,yearRange: 'c-10:c+10',showOtherMonths: false,selectOtherMonths: false,showWeek: false,calculateWeek: this.iso8601Week,shortYearCutoff: '+10',minDate: null,maxDate: null,duration: 'fast',beforeShowDay: null,beforeShow: null,onSelect: null,onChangeMonthYear: null,onClose: null,numberOfMonths: 1,showCurrentAtPos: 0,stepMonths: 1,stepBigMonths: 12,altField: '',altFormat: '',constrainInput: true,showButtonPanel: false,autoSize: false};
        $.extend(this._defaults, this.regional['']);
        this.dpDiv = bindHover($('<div id="' + this._mainDivId + '" class="ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all"></div>'));
    }
    $.extend(Datepicker.prototype, {markerClassName: 'hasDatepicker',log: function() {
            if (this.debug)
                console.log.apply('', arguments);
        },_widgetDatepicker: function() {
            return this.dpDiv;
        },setDefaults: function(settings) {
            extendRemove(this._defaults, settings || {});
            return this;
        },_attachDatepicker: function(target, settings) {
            var inlineSettings = null;
            for (var attrName in this._defaults) {
                var attrValue = target.getAttribute('date:' + attrName);
                if (attrValue) {
                    inlineSettings = inlineSettings || {};
                    try {
                        inlineSettings[attrName] = eval(attrValue);
                    } catch (err) {
                        inlineSettings[attrName] = attrValue;
                    }
                }
            }
            var nodeName = target.nodeName.toLowerCase();
            var inline = (nodeName == 'div' || nodeName == 'span');
            if (!target.id) {
                this.uuid += 1;
                target.id = 'dp' + this.uuid;
            }
            var inst = this._newInst($(target), inline);
            inst.settings = $.extend({}, settings || {}, inlineSettings || {});
            if (nodeName == 'input') {
                this._connectDatepicker(target, inst);
            } else if (inline) {
                this._inlineDatepicker(target, inst);
            }
        },_newInst: function(target, inline) {
            var id = target[0].id.replace(/([^A-Za-z0-9_-])/g, '\\\\$1');
            return {id: id,input: target,selectedDay: 0,selectedMonth: 0,selectedYear: 0,drawMonth: 0,drawYear: 0,inline: inline,dpDiv: (!inline ? this.dpDiv : bindHover($('<div class="' + this._inlineClass + ' ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all"></div>')))};
        },_connectDatepicker: function(target, inst) {
            var input = $(target);
            inst.append = $([]);
            inst.trigger = $([]);
            if (input.hasClass(this.markerClassName))
                return;
            this._attachments(input, inst);
            input.addClass(this.markerClassName).keydown(this._doKeyDown).keypress(this._doKeyPress).keyup(this._doKeyUp).bind("setData.datepicker", function(event, key, value) {
                inst.settings[key] = value;
            }).bind("getData.datepicker", function(event, key) {
                return this._get(inst, key);
            });
            this._autoSize(inst);
            $.data(target, PROP_NAME, inst);
        },_attachments: function(input, inst) {
            var appendText = this._get(inst, 'appendText');
            var isRTL = this._get(inst, 'isRTL');
            if (inst.append)
                inst.append.remove();
            if (appendText) {
                inst.append = $('<span class="' + this._appendClass + '">' + appendText + '</span>');
                input[isRTL ? 'before' : 'after'](inst.append);
            }
            input.unbind('focus', this._showDatepicker);
            if (inst.trigger)
                inst.trigger.remove();
            var showOn = this._get(inst, 'showOn');
            if (showOn == 'focus' || showOn == 'both')
                input.focus(this._showDatepicker);
            if (showOn == 'button' || showOn == 'both') {
                var buttonText = this._get(inst, 'buttonText');
                var buttonImage = this._get(inst, 'buttonImage');
                inst.trigger = $(this._get(inst, 'buttonImageOnly') ? $('<img/>').addClass(this._triggerClass).attr({src: buttonImage,alt: buttonText,title: buttonText}) : $('<button type="button"></button>').addClass(this._triggerClass).html(buttonImage == '' ? buttonText : $('<img/>').attr({src: buttonImage,alt: buttonText,title: buttonText})));
                input[isRTL ? 'before' : 'after'](inst.trigger);
                inst.trigger.click(function() {
                    if ($.datepicker._datepickerShowing && $.datepicker._lastInput == input[0])
                        $.datepicker._hideDatepicker();
                    else
                        $.datepicker._showDatepicker(input[0]);
                    return false;
                });
            }
        },_autoSize: function(inst) {
            if (this._get(inst, 'autoSize') && !inst.inline) {
                var date = new Date(2009, 12 - 1, 20);
                var dateFormat = this._get(inst, 'dateFormat');
                if (dateFormat.match(/[DM]/)) {
                    var findMax = function(names) {
                        var max = 0;
                        var maxI = 0;
                        for (var i = 0; i < names.length; i++) {
                            if (names[i].length > max) {
                                max = names[i].length;
                                maxI = i;
                            }
                        }
                        return maxI;
                    };
                    date.setMonth(findMax(this._get(inst, (dateFormat.match(/MM/) ? 'monthNames' : 'monthNamesShort'))));
                    date.setDate(findMax(this._get(inst, (dateFormat.match(/DD/) ? 'dayNames' : 'dayNamesShort'))) + 20 - date.getDay());
                }
                inst.input.attr('size', this._formatDate(inst, date).length);
            }
        },_inlineDatepicker: function(target, inst) {
            var divSpan = $(target);
            if (divSpan.hasClass(this.markerClassName))
                return;
            divSpan.addClass(this.markerClassName).append(inst.dpDiv).bind("setData.datepicker", function(event, key, value) {
                inst.settings[key] = value;
            }).bind("getData.datepicker", function(event, key) {
                return this._get(inst, key);
            });
            $.data(target, PROP_NAME, inst);
            this._setDate(inst, this._getDefaultDate(inst), true);
            this._updateDatepicker(inst);
            this._updateAlternate(inst);
            inst.dpDiv.show();
        },_dialogDatepicker: function(input, date, onSelect, settings, pos) {
            var inst = this._dialogInst;
            if (!inst) {
                this.uuid += 1;
                var id = 'dp' + this.uuid;
                this._dialogInput = $('<input type="text" id="' + id + '" style="position: absolute; top: -100px; width: 0px; z-index: -10;"/>');
                this._dialogInput.keydown(this._doKeyDown);
                $('body').append(this._dialogInput);
                inst = this._dialogInst = this._newInst(this._dialogInput, false);
                inst.settings = {};
                $.data(this._dialogInput[0], PROP_NAME, inst);
            }
            extendRemove(inst.settings, settings || {});
            date = (date && date.constructor == Date ? this._formatDate(inst, date) : date);
            this._dialogInput.val(date);
            this._pos = (pos ? (pos.length ? pos : [pos.pageX, pos.pageY]) : null);
            if (!this._pos) {
                var browserWidth = document.documentElement.clientWidth;
                var browserHeight = document.documentElement.clientHeight;
                var scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;
                var scrollY = document.documentElement.scrollTop || document.body.scrollTop;
                this._pos = [(browserWidth / 2) - 100 + scrollX, (browserHeight / 2) - 150 + scrollY];
            }
            this._dialogInput.css('left', (this._pos[0] + 20) + 'px').css('top', this._pos[1] + 'px');
            inst.settings.onSelect = onSelect;
            this._inDialog = true;
            this.dpDiv.addClass(this._dialogClass);
            this._showDatepicker(this._dialogInput[0]);
            if ($.blockUI)
                $.blockUI(this.dpDiv);
            $.data(this._dialogInput[0], PROP_NAME, inst);
            return this;
        },_destroyDatepicker: function(target) {
            var $target = $(target);
            var inst = $.data(target, PROP_NAME);
            if (!$target.hasClass(this.markerClassName)) {
                return;
            }
            var nodeName = target.nodeName.toLowerCase();
            $.removeData(target, PROP_NAME);
            if (nodeName == 'input') {
                inst.append.remove();
                inst.trigger.remove();
                $target.removeClass(this.markerClassName).unbind('focus', this._showDatepicker).unbind('keydown', this._doKeyDown).unbind('keypress', this._doKeyPress).unbind('keyup', this._doKeyUp);
            } else if (nodeName == 'div' || nodeName == 'span')
                $target.removeClass(this.markerClassName).empty();
        },_enableDatepicker: function(target) {
            var $target = $(target);
            var inst = $.data(target, PROP_NAME);
            if (!$target.hasClass(this.markerClassName)) {
                return;
            }
            var nodeName = target.nodeName.toLowerCase();
            if (nodeName == 'input') {
                target.disabled = false;
                inst.trigger.filter('button').each(function() {
                    this.disabled = false;
                }).end().filter('img').css({opacity: '1.0',cursor: ''});
            }
            else if (nodeName == 'div' || nodeName == 'span') {
                var inline = $target.children('.' + this._inlineClass);
                inline.children().removeClass('ui-state-disabled');
                inline.find("select.ui-datepicker-month, select.ui-datepicker-year").removeAttr("disabled");
            }
            this._disabledInputs = $.map(this._disabledInputs, function(value) {
                return (value == target ? null : value);
            });
        },_disableDatepicker: function(target) {
            var $target = $(target);
            var inst = $.data(target, PROP_NAME);
            if (!$target.hasClass(this.markerClassName)) {
                return;
            }
            var nodeName = target.nodeName.toLowerCase();
            if (nodeName == 'input') {
                target.disabled = true;
                inst.trigger.filter('button').each(function() {
                    this.disabled = true;
                }).end().filter('img').css({opacity: '0.5',cursor: 'default'});
            }
            else if (nodeName == 'div' || nodeName == 'span') {
                var inline = $target.children('.' + this._inlineClass);
                inline.children().addClass('ui-state-disabled');
                inline.find("select.ui-datepicker-month, select.ui-datepicker-year").attr("disabled", "disabled");
            }
            this._disabledInputs = $.map(this._disabledInputs, function(value) {
                return (value == target ? null : value);
            });
            this._disabledInputs[this._disabledInputs.length] = target;
        },_isDisabledDatepicker: function(target) {
            if (!target) {
                return false;
            }
            for (var i = 0; i < this._disabledInputs.length; i++) {
                if (this._disabledInputs[i] == target)
                    return true;
            }
            return false;
        },_getInst: function(target) {
            try {
                return $.data(target, PROP_NAME);
            }
            catch (err) {
                throw 'Missing instance data for this datepicker';
            }
        },_optionDatepicker: function(target, name, value) {
            var inst = this._getInst(target);
            if (arguments.length == 2 && typeof name == 'string') {
                return (name == 'defaults' ? $.extend({}, $.datepicker._defaults) : (inst ? (name == 'all' ? $.extend({}, inst.settings) : this._get(inst, name)) : null));
            }
            var settings = name || {};
            if (typeof name == 'string') {
                settings = {};
                settings[name] = value;
            }
            if (inst) {
                if (this._curInst == inst) {
                    this._hideDatepicker();
                }
                var date = this._getDateDatepicker(target, true);
                var minDate = this._getMinMaxDate(inst, 'min');
                var maxDate = this._getMinMaxDate(inst, 'max');
                extendRemove(inst.settings, settings);
                if (minDate !== null && settings['dateFormat'] !== undefined && settings['minDate'] === undefined)
                    inst.settings.minDate = this._formatDate(inst, minDate);
                if (maxDate !== null && settings['dateFormat'] !== undefined && settings['maxDate'] === undefined)
                    inst.settings.maxDate = this._formatDate(inst, maxDate);
                this._attachments($(target), inst);
                this._autoSize(inst);
                this._setDate(inst, date);
                this._updateAlternate(inst);
                this._updateDatepicker(inst);
            }
        },_changeDatepicker: function(target, name, value) {
            this._optionDatepicker(target, name, value);
        },_refreshDatepicker: function(target) {
            var inst = this._getInst(target);
            if (inst) {
                this._updateDatepicker(inst);
            }
        },_setDateDatepicker: function(target, date) {
            var inst = this._getInst(target);
            if (inst) {
                this._setDate(inst, date);
                this._updateDatepicker(inst);
                this._updateAlternate(inst);
            }
        },_getDateDatepicker: function(target, noDefault) {
            var inst = this._getInst(target);
            if (inst && !inst.inline)
                this._setDateFromField(inst, noDefault);
            return (inst ? this._getDate(inst) : null);
        },_doKeyDown: function(event) {
            var inst = $.datepicker._getInst(event.target);
            var handled = true;
            var isRTL = inst.dpDiv.is('.ui-datepicker-rtl');
            inst._keyEvent = true;
            if ($.datepicker._datepickerShowing)
                switch (event.keyCode) {
                    case 9:
                        $.datepicker._hideDatepicker();
                        handled = false;
                        break;
                    case 13:
                        var sel = $('td.' + $.datepicker._dayOverClass + ':not(.' +
                        $.datepicker._currentClass + ')', inst.dpDiv);
                        if (sel[0])
                            $.datepicker._selectDay(event.target, inst.selectedMonth, inst.selectedYear, sel[0]);
                        else
                            $.datepicker._hideDatepicker();
                        return false;
                        break;
                    case 27:
                        $.datepicker._hideDatepicker();
                        break;
                    case 33:
                        $.datepicker._adjustDate(event.target, (event.ctrlKey ? -$.datepicker._get(inst, 'stepBigMonths') : -$.datepicker._get(inst, 'stepMonths')), 'M');
                        break;
                    case 34:
                        $.datepicker._adjustDate(event.target, (event.ctrlKey ? +$.datepicker._get(inst, 'stepBigMonths') : +$.datepicker._get(inst, 'stepMonths')), 'M');
                        break;
                    case 35:
                        if (event.ctrlKey || event.metaKey)
                            $.datepicker._clearDate(event.target);
                        handled = event.ctrlKey || event.metaKey;
                        break;
                    case 36:
                        if (event.ctrlKey || event.metaKey)
                            $.datepicker._gotoToday(event.target);
                        handled = event.ctrlKey || event.metaKey;
                        break;
                    case 37:
                        if (event.ctrlKey || event.metaKey)
                            $.datepicker._adjustDate(event.target, (isRTL ? +1 : -1), 'D');
                        handled = event.ctrlKey || event.metaKey;
                        if (event.originalEvent.altKey)
                            $.datepicker._adjustDate(event.target, (event.ctrlKey ? -$.datepicker._get(inst, 'stepBigMonths') : -$.datepicker._get(inst, 'stepMonths')), 'M');
                        break;
                    case 38:
                        if (event.ctrlKey || event.metaKey)
                            $.datepicker._adjustDate(event.target, -7, 'D');
                        handled = event.ctrlKey || event.metaKey;
                        break;
                    case 39:
                        if (event.ctrlKey || event.metaKey)
                            $.datepicker._adjustDate(event.target, (isRTL ? -1 : +1), 'D');
                        handled = event.ctrlKey || event.metaKey;
                        if (event.originalEvent.altKey)
                            $.datepicker._adjustDate(event.target, (event.ctrlKey ? +$.datepicker._get(inst, 'stepBigMonths') : +$.datepicker._get(inst, 'stepMonths')), 'M');
                        break;
                    case 40:
                        if (event.ctrlKey || event.metaKey)
                            $.datepicker._adjustDate(event.target, +7, 'D');
                        handled = event.ctrlKey || event.metaKey;
                        break;
                    default:
                        handled = false;
                }
            else if (event.keyCode == 36 && event.ctrlKey)
                $.datepicker._showDatepicker(this);
            else {
                handled = false;
            }
            if (handled) {
                event.preventDefault();
                event.stopPropagation();
            }
        },_doKeyPress: function(event) {
            var inst = $.datepicker._getInst(event.target);
            if ($.datepicker._get(inst, 'constrainInput')) {
                var chars = $.datepicker._possibleChars($.datepicker._get(inst, 'dateFormat'));
                var chr = String.fromCharCode(event.charCode == undefined ? event.keyCode : event.charCode);
                return event.ctrlKey || event.metaKey || (chr < ' ' || !chars || chars.indexOf(chr) > -1);
            }
        },_doKeyUp: function(event) {
            var inst = $.datepicker._getInst(event.target);
            if (inst.input.val() != inst.lastVal) {
                try {
                    var date = $.datepicker.parseDate($.datepicker._get(inst, 'dateFormat'), (inst.input ? inst.input.val() : null), $.datepicker._getFormatConfig(inst));
                    if (date) {
                        $.datepicker._setDateFromField(inst);
                        $.datepicker._updateAlternate(inst);
                        $.datepicker._updateDatepicker(inst);
                    }
                }
                catch (event) {
                    $.datepicker.log(event);
                }
            }
            return true;
        },_showDatepicker: function(input) {
            input = input.target || input;
            if (input.nodeName.toLowerCase() != 'input')
                input = $('input', input.parentNode)[0];
            if ($.datepicker._isDisabledDatepicker(input) || $.datepicker._lastInput == input)
                return;
            var inst = $.datepicker._getInst(input);
            if ($.datepicker._curInst && $.datepicker._curInst != inst) {
                $.datepicker._curInst.dpDiv.stop(true, true);
            }
            var beforeShow = $.datepicker._get(inst, 'beforeShow');
            extendRemove(inst.settings, (beforeShow ? beforeShow.apply(input, [input, inst]) : {}));
            inst.lastVal = null;
            $.datepicker._lastInput = input;
            $.datepicker._setDateFromField(inst);
            if ($.datepicker._inDialog)
                input.value = '';
            if (!$.datepicker._pos) {
                $.datepicker._pos = $.datepicker._findPos(input);
                $.datepicker._pos[1] += input.offsetHeight;
            }
            var isFixed = false;
            $(input).parents().each(function() {
                isFixed |= $(this).css('position') == 'fixed';
                return !isFixed;
            });
            if (isFixed && $.browser.opera) {
                $.datepicker._pos[0] -= document.documentElement.scrollLeft;
                $.datepicker._pos[1] -= document.documentElement.scrollTop;
            }
            var offset = {left: $.datepicker._pos[0],top: $.datepicker._pos[1]};
            $.datepicker._pos = null;
            inst.dpDiv.empty();
            inst.dpDiv.css({position: 'absolute',display: 'block',top: '-1000px'});
            $.datepicker._updateDatepicker(inst);
            offset = $.datepicker._checkOffset(inst, offset, isFixed);
            inst.dpDiv.css({position: ($.datepicker._inDialog && $.blockUI ? 'static' : (isFixed ? 'fixed' : 'absolute')),display: 'none',left: offset.left + 'px',top: offset.top + 'px'});
            if (!inst.inline) {
                var showAnim = $.datepicker._get(inst, 'showAnim');
                var duration = $.datepicker._get(inst, 'duration');
                var postProcess = function() {
                    var cover = inst.dpDiv.find('iframe.ui-datepicker-cover');
                    if (!!cover.length) {
                        var borders = $.datepicker._getBorders(inst.dpDiv);
                        cover.css({left: -borders[0],top: -borders[1],width: inst.dpDiv.outerWidth(),height: inst.dpDiv.outerHeight()});
                    }
                };
                inst.dpDiv.zIndex($(input).zIndex() + 1);
                $.datepicker._datepickerShowing = true;
                if ($.effects && $.effects[showAnim])
                    inst.dpDiv.show(showAnim, $.datepicker._get(inst, 'showOptions'), duration, postProcess);
                else
                    inst.dpDiv[showAnim || 'show']((showAnim ? duration : null), postProcess);
                if (!showAnim || !duration)
                    postProcess();
                if (inst.input.is(':visible') && !inst.input.is(':disabled'))
                    inst.input.focus();
                $.datepicker._curInst = inst;
            }
        },_updateDatepicker: function(inst) {
            var self = this;
            var borders = $.datepicker._getBorders(inst.dpDiv);
            instActive = inst;
            inst.dpDiv.empty().append(this._generateHTML(inst));
            var cover = inst.dpDiv.find('iframe.ui-datepicker-cover');
            if (!!cover.length) {
                cover.css({left: -borders[0],top: -borders[1],width: inst.dpDiv.outerWidth(),height: inst.dpDiv.outerHeight()})
            }
            inst.dpDiv.find('.' + this._dayOverClass + ' a').mouseover();
            var numMonths = this._getNumberOfMonths(inst);
            var cols = numMonths[1];
            var width = 17;
            inst.dpDiv.removeClass('ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4').width('');
            if (cols > 1)
                inst.dpDiv.addClass('ui-datepicker-multi-' + cols).css('width', (width * cols) + 'em');
            inst.dpDiv[(numMonths[0] != 1 || numMonths[1] != 1 ? 'add' : 'remove') + 'Class']('ui-datepicker-multi');
            inst.dpDiv[(this._get(inst, 'isRTL') ? 'add' : 'remove') + 'Class']('ui-datepicker-rtl');
            if (inst == $.datepicker._curInst && $.datepicker._datepickerShowing && inst.input && inst.input.is(':visible') && !inst.input.is(':disabled') && inst.input[0] != document.activeElement)
                inst.input.focus();
            if (inst.yearshtml) {
                var origyearshtml = inst.yearshtml;
                setTimeout(function() {
                    if (origyearshtml === inst.yearshtml && inst.yearshtml) {
                        inst.dpDiv.find('select.ui-datepicker-year:first').replaceWith(inst.yearshtml);
                    }
                    origyearshtml = inst.yearshtml = null;
                }, 0);
            }
        },_getBorders: function(elem) {
            var convert = function(value) {
                return {thin: 1,medium: 2,thick: 3}[value] || value;
            };
            return [parseFloat(convert(elem.css('border-left-width'))), parseFloat(convert(elem.css('border-top-width')))];
        },_checkOffset: function(inst, offset, isFixed) {
            var dpWidth = inst.dpDiv.outerWidth();
            var dpHeight = inst.dpDiv.outerHeight();
            var inputWidth = inst.input ? inst.input.outerWidth() : 0;
            var inputHeight = inst.input ? inst.input.outerHeight() : 0;
            var viewWidth = document.documentElement.clientWidth + $(document).scrollLeft();
            var viewHeight = document.documentElement.clientHeight + $(document).scrollTop();
            offset.left -= (this._get(inst, 'isRTL') ? (dpWidth - inputWidth) : 0);
            offset.left -= (isFixed && offset.left == inst.input.offset().left) ? $(document).scrollLeft() : 0;
            offset.top -= (isFixed && offset.top == (inst.input.offset().top + inputHeight)) ? $(document).scrollTop() : 0;
            offset.left -= Math.min(offset.left, (offset.left + dpWidth > viewWidth && viewWidth > dpWidth) ? Math.abs(offset.left + dpWidth - viewWidth) : 0);
            offset.top -= Math.min(offset.top, (offset.top + dpHeight > viewHeight && viewHeight > dpHeight) ? Math.abs(dpHeight + inputHeight) : 0);
            return offset;
        },_findPos: function(obj) {
            var inst = this._getInst(obj);
            var isRTL = this._get(inst, 'isRTL');
            while (obj && (obj.type == 'hidden' || obj.nodeType != 1 || $.expr.filters.hidden(obj))) {
                obj = obj[isRTL ? 'previousSibling' : 'nextSibling'];
            }
            var position = $(obj).offset();
            return [position.left, position.top];
        },_hideDatepicker: function(input) {
            var inst = this._curInst;
            if (!inst || (input && inst != $.data(input, PROP_NAME)))
                return;
            if (this._datepickerShowing) {
                var showAnim = this._get(inst, 'showAnim');
                var duration = this._get(inst, 'duration');
                var postProcess = function() {
                    $.datepicker._tidyDialog(inst);
                    this._curInst = null;
                };
                if ($.effects && $.effects[showAnim])
                    inst.dpDiv.hide(showAnim, $.datepicker._get(inst, 'showOptions'), duration, postProcess);
                else
                    inst.dpDiv[(showAnim == 'slideDown' ? 'slideUp' : (showAnim == 'fadeIn' ? 'fadeOut' : 'hide'))]((showAnim ? duration : null), postProcess);
                if (!showAnim)
                    postProcess();
                var onClose = this._get(inst, 'onClose');
                if (onClose)
                    onClose.apply((inst.input ? inst.input[0] : null), [(inst.input ? inst.input.val() : ''), inst]);
                this._datepickerShowing = false;
                this._lastInput = null;
                if (this._inDialog) {
                    this._dialogInput.css({position: 'absolute',left: '0',top: '-100px'});
                    if ($.blockUI) {
                        $.unblockUI();
                        $('body').append(this.dpDiv);
                    }
                }
                this._inDialog = false;
            }
        },_tidyDialog: function(inst) {
            inst.dpDiv.removeClass(this._dialogClass).unbind('.ui-datepicker-calendar');
        },_checkExternalClick: function(event) {
            if (!$.datepicker._curInst)
                return;
            var $target = $(event.target);
            if ($target[0].id != $.datepicker._mainDivId && $target.parents('#' + $.datepicker._mainDivId).length == 0 && !$target.hasClass($.datepicker.markerClassName) && !$target.hasClass($.datepicker._triggerClass) && $.datepicker._datepickerShowing && !($.datepicker._inDialog && $.blockUI))
                $.datepicker._hideDatepicker();
        },_adjustDate: function(id, offset, period) {
            var target = $(id);
            var inst = this._getInst(target[0]);
            if (this._isDisabledDatepicker(target[0])) {
                return;
            }
            this._adjustInstDate(inst, offset +
            (period == 'M' ? this._get(inst, 'showCurrentAtPos') : 0), period);
            this._updateDatepicker(inst);
        },_gotoToday: function(id) {
            var target = $(id);
            var inst = this._getInst(target[0]);
            if (this._get(inst, 'gotoCurrent') && inst.currentDay) {
                inst.selectedDay = inst.currentDay;
                inst.drawMonth = inst.selectedMonth = inst.currentMonth;
                inst.drawYear = inst.selectedYear = inst.currentYear;
            }
            else {
                var date = new Date();
                inst.selectedDay = date.getDate();
                inst.drawMonth = inst.selectedMonth = date.getMonth();
                inst.drawYear = inst.selectedYear = date.getFullYear();
            }
            this._notifyChange(inst);
            this._adjustDate(target);
        },_selectMonthYear: function(id, select, period) {
            var target = $(id);
            var inst = this._getInst(target[0]);
            inst._selectingMonthYear = false;
            inst['selected' + (period == 'M' ? 'Month' : 'Year')] = inst['draw' + (period == 'M' ? 'Month' : 'Year')] = parseInt(select.options[select.selectedIndex].value, 10);
            this._notifyChange(inst);
            this._adjustDate(target);
        },_clickMonthYear: function(id) {
            var target = $(id);
            var inst = this._getInst(target[0]);
            if (inst.input && inst._selectingMonthYear) {
                setTimeout(function() {
                    inst.input.focus();
                }, 0);
            }
            inst._selectingMonthYear = !inst._selectingMonthYear;
        },_selectDay: function(id, month, year, td) {
            var target = $(id);
            if ($(td).hasClass(this._unselectableClass) || this._isDisabledDatepicker(target[0])) {
                return;
            }
            var inst = this._getInst(target[0]);
            inst.selectedDay = inst.currentDay = $('a', td).html();
            inst.selectedMonth = inst.currentMonth = month;
            inst.selectedYear = inst.currentYear = year;
            this._selectDate(id, this._formatDate(inst, inst.currentDay, inst.currentMonth, inst.currentYear));
        },_clearDate: function(id) {
            var target = $(id);
            var inst = this._getInst(target[0]);
            this._selectDate(target, '');
        },_selectDate: function(id, dateStr) {
            var target = $(id);
            var inst = this._getInst(target[0]);
            dateStr = (dateStr != null ? dateStr : this._formatDate(inst));
            if (inst.input)
                inst.input.val(dateStr);
            this._updateAlternate(inst);
            var onSelect = this._get(inst, 'onSelect');
            if (onSelect)
                onSelect.apply((inst.input ? inst.input[0] : null), [dateStr, inst]);
            else if (inst.input)
                inst.input.trigger('change');
            if (inst.inline)
                this._updateDatepicker(inst);
            else {
                this._hideDatepicker();
                this._lastInput = inst.input[0];
                if (typeof (inst.input[0]) != 'object')
                    inst.input.focus();
                this._lastInput = null;
            }
        },_updateAlternate: function(inst) {
            var altField = this._get(inst, 'altField');
            if (altField) {
                var altFormat = this._get(inst, 'altFormat') || this._get(inst, 'dateFormat');
                var date = this._getDate(inst);
                var dateStr = this.formatDate(altFormat, date, this._getFormatConfig(inst));
                $(altField).each(function() {
                    $(this).val(dateStr);
                });
            }
        },noWeekends: function(date) {
            var day = date.getDay();
            return [(day > 0 && day < 6), ''];
        },iso8601Week: function(date) {
            var checkDate = new Date(date.getTime());
            checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7));
            var time = checkDate.getTime();
            checkDate.setMonth(0);
            checkDate.setDate(1);
            return Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1;
        },parseDate: function(format, value, settings) {
            if (format == null || value == null)
                throw 'Invalid arguments';
            value = (typeof value == 'object' ? value.toString() : value + '');
            if (value == '')
                return null;
            var shortYearCutoff = (settings ? settings.shortYearCutoff : null) || this._defaults.shortYearCutoff;
            shortYearCutoff = (typeof shortYearCutoff != 'string' ? shortYearCutoff : new Date().getFullYear() % 100 + parseInt(shortYearCutoff, 10));
            var dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort;
            var dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames;
            var monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort;
            var monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames;
            var year = -1;
            var month = -1;
            var day = -1;
            var doy = -1;
            var literal = false;
            var lookAhead = function(match) {
                var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) == match);
                if (matches)
                    iFormat++;
                return matches;
            };
            var getNumber = function(match) {
                var isDoubled = lookAhead(match);
                var size = (match == '@' ? 14 : (match == '!' ? 20 : (match == 'y' && isDoubled ? 4 : (match == 'o' ? 3 : 2))));
                var digits = new RegExp('^\\d{1,' + size + '}');
                var num = value.substring(iValue).match(digits);
                if (!num)
                    throw 'Missing number at position ' + iValue;
                iValue += num[0].length;
                return parseInt(num[0], 10);
            };
            var getName = function(match, shortNames, longNames) {
                var names = $.map(lookAhead(match) ? longNames : shortNames, function(v, k) {
                    return [[k, v]];
                }).sort(function(a, b) {
                    return -(a[1].length - b[1].length);
                });
                var index = -1;
                $.each(names, function(i, pair) {
                    var name = pair[1];
                    if (value.substr(iValue, name.length).toLowerCase() == name.toLowerCase()) {
                        index = pair[0];
                        iValue += name.length;
                        return false;
                    }
                });
                if (index != -1)
                    return index + 1;
                else
                    throw 'Unknown name at position ' + iValue;
            };
            var checkLiteral = function() {
                if (value.charAt(iValue) != format.charAt(iFormat))
                    throw 'Unexpected literal at position ' + iValue;
                iValue++;
            };
            var iValue = 0;
            for (var iFormat = 0; iFormat < format.length; iFormat++) {
                if (literal)
                    if (format.charAt(iFormat) == "'" && !lookAhead("'"))
                        literal = false;
                    else
                        checkLiteral();
                else
                    switch (format.charAt(iFormat)) {
                        case 'd':
                            day = getNumber('d');
                            break;
                        case 'D':
                            getName('D', dayNamesShort, dayNames);
                            break;
                        case 'o':
                            doy = getNumber('o');
                            break;
                        case 'm':
                            month = getNumber('m');
                            break;
                        case 'M':
                            month = getName('M', monthNamesShort, monthNames);
                            break;
                        case 'y':
                            year = getNumber('y');
                            break;
                        case '@':
                            var date = new Date(getNumber('@'));
                            year = date.getFullYear();
                            month = date.getMonth() + 1;
                            day = date.getDate();
                            break;
                        case '!':
                            var date = new Date((getNumber('!') - this._ticksTo1970) / 10000);
                            year = date.getFullYear();
                            month = date.getMonth() + 1;
                            day = date.getDate();
                            break;
                        case "'":
                            if (lookAhead("'"))
                                checkLiteral();
                            else
                                literal = true;
                            break;
                        default:
                            checkLiteral();
                    }
            }
            if (year == -1)
                year = new Date().getFullYear();
            else if (year < 100)
                year += new Date().getFullYear() - new Date().getFullYear() % 100 +
                (year <= shortYearCutoff ? 0 : -100);
            if (doy > -1) {
                month = 1;
                day = doy;
                do {
                    var dim = this._getDaysInMonth(year, month - 1);
                    if (day <= dim)
                        break;
                    month++;
                    day -= dim;
                } while (true);
            }
            var date = this._daylightSavingAdjust(new Date(year, month - 1, day));
            if (date.getFullYear() != year || date.getMonth() + 1 != month || date.getDate() != day)
                throw 'Invalid date';
            return date;
        },ATOM: 'yy-mm-dd',COOKIE: 'D, dd M yy',ISO_8601: 'yy-mm-dd',RFC_822: 'D, d M y',RFC_850: 'DD, dd-M-y',RFC_1036: 'D, d M y',RFC_1123: 'D, d M yy',RFC_2822: 'D, d M yy',RSS: 'D, d M y',TICKS: '!',TIMESTAMP: '@',W3C: 'yy-mm-dd',_ticksTo1970: (((1970 - 1) * 365 + Math.floor(1970 / 4) - Math.floor(1970 / 100) +
        Math.floor(1970 / 400)) * 24 * 60 * 60 * 10000000),formatDate: function(format, date, settings) {
            if (!date)
                return '';
            var dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort;
            var dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames;
            var monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort;
            var monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames;
            var lookAhead = function(match) {
                var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) == match);
                if (matches)
                    iFormat++;
                return matches;
            };
            var formatNumber = function(match, value, len) {
                var num = '' + value;
                if (lookAhead(match))
                    while (num.length < len)
                        num = '0' + num;
                return num;
            };
            var formatName = function(match, value, shortNames, longNames) {
                return (lookAhead(match) ? longNames[value] : shortNames[value]);
            };
            var output = '';
            var literal = false;
            if (date)
                for (var iFormat = 0; iFormat < format.length; iFormat++) {
                    if (literal)
                        if (format.charAt(iFormat) == "'" && !lookAhead("'"))
                            literal = false;
                        else
                            output += format.charAt(iFormat);
                    else
                        switch (format.charAt(iFormat)) {
                            case 'd':
                                output += formatNumber('d', date.getDate(), 2);
                                break;
                            case 'D':
                                output += formatName('D', date.getDay(), dayNamesShort, dayNames);
                                break;
                            case 'o':
                                output += formatNumber('o', (date.getTime() - new Date(date.getFullYear(), 0, 0).getTime()) / 86400000, 3);
                                break;
                            case 'm':
                                output += formatNumber('m', date.getMonth() + 1, 2);
                                break;
                            case 'M':
                                output += formatName('M', date.getMonth(), monthNamesShort, monthNames);
                                break;
                            case 'y':
                                output += (lookAhead('y') ? date.getFullYear() : (date.getYear() % 100 < 10 ? '0' : '') + date.getYear() % 100);
                                break;
                            case '@':
                                output += date.getTime();
                                break;
                            case '!':
                                output += date.getTime() * 10000 + this._ticksTo1970;
                                break;
                            case "'":
                                if (lookAhead("'"))
                                    output += "'";
                                else
                                    literal = true;
                                break;
                            default:
                                output += format.charAt(iFormat);
                        }
                }
            return output;
        },_possibleChars: function(format) {
            var chars = '';
            var literal = false;
            var lookAhead = function(match) {
                var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) == match);
                if (matches)
                    iFormat++;
                return matches;
            };
            for (var iFormat = 0; iFormat < format.length; iFormat++)
                if (literal)
                    if (format.charAt(iFormat) == "'" && !lookAhead("'"))
                        literal = false;
                    else
                        chars += format.charAt(iFormat);
                else
                    switch (format.charAt(iFormat)) {
                        case 'd':
                        case 'm':
                        case 'y':
                        case '@':
                            chars += '0123456789';
                            break;
                        case 'D':
                        case 'M':
                            return null;
                        case "'":
                            if (lookAhead("'"))
                                chars += "'";
                            else
                                literal = true;
                            break;
                        default:
                            chars += format.charAt(iFormat);
                    }
            return chars;
        },_get: function(inst, name) {
            return inst.settings[name] !== undefined ? inst.settings[name] : this._defaults[name];
        },_setDateFromField: function(inst, noDefault) {
            if (inst.input.val() == inst.lastVal) {
                return;
            }
            var dateFormat = this._get(inst, 'dateFormat');
            var dates = inst.lastVal = inst.input ? inst.input.val() : null;
            var date, defaultDate;
            date = defaultDate = this._getDefaultDate(inst);
            var settings = this._getFormatConfig(inst);
            try {
                date = this.parseDate(dateFormat, dates, settings) || defaultDate;
            } catch (event) {
                this.log(event);
                dates = (noDefault ? '' : dates);
            }
            inst.selectedDay = date.getDate();
            inst.drawMonth = inst.selectedMonth = date.getMonth();
            inst.drawYear = inst.selectedYear = date.getFullYear();
            inst.currentDay = (dates ? date.getDate() : 0);
            inst.currentMonth = (dates ? date.getMonth() : 0);
            inst.currentYear = (dates ? date.getFullYear() : 0);
            this._adjustInstDate(inst);
        },_getDefaultDate: function(inst) {
            return this._restrictMinMax(inst, this._determineDate(inst, this._get(inst, 'defaultDate'), new Date()));
        },_determineDate: function(inst, date, defaultDate) {
            var offsetNumeric = function(offset) {
                var date = new Date();
                date.setDate(date.getDate() + offset);
                return date;
            };
            var offsetString = function(offset) {
                try {
                    return $.datepicker.parseDate($.datepicker._get(inst, 'dateFormat'), offset, $.datepicker._getFormatConfig(inst));
                }
                catch (e) {
                }
                var date = (offset.toLowerCase().match(/^c/) ? $.datepicker._getDate(inst) : null) || new Date();
                var year = date.getFullYear();
                var month = date.getMonth();
                var day = date.getDate();
                var pattern = /([+-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g;
                var matches = pattern.exec(offset);
                while (matches) {
                    switch (matches[2] || 'd') {
                        case 'd':
                        case 'D':
                            day += parseInt(matches[1], 10);
                            break;
                        case 'w':
                        case 'W':
                            day += parseInt(matches[1], 10) * 7;
                            break;
                        case 'm':
                        case 'M':
                            month += parseInt(matches[1], 10);
                            day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
                            break;
                        case 'y':
                        case 'Y':
                            year += parseInt(matches[1], 10);
                            day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
                            break;
                    }
                    matches = pattern.exec(offset);
                }
                return new Date(year, month, day);
            };
            var newDate = (date == null || date === '' ? defaultDate : (typeof date == 'string' ? offsetString(date) : (typeof date == 'number' ? (isNaN(date) ? defaultDate : offsetNumeric(date)) : new Date(date.getTime()))));
            newDate = (newDate && newDate.toString() == 'Invalid Date' ? defaultDate : newDate);
            if (newDate) {
                newDate.setHours(0);
                newDate.setMinutes(0);
                newDate.setSeconds(0);
                newDate.setMilliseconds(0);
            }
            return this._daylightSavingAdjust(newDate);
        },_daylightSavingAdjust: function(date) {
            if (!date)
                return null;
            date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);
            return date;
        },_setDate: function(inst, date, noChange) {
            var clear = !date;
            var origMonth = inst.selectedMonth;
            var origYear = inst.selectedYear;
            var newDate = this._restrictMinMax(inst, this._determineDate(inst, date, new Date()));
            inst.selectedDay = inst.currentDay = newDate.getDate();
            inst.drawMonth = inst.selectedMonth = inst.currentMonth = newDate.getMonth();
            inst.drawYear = inst.selectedYear = inst.currentYear = newDate.getFullYear();
            if ((origMonth != inst.selectedMonth || origYear != inst.selectedYear) && !noChange)
                this._notifyChange(inst);
            this._adjustInstDate(inst);
            if (inst.input) {
                inst.input.val(clear ? '' : this._formatDate(inst));
            }
        },_getDate: function(inst) {
            var startDate = (!inst.currentYear || (inst.input && inst.input.val() == '') ? null : this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay)));
            return startDate;
        },_generateHTML: function(inst) {
            var today = new Date();
            today = this._daylightSavingAdjust(new Date(today.getFullYear(), today.getMonth(), today.getDate()));
            var isRTL = this._get(inst, 'isRTL');
            var showButtonPanel = this._get(inst, 'showButtonPanel');
            var hideIfNoPrevNext = this._get(inst, 'hideIfNoPrevNext');
            var navigationAsDateFormat = this._get(inst, 'navigationAsDateFormat');
            var numMonths = this._getNumberOfMonths(inst);
            var showCurrentAtPos = this._get(inst, 'showCurrentAtPos');
            var stepMonths = this._get(inst, 'stepMonths');
            var isMultiMonth = (numMonths[0] != 1 || numMonths[1] != 1);
            var currentDate = this._daylightSavingAdjust((!inst.currentDay ? new Date(9999, 9, 9) : new Date(inst.currentYear, inst.currentMonth, inst.currentDay)));
            var minDate = this._getMinMaxDate(inst, 'min');
            var maxDate = this._getMinMaxDate(inst, 'max');
            var drawMonth = inst.drawMonth - showCurrentAtPos;
            var drawYear = inst.drawYear;
            if (drawMonth < 0) {
                drawMonth += 12;
                drawYear--;
            }
            if (maxDate) {
                var maxDraw = this._daylightSavingAdjust(new Date(maxDate.getFullYear(), maxDate.getMonth() - (numMonths[0] * numMonths[1]) + 1, maxDate.getDate()));
                maxDraw = (minDate && maxDraw < minDate ? minDate : maxDraw);
                while (this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1)) > maxDraw) {
                    drawMonth--;
                    if (drawMonth < 0) {
                        drawMonth = 11;
                        drawYear--;
                    }
                }
            }
            inst.drawMonth = drawMonth;
            inst.drawYear = drawYear;
            var prevText = this._get(inst, 'prevText');
            prevText = (!navigationAsDateFormat ? prevText : this.formatDate(prevText, this._daylightSavingAdjust(new Date(drawYear, drawMonth - stepMonths, 1)), this._getFormatConfig(inst)));
            var prev = (this._canAdjustMonth(inst, -1, drawYear, drawMonth) ? '<a class="ui-datepicker-prev ui-corner-all" onclick="DP_jQuery_' + dpuuid + '.datepicker._adjustDate(\'#' + inst.id + '\', -' + stepMonths + ', \'M\');"' + ' title="' + prevText + '"><span class="ui-icon ui-icon-circle-triangle-' + (isRTL ? 'e' : 'w') + '">' + prevText + '</span></a>' : (hideIfNoPrevNext ? '' : '<a class="ui-datepicker-prev ui-corner-all ui-state-disabled" title="' + prevText + '"><span class="ui-icon ui-icon-circle-triangle-' + (isRTL ? 'e' : 'w') + '">' + prevText + '</span></a>'));
            var nextText = this._get(inst, 'nextText');
            nextText = (!navigationAsDateFormat ? nextText : this.formatDate(nextText, this._daylightSavingAdjust(new Date(drawYear, drawMonth + stepMonths, 1)), this._getFormatConfig(inst)));
            var next = (this._canAdjustMonth(inst, +1, drawYear, drawMonth) ? '<a class="ui-datepicker-next ui-corner-all" onclick="DP_jQuery_' + dpuuid + '.datepicker._adjustDate(\'#' + inst.id + '\', +' + stepMonths + ', \'M\');"' + ' title="' + nextText + '"><span class="ui-icon ui-icon-circle-triangle-' + (isRTL ? 'w' : 'e') + '">' + nextText + '</span></a>' : (hideIfNoPrevNext ? '' : '<a class="ui-datepicker-next ui-corner-all ui-state-disabled" title="' + nextText + '"><span class="ui-icon ui-icon-circle-triangle-' + (isRTL ? 'w' : 'e') + '">' + nextText + '</span></a>'));
            var currentText = this._get(inst, 'currentText');
            var gotoDate = (this._get(inst, 'gotoCurrent') && inst.currentDay ? currentDate : today);
            currentText = (!navigationAsDateFormat ? currentText : this.formatDate(currentText, gotoDate, this._getFormatConfig(inst)));
            var controls = (!inst.inline ? '<button type="button" class="ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all" onclick="DP_jQuery_' + dpuuid + '.datepicker._hideDatepicker();">' + this._get(inst, 'closeText') + '</button>' : '');
            var buttonPanel = (showButtonPanel) ? '<div class="ui-datepicker-buttonpane ui-widget-content">' + (isRTL ? controls : '') +
            (this._isInRange(inst, gotoDate) ? '<button type="button" class="ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all" onclick="DP_jQuery_' + dpuuid + '.datepicker._gotoToday(\'#' + inst.id + '\');"' + '>' + currentText + '</button>' : '') + (isRTL ? '' : controls) + '</div>' : '';
            var firstDay = parseInt(this._get(inst, 'firstDay'), 10);
            firstDay = (isNaN(firstDay) ? 0 : firstDay);
            var showWeek = this._get(inst, 'showWeek');
            var dayNames = this._get(inst, 'dayNames');
            var dayNamesShort = this._get(inst, 'dayNamesShort');
            var dayNamesMin = this._get(inst, 'dayNamesMin');
            var monthNames = this._get(inst, 'monthNames');
            var monthNamesShort = this._get(inst, 'monthNamesShort');
            var beforeShowDay = this._get(inst, 'beforeShowDay');
            var showOtherMonths = this._get(inst, 'showOtherMonths');
            var selectOtherMonths = this._get(inst, 'selectOtherMonths');
            var calculateWeek = this._get(inst, 'calculateWeek') || this.iso8601Week;
            var defaultDate = this._getDefaultDate(inst);
            var html = '';
            for (var row = 0; row < numMonths[0]; row++) {
                var group = '';
                for (var col = 0; col < numMonths[1]; col++) {
                    var selectedDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, inst.selectedDay));
                    var cornerClass = ' ui-corner-all';
                    var calender = '';
                    if (isMultiMonth) {
                        calender += '<div class="ui-datepicker-group';
                        if (numMonths[1] > 1)
                            switch (col) {
                                case 0:
                                    calender += ' ui-datepicker-group-first';
                                    cornerClass = ' ui-corner-' + (isRTL ? 'right' : 'left');
                                    break;
                                case numMonths[1] - 1:
                                    calender += ' ui-datepicker-group-last';
                                    cornerClass = ' ui-corner-' + (isRTL ? 'left' : 'right');
                                    break;
                                default:
                                    calender += ' ui-datepicker-group-middle';
                                    cornerClass = '';
                                    break;
                            }
                        calender += '">';
                    }
                    calender += '<div class="ui-datepicker-header ui-widget-header ui-helper-clearfix' + cornerClass + '">' +
                    (/all|left/.test(cornerClass) && row == 0 ? (isRTL ? next : prev) : '') +
                    (/all|right/.test(cornerClass) && row == 0 ? (isRTL ? prev : next) : '') +
                    this._generateMonthYearHeader(inst, drawMonth, drawYear, minDate, maxDate, row > 0 || col > 0, monthNames, monthNamesShort) + '</div><table class="ui-datepicker-calendar"><thead>' + '<tr>';
                    var thead = (showWeek ? '<th class="ui-datepicker-week-col">' + this._get(inst, 'weekHeader') + '</th>' : '');
                    for (var dow = 0; dow < 7; dow++) {
                        var day = (dow + firstDay) % 7;
                        thead += '<th' + ((dow + firstDay + 6) % 7 >= 5 ? ' class="ui-datepicker-week-end"' : '') + '>' + '<span title="' + dayNames[day] + '">' + dayNamesMin[day] + '</span></th>';
                    }
                    calender += thead + '</tr></thead><tbody>';
                    var daysInMonth = this._getDaysInMonth(drawYear, drawMonth);
                    if (drawYear == inst.selectedYear && drawMonth == inst.selectedMonth)
                        inst.selectedDay = Math.min(inst.selectedDay, daysInMonth);
                    var leadDays = (this._getFirstDayOfMonth(drawYear, drawMonth) - firstDay + 7) % 7;
                    var numRows = (isMultiMonth ? 6 : Math.ceil((leadDays + daysInMonth) / 7));
                    var printDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1 - leadDays));
                    for (var dRow = 0; dRow < numRows; dRow++) {
                        calender += '<tr>';
                        var tbody = (!showWeek ? '' : '<td class="ui-datepicker-week-col">' +
                        this._get(inst, 'calculateWeek')(printDate) + '</td>');
                        for (var dow = 0; dow < 7; dow++) {
                            var daySettings = (beforeShowDay ? beforeShowDay.apply((inst.input ? inst.input[0] : null), [printDate]) : [true, '']);
                            var otherMonth = (printDate.getMonth() != drawMonth);
                            var unselectable = (otherMonth && !selectOtherMonths) || !daySettings[0] || (minDate && printDate < minDate) || (maxDate && printDate > maxDate);
                            tbody += '<td class="' +
                            ((dow + firstDay + 6) % 7 >= 5 ? ' ui-datepicker-week-end' : '') +
                            (otherMonth ? ' ui-datepicker-other-month' : '') +
                            ((printDate.getTime() == selectedDate.getTime() && drawMonth == inst.selectedMonth && inst._keyEvent) || (defaultDate.getTime() == printDate.getTime() && defaultDate.getTime() == selectedDate.getTime()) ? ' ' + this._dayOverClass : '') +
                            (unselectable ? ' ' + this._unselectableClass + ' ui-state-disabled' : '') +
                            (otherMonth && !showOtherMonths ? '' : ' ' + daySettings[1] +
                            (printDate.getTime() == currentDate.getTime() ? ' ' + this._currentClass : '') +
                            (printDate.getTime() == today.getTime() ? ' ui-datepicker-today' : '')) + '"' +
                            ((!otherMonth || showOtherMonths) && daySettings[2] ? ' title="' + daySettings[2] + '"' : '') +
                            (unselectable ? '' : ' onclick="DP_jQuery_' + dpuuid + '.datepicker._selectDay(\'#' +
                            inst.id + '\',' + printDate.getMonth() + ',' + printDate.getFullYear() + ', this);return false;"') + '>' +
                            (otherMonth && !showOtherMonths ? '&#xa0;' : (unselectable ? '<span class="ui-state-default">' + printDate.getDate() + '</span>' : '<a class="ui-state-default' +
                            (printDate.getTime() == today.getTime() ? ' ui-state-highlight' : '') +
                            (printDate.getTime() == currentDate.getTime() ? ' ui-state-active' : '') +
                            (otherMonth ? ' ui-priority-secondary' : '') + '" href="#">' + printDate.getDate() + '</a>')) + '</td>';
                            printDate.setDate(printDate.getDate() + 1);
                            printDate = this._daylightSavingAdjust(printDate);
                        }
                        calender += tbody + '</tr>';
                    }
                    drawMonth++;
                    if (drawMonth > 11) {
                        drawMonth = 0;
                        drawYear++;
                    }
                    calender += '</tbody></table>' + (isMultiMonth ? '</div>' +
                    ((numMonths[0] > 0 && col == numMonths[1] - 1) ? '<div class="ui-datepicker-row-break"></div>' : '') : '');
                    group += calender;
                }
                html += group;
            }
            html += buttonPanel + ($.browser.msie && parseInt($.browser.version, 10) < 7 && !inst.inline ? '<iframe src="javascript:false;" class="ui-datepicker-cover" frameborder="0"></iframe>' : '');
            inst._keyEvent = false;
            return html;
        },_generateMonthYearHeader: function(inst, drawMonth, drawYear, minDate, maxDate, secondary, monthNames, monthNamesShort) {
            var changeMonth = this._get(inst, 'changeMonth');
            var changeYear = this._get(inst, 'changeYear');
            var showMonthAfterYear = this._get(inst, 'showMonthAfterYear');
            var html = '<div class="ui-datepicker-title">';
            var monthHtml = '';
            if (secondary || !changeMonth)
                monthHtml += '<span class="ui-datepicker-month">' + monthNames[drawMonth] + '</span>';
            else {
                var inMinYear = (minDate && minDate.getFullYear() == drawYear);
                var inMaxYear = (maxDate && maxDate.getFullYear() == drawYear);
                monthHtml += '<select class="ui-datepicker-month" ' + 'onchange="DP_jQuery_' + dpuuid + '.datepicker._selectMonthYear(\'#' + inst.id + '\', this, \'M\');" ' + 'onclick="DP_jQuery_' + dpuuid + '.datepicker._clickMonthYear(\'#' + inst.id + '\');"' + '>';
                for (var month = 0; month < 12; month++) {
                    if ((!inMinYear || month >= minDate.getMonth()) && (!inMaxYear || month <= maxDate.getMonth()))
                        monthHtml += '<option value="' + month + '"' +
                        (month == drawMonth ? ' selected="selected"' : '') + '>' + monthNamesShort[month] + '</option>';
                }
                monthHtml += '</select>';
            }
            if (!showMonthAfterYear)
                html += monthHtml + (secondary || !(changeMonth && changeYear) ? '&#xa0;' : '');
            if (!inst.yearshtml) {
                inst.yearshtml = '';
                if (secondary || !changeYear)
                    html += '<span class="ui-datepicker-year">' + drawYear + '</span>';
                else {
                    var years = this._get(inst, 'yearRange').split(':');
                    var thisYear = new Date().getFullYear();
                    var determineYear = function(value) {
                        var year = (value.match(/c[+-].*/) ? drawYear + parseInt(value.substring(1), 10) : (value.match(/[+-].*/) ? thisYear + parseInt(value, 10) : parseInt(value, 10)));
                        return (isNaN(year) ? thisYear : year);
                    };
                    var year = determineYear(years[0]);
                    var endYear = Math.max(year, determineYear(years[1] || ''));
                    year = (minDate ? Math.max(year, minDate.getFullYear()) : year);
                    endYear = (maxDate ? Math.min(endYear, maxDate.getFullYear()) : endYear);
                    inst.yearshtml += '<select class="ui-datepicker-year" ' + 'onchange="DP_jQuery_' + dpuuid + '.datepicker._selectMonthYear(\'#' + inst.id + '\', this, \'Y\');" ' + 'onclick="DP_jQuery_' + dpuuid + '.datepicker._clickMonthYear(\'#' + inst.id + '\');"' + '>';
                    for (; year <= endYear; year++) {
                        inst.yearshtml += '<option value="' + year + '"' +
                        (year == drawYear ? ' selected="selected"' : '') + '>' + year + '</option>';
                    }
                    inst.yearshtml += '</select>';
                    html += inst.yearshtml;
                    inst.yearshtml = null;
                }
            }
            html += this._get(inst, 'yearSuffix');
            if (showMonthAfterYear)
                html += (secondary || !(changeMonth && changeYear) ? '&#xa0;' : '') + monthHtml;
            html += '</div>';
            return html;
        },_adjustInstDate: function(inst, offset, period) {
            var year = inst.drawYear + (period == 'Y' ? offset : 0);
            var month = inst.drawMonth + (period == 'M' ? offset : 0);
            var day = Math.min(inst.selectedDay, this._getDaysInMonth(year, month)) +
            (period == 'D' ? offset : 0);
            var date = this._restrictMinMax(inst, this._daylightSavingAdjust(new Date(year, month, day)));
            inst.selectedDay = date.getDate();
            inst.drawMonth = inst.selectedMonth = date.getMonth();
            inst.drawYear = inst.selectedYear = date.getFullYear();
            if (period == 'M' || period == 'Y')
                this._notifyChange(inst);
        },_restrictMinMax: function(inst, date) {
            var minDate = this._getMinMaxDate(inst, 'min');
            var maxDate = this._getMinMaxDate(inst, 'max');
            var newDate = (minDate && date < minDate ? minDate : date);
            newDate = (maxDate && newDate > maxDate ? maxDate : newDate);
            return newDate;
        },_notifyChange: function(inst) {
            var onChange = this._get(inst, 'onChangeMonthYear');
            if (onChange)
                onChange.apply((inst.input ? inst.input[0] : null), [inst.selectedYear, inst.selectedMonth + 1, inst]);
        },_getNumberOfMonths: function(inst) {
            var numMonths = this._get(inst, 'numberOfMonths');
            return (numMonths == null ? [1, 1] : (typeof numMonths == 'number' ? [1, numMonths] : numMonths));
        },_getMinMaxDate: function(inst, minMax) {
            return this._determineDate(inst, this._get(inst, minMax + 'Date'), null);
        },_getDaysInMonth: function(year, month) {
            return 32 - this._daylightSavingAdjust(new Date(year, month, 32)).getDate();
        },_getFirstDayOfMonth: function(year, month) {
            return new Date(year, month, 1).getDay();
        },_canAdjustMonth: function(inst, offset, curYear, curMonth) {
            var numMonths = this._getNumberOfMonths(inst);
            var date = this._daylightSavingAdjust(new Date(curYear, curMonth + (offset < 0 ? offset : numMonths[0] * numMonths[1]), 1));
            if (offset < 0)
                date.setDate(this._getDaysInMonth(date.getFullYear(), date.getMonth()));
            return this._isInRange(inst, date);
        },_isInRange: function(inst, date) {
            var minDate = this._getMinMaxDate(inst, 'min');
            var maxDate = this._getMinMaxDate(inst, 'max');
            return ((!minDate || date.getTime() >= minDate.getTime()) && (!maxDate || date.getTime() <= maxDate.getTime()));
        },_getFormatConfig: function(inst) {
            var shortYearCutoff = this._get(inst, 'shortYearCutoff');
            shortYearCutoff = (typeof shortYearCutoff != 'string' ? shortYearCutoff : new Date().getFullYear() % 100 + parseInt(shortYearCutoff, 10));
            return {shortYearCutoff: shortYearCutoff,dayNamesShort: this._get(inst, 'dayNamesShort'),dayNames: this._get(inst, 'dayNames'),monthNamesShort: this._get(inst, 'monthNamesShort'),monthNames: this._get(inst, 'monthNames')};
        },_formatDate: function(inst, day, month, year) {
            if (!day) {
                inst.currentDay = inst.selectedDay;
                inst.currentMonth = inst.selectedMonth;
                inst.currentYear = inst.selectedYear;
            }
            var date = (day ? (typeof day == 'object' ? day : this._daylightSavingAdjust(new Date(year, month, day))) : this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay)));
            return this.formatDate(this._get(inst, 'dateFormat'), date, this._getFormatConfig(inst));
        }});
    function bindHover(dpDiv) {
        var selector = 'button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a';
        return dpDiv.delegate(selector, 'mouseout', function() {
            $(this).removeClass('ui-state-hover');
            if (this.className.indexOf('ui-datepicker-prev') != -1)
                $(this).removeClass('ui-datepicker-prev-hover');
            if (this.className.indexOf('ui-datepicker-next') != -1)
                $(this).removeClass('ui-datepicker-next-hover');
        }).delegate(selector, 'mouseover', function() {
            if (!$.datepicker._isDisabledDatepicker(instActive.inline ? dpDiv.parent()[0] : instActive.input[0])) {
                $(this).parents('.ui-datepicker-calendar').find('a').removeClass('ui-state-hover');
                $(this).addClass('ui-state-hover');
                if (this.className.indexOf('ui-datepicker-prev') != -1)
                    $(this).addClass('ui-datepicker-prev-hover');
                if (this.className.indexOf('ui-datepicker-next') != -1)
                    $(this).addClass('ui-datepicker-next-hover');
            }
        });
    }
    function extendRemove(target, props) {
        $.extend(target, props);
        for (var name in props)
            if (props[name] == null || props[name] == undefined)
                target[name] = props[name];
        return target;
    }
    ;
    function isArray(a) {
        return (a && (($.browser.safari && typeof a == 'object' && a.length) || (a.constructor && a.constructor.toString().match(/\Array\(\)/))));
    }
    ;
    $.fn.datepicker = function(options) {
        if (!this.length) {
            return this;
        }
        if (!$.datepicker.initialized) {
            $(document).mousedown($.datepicker._checkExternalClick).find('body').append($.datepicker.dpDiv);
            $.datepicker.initialized = true;
        }
        var otherArgs = Array.prototype.slice.call(arguments, 1);
        if (typeof options == 'string' && (options == 'isDisabled' || options == 'getDate' || options == 'widget'))
            return $.datepicker['_' + options + 'Datepicker'].apply($.datepicker, [this[0]].concat(otherArgs));
        if (options == 'option' && arguments.length == 2 && typeof arguments[1] == 'string')
            return $.datepicker['_' + options + 'Datepicker'].apply($.datepicker, [this[0]].concat(otherArgs));
        return this.each(function() {
            typeof options == 'string' ? $.datepicker['_' + options + 'Datepicker'].apply($.datepicker, [this].concat(otherArgs)) : $.datepicker._attachDatepicker(this, options);
        });
    };
    $.datepicker = new Datepicker();
    $.datepicker.initialized = false;
    $.datepicker.uuid = new Date().getTime();
    $.datepicker.version = "@VERSION";
    window['DP_jQuery_' + dpuuid] = $;
})(jQuery);
(function() {
    var SelectParser;
    SelectParser = (function() {
        function SelectParser() {
            this.options_index = 0;
            this.parsed = [];
        }
        SelectParser.prototype.add_node = function(child) {
            if (child.nodeName === "OPTGROUP") {
                return this.add_group(child);
            } else {
                return this.add_option(child);
            }
        };
        SelectParser.prototype.add_group = function(group) {
            var group_position, option, _i, _len, _ref, _results;
            group_position = this.parsed.length;
            this.parsed.push({array_index: group_position,group: true,label: group.label,children: 0,disabled: group.disabled});
            _ref = group.childNodes;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                option = _ref[_i];
                _results.push(this.add_option(option, group_position, group.disabled));
            }
            return _results;
        };
        SelectParser.prototype.add_option = function(option, group_position, group_disabled) {
            if (option.nodeName === "OPTION") {
                if (option.text !== "") {
                    if (group_position != null) {
                        this.parsed[group_position].children += 1;
                    }
                    this.parsed.push({array_index: this.parsed.length,options_index: this.options_index,value: option.value,text: option.text,html: option.innerHTML,selected: option.selected,disabled: group_disabled === true ? group_disabled : option.disabled,group_array_index: group_position,classes: option.className,style: option.style.cssText});
                } else {
                    this.parsed.push({array_index: this.parsed.length,options_index: this.options_index,empty: true});
                }
                return this.options_index += 1;
            }
        };
        return SelectParser;
    })();
    SelectParser.select_to_array = function(select) {
        var child, parser, _i, _len, _ref;
        parser = new SelectParser();
        _ref = select.childNodes;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            child = _ref[_i];
            parser.add_node(child);
        }
        return parser.parsed;
    };
    this.SelectParser = SelectParser;
}).call(this);
(function() {
    var AbstractChosen, root;
    var __bind = function(fn, me) {
        return function() {
            return fn.apply(me, arguments);
        };
    };
    root = this;
    AbstractChosen = (function() {
        function AbstractChosen(form_field, options) {
            this.form_field = form_field;
            this.options = options != null ? options : {};
            this.set_default_values();
            this.default_text_default = "Select an Option";
            this.setup();
            this.set_up_html();
            this.register_observers();
            this.finish_setup();
        }
        AbstractChosen.prototype.set_default_values = function() {
            this.click_test_action = __bind(function(evt) {
                return this.test_active_click(evt);
            }, this);
            this.activate_action = __bind(function(evt) {
                return this.activate_field(evt);
            }, this);
            this.active_field = false;
            this.mouse_on_container = false;
            this.results_showing = false;
            this.result_highlighted = null;
            this.result_single_selected = null;
            this.allow_single_deselect = (this.options.allow_single_deselect != null) && this.form_field.options[0].text === "" ? this.options.allow_single_deselect : false;
            this.disable_search_threshold = this.options.disable_search_threshold || 0;
            this.choices = 0;
            return this.results_none_found = this.options.no_results_text || "No results match";
        };
        AbstractChosen.prototype.mouse_enter = function() {
            return this.mouse_on_container = true;
        };
        AbstractChosen.prototype.mouse_leave = function() {
            return this.mouse_on_container = false;
        };
        AbstractChosen.prototype.input_focus = function(evt) {
            if (!this.active_field) {
                return setTimeout((__bind(function() {
                    return this.container_mousedown();
                }, this)), 50);
            }
        };
        AbstractChosen.prototype.input_blur = function(evt) {
            if (!this.mouse_on_container) {
                this.active_field = false;
                return setTimeout((__bind(function() {
                    return this.blur_test();
                }, this)), 100);
            }
        };
        AbstractChosen.prototype.result_add_option = function(option) {
            var classes, style;
            if (!option.disabled) {
                option.dom_id = this.container_id + "_o_" + option.array_index;
                classes = ["active-result"];
                if (option.selected) {
                    classes.push("result-selected");
                }
                if (option.group_array_index != null) {
                    classes.push("group-option");
                }
                if (option.classes !== "") {
                    classes.push(option.classes);
                }
                style = option.style.cssText !== "" ? " style=\"" + option.style + "\"" : "";
                return '<li id="' + option.dom_id + '" class="' + classes.join(' ') + '"' + style + '>' + Element.breakUpLongWords(option.html) + '</li>';
            } else {
                return "";
            }
        };
        AbstractChosen.prototype.results_update_field = function() {
            this.result_clear_highlight();
            this.result_single_selected = null;
            return this.results_build();
        };
        AbstractChosen.prototype.results_toggle = function() {
            if (this.results_showing) {
                return this.results_hide();
            } else {
                return this.results_show();
            }
        };
        AbstractChosen.prototype.results_search = function(evt) {
            if (this.results_showing) {
                return this.winnow_results();
            } else {
                return this.results_show();
            }
        };
        AbstractChosen.prototype.keyup_checker = function(evt) {
            var stroke, _ref;
            stroke = (_ref = evt.which) != null ? _ref : evt.keyCode;
            switch (stroke) {
                case 8:
                    if (!this.pending_backstroke) {
                        this.result_clear_highlight();
                        return this.results_search();
                    }
                    break;
                case 9:
                    if (this.search_field.val() != '') {
                        evt.preventDefault();
                    }
                    if (this.results_showing || this.options.allow_option_creation) {
                        return this.result_select(evt);
                    }
                    break;
                case 188:
                case 13:
                    evt.preventDefault();
                    if (this.results_showing || this.options.allow_option_creation) {
                        return this.result_select(evt);
                    }
                    break;
                case 27:
                    if (this.results_showing) {
                        return this.results_hide();
                    }
                    break;
                case 38:
                case 40:
                case 16:
                case 91:
                case 17:
                    break;
                default:
                    return this.results_search();
            }
        };
        AbstractChosen.prototype.generate_field_id = function() {
            var new_id;
            new_id = this.generate_random_id();
            this.form_field.id = new_id;
            return new_id;
        };
        AbstractChosen.prototype.generate_random_char = function() {
            var chars, newchar, rand;
            chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZ";
            rand = Math.floor(Math.random() * chars.length);
            return newchar = chars.substring(rand, rand + 1);
        };
        return AbstractChosen;
    })();
    root.AbstractChosen = AbstractChosen;
}).call(this);
(function() {
    var $, Chosen, get_side_border_padding, root;
    var __hasProp = Object.prototype.hasOwnProperty, __extends = function(child, parent) {
        for (var key in parent) {
            if (__hasProp.call(parent, key))
                child[key] = parent[key];
        }
        function ctor() {
            this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child;
    }, __bind = function(fn, me) {
        return function() {
            return fn.apply(me, arguments);
        };
    };
    root = this;
    $ = jQuery;
    $.fn.extend({chosen: function(options) {
            if ($.browser.msie && ($.browser.version === "6.0" || $.browser.version === "7.0")) {
                return this;
            }
            return $(this).each(function(input_field) {
                if (!($(this)).hasClass("chzn-done")) {
                    return new Chosen(this, options);
                }
            });
        }});
    Chosen = window.Chosen = (function() {
        __extends(Chosen, AbstractChosen);
        function Chosen() {
            Chosen.__super__.constructor.apply(this, arguments);
        }
        Chosen.prototype.setup = function() {
            this.form_field_jq = $(this.form_field);
            return this.is_rtl = this.form_field_jq.hasClass("chzn-rtl");
        };
        Chosen.prototype.finish_setup = function() {
            return this.form_field_jq.addClass("chzn-done");
        };
        Chosen.prototype.set_up_html = function() {
            var container_div, dd_top, dd_width, sf_width;
            this.container_id = this.form_field.id.length ? this.form_field.id.replace(/(:|\.)/g, '_') : this.generate_field_id();
            this.container_id += "_chzn";
            this.f_width = this.form_field_jq.outerWidth();
            this.default_text = this.form_field_jq.data('placeholder') ? this.form_field_jq.data('placeholder') : this.default_text_default;
            container_div = $("<div />", {id: this.container_id,"class": "chzn-container" + (this.is_rtl ? ' chzn-rtl' : ''),width: this.options.flex_width ? null : this.f_width});
            container_div.html('<a href="javascript:void(0)" class="chzn-single"><span>' + this.default_text + '</span><div><b></b></div></a><div class="chzn-drop" style="left:-9000px;"><div class="chzn-search"><input type="text" autocomplete="off" class="save_on_enter" /></div><ul class="chzn-results"></ul></div>');
            this.form_field_jq.hide().after(container_div);
            this.container = $('#' + this.container_id);
            this.container.addClass("chzn-container-single");
            if (this.form_field.options.length <= this.disable_search_threshold) {
                this.container.addClass("chzn-container-single-nosearch");
            }
            this.dropdown = this.container.find('div.chzn-drop').first();
            dd_top = this.container.height();
            dd_width = this.f_width - get_side_border_padding(this.dropdown);
            this.dropdown.css({"top": dd_top + "px"});
            this.search_field = this.container.find('input').first();
            this.search_results = this.container.find('ul.chzn-results').first();
            this.search_no_results = this.container.find('li.no-results').first();
            this.search_container = this.container.find('div.chzn-search').first();
            this.selected_item = this.container.find('.chzn-single').first();
            sf_width = dd_width - get_side_border_padding(this.search_container) - get_side_border_padding(this.search_field);
            this.search_field.css({"width": sf_width + "px"});
            if (this.form_field.options.length <= this.disable_search_threshold) {
                this.focusable_element = this.container;
            }
            else {
                this.focusable_element = this.search_field;
            }
            this.results_build();
            this.set_tab_index();
            return this.form_field_jq.trigger("liszt:ready", {chosen: this});
        };
        Chosen.prototype.register_observers = function() {
            this.container.mousedown(__bind(function(evt) {
                window.loggedEvent = evt.originalEvent;
                return this.container_mousedown(evt);
            }, this));
            this.container.mouseup(__bind(function(evt) {
                return this.container_mouseup(evt);
            }, this));
            this.container.mouseenter(__bind(function(evt) {
                return this.mouse_enter(evt);
            }, this));
            this.container.mouseleave(__bind(function(evt) {
                return this.mouse_leave(evt);
            }, this));
            this.search_results.mouseup(__bind(function(evt) {
                return this.search_results_mouseup(evt);
            }, this));
            this.search_results.mouseover(__bind(function(evt) {
                return this.search_results_mouseover(evt);
            }, this));
            this.search_results.mouseout(__bind(function(evt) {
                return this.search_results_mouseout(evt);
            }, this));
            this.form_field_jq.bind("liszt:updated", __bind(function(evt) {
                return this.results_update_field(evt);
            }, this));
            this.focusable_element.blur(__bind(function(evt) {
                return this.input_blur(evt);
            }, this));
            this.focusable_element.keyup(__bind(function(evt) {
                return this.keyup_checker(evt);
            }, this));
            this.focusable_element.keydown(__bind(function(evt) {
                return this.keydown_checker(evt);
            }, this));
        };
        Chosen.prototype.blur_selected_item = function(evt) {
            this.selected_item.blur();
        };
        Chosen.prototype.search_field_disabled = function() {
            this.is_disabled = this.form_field_jq.attr('disabled');
            if (this.is_disabled) {
                this.container.addClass('chzn-disabled');
                this.search_field.attr('disabled', true);
                this.focusable_element.attr('tabindex', -1);
                this.focusable_element.bind('focus.blur_selected_item', __bind(this.blur_selected_item, this));
                this.focusable_element.unbind("focus", this.activate_action);
                return this.close_field();
            } else {
                this.container.removeClass('chzn-disabled');
                this.search_field.attr('disabled', false);
                this.focusable_element.attr('tabindex', this.ti);
                this.focusable_element.unbind('focus.blur_selected_item');
                return this.focusable_element.bind("focus", this.activate_action);
            }
        };
        Chosen.prototype.container_mousedown = function(evt) {
            var target_closelink;
            if (!this.is_disabled) {
                target_closelink = evt != null ? ($(evt.target)).hasClass("search-choice-close") : false;
                if (evt && evt.type === "mousedown") {
                    evt.stopPropagation();
                }
                if (!this.pending_destroy_click && !target_closelink) {
                    if (!this.active_field) {
                        $(document).click(this.click_test_action);
                        this.results_show();
                    } else if (evt && ($(evt.target) === this.selected_item || $(evt.target).parents("a.chzn-single").length)) {
                        evt.preventDefault();
                        this.results_toggle();
                    }
                    return this.activate_field();
                } else {
                    return this.pending_destroy_click = false;
                }
            }
        };
        Chosen.prototype.container_mouseup = function(evt) {
            if (evt.target.nodeName === "ABBR") {
                return this.results_reset(evt);
            }
        };
        Chosen.prototype.blur_test = function(evt) {
            if (!this.active_field && this.container.hasClass("chzn-container-active")) {
                return this.close_field();
            }
        };
        Chosen.prototype.close_field = function() {
            $(document).unbind("click", this.click_test_action);
            this.active_field = false;
            this.results_hide();
            this.container.removeClass("chzn-container-active");
            this.winnow_results_clear();
            this.clear_backstroke();
            this.show_search_field_default();
        };
        Chosen.prototype.activate_field = function() {
            this.container.addClass("chzn-container-active");
            this.active_field = true;
            this.search_field.val(this.search_field.val());
            if (this.focusable_element == this.search_field && !this.active_field) {
                return this.search_field.focus();
            }
            return this.focusable_element;
        };
        Chosen.prototype.test_active_click = function(evt) {
            this.focusable_element.focus();
            if ($(evt.target).parents('#' + this.container_id).length) {
                return this.active_field = true;
            } else {
                return this.close_field();
            }
        };
        Chosen.prototype.results_build = function() {
            var content, data, startTime, _i, _len, _ref;
            startTime = new Date();
            this.parsing = true;
            this.results_data = root.SelectParser.select_to_array(this.form_field);
            this.selected_item.find("span").text(this.default_text);
            content = '';
            _ref = this.results_data;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                data = _ref[_i];
                if (data.group) {
                    content += this.result_add_group(data);
                } else if (!data.empty) {
                    content += this.result_add_option(data);
                    if (data.selected) {
                        this.selected_item.find("span").text(data.text);
                        if (this.allow_single_deselect) {
                            this.single_deselect_control_build();
                        }
                    }
                }
            }
            this.search_field_disabled();
            this.show_search_field_default();
            this.search_results.html(content);
            return this.parsing = false;
        };
        Chosen.prototype.result_add_group = function(group) {
            if (!group.disabled) {
                group.dom_id = this.container_id + "_g_" + group.array_index;
                return '<li id="' + group.dom_id + '" class="group-result">' + $("<div />").text(group.label).html() + '</li>';
            } else {
                return "";
            }
        };
        Chosen.prototype.result_do_highlight = function(el) {
            var high_bottom, high_top, maxHeight, visible_bottom, visible_top;
            if (el.length) {
                this.result_clear_highlight();
                this.result_highlight = el;
                this.result_highlight.addClass("highlighted");
                maxHeight = parseInt(this.search_results.css("maxHeight"), 10);
                visible_top = this.search_results.scrollTop();
                visible_bottom = maxHeight + visible_top;
                high_top = this.result_highlight.position().top + this.search_results.scrollTop();
                high_bottom = high_top + this.result_highlight.outerHeight();
                if (high_bottom >= visible_bottom) {
                    return this.search_results.scrollTop((high_bottom - maxHeight) > 0 ? high_bottom - maxHeight : 0);
                } else if (high_top < visible_top) {
                    return this.search_results.scrollTop(high_top);
                }
            }
        };
        Chosen.prototype.result_clear_highlight = function() {
            if (this.result_highlight) {
                this.result_highlight.removeClass("highlighted");
            }
            return this.result_highlight = null;
        };
        Chosen.prototype.results_show = function() {
            var dd_top;
            this.selected_item.addClass("chzn-single-with-drop");
            if (this.result_single_selected) {
                this.result_do_highlight(this.result_single_selected);
            }
            dd_top = this.container.height() - 1;
            this.dropdown.css({"top": dd_top + "px","left": 0});
            this.results_showing = true;
            this.focusable_element.focus();
            this.search_field.val(this.search_field.val());
            return this.winnow_results();
        };
        Chosen.prototype.results_hide = function() {
            this.selected_item.removeClass("chzn-single-with-drop");
            this.result_clear_highlight();
            this.dropdown.css({"left": "-9000px"});
            return this.results_showing = false;
        };
        Chosen.prototype.set_tab_index = function(el) {
            this.ti = this.form_field_jq.attr("tabindex");
            this.search_field.attr('tabindex', -1);
            return this.focusable_element.attr('tabindex', this.ti);
        };
        Chosen.prototype.show_search_field_default = function() {
            this.search_field.val("");
            return this.search_field.removeClass("default");
        };
        Chosen.prototype.search_results_mouseup = function(evt) {
            var target;
            target = $(evt.target).hasClass("active-result") ? $(evt.target) : $(evt.target).parents(".active-result").first();
            if (target.length) {
                this.result_highlight = target;
                return this.result_select(evt);
            }
        };
        Chosen.prototype.search_results_mouseover = function(evt) {
            var target;
            target = $(evt.target).hasClass("active-result") ? $(evt.target) : $(evt.target).parents(".active-result").first();
            if (target) {
                return this.result_do_highlight(target);
            }
        };
        Chosen.prototype.search_results_mouseout = function(evt) {
            if ($(evt.target).hasClass("active-result" || $(evt.target).parents('.active-result').first())) {
                return this.result_clear_highlight();
            }
        };
        Chosen.prototype.choices_click = function(evt) {
            evt.preventDefault();
            if (this.active_field && !($(evt.target).hasClass("search-choice" || $(evt.target).parents('.search-choice').first)) && !this.results_showing) {
                return this.results_show();
            }
        };
        Chosen.prototype.choice_build = function(item) {
            var choice_id, link;
            choice_id = this.container_id + "_c_" + item.array_index;
            this.choices += 1;
            this.search_container.before('<li class="search-choice" id="' + choice_id + '"><span>' + item.html + '</span><a href="javascript:void(0)" class="search-choice-close" rel="' + item.array_index + '"></a></li>');
            link = $('#' + choice_id).find("a").first();
            return link.click(__bind(function(evt) {
                return this.choice_destroy_link_click(evt);
            }, this));
        };
        Chosen.prototype.choice_destroy_link_click = function(evt) {
            evt.preventDefault();
            if (!this.is_disabled) {
                this.pending_destroy_click = true;
                return this.choice_destroy($(evt.target));
            } else {
                return evt.stopPropagation;
            }
        };
        Chosen.prototype.choice_destroy = function(link) {
            this.choices -= 1;
            this.show_search_field_default();
            this.result_deselect(link.attr("rel"));
            return link.parents('li').first().remove();
        };
        Chosen.prototype.results_reset = function(evt) {
            this.form_field.options[0].selected = true;
            this.selected_item.find("span").text(this.default_text);
            this.show_search_field_default();
            $(evt.target).remove();
            this.form_field_jq.trigger("change");
            if (this.active_field) {
                return this.results_hide();
            }
        };
        Chosen.prototype.result_select = function(evt) {
            var high, high_id, item, new_option, position;
            if (this.result_highlight) {
                high = this.result_highlight;
                high_id = high.attr("id");
                this.result_clear_highlight();
                this.search_results.find(".result-selected").removeClass("result-selected");
                this.result_single_selected = high;
                high.addClass("result-selected");
                position = high_id.substr(high_id.lastIndexOf("_") + 1);
                item = this.results_data[position];
                item.selected = true;
                this.form_field.options[item.options_index].selected = true;
                this.selected_item.find("span").first().text(item.text);
                if (this.allow_single_deselect) {
                    this.single_deselect_control_build();
                }
                this.results_hide();
                this.search_field.val("");
                this.form_field_jq.trigger("change");
            } else if (this.options.allow_option_creation) {
                new_option = this.search_field.val();
                if (!new_option) {
                    return;
                }
                if (this.allow_creation(new_option)) {
                    $('<option>', {selected: true,value: new_option}).text(new_option).appendTo(this.form_field_jq);
                    this.results_update_field(evt);
                }
                this.form_field_jq.trigger("change");
                this.search_field.val("");
                return this.results_hide();
            }
        };
        Chosen.prototype.allow_creation = function(new_option) {
            var matches;
            return this.selected_item.find('span').text().toLowerCase() !== new_option.toLowerCase();
        };
        Chosen.prototype.result_activate = function(el) {
            return el.addClass("active-result");
        };
        Chosen.prototype.result_deactivate = function(el) {
            return el.removeClass("active-result");
        };
        Chosen.prototype.result_deselect = function(pos) {
            var result, result_data;
            result_data = this.results_data[pos];
            result_data.selected = false;
            this.form_field.options[result_data.options_index].selected = false;
            result = $("#" + this.container_id + "_o_" + pos);
            result.removeClass("result-selected").addClass("active-result").show();
            this.result_clear_highlight();
            this.winnow_results();
            this.form_field_jq.trigger("change");
        };
        Chosen.prototype.single_deselect_control_build = function() {
            if (this.allow_single_deselect && this.selected_item.find("abbr").length < 1) {
                return this.selected_item.find("span").first().after("<abbr class=\"search-choice-close\"></abbr>");
            }
        };
        Chosen.prototype.winnow_results = function() {
            var found, fregex, option, part, parts, regex, result_id, results, searchText, startTime, startpos, text, textToSearch, zregex, _i, _j, _len, _len2, _ref;
            startTime = new Date();
            this.no_results_clear();
            results = 0;
            searchText = this.search_field.val() === this.default_text ? "" : $('<div/>').text($.trim(this.search_field.val())).html();
            textToSearch = searchText.replace(/[\-\[\]\{\}\(\)\*\+\?\.,\\\^\$\|\#\s]/g, "\\$&");
            regex = new RegExp('^' + textToSearch, 'i');
            zregex = new RegExp(textToSearch, 'i');
            fregex = new RegExp("^" + textToSearch + "$", 'i');
            _ref = this.results_data;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                option = _ref[_i];
                if (!option.disabled && !option.empty) {
                    if (option.group) {
                        $('#' + option.dom_id).hide();
                    } else {
                        found = false;
                        result_id = option.dom_id;
                        if (this.options.allow_option_creation && searchText && fregex.test(option.html)) {
                            found = true;
                            results += 1;
                            this.result_do_highlight($('#' + option.dom_id));
                        } else if (regex.test(option.html)) {
                            found = true;
                            results += 1;
                        } else if (option.html.indexOf(" ") >= 0 || option.html.indexOf("[") === 0) {
                            parts = option.html.replace(/\[|\]/g, "").split(" ");
                            if (parts.length) {
                                for (_j = 0, _len2 = parts.length; _j < _len2; _j++) {
                                    part = parts[_j];
                                    if (regex.test(part)) {
                                        found = true;
                                        results += 1;
                                    }
                                }
                            }
                        }
                        if (found) {
                            if (searchText.length) {
                                startpos = option.html.search(zregex);
                                text = option.html.substr(0, startpos + searchText.length) + '</em>' + option.html.substr(startpos + searchText.length);
                                text = text.substr(0, startpos) + '<em>' + text.substr(startpos);
                            } else {
                                text = option.html;
                            }
                            if ($("#" + result_id).html !== text) {
                                $("#" + result_id).html(Element.breakUpLongWords(text));
                            }
                            this.result_activate($("#" + result_id));
                            if (option.group_array_index != null) {
                                $("#" + this.results_data[option.group_array_index].dom_id).show();
                            }
                        } else {
                            if (this.result_highlight && result_id === this.result_highlight.attr('id')) {
                                this.result_clear_highlight();
                            }
                            this.result_deactivate($("#" + result_id));
                        }
                    }
                }
            }
            if (results < 1 && searchText.length) {
                this.no_results(searchText);
            } else if (!this.options.allow_option_creation) {
                return this.winnow_results_set_highlight();
            }
        };
        Chosen.prototype.winnow_results_clear = function() {
            var li, lis, _i, _len, _results;
            this.search_field.val("");
            lis = this.search_results.find("li");
            _results = [];
            for (_i = 0, _len = lis.length; _i < _len; _i++) {
                li = lis[_i];
                li = $(li);
                _results.push(li.hasClass("group-result") ? li.show() : !li.hasClass("result-selected") ? this.result_activate(li) : void 0);
            }
            return _results;
        };
        Chosen.prototype.winnow_results_set_highlight = function() {
            var do_high, selected_results;
            if (!this.result_highlight) {
                selected_results = this.search_results.find(".result-selected.active-result");
                do_high = selected_results.length ? selected_results.first() : this.search_results.find(".active-result").first();
                if (do_high != null) {
                    return this.result_do_highlight(do_high);
                }
            }
        };
        Chosen.prototype.no_results = function(terms) {
            var no_results_html;
            if (this.options.allow_option_creation) {
                return;
            }
            no_results_html = $('<li class="no-results">' + this.results_none_found + ' "<span></span>"</li>');
            no_results_html.find("span").first().html(terms);
            return this.search_results.append(no_results_html);
        };
        Chosen.prototype.no_results_clear = function() {
            return this.search_results.find(".no-results").remove();
        };
        Chosen.prototype.keydown_arrow = function() {
            var first_active, next_sib;
            if (!this.result_highlight) {
                first_active = this.search_results.find("li.active-result").first();
                if (first_active) {
                    this.result_do_highlight($(first_active));
                }
            } else if (this.results_showing) {
                next_sib = this.result_highlight.nextAll("li.active-result").first();
                if (next_sib) {
                    this.result_do_highlight(next_sib);
                }
            }
            if (!this.results_showing) {
                return this.results_show();
            }
        };
        Chosen.prototype.keyup_arrow = function() {
            var prev_sibs;
            if (!this.results_showing) {
                return this.results_show();
            } else if (this.result_highlight) {
                prev_sibs = this.result_highlight.prevAll("li.active-result");
                if (prev_sibs.length) {
                    return this.result_do_highlight(prev_sibs.first());
                } else {
                    if (this.choices > 0) {
                        this.results_hide();
                    }
                    return this.result_clear_highlight();
                }
            }
        };
        Chosen.prototype.keydown_backstroke = function() {
            if (this.pending_backstroke) {
                this.choice_destroy(this.pending_backstroke.find("a").first());
                return this.clear_backstroke();
            } else {
                this.pending_backstroke = this.search_container.siblings("li.search-choice").last();
                return this.pending_backstroke.addClass("search-choice-focus");
            }
        };
        Chosen.prototype.clear_backstroke = function() {
            if (this.pending_backstroke) {
                this.pending_backstroke.removeClass("search-choice-focus");
            }
            return this.pending_backstroke = null;
        };
        Chosen.prototype.keydown_checker = function(evt) {
            var stroke, _ref;
            stroke = (_ref = evt.which) != null ? _ref : evt.keyCode;
            if (stroke !== 8 && this.pending_backstroke) {
                this.clear_backstroke();
            }
            switch (stroke) {
                case 8:
                    this.backstroke_length = this.search_field.val().length;
                    break;
                case 9:
                    if (this.options.allow_option_creation && this.search_field.val() != '') {
                        event.preventDefault();
                        event.stopPropagation();
                        return;
                    }
                    if (this.results_showing) {
                        this.result_select(evt);
                    }
                    this.mouse_on_container = false;
                    break;
                case 188:
                case 13:
                    if (this.results_showing) {
                        evt.preventDefault();
                        evt.stopPropagation();
                    }
                    break;
                case 38:
                    evt.preventDefault();
                    this.keyup_arrow();
                    break;
                case 40:
                    evt.preventDefault();
                    this.keydown_arrow();
                    break;
                case 27:
                    if (this.results_showing) {
                        evt.preventDefault();
                        evt.stopPropagation();
                    }
            }
        };
        Chosen.prototype.generate_random_id = function() {
            var string;
            string = "sel" + this.generate_random_char() + this.generate_random_char() + this.generate_random_char();
            while ($("#" + string).length > 0) {
                string += this.generate_random_char();
            }
            return string;
        };
        return Chosen;
    })();
    get_side_border_padding = function(elmt) {
        var side_border_padding;
        return side_border_padding = elmt.outerWidth() - elmt.width();
    };
    root.get_side_border_padding = get_side_border_padding;
}).call(this);
(function() {
    function u(a, b) {
        var c;
        a || (a = {});
        for (c in b)
            a[c] = b[c];
        return a
    }
    function la() {
        for (var a = 0, b = arguments, c = b.length, d = {}; a < c; a++)
            d[b[a++]] = b[a];
        return d
    }
    function w(a, b) {
        return parseInt(a, b || 10)
    }
    function ra(a) {
        return typeof a === "string"
    }
    function aa(a) {
        return typeof a === "object"
    }
    function Ja(a) {
        return Object.prototype.toString.call(a) === "[object Array]"
    }
    function Ka(a) {
        return typeof a === "number"
    }
    function ma(a) {
        return L.log(a) / L.LN10
    }
    function ba(a) {
        return L.pow(10, a)
    }
    function za(a, b) {
        for (var c = a.length; c--; )
            if (a[c] === b) {
                a.splice(c, 1);
                break
            }
    }
    function s(a) {
        return a !== A && a !== null
    }
    function z(a, b, c) {
        var d, e;
        if (ra(b))
            s(c) ? a.setAttribute(b, c) : a && a.getAttribute && (e = a.getAttribute(b));
        else if (s(b) && aa(b))
            for (d in b)
                a.setAttribute(d, b[d]);
        return e
    }
    function na(a) {
        return Ja(a) ? a : [a]
    }
    function o() {
        var a = arguments, b, c, d = a.length;
        for (b = 0; b < d; b++)
            if (c = a[b], typeof c !== "undefined" && c !== null)
                return c
    }
    function F(a, b) {
        if (La && b && b.opacity !== A)
            b.filter = "alpha(opacity=" + b.opacity * 100 + ")";
        u(a.style, b)
    }
    function S(a, b, c, d, e) {
        a = B.createElement(a);
        b && u(a, b);
        e && F(a, {padding: 0,border: U,margin: 0});
        c && F(a, c);
        d && d.appendChild(a);
        return a
    }
    function ca(a, b) {
        var c = function() {
        };
        c.prototype = new a;
        u(c.prototype, b);
        return c
    }
    function Xa(a, b, c, d) {
        var e = V.lang, f = a;
        b === -1 ? (b = (a || 0).toString(), a = b.indexOf(".") > -1 ? b.split(".")[1].length : 0) : a = isNaN(b = M(b)) ? 2 : b;
        var b = a, c = c === void 0 ? e.decimalPoint : c, d = d === void 0 ? e.thousandsSep : d, e = f < 0 ? "-" : "", a = String(w(f = M(+f || 0).toFixed(b))), g = a.length > 3 ? a.length % 3 : 0;
        return e + (g ? a.substr(0, g) + d : "") +
        a.substr(g).replace(/(\d{3})(?=\d)/g, "$1" + d) + (b ? c + M(f - a).toFixed(b).slice(2) : "")
    }
    function sa(a, b) {
        return Array((b || 2) + 1 - String(a).length).join(0) + a
    }
    function gb(a, b, c, d) {
        var e, c = o(c, 1);
        e = a / c;
        b || (b = [1, 2, 2.5, 5, 10], d && d.allowDecimals === !1 && (c === 1 ? b = [1, 2, 5, 10] : c <= 0.1 && (b = [1 / c])));
        for (d = 0; d < b.length; d++)
            if (a = b[d], e <= (b[d] + (b[d + 1] || b[d])) / 2)
                break;
        a *= c;
        return a
    }
    function Ob(a, b) {
        var c = b || [[vb, [1, 2, 5, 10, 20, 25, 50, 100, 200, 500]], [hb, [1, 2, 5, 10, 15, 30]], [Ya, [1, 2, 5, 10, 15, 30]], [Ma, [1, 2, 3, 4, 6, 8, 12]], [oa, [1, 2]], [Za, [1, 2]], [Na, [1, 2, 3, 4, 6]], [ta, null]], d = c[c.length - 1], e = D[d[0]], f = d[1], g;
        for (g = 0; g < c.length; g++)
            if (d = c[g], e = D[d[0]], f = d[1], c[g + 1] && a <= (e * f[f.length - 1] + D[c[g + 1][0]]) / 2)
                break;
        e === D[ta] && a < 5 * e && (f = [1, 2, 5]);
        e === D[ta] && a < 5 * e && (f = [1, 2, 5]);
        c = gb(a / e, f);
        return {unitRange: e,count: c,unitName: d[0]}
    }
    function Pb(a, b, c, d) {
        var e = [], f = {}, g = V.global.useUTC, h, i = new Date(b), b = a.unitRange, j = a.count;
        b >= D[hb] && (i.setMilliseconds(0), i.setSeconds(b >= D[Ya] ? 0 : j * W(i.getSeconds() / j)));
        if (b >= D[Ya])
            i[wb](b >= D[Ma] ? 0 : j * W(i[ib]() / j));
        if (b >= D[Ma])
            i[xb](b >= D[oa] ? 0 : j * W(i[jb]() / j));
        if (b >= D[oa])
            i[kb](b >= D[Na] ? 1 : j * W(i[Oa]() / j));
        b >= D[Na] && (i[yb](b >= D[ta] ? 0 : j * W(i[$a]() / j)), h = i[ab]());
        b >= D[ta] && (h -= h % j, i[zb](h));
        if (b === D[Za])
            i[kb](i[Oa]() - i[lb]() + o(d, 1));
        d = 1;
        h = i[ab]();
        for (var k = i.getTime(), l = i[$a](), m = i[Oa](), i = g ? 0 : (864E5 + i.getTimezoneOffset() * 6E4) % 864E5; k < c; )
            e.push(k), b === D[ta] ? k = bb(h + d * j, 0) : b === D[Na] ? k = bb(h, l + d * j) : !g && (b === D[oa] || b === D[Za]) ? k = bb(h, l, m + d * j * (b === D[oa] ? 1 : 7)) : (k += b * j, b <= D[Ma] && k % D[oa] === i && (f[k] = oa)), d++;
        e.push(k);
        e.info = u(a, {higherRanks: f,totalRange: b * j});
        return e
    }
    function Ab() {
        this.symbol = this.color = 0
    }
    function Qb(a, b) {
        var c = a.length, d, e;
        for (e = 0; e < c; e++)
            a[e].ss_i = e;
        a.sort(function(a, c) {
            d = b(a, c);
            return d === 0 ? a.ss_i - c.ss_i : d
        });
        for (e = 0; e < c; e++)
            delete a[e].ss_i
    }
    function Pa(a) {
        for (var b = a.length, c = a[0]; b--; )
            a[b] < c && (c = a[b]);
        return c
    }
    function Aa(a) {
        for (var b = a.length, c = a[0]; b--; )
            a[b] > c && (c = a[b]);
        return c
    }
    function Ba(a, b) {
        for (var c in a)
            a[c] && a[c] !== b && a[c].destroy && a[c].destroy(), delete a[c]
    }
    function Qa(a) {
        cb || (cb = S(ia));
        a && cb.appendChild(a);
        cb.innerHTML = ""
    }
    function mb(a, b) {
        var c = "Highcharts error #" + a + ": www.highcharts.com/errors/" + a;
        if (b)
            throw c;
        else
            N.console && console.log(c)
    }
    function ja(a) {
        return parseFloat(a.toPrecision(14))
    }
    function ua(a, b) {
        Ra = o(a, b.animation)
    }
    function Bb() {
        var a = V.global.useUTC, b = a ? "getUTC" : "get", c = a ? "setUTC" : "set";
        bb = a ? Date.UTC : function(a, b, c, g, h, i) {
            return (new Date(a, b, o(c, 1), o(g, 0), o(h, 0), o(i, 0))).getTime()
        };
        ib = b + "Minutes";
        jb = b + "Hours";
        lb = b + "Day";
        Oa = b + "Date";
        $a = b + "Month";
        ab = b + "FullYear";
        wb = c + "Minutes";
        xb = c + "Hours";
        kb = c + "Date";
        yb = c + "Month";
        zb = c + "FullYear"
    }
    function va() {
    }
    function Sa(a, b, c) {
        this.axis = a;
        this.pos = b;
        this.type = c || "";
        this.isNew = !0;
        c || this.addLabel()
    }
    function nb(a, b) {
        this.axis = a;
        if (b)
            this.options = b, this.id = b.id;
        return this
    }
    function Cb(a, b, c, d, e) {
        var f = a.chart.inverted;
        this.axis = a;
        this.isNegative = c;
        this.options = b;
        this.x = d;
        this.stack = e;
        this.alignOptions = {align: b.align || (f ? c ? "left" : "right" : "center"),verticalAlign: b.verticalAlign || (f ? "middle" : c ? "bottom" : "top"),y: o(b.y, f ? 4 : c ? 14 : -6),x: o(b.x, f ? c ? -6 : 6 : 0)};
        this.textAlign = b.textAlign || (f ? c ? "right" : "left" : "center")
    }
    function ob() {
        this.init.apply(this, arguments)
    }
    function pb(a, b) {
        var c = b.borderWidth, d = b.style, e = b.shared, f = w(d.padding);
        this.chart = a;
        this.options = b;
        d.padding = 0;
        this.crosshairs = [];
        this.currentY = this.currentX = 0;
        this.tooltipIsHidden = !0;
        this.label = a.renderer.label("", 0, 0, null, null, null, b.useHTML, null, "tooltip").attr({padding: f,fill: b.backgroundColor,"stroke-width": c,r: b.borderRadius,zIndex: 8}).css(d).hide().add();
        ga || this.label.shadow(b.shadow);
        this.shared = e
    }
    function Db(a, b) {
        var c = ga ? "" : b.chart.zoomType;
        this.zoomX = /x/.test(c);
        this.zoomY = /y/.test(c);
        this.options = b;
        this.chart = a;
        this.init(a, b.tooltip)
    }
    function qb(a) {
        this.init(a)
    }
    function rb(a, b) {
        var c, d = a.series;
        a.series = null;
        c = C(V, a);
        c.series = a.series = d;
        var d = c.chart, e = d.margin, e = aa(e) ? e : [e, e, e, e];
        this.optionsMarginTop = o(d.marginTop, e[0]);
        this.optionsMarginRight = o(d.marginRight, e[1]);
        this.optionsMarginBottom = o(d.marginBottom, e[2]);
        this.optionsMarginLeft = o(d.marginLeft, e[3]);
        this.runChartClick = (e = d.events) && !!e.click;
        this.callback = b;
        this.isResizing = 0;
        this.options = c;
        this.axes = [];
        this.series = [];
        this.hasCartesianSeries = d.showAxes;
        this.init(e)
    }
    var A, B = document, N = window, L = Math, t = L.round, W = L.floor, wa = L.ceil, x = L.max, O = L.min, M = L.abs, X = L.cos, da = L.sin, xa = L.PI, Eb = xa * 2 / 360, ya = navigator.userAgent, La = /msie/i.test(ya) && !N.opera, Ca = B.documentMode === 8, Fb = /AppleWebKit/.test(ya), Gb = /Firefox/.test(ya), Da = !!B.createElementNS && !!B.createElementNS("http://www.w3.org/2000/svg", "svg").createSVGRect, Rb = Gb && parseInt(ya.split("Firefox/")[1], 10) < 4, ga = !Da && !La && !!B.createElement("canvas").getContext, Ta, ea = B.documentElement.ontouchstart !== A, Hb = {}, sb = 0, cb, V, db, Ra, Ua, D, Sb = function() {
    }, ia = "div", U = "none", tb = "rgba(192,192,192," + (Da ? 1.0E-6 : 0.0020) + ")", vb = "millisecond", hb = "second", Ya = "minute", Ma = "hour", oa = "day", Za = "week", Na = "month", ta = "year", bb, ib, jb, lb, Oa, $a, ab, wb, xb, kb, yb, zb, Y = {};
    N.Highcharts = {};
    db = function(a, b, c) {
        if (!s(b) || isNaN(b))
            return "Invalid date";
        var a = o(a, "%Y-%m-%d %H:%M:%S"), d = new Date(b), e, f = d[jb](), g = d[lb](), h = d[Oa](), i = d[$a](), j = d[ab](), k = V.lang, l = k.weekdays, b = {a: l[g].substr(0, 3),A: l[g],d: sa(h),e: h,b: k.shortMonths[i],B: k.months[i],m: sa(i + 1),y: j.toString().substr(2, 2),Y: j,H: sa(f),I: sa(f % 12 || 12),l: f % 12 || 12,M: sa(d[ib]()),p: f < 12 ? "AM" : "PM",P: f < 12 ? "am" : "pm",S: sa(d.getSeconds()),L: sa(t(b % 1E3), 3)};
        for (e in b)
            a = a.replace("%" + e, b[e]);
        return c ? a.substr(0, 1).toUpperCase() + a.substr(1) : a
    };
    Ab.prototype = {wrapColor: function(a) {
            if (this.color >= a)
                this.color = 0
        },wrapSymbol: function(a) {
            if (this.symbol >= a)
                this.symbol = 0
        }};
    D = la(vb, 1, hb, 1E3, Ya, 6E4, Ma, 36E5, oa, 864E5, Za, 6048E5, Na, 2592E6, ta, 31556952E3);
    Ua = {init: function(a, b, c) {
            var b = b || "", d = a.shift, e = b.indexOf("C") > -1, f = e ? 7 : 3, g, b = b.split(" "), c = [].concat(c), h, i, j = function(a) {
                for (g = a.length; g--; )
                    a[g] === "M" && a.splice(g + 1, 0, a[g + 1], a[g + 2], a[g + 1], a[g + 2])
            };
            e && (j(b), j(c));
            a.isArea && (h = b.splice(b.length - 6, 6), i = c.splice(c.length - 6, 6));
            if (d <= c.length / f)
                for (; d--; )
                    c = [].concat(c).splice(0, f).concat(c);
            a.shift = 0;
            if (b.length)
                for (a = c.length; b.length < a; )
                    d = [].concat(b).splice(b.length - f, f), e && (d[f - 6] = d[f - 2], d[f -
                    5] = d[f - 1]), b = b.concat(d);
            h && (b = b.concat(h), c = c.concat(i));
            return [b, c]
        },step: function(a, b, c, d) {
            var e = [], f = a.length;
            if (c === 1)
                e = d;
            else if (f === b.length && c < 1)
                for (; f--; )
                    d = parseFloat(a[f]), e[f] = isNaN(d) ? a[f] : c * parseFloat(b[f] - d) + d;
            else
                e = b;
            return e
        }};
    var T = N.HighchartsAdapter, G = T || {}, Va = G.adapterRun, Ib = G.getScript, n = G.each, ub = G.grep, Jb = G.offset, Ea = G.map, C = G.merge, I = G.addEvent, P = G.removeEvent, E = G.fireEvent, Kb = G.washMouseEvent, eb = G.animate, Fa = G.stop;
    T && T.init && T.init(Ua);
    if (!T && N.jQuery) {
        var Q = jQuery, Ib = Q.getScript, Va = function(a, b) {
            return Q(a)[b]()
        }, n = function(a, b) {
            for (var c = 0, d = a.length; c < d; c++)
                if (b.call(a[c], a[c], c, a) === !1)
                    return c
        }, ub = Q.grep, Ea = function(a, b) {
            for (var c = [], d = 0, e = a.length; d < e; d++)
                c[d] = b.call(a[d], a[d], d, a);
            return c
        }, C = function() {
            var a = arguments;
            return Q.extend(!0, null, a[0], a[1], a[2], a[3])
        }, Jb = function(a) {
            return Q(a).offset()
        }, I = function(a, b, c) {
            Q(a).bind(b, c)
        }, P = function(a, b, c) {
            var d = B.removeEventListener ? "removeEventListener" : "detachEvent";
            B[d] && !a[d] && (a[d] = function() {
            });
            Q(a).unbind(b, c)
        }, E = function(a, b, c, d) {
            var e = Q.Event(b), f = "detached" + b, g;
            !La && c && (delete c.layerX, delete c.layerY);
            u(e, c);
            a[b] && (a[f] = a[b], a[b] = null);
            n(["preventDefault", "stopPropagation"], function(a) {
                var b = e[a];
                e[a] = function() {
                    try {
                        b.call(e)
                    } catch (c) {
                        a === "preventDefault" && (g = !0)
                    }
                }
            });
            Q(a).trigger(e);
            a[f] && (a[b] = a[f], a[f] = null);
            d && !e.isDefaultPrevented() && !g && d(e)
        }, Kb = function(a) {
            return a
        }, eb = function(a, b, c) {
            var d = Q(a);
            if (b.d)
                a.toD = b.d, b.d = 1;
            d.stop();
            d.animate(b, c)
        }, Fa = function(a) {
            Q(a).stop()
        };
        Q.extend(Q.easing, {easeOutQuad: function(a, b, c, d, e) {
                return -d * (b /= e) * (b - 2) + c
            }});
        var Lb = Q.fx, Mb = Lb.step;
        n(["cur", "_default", "width", "height"], function(a, b) {
            var c = Mb, d, e;
            a === "cur" ? c = Lb.prototype : a === "_default" && Q.Tween && (c = Q.Tween.propHooks[a], a = "set");
            (d = c[a]) && (c[a] = function(c) {
                c = b ? c : this;
                e = c.elem;
                return e.attr ? e.attr(c.prop, a === "cur" ? A : c.now) : d.apply(this, arguments)
            })
        });
        Mb.d = function(a) {
            var b = a.elem;
            if (!a.started) {
                var c = Ua.init(b, b.d, b.toD);
                a.start = c[0];
                a.end = c[1];
                a.started = !0
            }
            b.attr("d", Ua.step(a.start, a.end, a.pos, b.toD))
        }
    }
    G = {enabled: !0,align: "center",x: 0,y: 15,style: {color: "#666",fontSize: "11px",lineHeight: "14px"}};
    V = {colors: "#4572A7,#AA4643,#89A54E,#80699B,#3D96AE,#DB843D,#92A8CD,#A47D7C,#B5CA92".split(","),symbols: ["circle", "diamond", "square", "triangle", "triangle-down"],lang: {loading: "Loading...",months: "January,February,March,April,May,June,July,August,September,October,November,December".split(","),shortMonths: "Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec".split(","),weekdays: "Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday".split(","),decimalPoint: ".",resetZoom: "Reset zoom",resetZoomTitle: "Reset zoom level 1:1",thousandsSep: ","},global: {useUTC: !0,canvasToolsURL: "http://code.highcharts.com/2.2.5/modules/canvas-tools.js"},chart: {borderColor: "#4572A7",borderRadius: 5,defaultSeriesType: "line",ignoreHiddenSeries: !0,spacingTop: 10,spacingRight: 10,spacingBottom: 15,spacingLeft: 10,style: {fontFamily: '"Lucida Grande", "Lucida Sans Unicode", Verdana, Arial, Helvetica, sans-serif',fontSize: "12px"},backgroundColor: "#FFFFFF",plotBorderColor: "#C0C0C0",resetZoomButton: {theme: {zIndex: 20},position: {align: "right",x: -10,y: 10}}},title: {text: "Chart title",align: "center",y: 15,style: {color: "#3E576F",fontSize: "16px"}},subtitle: {text: "",align: "center",y: 30,style: {color: "#6D869F"}},plotOptions: {line: {allowPointSelect: !1,showCheckbox: !1,animation: {duration: 1E3},events: {},lineWidth: 2,shadow: !0,marker: {enabled: !0,lineWidth: 0,radius: 4,lineColor: "#FFFFFF",states: {hover: {},select: {fillColor: "#FFFFFF",lineColor: "#000000",lineWidth: 2}}},point: {events: {}},dataLabels: C(G, {enabled: !1,y: -6,formatter: function() {
                        return this.y
                    }}),cropThreshold: 300,pointRange: 0,showInLegend: !0,states: {hover: {marker: {}},select: {marker: {}}},stickyTracking: !0}},labels: {style: {position: "absolute",color: "#3E576F"}},legend: {enabled: !0,align: "center",layout: "horizontal",labelFormatter: function() {
                return this.name
            },borderWidth: 1,borderColor: "#909090",borderRadius: 5,navigation: {activeColor: "#3E576F",inactiveColor: "#CCC"},shadow: !1,itemStyle: {cursor: "pointer",color: "#3E576F",fontSize: "12px"},itemHoverStyle: {color: "#000"},itemHiddenStyle: {color: "#CCC"},itemCheckboxStyle: {position: "absolute",width: "13px",height: "13px"},symbolWidth: 16,symbolPadding: 5,verticalAlign: "bottom",x: 0,y: 0},loading: {labelStyle: {fontWeight: "bold",position: "relative",top: "1em"},style: {position: "absolute",backgroundColor: "white",opacity: 0.5,textAlign: "center"}},tooltip: {enabled: !0,backgroundColor: "rgba(255, 255, 255, .85)",borderWidth: 2,borderRadius: 5,dateTimeLabelFormats: {millisecond: "%A, %b %e, %H:%M:%S.%L",second: "%A, %b %e, %H:%M:%S",minute: "%A, %b %e, %H:%M",hour: "%A, %b %e, %H:%M",day: "%A, %b %e, %Y",week: "Week from %A, %b %e, %Y",month: "%B %Y",year: "%Y"},headerFormat: '<span style="font-size: 10px">{point.key}</span><br/>',pointFormat: '<span style="color:{series.color}">{series.name}</span>: <b>{point.y}</b><br/>',shadow: !0,shared: ga,snap: ea ? 25 : 10,style: {color: "#333333",fontSize: "12px",padding: "5px",whiteSpace: "nowrap"}},credits: {enabled: !0,text: "Highcharts.com",href: "http://www.highcharts.com",position: {align: "right",x: -10,verticalAlign: "bottom",y: -5},style: {cursor: "pointer",color: "#909090",fontSize: "10px"}}};
    var Z = V.plotOptions, T = Z.line;
    Bb();
    var pa = function(a) {
        var b = [], c;
        (function(a) {
            (c = /rgba\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]?(?:\.[0-9]+)?)\s*\)/.exec(a)) ? b = [w(c[1]), w(c[2]), w(c[3]), parseFloat(c[4], 10)] : (c = /#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/.exec(a)) && (b = [w(c[1], 16), w(c[2], 16), w(c[3], 16), 1])
        })(a);
        return {get: function(c) {
                return b && !isNaN(b[0]) ? c === "rgb" ? "rgb(" + b[0] + "," + b[1] + "," + b[2] + ")" : c === "a" ? b[3] : "rgba(" + b.join(",") + ")" : a
            },brighten: function(a) {
                if (Ka(a) && a !== 0) {
                    var c;
                    for (c = 0; c < 3; c++)
                        b[c] += w(a * 255), b[c] < 0 && (b[c] = 0), b[c] > 255 && (b[c] = 255)
                }
                return this
            },setOpacity: function(a) {
                b[3] = a;
                return this
            }}
    };
    va.prototype = {init: function(a, b) {
            this.element = b === "span" ? S(b) : B.createElementNS("http://www.w3.org/2000/svg", b);
            this.renderer = a;
            this.attrSetters = {}
        },animate: function(a, b, c) {
            b = o(b, Ra, !0);
            Fa(this);
            if (b) {
                b = C(b);
                if (c)
                    b.complete = c;
                eb(this, a, b)
            } else
                this.attr(a), c && c()
        },attr: function(a, b) {
            var c, d, e, f, g = this.element, h = g.nodeName, i = this.renderer, j, k = this.attrSetters, l = this.shadows, m, p, q = this;
            ra(a) && s(b) && (c = a, a = {}, a[c] = b);
            if (ra(a))
                c = a, h === "circle" ? c = {x: "cx",y: "cy"}[c] || c : c === "strokeWidth" && (c = "stroke-width"), q = z(g, c) || this[c] || 0, c !== "d" && c !== "visibility" && (q = parseFloat(q));
            else
                for (c in a)
                    if (j = !1, d = a[c], e = k[c] && k[c](d, c), e !== !1) {
                        e !== A && (d = e);
                        if (c === "d")
                            d && d.join && (d = d.join(" ")), /(NaN| {2}|^$)/.test(d) && (d = "M 0 0");
                        else if (c === "x" && h === "text") {
                            for (e = 0; e < g.childNodes.length; e++)
                                f = g.childNodes[e], z(f, "x") === z(g, "x") && z(f, "x", d);
                            this.rotation && z(g, "transform", "rotate(" + this.rotation + " " + d + " " + w(a.y || z(g, "y")) + ")")
                        } else if (c === "fill")
                            d = i.color(d, g, c);
                        else if (h === "circle" && (c === "x" || c === "y"))
                            c = {x: "cx",y: "cy"}[c] || c;
                        else if (h === "rect" && c === "r")
                            z(g, {rx: d,ry: d}), j = !0;
                        else if (c === "translateX" || c === "translateY" || c === "rotation" || c === "verticalAlign")
                            j = p = !0;
                        else if (c === "stroke")
                            d = i.color(d, g, c);
                        else if (c === "dashstyle")
                            if (c = "stroke-dasharray", d = d && d.toLowerCase(), d === "solid")
                                d = U;
                            else {
                                if (d) {
                                    d = d.replace("shortdashdotdot", "3,1,1,1,1,1,").replace("shortdashdot", "3,1,1,1").replace("shortdot", "1,1,").replace("shortdash", "3,1,").replace("longdash", "8,3,").replace(/dot/g, "1,3,").replace("dash", "4,3,").replace(/,$/, "").split(",");
                                    for (e = d.length; e--; )
                                        d[e] = w(d[e]) * a["stroke-width"];
                                    d = d.join(",")
                                }
                            }
                        else if (c === "isTracker")
                            this[c] = d;
                        else if (c === "width")
                            d = w(d);
                        else if (c === "align")
                            c = "text-anchor", d = {left: "start",center: "middle",right: "end"}[d];
                        else if (c === "title")
                            e = g.getElementsByTagName("title")[0], e || (e = B.createElementNS("http://www.w3.org/2000/svg", "title"), g.appendChild(e)), e.textContent = d;
                        c === "strokeWidth" && (c = "stroke-width");
                        Fb && c === "stroke-width" && d === 0 && (d = 1.0E-6);
                        this.symbolName && /^(x|y|width|height|r|start|end|innerR|anchorX|anchorY)/.test(c) && (m || (this.symbolAttr(a), m = !0), j = !0);
                        if (l && /^(width|height|visibility|x|y|d|transform)$/.test(c))
                            for (e = l.length; e--; )
                                z(l[e], c, c === "height" ? x(d - (l[e].cutHeight || 0), 0) : d);
                        if ((c === "width" || c === "height") && h === "rect" && d < 0)
                            d = 0;
                        this[c] = d;
                        p && this.updateTransform();
                        c === "text" ? (this.textStr = d, this.added && i.buildText(this)) : j || z(g, c, d)
                    }
            if (Fb && /Chrome\/(18|19)/.test(ya) && h === "text" && (a.x !== A || a.y !== A))
                c = g.parentNode, d = g.nextSibling, c && (c.removeChild(g), d ? c.insertBefore(g, d) : c.appendChild(g));
            return q
        },symbolAttr: function(a) {
            var b = this;
            n("x,y,r,start,end,width,height,innerR,anchorX,anchorY".split(","), function(c) {
                b[c] = o(a[c], b[c])
            });
            b.attr({d: b.renderer.symbols[b.symbolName](b.x, b.y, b.width, b.height, b)})
        },clip: function(a) {
            return this.attr("clip-path", "url(" + this.renderer.url + "#" + a.id + ")")
        },crisp: function(a, b, c, d, e) {
            var f, g = {}, h = {}, i, a = a || this.strokeWidth || this.attr && this.attr("stroke-width") || 0;
            i = t(a) % 2 / 2;
            h.x = W(b || this.x || 0) + i;
            h.y = W(c || this.y || 0) + i;
            h.width = W((d || this.width || 0) - 2 * i);
            h.height = W((e || this.height || 0) - 2 * i);
            h.strokeWidth = a;
            for (f in h)
                this[f] !== h[f] && (this[f] = g[f] = h[f]);
            return g
        },css: function(a) {
            var b = this.element, b = a && a.width && b.nodeName === "text", c, d = "", e = function(a, b) {
                return "-" + b.toLowerCase()
            };
            if (a && a.color)
                a.fill = a.color;
            this.styles = a = u(this.styles, a);
            if (La && !Da)
                b && delete a.width, F(this.element, a);
            else {
                for (c in a)
                    d += c.replace(/([A-Z])/g, e) + ":" + a[c] + ";";
                this.attr({style: d})
            }
            b && this.added && this.renderer.buildText(this);
            return this
        },on: function(a, b) {
            var c = b;
            ea && a === "click" && (a = "touchstart", c = function(a) {
                a.preventDefault();
                b()
            });
            this.element["on" + a] = c;
            return this
        },setRadialReference: function(a) {
            this.element.radialReference = a;
            return this
        },translate: function(a, b) {
            return this.attr({translateX: a,translateY: b})
        },invert: function() {
            this.inverted = !0;
            this.updateTransform();
            return this
        },htmlCss: function(a) {
            var b = this.element;
            if (b = a && b.tagName === "SPAN" && a.width)
                delete a.width, this.textWidth = b, this.updateTransform();
            this.styles = u(this.styles, a);
            F(this.element, a);
            return this
        },htmlGetBBox: function(a) {
            var b = this.element, c = this.bBox;
            if (!c || a) {
                if (b.nodeName === "text")
                    b.style.position = "absolute";
                c = this.bBox = {x: b.offsetLeft,y: b.offsetTop,width: b.offsetWidth,height: b.offsetHeight}
            }
            return c
        },htmlUpdateTransform: function() {
            if (this.added) {
                var a = this.renderer, b = this.element, c = this.translateX || 0, d = this.translateY || 0, e = this.x || 0, f = this.y || 0, g = this.textAlign || "left", h = {left: 0,center: 0.5,right: 1}[g], i = g && g !== "left", j = this.shadows;
                if (c || d)
                    F(b, {marginLeft: c,marginTop: d}), j && n(j, function(a) {
                        F(a, {marginLeft: c + 1,marginTop: d + 1})
                    });
                this.inverted && n(b.childNodes, function(c) {
                    a.invertChild(c, b)
                });
                if (b.tagName === "SPAN") {
                    var k, l, j = this.rotation, m;
                    k = 0;
                    var p = 1, q = 0, fa;
                    m = w(this.textWidth);
                    var r = this.xCorr || 0, y = this.yCorr || 0, $ = [j, g, b.innerHTML, this.textWidth].join(",");
                    if ($ !== this.cTT)
                        s(j) && (k = j * Eb, p = X(k), q = da(k), F(b, {filter: j ? ["progid:DXImageTransform.Microsoft.Matrix(M11=", p, ", M12=", -q, ", M21=", q, ", M22=", p, ", sizingMethod='auto expand')"].join("") : U})), k = o(this.elemWidth, b.offsetWidth), l = o(this.elemHeight, b.offsetHeight), k > m && /[ \-]/.test(b.innerText) && (F(b, {width: m + "px",display: "block",whiteSpace: "normal"}), k = m), m = a.fontMetrics(b.style.fontSize).b, r = p < 0 && -k, y = q < 0 && -l, fa = p * q < 0, r += q * m * (fa ? 1 - h : h), y -= p * m * (j ? fa ? h : 1 - h : 1), i && (r -= k * h * (p < 0 ? -1 : 1), j && (y -= l * h * (q < 0 ? -1 : 1)), F(b, {textAlign: g})), this.xCorr = r, this.yCorr = y;
                    F(b, {left: e + r + "px",top: f + y + "px"});
                    this.cTT = $
                }
            } else
                this.alignOnAdd = !0
        },updateTransform: function() {
            var a = this.translateX || 0, b = this.translateY || 0, c = this.inverted, d = this.rotation, e = [];
            c && (a += this.attr("width"), b += this.attr("height"));
            (a || b) && e.push("translate(" + a + "," + b + ")");
            c ? e.push("rotate(90) scale(-1,1)") : d && e.push("rotate(" + d + " " + (this.x || 0) + " " + (this.y || 0) + ")");
            e.length && z(this.element, "transform", e.join(" "))
        },toFront: function() {
            var a = this.element;
            a.parentNode.appendChild(a);
            return this
        },align: function(a, b, c) {
            a ? (this.alignOptions = a, this.alignByTranslate = b, c || this.renderer.alignedObjects.push(this)) : (a = this.alignOptions, b = this.alignByTranslate);
            var c = o(c, this.renderer), d = a.align, e = a.verticalAlign, f = (c.x || 0) + (a.x || 0), g = (c.y || 0) + (a.y || 0), h = {};
            /^(right|center)$/.test(d) && (f += (c.width - (a.width || 0)) / {right: 1,center: 2}[d]);
            h[b ? "translateX" : "x"] = t(f);
            /^(bottom|middle)$/.test(e) && (g += (c.height - (a.height || 0)) / ({bottom: 1,middle: 2}[e] || 1));
            h[b ? "translateY" : "y"] = t(g);
            this[this.placed ? "animate" : "attr"](h);
            this.placed = !0;
            this.alignAttr = h;
            return this
        },getBBox: function(a) {
            var b, c, d = this.rotation;
            c = this.element;
            var e = d * Eb;
            if (c.namespaceURI === "http://www.w3.org/2000/svg" || this.renderer.forExport) {
                try {
                    b = c.getBBox ? u({}, c.getBBox()) : {width: c.offsetWidth,height: c.offsetHeight}
                } catch (f) {
                }
                if (!b || b.width < 0)
                    b = {width: 0,height: 0};
                a = b.width;
                c = b.height;
                if (d)
                    b.width = M(c * da(e)) + M(a * X(e)), b.height = M(c * X(e)) + M(a * da(e))
            } else
                b = this.htmlGetBBox(a);
            return b
        },show: function() {
            return this.attr({visibility: "visible"})
        },hide: function() {
            return this.attr({visibility: "hidden"})
        },add: function(a) {
            var b = this.renderer, c = a || b, d = c.element || b.box, e = d.childNodes, f = this.element, g = z(f, "zIndex"), h;
            this.parentInverted = a && a.inverted;
            this.textStr !== void 0 && b.buildText(this);
            if (g)
                c.handleZ = !0, g = w(g);
            if (c.handleZ)
                for (c = 0; c < e.length; c++)
                    if (a = e[c], b = z(a, "zIndex"), a !== f && (w(b) > g || !s(g) && s(b))) {
                        d.insertBefore(f, a);
                        h = !0;
                        break
                    }
            h || d.appendChild(f);
            this.added = !0;
            E(this, "add");
            return this
        },safeRemoveChild: function(a) {
            var b = a.parentNode;
            b && b.removeChild(a)
        },destroy: function() {
            var a = this, b = a.element || {}, c = a.shadows, d = a.box, e, f;
            b.onclick = b.onmouseout = b.onmouseover = b.onmousemove = null;
            Fa(a);
            if (a.clipPath)
                a.clipPath = a.clipPath.destroy();
            if (a.stops) {
                for (f = 0; f < a.stops.length; f++)
                    a.stops[f] = a.stops[f].destroy();
                a.stops = null
            }
            a.safeRemoveChild(b);
            c && n(c, function(b) {
                a.safeRemoveChild(b)
            });
            d && d.destroy();
            za(a.renderer.alignedObjects, a);
            for (e in a)
                delete a[e];
            return null
        },empty: function() {
            for (var a = this.element, b = a.childNodes, c = b.length; c--; )
                a.removeChild(b[c])
        },shadow: function(a, b, c) {
            var d = [], e, f = this.element, g, h = this.parentInverted ? "(-1,-1)" : "(1,1)";
            if (a) {
                for (a = 1; a <= 3; a++) {
                    e = f.cloneNode(0);
                    g = 7 - 2 * a;
                    z(e, {isShadow: "true",stroke: "rgb(0, 0, 0)","stroke-opacity": 0.05 * a,"stroke-width": g,transform: "translate" + h,fill: U});
                    if (c)
                        z(e, "height", x(z(e, "height") - g, 0)), e.cutHeight = g;
                    b ? b.element.appendChild(e) : f.parentNode.insertBefore(e, f);
                    d.push(e)
                }
                this.shadows = d
            }
            return this
        }};
    var qa = function() {
        this.init.apply(this, arguments)
    };
    qa.prototype = {Element: va,init: function(a, b, c, d) {
            var e = location, f;
            f = this.createElement("svg").attr({xmlns: "http://www.w3.org/2000/svg",version: "1.1"});
            a.appendChild(f.element);
            this.isSVG = !0;
            this.box = f.element;
            this.boxWrapper = f;
            this.alignedObjects = [];
            this.url = La ? "" : e.href.replace(/#.*?$/, "").replace(/([\('\)])/g, "\\$1");
            this.defs = this.createElement("defs").add();
            this.forExport = d;
            this.gradients = {};
            this.setSize(b, c, !1);
            var g;
            if (Gb && a.getBoundingClientRect)
                this.subPixelFix = b = function() {
                    F(a, {left: 0,top: 0});
                    g = a.getBoundingClientRect();
                    F(a, {left: wa(g.left) - g.left + "px",top: wa(g.top) - g.top + "px"})
                }, b(), I(N, "resize", b)
        },isHidden: function() {
            return !this.boxWrapper.getBBox().width
        },destroy: function() {
            var a = this.defs;
            this.box = null;
            this.boxWrapper = this.boxWrapper.destroy();
            Ba(this.gradients || {});
            this.gradients = null;
            if (a)
                this.defs = a.destroy();
            this.subPixelFix && P(N, "resize", this.subPixelFix);
            return this.alignedObjects = null
        },createElement: function(a) {
            var b = new this.Element;
            b.init(this, a);
            return b
        },draw: function() {
        },buildText: function(a) {
            for (var b = a.element, c = o(a.textStr, "").toString().replace(/<(b|strong)>/g, '<span style="font-weight:bold">').replace(/<(i|em)>/g, '<span style="font-style:italic">').replace(/<a/g, "<span").replace(/<\/(b|strong|i|em|a)>/g, "</span>").split(/<br.*?>/g), d = b.childNodes, e = /style="([^"]+)"/, f = /href="([^"]+)"/, g = z(b, "x"), h = a.styles, i = h && w(h.width), j = h && h.lineHeight, k, h = d.length, l = []; h--; )
                b.removeChild(d[h]);
            i && !a.added && this.box.appendChild(b);
            c[c.length - 1] === "" && c.pop();
            n(c, function(c, d) {
                var h, fa = 0, r, c = c.replace(/<span/g, "|||<span").replace(/<\/span>/g, "</span>|||");
                h = c.split("|||");
                n(h, function(c) {
                    if (c !== "" || h.length === 1) {
                        var m = {}, n = B.createElementNS("http://www.w3.org/2000/svg", "tspan");
                        e.test(c) && z(n, "style", c.match(e)[1].replace(/(;| |^)color([ :])/, "$1fill$2"));
                        f.test(c) && (z(n, "onclick", 'location.href="' + c.match(f)[1] + '"'), F(n, {cursor: "pointer"}));
                        c = (c.replace(/<(.|\n)*?>/g, "") || " ").replace(/&lt;/g, "<").replace(/&gt;/g, ">");
                        n.appendChild(B.createTextNode(c));
                        fa ? m.dx = 3 : m.x = g;
                        if (!fa) {
                            if (d) {
                                !Da && a.renderer.forExport && F(n, {display: "block"});
                                r = N.getComputedStyle && w(N.getComputedStyle(k, null).getPropertyValue("line-height"));
                                if (!r || isNaN(r)) {
                                    var o;
                                    if (!(o = j))
                                        if (!(o = k.offsetHeight))
                                            l[d] = b.getBBox().height, o = t(l[d] - (l[d - 1] || 0)) || 18;
                                    r = o
                                }
                                z(n, "dy", r)
                            }
                            k = n
                        }
                        z(n, m);
                        b.appendChild(n);
                        fa++;
                        if (i)
                            for (var c = c.replace(/-/g, "- ").split(" "), H = []; c.length || H.length; )
                                o = a.getBBox().width, m = o > i, !m || c.length === 1 ? (c = H, H = [], c.length && (n = B.createElementNS("http://www.w3.org/2000/svg", "tspan"), z(n, {dy: j || 16,x: g}), b.appendChild(n), o > i && (i = o))) : (n.removeChild(n.firstChild), H.unshift(c.pop())), c.length && n.appendChild(B.createTextNode(c.join(" ").replace(/- /g, "-")))
                    }
                })
            })
        },button: function(a, b, c, d, e, f, g) {
            var h = this.label(a, b, c), i = 0, j, k, l, m, p, a = {x1: 0,y1: 0,x2: 0,y2: 1}, e = C(la("stroke-width", 1, "stroke", "#999", "fill", la("linearGradient", a, "stops", [[0, "#FFF"], [1, "#DDD"]]), "r", 3, "padding", 3, "style", la("color", "black")), e);
            l = e.style;
            delete e.style;
            f = C(e, la("stroke", "#68A", "fill", la("linearGradient", a, "stops", [[0, "#FFF"], [1, "#ACF"]])), f);
            m = f.style;
            delete f.style;
            g = C(e, la("stroke", "#68A", "fill", la("linearGradient", a, "stops", [[0, "#9BD"], [1, "#CDF"]])), g);
            p = g.style;
            delete g.style;
            I(h.element, "mouseenter", function() {
                h.attr(f).css(m)
            });
            I(h.element, "mouseleave", function() {
                j = [e, f, g][i];
                k = [l, m, p][i];
                h.attr(j).css(k)
            });
            h.setState = function(a) {
                (i = a) ? a === 2 && h.attr(g).css(p) : h.attr(e).css(l)
            };
            return h.on("click", function() {
                d.call(h)
            }).attr(e).css(u({cursor: "default"}, l))
        },crispLine: function(a, b) {
            a[1] === a[4] && (a[1] = a[4] = t(a[1]) + b % 2 / 2);
            a[2] === a[5] && (a[2] = a[5] = t(a[2]) + b % 2 / 2);
            return a
        },path: function(a) {
            var b = {fill: U};
            Ja(a) ? b.d = a : aa(a) && u(b, a);
            return this.createElement("path").attr(b)
        },circle: function(a, b, c) {
            a = aa(a) ? a : {x: a,y: b,r: c};
            return this.createElement("circle").attr(a)
        },arc: function(a, b, c, d, e, f) {
            if (aa(a))
                b = a.y, c = a.r, d = a.innerR, e = a.start, f = a.end, a = a.x;
            return this.symbol("arc", a || 0, b || 0, c || 0, c || 0, {innerR: d || 0,start: e || 0,end: f || 0})
        },rect: function(a, b, c, d, e, f) {
            e = aa(a) ? a.r : e;
            e = this.createElement("rect").attr({rx: e,ry: e,fill: U});
            return e.attr(aa(a) ? a : e.crisp(f, a, b, x(c, 0), x(d, 0)))
        },setSize: function(a, b, c) {
            var d = this.alignedObjects, e = d.length;
            this.width = a;
            this.height = b;
            for (this.boxWrapper[o(c, !0) ? "animate" : "attr"]({width: a,height: b}); e--; )
                d[e].align()
        },g: function(a) {
            var b = this.createElement("g");
            return s(a) ? b.attr({"class": "highcharts-" + a}) : b
        },image: function(a, b, c, d, e) {
            var f = {preserveAspectRatio: U};
            arguments.length > 1 && u(f, {x: b,y: c,width: d,height: e});
            f = this.createElement("image").attr(f);
            f.element.setAttributeNS ? f.element.setAttributeNS("http://www.w3.org/1999/xlink", "href", a) : f.element.setAttribute("hc-svg-href", a);
            return f
        },symbol: function(a, b, c, d, e, f) {
            var g, h = this.symbols[a], h = h && h(t(b), t(c), d, e, f), i = /^url\((.*?)\)$/, j, k;
            h ? (g = this.path(h), u(g, {symbolName: a,x: b,y: c,width: d,height: e}), f && u(g, f)) : i.test(a) && (k = function(a, b) {
                a.attr({width: b[0],height: b[1]});
                a.alignByTranslate || a.translate(-t(b[0] / 2), -t(b[1] / 2))
            }, j = a.match(i)[1], a = Hb[j], g = this.image(j).attr({x: b,y: c}), a ? k(g, a) : (g.attr({width: 0,height: 0}), S("img", {onload: function() {
                    k(g, Hb[j] = [this.width, this.height])
                },src: j})));
            return g
        },symbols: {circle: function(a, b, c, d) {
                var e = 0.166 * c;
                return ["M", a + c / 2, b, "C", a + c + e, b, a + c + e, b + d, a + c / 2, b + d, "C", a - e, b + d, a - e, b, a + c / 2, b, "Z"]
            },square: function(a, b, c, d) {
                return ["M", a, b, "L", a +
                    c, b, a + c, b + d, a, b + d, "Z"]
            },triangle: function(a, b, c, d) {
                return ["M", a + c / 2, b, "L", a + c, b + d, a, b + d, "Z"]
            },"triangle-down": function(a, b, c, d) {
                return ["M", a, b, "L", a + c, b, a + c / 2, b + d, "Z"]
            },diamond: function(a, b, c, d) {
                return ["M", a + c / 2, b, "L", a + c, b + d / 2, a + c / 2, b + d, a, b + d / 2, "Z"]
            },arc: function(a, b, c, d, e) {
                var f = e.start, c = e.r || c || d, g = e.end - 1.0E-6, d = e.innerR, h = e.open, i = X(f), j = da(f), k = X(g), g = da(g), e = e.end - f < xa ? 0 : 1;
                return ["M", a + c * i, b + c * j, "A", c, c, 0, e, 1, a + c * k, b + c * g, h ? "M" : "L", a + d * k, b + d * g, "A", d, d, 0, e, 0, a + d * i, b + d * j, h ? "" : "Z"]
            }},clipRect: function(a, b, c, d) {
            var e = "highcharts-" + sb++, f = this.createElement("clipPath").attr({id: e}).add(this.defs), a = this.rect(a, b, c, d, 0).add(f);
            a.id = e;
            a.clipPath = f;
            return a
        },color: function(a, b, c) {
            var d = this, e, f = /^rgba/, g;
            a && a.linearGradient ? g = "linearGradient" : a && a.radialGradient && (g = "radialGradient");
            if (g) {
                var c = a[g], h = d.gradients, i, j, k, b = b.radialReference;
                if (!c.id || !h[c.id])
                    Ja(c) && (a[g] = c = {x1: c[0],y1: c[1],x2: c[2],y2: c[3],gradientUnits: "userSpaceOnUse"}), g === "radialGradient" && b && !s(c.gradientUnits) && u(c, {cx: b[0] - b[2] / 2 + c.cx * b[2],cy: b[1] - b[2] / 2 + c.cy * b[2],r: c.r * b[2],gradientUnits: "userSpaceOnUse"}), c.id = "highcharts-" + sb++, h[c.id] = i = d.createElement(g).attr(c).add(d.defs), i.stops = [], n(a.stops, function(a) {
                        f.test(a[1]) ? (e = pa(a[1]), j = e.get("rgb"), k = e.get("a")) : (j = a[1], k = 1);
                        a = d.createElement("stop").attr({offset: a[0],"stop-color": j,"stop-opacity": k}).add(i);
                        i.stops.push(a)
                    });
                return "url(" + d.url + "#" + c.id + ")"
            } else
                return f.test(a) ? (e = pa(a), z(b, c + "-opacity", e.get("a")), e.get("rgb")) : (b.removeAttribute(c + "-opacity"), a)
        },text: function(a, b, c, d) {
            var e = V.chart.style;
            if (d && !this.forExport)
                return this.html(a, b, c);
            b = t(o(b, 0));
            c = t(o(c, 0));
            a = this.createElement("text").attr({x: b,y: c,text: a}).css({fontFamily: e.fontFamily,fontSize: e.fontSize});
            a.x = b;
            a.y = c;
            return a
        },html: function(a, b, c) {
            var d = V.chart.style, e = this.createElement("span"), f = e.attrSetters, g = e.element, h = e.renderer;
            f.text = function(a) {
                g.innerHTML = a;
                return !1
            };
            f.x = f.y = f.align = function(a, b) {
                b === "align" && (b = "textAlign");
                e[b] = a;
                e.htmlUpdateTransform();
                return !1
            };
            e.attr({text: a,x: t(b),y: t(c)}).css({position: "absolute",whiteSpace: "nowrap",fontFamily: d.fontFamily,fontSize: d.fontSize});
            e.css = e.htmlCss;
            if (h.isSVG)
                e.add = function(a) {
                    var b, c, d = h.box.parentNode;
                    if (a) {
                        if (b = a.div, !b)
                            b = a.div = S(ia, {className: z(a.element, "class")}, {position: "absolute",left: a.attr("translateX") + "px",top: a.attr("translateY") + "px"}, d), c = b.style, u(a.attrSetters, {translateX: function(a) {
                                    c.left = a + "px"
                                },translateY: function(a) {
                                    c.top = a + "px"
                                },visibility: function(a, b) {
                                    c[b] = a
                                }})
                    } else
                        b = d;
                    b.appendChild(g);
                    e.added = !0;
                    e.alignOnAdd && e.htmlUpdateTransform();
                    return e
                };
            return e
        },fontMetrics: function(a) {
            var a = w(a || 11), a = a < 24 ? a + 4 : t(a * 1.2), b = t(a * 0.8);
            return {h: a,b: b}
        },label: function(a, b, c, d, e, f, g, h, i) {
            function j() {
                var a = p.styles, a = a && a.textAlign, b = $ * (1 - y), c;
                c = h ? 0 : Ha;
                if (s(Ga) && (a === "center" || a === "right"))
                    b += {center: 0.5,right: 1}[a] * (Ga - r.width);
                (b !== q.x || c !== q.y) && q.attr({x: b,y: c});
                q.x = b;
                q.y = c
            }
            function k(a, b) {
                o ? o.attr(a, b) : x[a] = b
            }
            function l() {
                p.attr({text: a,x: b,y: c});
                s(e) && p.attr({anchorX: e,anchorY: f})
            }
            var m = this, p = m.g(i), q = m.text("", 0, 0, g).attr({zIndex: 1}).add(p), o, r, y = 0, $ = 3, Ga, v, H, J, K = 0, x = {}, Ha, g = p.attrSetters;
            I(p, "add", l);
            g.width = function(a) {
                Ga = a;
                return !1
            };
            g.height = function(a) {
                v = a;
                return !1
            };
            g.padding = function(a) {
                s(a) && a !== $ && ($ = a, j());
                return !1
            };
            g.align = function(a) {
                y = {left: 0,center: 0.5,right: 1}[a];
                return !1
            };
            g.text = function(a, b) {
                q.attr(b, a);
                var c;
                c = q.element.style;
                r = (Ga === void 0 || v === void 0 || p.styles.textAlign) && q.getBBox(!0);
                p.width = (Ga || r.width || 0) + 2 * $;
                p.height = (v || r.height || 0) + 2 * $;
                Ha = $ + m.fontMetrics(c && c.fontSize).b;
                if (!o)
                    c = h ? -Ha : 0, p.box = o = d ? m.symbol(d, -y * $, c, p.width, p.height) : m.rect(-y * $, c, p.width, p.height, 0, x["stroke-width"]), o.add(p);
                o.attr(C({width: p.width,height: p.height}, x));
                x = null;
                j();
                return !1
            };
            g["stroke-width"] = function(a, b) {
                K = a % 2 / 2;
                k(b, a);
                return !1
            };
            g.stroke = g.fill = g.r = function(a, b) {
                k(b, a);
                return !1
            };
            g.anchorX = function(a, b) {
                e = a;
                k(b, a + K - H);
                return !1
            };
            g.anchorY = function(a, b) {
                f = a;
                k(b, a - J);
                return !1
            };
            g.x = function(a) {
                p.x = a;
                a -= y * ((Ga || r.width) + $);
                H = t(a);
                p.attr("translateX", H);
                return !1
            };
            g.y = function(a) {
                J = p.y = t(a);
                p.attr("translateY", a);
                return !1
            };
            var w = p.css;
            return u(p, {css: function(a) {
                    if (a) {
                        var b = {}, a = C({}, a);
                        n("fontSize,fontWeight,fontFamily,color,lineHeight,width".split(","), function(c) {
                            a[c] !== A && (b[c] = a[c], delete a[c])
                        });
                        q.css(b)
                    }
                    return w.call(p, a)
                },getBBox: function() {
                    return o.getBBox()
                },shadow: function(a) {
                    o.shadow(a);
                    return p
                },destroy: function() {
                    P(p, "add", l);
                    P(p.element, "mouseenter");
                    P(p.element, "mouseleave");
                    q && (q = q.destroy());
                    va.prototype.destroy.call(p)
                }})
        }};
    Ta = qa;
    var ka;
    if (!Da && !ga) {
        ka = {init: function(a, b) {
                var c = ["<", b, ' filled="f" stroked="f"'], d = ["position: ", "absolute", ";"];
                (b === "shape" || b === ia) && d.push("left:0;top:0;width:1px;height:1px;");
                Ca && d.push("visibility: ", b === ia ? "hidden" : "visible");
                c.push(' style="', d.join(""), '"/>');
                if (b)
                    c = b === ia || b === "span" || b === "img" ? c.join("") : a.prepVML(c), this.element = S(c);
                this.renderer = a;
                this.attrSetters = {}
            },add: function(a) {
                var b = this.renderer, c = this.element, d = b.box, d = a ? a.element || a : d;
                a && a.inverted && b.invertChild(c, d);
                Ca && d.gVis === "hidden" && F(c, {visibility: "hidden"});
                d.appendChild(c);
                this.added = !0;
                this.alignOnAdd && !this.deferUpdateTransform && this.updateTransform();
                E(this, "add");
                return this
            },toggleChildren: function(a, b) {
                for (var c = a.childNodes, d = c.length; d--; )
                    F(c[d], {visibility: b}), c[d].nodeName === "DIV" && this.toggleChildren(c[d], b)
            },updateTransform: va.prototype.htmlUpdateTransform,attr: function(a, b) {
                var c, d, e, f = this.element || {}, g = f.style, h = f.nodeName, i = this.renderer, j = this.symbolName, k, l = this.shadows, m, p = this.attrSetters, q = this;
                ra(a) && s(b) && (c = a, a = {}, a[c] = b);
                if (ra(a))
                    c = a, q = c === "strokeWidth" || c === "stroke-width" ? this.strokeweight : this[c];
                else
                    for (c in a)
                        if (d = a[c], m = !1, e = p[c] && p[c](d, c), e !== !1 && d !== null) {
                            e !== A && (d = e);
                            if (j && /^(x|y|r|start|end|width|height|innerR|anchorX|anchorY)/.test(c))
                                k || (this.symbolAttr(a), k = !0), m = !0;
                            else if (c === "d") {
                                d = d || [];
                                this.d = d.join(" ");
                                e = d.length;
                                for (m = []; e--; )
                                    m[e] = Ka(d[e]) ? t(d[e] * 10) - 5 : d[e] === "Z" ? "x" : d[e];
                                d = m.join(" ") || "x";
                                f.path = d;
                                if (l)
                                    for (e = l.length; e--; )
                                        l[e].path = l[e].cutOff ? this.cutOffPath(d, l[e].cutOff) : d;
                                m = !0
                            } else if (c === "zIndex" || c === "visibility") {
                                if (Ca && c === "visibility" && h === "DIV")
                                    f.gVis = d, this.toggleChildren(f, d), d === "visible" && (d = null);
                                d && (g[c] = d);
                                m = !0
                            } else if (c === "width" || c === "height")
                                d = x(0, d), this[c] = d, this.updateClipping ? (this[c] = d, this.updateClipping()) : g[c] = d, m = !0;
                            else if (c === "x" || c === "y")
                                this[c] = d, g[{x: "left",y: "top"}[c]] = d;
                            else if (c === "class")
                                f.className = d;
                            else if (c === "stroke")
                                d = i.color(d, f, c), c = "strokecolor";
                            else if (c === "stroke-width" || c === "strokeWidth")
                                f.stroked = d ? !0 : !1, c = "strokeweight", this[c] = d, Ka(d) && (d += "px");
                            else if (c === "dashstyle")
                                (f.getElementsByTagName("stroke")[0] || S(i.prepVML(["<stroke/>"]), null, null, f))[c] = d || "solid", this.dashstyle = d, m = !0;
                            else if (c === "fill")
                                h === "SPAN" ? g.color = d : (f.filled = d !== U ? !0 : !1, d = i.color(d, f, c), c = "fillcolor");
                            else if (h === "shape" && c === "rotation")
                                this[c] = d;
                            else if (c === "translateX" || c === "translateY" || c === "rotation")
                                this[c] = d, this.updateTransform(), m = !0;
                            else if (c === "text")
                                this.bBox = null, f.innerHTML = d, m = !0;
                            if (l && c === "visibility")
                                for (e = l.length; e--; )
                                    l[e].style[c] = d;
                            m || (Ca ? f[c] = d : z(f, c, d))
                        }
                return q
            },clip: function(a) {
                var b = this, c = a.members, d = b.element, e = d.parentNode;
                c.push(b);
                b.destroyClip = function() {
                    za(c, b)
                };
                e && e.className === "highcharts-tracker" && !Ca && F(d, {visibility: "hidden"});
                return b.css(a.getCSS(b))
            },css: va.prototype.htmlCss,safeRemoveChild: function(a) {
                a.parentNode && Qa(a)
            },destroy: function() {
                this.destroyClip && this.destroyClip();
                return va.prototype.destroy.apply(this)
            },empty: function() {
                for (var a = this.element.childNodes, b = a.length, c; b--; )
                    c = a[b], c.parentNode.removeChild(c)
            },on: function(a, b) {
                this.element["on" + a] = function() {
                    var a = N.event;
                    a.target = a.srcElement;
                    b(a)
                };
                return this
            },cutOffPath: function(a, b) {
                var c, a = a.split(/[ ,]/);
                c = a.length;
                if (c === 9 || c === 11)
                    a[c - 4] = a[c - 2] = w(a[c - 2]) - 10 * b;
                return a.join(" ")
            },shadow: function(a, b, c) {
                var d = [], e = this.element, f = this.renderer, g, h = e.style, i, j = e.path, k, l;
                j && typeof j.value !== "string" && (j = "x");
                l = j;
                if (a) {
                    for (a = 1; a <= 3; a++) {
                        k = 7 - 2 * a;
                        c && (l = this.cutOffPath(j.value, k + 0.5));
                        i = ['<shape isShadow="true" strokeweight="', 7 - 2 * a, '" filled="false" path="', l, '" coordsize="10 10" style="', e.style.cssText, '" />'];
                        g = S(f.prepVML(i), null, {left: w(h.left) + 1,top: w(h.top) + 1});
                        if (c)
                            g.cutOff = k + 1;
                        i = ['<stroke color="black" opacity="', 0.05 * a, '"/>'];
                        S(f.prepVML(i), null, null, g);
                        b ? b.element.appendChild(g) : e.parentNode.insertBefore(g, e);
                        d.push(g)
                    }
                    this.shadows = d
                }
                return this
            }};
        ka = ca(va, ka);
        var ha = {Element: ka,isIE8: ya.indexOf("MSIE 8.0") > -1,init: function(a, b, c) {
                var d, e;
                this.alignedObjects = [];
                d = this.createElement(ia);
                e = d.element;
                e.style.position = "relative";
                a.appendChild(d.element);
                this.box = e;
                this.boxWrapper = d;
                this.setSize(b, c, !1);
                if (!B.namespaces.hcv)
                    B.namespaces.add("hcv", "urn:schemas-microsoft-com:vml"), B.createStyleSheet().cssText = "hcv\\:fill, hcv\\:path, hcv\\:shape, hcv\\:stroke{ behavior:url(#default#VML); display: inline-block; } "
            },isHidden: function() {
                return !this.box.offsetWidth
            },clipRect: function(a, b, c, d) {
                var e = this.createElement();
                return u(e, {members: [],left: a,top: b,width: c,height: d,getCSS: function(a) {
                        var b = a.inverted, c = this.top, d = this.left, e = d + this.width, k = c + this.height, c = {clip: "rect(" + t(b ? d : c) + "px," + t(b ? k : e) + "px," + t(b ? e : k) + "px," + t(b ? c : d) + "px)"};
                        !b && Ca && a.element.nodeName !== "IMG" && u(c, {width: e + "px",height: k + "px"});
                        return c
                    },updateClipping: function() {
                        n(e.members, function(a) {
                            a.css(e.getCSS(a))
                        })
                    }})
            },color: function(a, b, c) {
                var d, e = /^rgba/, f, g = U;
                a && a.linearGradient ? f = "gradient" : a && a.radialGradient && (f = "pattern");
                if (f) {
                    var h, i, j = a.linearGradient || a.radialGradient, k, l, m, p, q, o, r = "", a = a.stops, y, s = [];
                    l = a[0];
                    y = a[a.length - 1];
                    l[0] > 0 && a.unshift([0, l[1]]);
                    y[0] < 1 && a.push([1, y[1]]);
                    n(a, function(a, b) {
                        e.test(a[1]) ? (d = pa(a[1]), h = d.get("rgb"), i = d.get("a")) : (h = a[1], i = 1);
                        s.push(a[0] * 100 + "% " + h);
                        b ? (p = i, q = h) : (m = i, o = h)
                    });
                    f === "gradient" ? (k = j.x1 || j[0] || 0, a = j.y1 || j[1] || 0, l = j.x2 || j[2] || 0, j = j.y2 || j[3] || 0, k = 90 - L.atan((j - a) / (l - k)) * 180 / xa) : (g = j.r * 2, r = 'src="http://code.highcharts.com/gfx/radial-gradient.png" size="' + g + "," + g + '" origin="0.5,0.5" position="' + j.cx + "," + j.cy + '" color2="' + o + '" ', g = q);
                    c === "fill" ? (c = ['<fill colors="' + s.join(",") + '" angle="', k, '" opacity="', p, '" o:opacity2="', m, '" type="', f, '" ', r, 'focus="100%" method="any" />'], S(this.prepVML(c), null, null, b)) : g = h
                } else if (e.test(a) && b.tagName !== "IMG")
                    d = pa(a), c = ["<", c, ' opacity="', d.get("a"), '"/>'], S(this.prepVML(c), null, null, b), g = d.get("rgb");
                else {
                    b = b.getElementsByTagName(c);
                    if (b.length)
                        b[0].opacity = 1;
                    g = a
                }
                return g
            },prepVML: function(a) {
                var b = this.isIE8, a = a.join("");
                b ? (a = a.replace("/>", ' xmlns="urn:schemas-microsoft-com:vml" />'), a = a.indexOf('style="') === -1 ? a.replace("/>", ' style="display:inline-block;behavior:url(#default#VML);" />') : a.replace('style="', 'style="display:inline-block;behavior:url(#default#VML);')) : a = a.replace("<", "<hcv:");
                return a
            },text: qa.prototype.html,path: function(a) {
                var b = {coordsize: "10 10"};
                Ja(a) ? b.d = a : aa(a) && u(b, a);
                return this.createElement("shape").attr(b)
            },circle: function(a, b, c) {
                return this.symbol("circle").attr({x: a - c,y: b - c,width: 2 * c,height: 2 * c})
            },g: function(a) {
                var b;
                a && (b = {className: "highcharts-" + a,"class": "highcharts-" + a});
                return this.createElement(ia).attr(b)
            },image: function(a, b, c, d, e) {
                var f = this.createElement("img").attr({src: a});
                arguments.length > 1 && f.css({left: b,top: c,width: d,height: e});
                return f
            },rect: function(a, b, c, d, e, f) {
                if (aa(a))
                    b = a.y, c = a.width, d = a.height, f = a.strokeWidth, a = a.x;
                var g = this.symbol("rect");
                g.r = e;
                return g.attr(g.crisp(f, a, b, x(c, 0), x(d, 0)))
            },invertChild: function(a, b) {
                var c = b.style;
                F(a, {flip: "x",left: w(c.width) - 1,top: w(c.height) - 1,rotation: -90})
            },symbols: {arc: function(a, b, c, d, e) {
                    var f = e.start, g = e.end, h = e.r || c || d, c = X(f), d = da(f), i = X(g), j = da(g), k = e.innerR, l = 0.08 / h, m = k && 0.1 / k || 0;
                    if (g - f === 0)
                        return ["x"];
                    else
                        2 * xa - g + f < l ? i = -l : g - f < m && (i = X(f + m));
                    f = ["wa", a - h, b - h, a + h, b + h, a + h * c, b + h * d, a + h * i, b + h * j];
                    e.open && f.push("M", a - k, b - k);
                    f.push("at", a - k, b - k, a + k, b + k, a + k * i, b + k * j, a + k * c, b + k * d, "x", "e");
                    return f
                },circle: function(a, b, c, d) {
                    return ["wa", a, b, a + c, b + d, a + c, b + d / 2, a + c, b + d / 2, "e"]
                },rect: function(a, b, c, d, e) {
                    var f = a + c, g = b + d, h;
                    !s(e) || !e.r ? f = qa.prototype.symbols.square.apply(0, arguments) : (h = O(e.r, c, d), f = ["M", a + h, b, "L", f - h, b, "wa", f - 2 * h, b, f, b + 2 * h, f - h, b, f, b + h, "L", f, g - h, "wa", f - 2 * h, g - 2 * h, f, g, f, g - h, f - h, g, "L", a + h, g, "wa", a, g - 2 * h, a + 2 * h, g, a + h, g, a, g - h, "L", a, b + h, "wa", a, b, a + 2 * h, b + 2 * h, a, b + h, a +
                        h, b, "x", "e"]);
                    return f
                }}};
        ka = function() {
            this.init.apply(this, arguments)
        };
        ka.prototype = C(qa.prototype, ha);
        Ta = ka
    }
    var fb, Nb;
    if (ga)
        fb = function() {
        }, fb.prototype.symbols = {}, Nb = function() {
            function a() {
                var a = b.length, d;
                for (d = 0; d < a; d++)
                    b[d]();
                b = []
            }
            var b = [];
            return {push: function(c, d) {
                    b.length === 0 && Ib(d, a);
                    b.push(c)
                }}
        }();
    Ta = ka || fb || qa;
    Sa.prototype = {addLabel: function() {
            var a = this.axis, b = a.options, c = a.chart, d = a.horiz, e = a.categories, f = this.pos, g = b.labels, h = a.tickPositions, d = e && d && e.length && !g.step && !g.staggerLines && !g.rotation && c.plotWidth / h.length || !d && c.plotWidth / 2, i = f === h[0], j = f === h[h.length - 1], k = e && s(e[f]) ? e[f] : f, e = this.label, h = h.info, l;
            a.isDatetimeAxis && h && (l = b.dateTimeLabelFormats[h.higherRanks[f] || h.unitName]);
            this.isFirst = i;
            this.isLast = j;
            b = a.labelFormatter.call({axis: a,chart: c,isFirst: i,isLast: j,dateTimeLabelFormat: l,value: a.isLog ? ja(ba(k)) : k});
            f = d && {width: x(1, t(d - 2 * (g.padding || 10))) + "px"};
            f = u(f, g.style);
            if (s(e))
                e && e.attr({text: b}).css(f);
            else {
                d = {align: g.align};
                if (Ka(g.rotation))
                    d.rotation = g.rotation;
                this.label = s(b) && g.enabled ? c.renderer.text(b, 0, 0, g.useHTML).attr(d).css(f).add(a.axisGroup) : null
            }
        },getLabelSize: function() {
            var a = this.label, b = this.axis;
            return a ? (this.labelBBox = a.getBBox(!0))[b.horiz ? "height" : "width"] : 0
        },getLabelSides: function() {
            var a = this.axis.options.labels, b = this.labelBBox.width, a = b * {left: 0,center: 0.5,right: 1}[a.align] - a.x;
            return [-a, b - a]
        },handleOverflow: function(a, b) {
            var c = !0, d = this.axis, e = d.chart, f = this.isFirst, g = this.isLast, h = b.x, i = d.reversed, j = d.tickPositions;
            if (f || g) {
                var k = this.getLabelSides(), l = k[0], k = k[1], e = e.plotLeft, m = e + d.len, j = (d = d.ticks[j[a + (f ? 1 : -1)]]) && d.label.xy.x + d.getLabelSides()[f ? 0 : 1];
                f && !i || g && i ? h + l < e && (h = e - l, d && h + k > j && (c = !1)) : h + k > m && (h = m - k, d && h + l < j && (c = !1));
                b.x = h
            }
            return c
        },getPosition: function(a, b, c, d) {
            var e = this.axis, f = e.chart, g = d && f.oldChartHeight || f.chartHeight;
            return {x: a ? e.translate(b + c, null, null, d) + e.transB : e.left + e.offset + (e.opposite ? (d && f.oldChartWidth || f.chartWidth) - e.right - e.left : 0),y: a ? g - e.bottom + e.offset - (e.opposite ? e.height : 0) : g - e.translate(b +
                c, null, null, d) - e.transB}
        },getLabelPosition: function(a, b, c, d, e, f, g, h) {
            var i = this.axis, j = i.transA, k = i.reversed, i = i.staggerLines, a = a + e.x - (f && d ? f * j * (k ? -1 : 1) : 0), b = b + e.y - (f && !d ? f * j * (k ? 1 : -1) : 0);
            s(e.y) || (b += w(c.styles.lineHeight) * 0.9 - c.getBBox().height / 2);
            i && (b += g / (h || 1) % i * 16);
            return {x: a,y: b}
        },getMarkPath: function(a, b, c, d, e, f) {
            return f.crispLine(["M", a, b, "L", a + (e ? 0 : -c), b + (e ? c : 0)], d)
        },render: function(a, b) {
            var c = this.axis, d = c.options, e = c.chart.renderer, f = c.horiz, g = this.type, h = this.label, i = this.pos, j = d.labels, k = this.gridLine, l = g ? g + "Grid" : "grid", m = g ? g + "Tick" : "tick", p = d[l + "LineWidth"], q = d[l + "LineColor"], n = d[l + "LineDashStyle"], r = d[m + "Length"], l = d[m + "Width"] || 0, y = d[m + "Color"], s = d[m + "Position"], m = this.mark, t = j.step, v = !0, H = d.categories && d.tickmarkPlacement === "between" ? 0.5 : 0, J = this.getPosition(f, i, H, b), K = J.x, J = J.y, x = c.staggerLines;
            if (p) {
                i = c.getPlotLinePath(i + H, p, b);
                if (k === A) {
                    k = {stroke: q,"stroke-width": p};
                    if (n)
                        k.dashstyle = n;
                    if (!g)
                        k.zIndex = 1;
                    this.gridLine = k = p ? e.path(i).attr(k).add(c.gridGroup) : null
                }
                if (!b && k && i)
                    k[this.isNew ? "attr" : "animate"]({d: i})
            }
            if (l)
                s === "inside" && (r = -r), c.opposite && (r = -r), g = this.getMarkPath(K, J, r, l, f, e), m ? m.animate({d: g}) : this.mark = e.path(g).attr({stroke: y,"stroke-width": l}).add(c.axisGroup);
            if (h && !isNaN(K))
                h.xy = J = this.getLabelPosition(K, J, h, f, j, H, a, t), this.isFirst && !o(d.showFirstLabel, 1) || this.isLast && !o(d.showLastLabel, 1) ? v = !1 : !x && f && j.overflow === "justify" && !this.handleOverflow(a, J) && (v = !1), t && a % t && (v = !1), v ? (h[this.isNew ? "attr" : "animate"](J), h.show(), this.isNew = !1) : h.hide()
        },destroy: function() {
            Ba(this, this.axis)
        }};
    nb.prototype = {render: function() {
            var a = this, b = a.axis, c = b.horiz, d = (b.pointRange || 0) / 2, e = a.options, f = e.label, g = a.label, h = e.width, i = e.to, j = e.from, k = s(j) && s(i), l = e.value, m = e.dashStyle, p = a.svgElem, q = [], n, r = e.color, y = e.zIndex, t = e.events, u = b.chart.renderer;
            b.isLog && (j = ma(j), i = ma(i), l = ma(l));
            if (h) {
                if (q = b.getPlotLinePath(l, h), d = {stroke: r,"stroke-width": h}, m)
                    d.dashstyle = m
            } else if (k) {
                if (j = x(j, b.min - d), i = O(i, b.max + d), q = b.getPlotBandPath(j, i, e), d = {fill: r}, e.borderWidth)
                    d.stroke = e.borderColor, d["stroke-width"] = e.borderWidth
            } else
                return;
            if (s(y))
                d.zIndex = y;
            if (p)
                q ? p.animate({d: q}, null, p.onGetPath) : (p.hide(), p.onGetPath = function() {
                    p.show()
                });
            else if (q && q.length && (a.svgElem = p = u.path(q).attr(d).add(), t))
                for (n in e = function(b) {
                    p.on(b, function(c) {
                        t[b].apply(a, [c])
                    })
                }, t)
                    e(n);
            if (f && s(f.text) && q && q.length && b.width > 0 && b.height > 0) {
                f = C({align: c && k && "center",x: c ? !k && 4 : 10,verticalAlign: !c && k && "middle",y: c ? k ? 16 : 10 : k ? 6 : -4,rotation: c && !k && 90}, f);
                if (!g)
                    a.label = g = u.text(f.text, 0, 0).attr({align: f.textAlign || f.align,rotation: f.rotation,zIndex: y}).css(f.style).add();
                b = [q[1], q[4], o(q[6], q[1])];
                q = [q[2], q[5], o(q[7], q[2])];
                c = Pa(b);
                k = Pa(q);
                g.align(f, !1, {x: c,y: k,width: Aa(b) - c,height: Aa(q) - k});
                g.show()
            } else
                g && g.hide();
            return a
        },destroy: function() {
            za(this.axis.plotLinesAndBands, this);
            Ba(this, this.axis)
        }};
    Cb.prototype = {destroy: function() {
            Ba(this, this.axis)
        },setTotal: function(a) {
            this.cum = this.total = a
        },render: function(a) {
            var b = this.options.formatter.call(this);
            this.label ? this.label.attr({text: b,visibility: "hidden"}) : this.label = this.axis.chart.renderer.text(b, 0, 0).css(this.options.style).attr({align: this.textAlign,rotation: this.options.rotation,visibility: "hidden"}).add(a)
        },setOffset: function(a, b) {
            var c = this.axis, d = c.chart, e = d.inverted, f = this.isNegative, g = c.translate(this.total, 0, 0, 0, 1), c = c.translate(0), c = M(g - c), h = d.xAxis[0].translate(this.x) + a, d = d.plotHeight, e = {x: e ? f ? g : g - c : h,y: e ? d - h - b : f ? d - g - c : d - g,width: e ? c : b,height: e ? b : c};
            this.label && this.label.align(this.alignOptions, null, e).attr({visibility: "visible"})
        }};
    ob.prototype = {defaultOptions: {dateTimeLabelFormats: {millisecond: "%H:%M:%S.%L",second: "%H:%M:%S",minute: "%H:%M",hour: "%H:%M",day: "%e. %b",week: "%e. %b",month: "%b '%y",year: "%Y"},endOnTick: !1,gridLineColor: "#C0C0C0",labels: G,lineColor: "#C0D0E0",lineWidth: 1,minPadding: 0.01,maxPadding: 0.01,minorGridLineColor: "#E0E0E0",minorGridLineWidth: 1,minorTickColor: "#A0A0A0",minorTickLength: 2,minorTickPosition: "outside",startOfWeek: 1,startOnTick: !1,tickColor: "#C0D0E0",tickLength: 5,tickmarkPlacement: "between",tickPixelInterval: 100,tickPosition: "outside",tickWidth: 1,title: {align: "middle",style: {color: "#6D869F",fontWeight: "bold"}},type: "linear"},defaultYAxisOptions: {endOnTick: !0,gridLineWidth: 1,tickPixelInterval: 72,showLastLabel: !0,labels: {align: "right",x: -8,y: 3},lineWidth: 0,maxPadding: 0.05,minPadding: 0.05,startOnTick: !0,tickWidth: 0,title: {rotation: 270,text: "Y-values"},stackLabels: {enabled: !1,formatter: function() {
                    return this.total
                },style: G.style}},defaultLeftAxisOptions: {labels: {align: "right",x: -8,y: null},title: {rotation: 270}},defaultRightAxisOptions: {labels: {align: "left",x: 8,y: null},title: {rotation: 90}},defaultBottomAxisOptions: {labels: {align: "center",x: 0,y: 14},title: {rotation: 0}},defaultTopAxisOptions: {labels: {align: "center",x: 0,y: -5},title: {rotation: 0}},init: function(a, b) {
            var c = b.isX;
            this.horiz = a.inverted ? !c : c;
            this.xOrY = (this.isXAxis = c) ? "x" : "y";
            this.opposite = b.opposite;
            this.side = this.horiz ? this.opposite ? 0 : 2 : this.opposite ? 1 : 3;
            this.setOptions(b);
            var d = this.options, e = d.type, f = e === "datetime";
            this.labelFormatter = d.labels.formatter || this.defaultLabelFormatter;
            this.staggerLines = this.horiz && d.labels.staggerLines;
            this.userOptions = b;
            this.minPixelPadding = 0;
            this.chart = a;
            this.reversed = d.reversed;
            this.categories = d.categories;
            this.isLog = e === "logarithmic";
            this.isLinked = s(d.linkedTo);
            this.isDatetimeAxis = f;
            this.ticks = {};
            this.minorTicks = {};
            this.plotLinesAndBands = [];
            this.alternateBands = {};
            this.len = 0;
            this.minRange = this.userMinRange = d.minRange || d.maxZoom;
            this.range = d.range;
            this.offset = d.offset || 0;
            this.stacks = {};
            this.min = this.max = null;
            var g, d = this.options.events;
            a.axes.push(this);
            a[c ? "xAxis" : "yAxis"].push(this);
            this.series = [];
            if (a.inverted && c && this.reversed === A)
                this.reversed = !0;
            this.removePlotLine = this.removePlotBand = this.removePlotBandOrLine;
            this.addPlotLine = this.addPlotBand = this.addPlotBandOrLine;
            for (g in d)
                I(this, g, d[g]);
            if (this.isLog)
                this.val2lin = ma, this.lin2val = ba
        },setOptions: function(a) {
            this.options = C(this.defaultOptions, this.isXAxis ? {} : this.defaultYAxisOptions, [this.defaultTopAxisOptions, this.defaultRightAxisOptions, this.defaultBottomAxisOptions, this.defaultLeftAxisOptions][this.side], a)
        },defaultLabelFormatter: function() {
            var a = this.axis, b = this.value, c = a.tickInterval, d = this.dateTimeLabelFormat;
            return a.categories ? b : d ? db(d, b) : c % 1E6 === 0 ? b / 1E6 + "M" : c % 1E3 === 0 ? b / 1E3 + "k" : b >= 1E3 ? Xa(b, 0) : Xa(b, -1)
        },getSeriesExtremes: function() {
            var a = this, b = a.chart, c = a.stacks, d = [], e = [], f;
            a.dataMin = a.dataMax = null;
            n(a.series, function(g) {
                if (g.visible || !b.options.chart.ignoreHiddenSeries) {
                    var h = g.options, i, j, k, l, m, p, q, n, r, y = h.threshold, t, u = [], v = 0;
                    if (a.isLog && y <= 0)
                        y = h.threshold = null;
                    if (a.isXAxis) {
                        if (h = g.xData, h.length)
                            a.dataMin = O(o(a.dataMin, h[0]), Pa(h)), a.dataMax = x(o(a.dataMax, h[0]), Aa(h))
                    } else {
                        var H, J, K, C = g.cropped, Ha = g.xAxis.getExtremes(), w = !!g.modifyValue;
                        i = h.stacking;
                        a.usePercentage = i === "percent";
                        if (i)
                            m = h.stack, l = g.type + o(m, ""), p = "-" + l, g.stackKey = l, j = d[l] || [], d[l] = j, k = e[p] || [], e[p] = k;
                        if (a.usePercentage)
                            a.dataMin = 0, a.dataMax = 99;
                        h = g.processedXData;
                        q = g.processedYData;
                        t = q.length;
                        for (f = 0; f < t; f++)
                            if (n = h[f], r = q[f], r !== null && r !== A && (i ? (J = (H = r < y) ? k : j, K = H ? p : l, r = J[n] = s(J[n]) ? J[n] + r : r, c[K] || (c[K] = {}), c[K][n] || (c[K][n] = new Cb(a, a.options.stackLabels, H, n, m)), c[K][n].setTotal(r)) : w && (r = g.modifyValue(r)), C || (h[f + 1] || n) >= Ha.min && (h[f - 1] || n) <= Ha.max))
                                if (n = r.length)
                                    for (; n--; )
                                        r[n] !== null && (u[v++] = r[n]);
                                else
                                    u[v++] = r;
                        if (!a.usePercentage && u.length)
                            a.dataMin = O(o(a.dataMin, u[0]), Pa(u)), a.dataMax = x(o(a.dataMax, u[0]), Aa(u));
                        if (s(y))
                            if (a.dataMin >= y)
                                a.dataMin = y, a.ignoreMinPadding = !0;
                            else if (a.dataMax < y)
                                a.dataMax = y, a.ignoreMaxPadding = !0
                    }
                }
            })
        },translate: function(a, b, c, d, e) {
            var f = this.len, g = 1, h = 0, i = d ? this.oldTransA : this.transA, d = d ? this.oldMin : this.min, e = this.options.ordinal || this.isLog && e;
            if (!i)
                i = this.transA;
            c && (g *= -1, h = f);
            this.reversed && (g *= -1, h -= g * f);
            b ? (this.reversed && (a = f - a), a = a / i + d, e && (a = this.lin2val(a))) : (e && (a = this.val2lin(a)), a = g * (a - d) * i + h + g * this.minPixelPadding);
            return a
        },getPlotLinePath: function(a, b, c) {
            var d = this.chart, e = this.left, f = this.top, g, h, i, a = this.translate(a, null, null, c), j = c && d.oldChartHeight || d.chartHeight, k = c && d.oldChartWidth || d.chartWidth, l;
            g = this.transB;
            c = h = t(a + g);
            g = i = t(j - a - g);
            if (isNaN(a))
                l = !0;
            else if (this.horiz) {
                if (g = f, i = j - this.bottom, c < e || c > e + this.width)
                    l = !0
            } else if (c = e, h = k - this.right, g < f || g > f + this.height)
                l = !0;
            return l ? null : d.renderer.crispLine(["M", c, g, "L", h, i], b || 0)
        },getPlotBandPath: function(a, b) {
            var c = this.getPlotLinePath(b), d = this.getPlotLinePath(a);
            d && c ? d.push(c[4], c[5], c[1], c[2]) : d = null;
            return d
        },getLinearTickPositions: function(a, b, c) {
            for (var d, b = ja(W(b / a) * a), c = ja(wa(c / a) * a), e = []; b <= c; ) {
                e.push(b);
                b = ja(b + a);
                if (b === d)
                    break;
                d = b
            }
            return e
        },getLogTickPositions: function(a, b, c, d) {
            var e = this.options, f = this.len, g = [];
            if (!d)
                this._minorAutoInterval = null;
            if (a >= 0.5)
                a = t(a), g = this.getLinearTickPositions(a, b, c);
            else if (a >= 0.08)
                for (var f = W(b), h, i, j, k, l, e = a > 0.3 ? [1, 2, 4] : a > 0.15 ? [1, 2, 4, 6, 8] : [1, 2, 3, 4, 5, 6, 7, 8, 9]; f < c + 1 && !l; f++) {
                    i = e.length;
                    for (h = 0; h < i && !l; h++)
                        j = ma(ba(f) * e[h]), j > b && g.push(k), k > c && (l = !0), k = j
                }
            else if (b = ba(b), c = ba(c), a = e[d ? "minorTickInterval" : "tickInterval"], a = o(a === "auto" ? null : a, this._minorAutoInterval, (c - b) * (e.tickPixelInterval / (d ? 5 : 1)) / ((d ? f / this.tickPositions.length : f) || 1)), a = gb(a, null, L.pow(10, W(L.log(a) / L.LN10))), g = Ea(this.getLinearTickPositions(a, b, c), ma), !d)
                this._minorAutoInterval = a / 5;
            if (!d)
                this.tickInterval = a;
            return g
        },getMinorTickPositions: function() {
            var a = this.tickPositions, b = this.minorTickInterval, c = [], d, e;
            if (this.isLog) {
                e = a.length;
                for (d = 1; d < e; d++)
                    c = c.concat(this.getLogTickPositions(b, a[d - 1], a[d], !0))
            } else
                for (a = this.min + (a[0] - this.min) % b; a <= this.max; a += b)
                    c.push(a);
            return c
        },adjustForMinRange: function() {
            var a = this.options, b = this.min, c = this.max, d, e = this.dataMax - this.dataMin >= this.minRange, f, g, h, i, j;
            if (this.isXAxis && this.minRange === A && !this.isLog)
                s(a.min) || s(a.max) ? this.minRange = null : (n(this.series, function(a) {
                    i = a.xData;
                    for (g = j = a.xIncrement ? 1 : i.length - 1; g > 0; g--)
                        if (h = i[g] - i[g - 1], f === A || h < f)
                            f = h
                }), this.minRange = O(f * 5, this.dataMax - this.dataMin));
            if (c - b < this.minRange) {
                var k = this.minRange;
                d = (k - c + b) / 2;
                d = [b - d, o(a.min, b - d)];
                if (e)
                    d[2] = this.dataMin;
                b = Aa(d);
                c = [b + k, o(a.max, b + k)];
                if (e)
                    c[2] = this.dataMax;
                c = Pa(c);
                c - b < k && (d[0] = c - k, d[1] = o(a.min, c - k), b = Aa(d))
            }
            this.min = b;
            this.max = c
        },setAxisTranslation: function() {
            var a = this.max - this.min, b = 0, c, d, e = this.transA;
            if (this.isXAxis)
                this.isLinked ? b = this.linkedParent.pointRange : n(this.series, function(a) {
                    b = x(b, a.pointRange);
                    d = a.closestPointRange;
                    !a.noSharedTooltip && s(d) && (c = s(c) ? O(c, d) : d)
                }), this.pointRange = b, this.closestPointRange = c;
            this.oldTransA = e;
            this.translationSlope = this.transA = e = this.len / (a + b || 1);
            this.transB = this.horiz ? this.left : this.bottom;
            this.minPixelPadding = e * (b / 2)
        },setTickPositions: function(a) {
            var b = this, c = b.chart, d = b.options, e = b.isLog, f = b.isDatetimeAxis, g = b.isXAxis, h = b.isLinked, i = b.options.tickPositioner, j = d.maxPadding, k = d.minPadding, l = d.tickInterval, m = d.tickPixelInterval, p = b.categories;
            h ? (b.linkedParent = c[g ? "xAxis" : "yAxis"][d.linkedTo], c = b.linkedParent.getExtremes(), b.min = o(c.min, c.dataMin), b.max = o(c.max, c.dataMax), d.type !== b.linkedParent.options.type && mb(11, 1)) : (b.min = o(b.userMin, d.min, b.dataMin), b.max = o(b.userMax, d.max, b.dataMax));
            if (e)
                !a && O(b.min, o(b.dataMin, b.min)) <= 0 && mb(10, 1), b.min = ja(ma(b.min)), b.max = ja(ma(b.max));
            if (b.range && (b.userMin = b.min = x(b.min, b.max - b.range), b.userMax = b.max, a))
                b.range = null;
            b.adjustForMinRange();
            if (!p && !b.usePercentage && !h && s(b.min) && s(b.max)) {
                c = b.max - b.min || 1;
                if (!s(d.min) && !s(b.userMin) && k && (b.dataMin < 0 || !b.ignoreMinPadding))
                    b.min -= c * k;
                if (!s(d.max) && !s(b.userMax) && j && (b.dataMax > 0 || !b.ignoreMaxPadding))
                    b.max += c * j
            }
            b.tickInterval = b.min === b.max || b.min === void 0 || b.max === void 0 ? 1 : h && !l && m === b.linkedParent.options.tickPixelInterval ? b.linkedParent.tickInterval : o(l, p ? 1 : (b.max - b.min) * m / (b.len || 1));
            g && !a && n(b.series, function(a) {
                a.processData(b.min !== b.oldMin || b.max !== b.oldMax)
            });
            b.setAxisTranslation();
            b.beforeSetTickPositions && b.beforeSetTickPositions();
            if (b.postProcessTickInterval)
                b.tickInterval = b.postProcessTickInterval(b.tickInterval);
            if (!f && !e && (a = L.pow(10, W(L.log(b.tickInterval) / L.LN10)), !s(d.tickInterval)))
                b.tickInterval = gb(b.tickInterval, null, a, d);
            b.minorTickInterval = d.minorTickInterval === "auto" && b.tickInterval ? b.tickInterval / 5 : d.minorTickInterval;
            b.tickPositions = i = d.tickPositions || i && i.apply(b, [b.min, b.max]);
            if (!i)
                i = f ? (b.getNonLinearTimeTicks || Pb)(Ob(b.tickInterval, d.units), b.min, b.max, d.startOfWeek, b.ordinalPositions, b.closestPointRange, !0) : e ? b.getLogTickPositions(b.tickInterval, b.min, b.max) : b.getLinearTickPositions(b.tickInterval, b.min, b.max), b.tickPositions = i;
            if (!h)
                e = i[0], f = i[i.length - 1], d.startOnTick ? b.min = e : b.min > e && i.shift(), d.endOnTick ? b.max = f : b.max < f && i.pop()
        },setMaxTicks: function() {
            var a = this.chart, b = a.maxTicks, c = this.tickPositions, d = this.xOrY;
            b || (b = {x: 0,y: 0});
            if (!this.isLinked && !this.isDatetimeAxis && c.length > b[d] && this.options.alignTicks !== !1)
                b[d] = c.length;
            a.maxTicks = b
        },adjustTickAmount: function() {
            var a = this.xOrY, b = this.tickPositions, c = this.chart.maxTicks;
            if (c && c[a] && !this.isDatetimeAxis && !this.categories && !this.isLinked && this.options.alignTicks !== !1) {
                var d = this.tickAmount, e = b.length;
                this.tickAmount = a = c[a];
                if (e < a) {
                    for (; b.length < a; )
                        b.push(ja(b[b.length - 1] + this.tickInterval));
                    this.transA *= (e - 1) / (a - 1);
                    this.max = b[b.length - 1]
                }
                if (s(d) && a !== d)
                    this.isDirty = !0
            }
        },setScale: function() {
            var a = this.stacks, b, c, d, e;
            this.oldMin = this.min;
            this.oldMax = this.max;
            this.oldAxisLength = this.len;
            this.setAxisSize();
            e = this.len !== this.oldAxisLength;
            n(this.series, function(a) {
                if (a.isDirtyData || a.isDirty || a.xAxis.isDirty)
                    d = !0
            });
            if (e || d || this.isLinked || this.userMin !== this.oldUserMin || this.userMax !== this.oldUserMax)
                if (this.getSeriesExtremes(), this.setTickPositions(), this.oldUserMin = this.userMin, this.oldUserMax = this.userMax, !this.isDirty)
                    this.isDirty = e || this.min !== this.oldMin || this.max !== this.oldMax;
            if (!this.isXAxis)
                for (b in a)
                    for (c in a[b])
                        a[b][c].cum = a[b][c].total;
            this.setMaxTicks()
        },setExtremes: function(a, b, c, d, e) {
            var f = this, g = f.chart, c = o(c, !0), e = u(e, {min: a,max: b});
            E(f, "setExtremes", e, function() {
                f.userMin = a;
                f.userMax = b;
                f.isDirtyExtremes = !0;
                c && g.redraw(d)
            })
        },setAxisSize: function() {
            var a = this.chart, b = this.options, c = b.offsetLeft || 0, d = b.offsetRight || 0;
            this.left = o(b.left, a.plotLeft + c);
            this.top = o(b.top, a.plotTop);
            this.width = o(b.width, a.plotWidth - c + d);
            this.height = o(b.height, a.plotHeight);
            this.bottom = a.chartHeight - this.height - this.top;
            this.right = a.chartWidth - this.width - this.left;
            this.len = x(this.horiz ? this.width : this.height, 0)
        },getExtremes: function() {
            var a = this.isLog;
            return {min: a ? ja(ba(this.min)) : this.min,max: a ? ja(ba(this.max)) : this.max,dataMin: this.dataMin,dataMax: this.dataMax,userMin: this.userMin,userMax: this.userMax}
        },getThreshold: function(a) {
            var b = this.isLog, c = b ? ba(this.min) : this.min, b = b ? ba(this.max) : this.max;
            c > a || a === null ? a = c : b < a && (a = b);
            return this.translate(a, 0, 1, 0, 1)
        },addPlotBandOrLine: function(a) {
            a = (new nb(this, a)).render();
            this.plotLinesAndBands.push(a);
            return a
        },getOffset: function() {
            var a = this, b = a.chart, c = b.renderer, d = a.options, e = a.tickPositions, f = a.ticks, g = a.horiz, h = a.side, i, j = 0, k, l = 0, m = d.title, p = d.labels, q = 0, fa = b.axisOffset, r = [-1, 1, 1, -1][h], y;
            a.hasData = b = a.series.length && s(a.min) && s(a.max);
            a.showAxis = i = b || o(d.showEmpty, !0);
            if (!a.axisGroup)
                a.axisGroup = c.g("axis").attr({zIndex: d.zIndex || 7}).add(), a.gridGroup = c.g("grid").attr({zIndex: d.gridZIndex || 1}).add();
            if (b || a.isLinked)
                n(e, function(b) {
                    f[b] ? f[b].addLabel() : f[b] = new Sa(a, b)
                }), n(e, function(a) {
                    if (h === 0 || h === 2 || {1: "left",3: "right"}[h] === p.align)
                        q = x(f[a].getLabelSize(), q)
                }), a.staggerLines && (q += (a.staggerLines - 1) * 16);
            else
                for (y in f)
                    f[y].destroy(), delete f[y];
            if (m && m.text) {
                if (!a.axisTitle)
                    a.axisTitle = c.text(m.text, 0, 0, m.useHTML).attr({zIndex: 7,rotation: m.rotation || 0,align: m.textAlign || {low: "left",middle: "center",high: "right"}[m.align]}).css(m.style).add(a.axisGroup), a.axisTitle.isNew = !0;
                if (i)
                    j = a.axisTitle.getBBox()[g ? "height" : "width"], l = o(m.margin, g ? 5 : 10), k = m.offset;
                a.axisTitle[i ? "show" : "hide"]()
            }
            a.offset = r * o(d.offset, fa[h]);
            a.axisTitleMargin = o(k, q + l + (h !== 2 && q && r * d.labels[g ? "y" : "x"]));
            fa[h] = x(fa[h], a.axisTitleMargin + j + r * a.offset)
        },getLinePath: function(a) {
            var b = this.chart, c = this.opposite, d = this.offset, e = this.horiz, f = this.left + (c ? this.width : 0) + d, c = b.chartHeight - this.bottom - (c ? this.height : 0) + d;
            return b.renderer.crispLine(["M", e ? this.left : f, e ? c : this.top, "L", e ? b.chartWidth - this.right : f, e ? c : b.chartHeight - this.bottom], a)
        },getTitlePosition: function() {
            var a = this.horiz, b = this.left, c = this.top, d = this.len, e = this.options.title, f = a ? b : c, g = this.opposite, h = this.offset, i = w(e.style.fontSize || 12), d = {low: f + (a ? 0 : d),middle: f + d / 2,high: f + (a ? d : 0)}[e.align], b = (a ? c + this.height : b) + (a ? 1 : -1) * (g ? -1 : 1) * this.axisTitleMargin + (this.side === 2 ? i : 0);
            return {x: a ? d : b + (g ? this.width : 0) + h + (e.x || 0),y: a ? b - (g ? this.height : 0) + h : d + (e.y || 0)}
        },render: function() {
            var a = this, b = a.chart, c = b.renderer, d = a.options, e = a.isLog, f = a.isLinked, g = a.tickPositions, h = a.axisTitle, i = a.stacks, j = a.ticks, k = a.minorTicks, l = a.alternateBands, m = d.stackLabels, p = d.alternateGridColor, q = d.lineWidth, o, r = b.hasRendered && s(a.oldMin) && !isNaN(a.oldMin), y = a.showAxis, t, u;
            if (a.hasData || f)
                if (a.minorTickInterval && !a.categories && n(a.getMinorTickPositions(), function(b) {
                    k[b] || (k[b] = new Sa(a, b, "minor"));
                    r && k[b].isNew && k[b].render(null, !0);
                    k[b].isActive = !0;
                    k[b].render()
                }), n(g.slice(1).concat([g[0]]), function(b, c) {
                    c = c === g.length - 1 ? 0 : c + 1;
                    if (!f || b >= a.min && b <= a.max)
                        j[b] || (j[b] = new Sa(a, b)), r && j[b].isNew && j[b].render(c, !0), j[b].isActive = !0, j[b].render(c)
                }), p && n(g, function(b, c) {
                    if (c % 2 === 0 && b < a.max)
                        l[b] || (l[b] = new nb(a)), t = b, u = g[c +
                        1] !== A ? g[c + 1] : a.max, l[b].options = {from: e ? ba(t) : t,to: e ? ba(u) : u,color: p}, l[b].render(), l[b].isActive = !0
                }), !a._addedPlotLB)
                    n((d.plotLines || []).concat(d.plotBands || []), function(b) {
                        a.addPlotBandOrLine(b)
                    }), a._addedPlotLB = !0;
            n([j, k, l], function(a) {
                for (var b in a)
                    a[b].isActive ? a[b].isActive = !1 : (a[b].destroy(), delete a[b])
            });
            if (q)
                o = a.getLinePath(q), a.axisLine ? a.axisLine.animate({d: o}) : a.axisLine = c.path(o).attr({stroke: d.lineColor,"stroke-width": q,zIndex: 7}).add(), a.axisLine[y ? "show" : "hide"]();
            if (h && y)
                h[h.isNew ? "attr" : "animate"](a.getTitlePosition()), h.isNew = !1;
            if (m && m.enabled) {
                var v, H, d = a.stackTotalGroup;
                if (!d)
                    a.stackTotalGroup = d = c.g("stack-labels").attr({visibility: "visible",zIndex: 6}).add();
                d.translate(b.plotLeft, b.plotTop);
                for (v in i)
                    for (H in b = i[v], b)
                        b[H].render(d)
            }
            a.isDirty = !1
        },removePlotBandOrLine: function(a) {
            for (var b = this.plotLinesAndBands, c = b.length; c--; )
                b[c].id === a && b[c].destroy()
        },setTitle: function(a, b) {
            var c = this.chart, d = this.options;
            d.title = C(d.title, a);
            this.axisTitle = void 0;
            this.isDirty = !0;
            o(b, !0) && c.redraw()
        },redraw: function() {
            var a = this.chart;
            a.tracker.resetTracker && a.tracker.resetTracker(!0);
            this.render();
            n(this.plotLinesAndBands, function(a) {
                a.render()
            });
            n(this.series, function(a) {
                a.isDirty = !0
            })
        },setCategories: function(a, b) {
            var c = this.chart;
            this.categories = this.userOptions.categories = a;
            n(this.series, function(a) {
                a.translate();
                a.setTooltipPoints(!0)
            });
            this.isDirty = !0;
            o(b, !0) && c.redraw()
        },destroy: function() {
            var a = this, b = a.stacks, c;
            P(a);
            for (c in b)
                Ba(b[c]), b[c] = null;
            n([a.ticks, a.minorTicks, a.alternateBands, a.plotLinesAndBands], function(a) {
                Ba(a)
            });
            n(["stackTotalGroup", "axisLine", "axisGroup", "gridGroup", "axisTitle"], function(b) {
                a[b] && (a[b] = a[b].destroy())
            })
        }};
    pb.prototype = {destroy: function() {
            n(this.crosshairs, function(a) {
                a && a.destroy()
            });
            if (this.label)
                this.label = this.label.destroy()
        },move: function(a, b) {
            var c = this;
            c.currentX = c.tooltipIsHidden ? a : (2 * c.currentX + a) / 3;
            c.currentY = c.tooltipIsHidden ? b : (c.currentY + b) / 2;
            c.label.attr({x: c.currentX,y: c.currentY});
            c.tooltipTick = M(a - c.currentX) > 1 || M(b - c.currentY) > 1 ? function() {
                c.move(a, b)
            } : null
        },hide: function() {
            if (!this.tooltipIsHidden) {
                var a = this.chart.hoverPoints;
                this.label.hide();
                a && n(a, function(a) {
                    a.setState()
                });
                this.chart.hoverPoints = null;
                this.tooltipIsHidden = !0
            }
        },hideCrosshairs: function() {
            n(this.crosshairs, function(a) {
                a && a.hide()
            })
        },getAnchor: function(a, b) {
            var c, d = this.chart, e = d.inverted, f = 0, g = 0, a = na(a);
            c = a[0].tooltipPos;
            c || (n(a, function(a) {
                f += a.plotX;
                g += a.plotLow ? (a.plotLow + a.plotHigh) / 2 : a.plotY
            }), f /= a.length, g /= a.length, c = [e ? d.plotWidth -
                g : f, this.shared && !e && a.length > 1 && b ? b.chartY - d.plotTop : e ? d.plotHeight - f : g]);
            return Ea(c, t)
        },getPosition: function(a, b, c) {
            var d = this.chart, e = d.plotLeft, f = d.plotTop, g = d.plotWidth, h = d.plotHeight, i = o(this.options.distance, 12), j = c.plotX, c = c.plotY, d = j + e + (d.inverted ? i : -a - i), k = c - b + f + 15, l;
            d < 7 && (d = e + j + i);
            d + a > e + g && (d -= d + a - (e + g), k = c - b + f - i, l = !0);
            k < f + 5 && (k = f + 5, l && c >= k && c <= k + b && (k = c + f + i));
            k + b > f + h && (k = x(f, f + h - b - i));
            return {x: d,y: k}
        },refresh: function(a, b) {
            function c() {
                var a = this.points || na(this), b = a[0].series, c;
                c = [b.tooltipHeaderFormatter(a[0].key)];
                n(a, function(a) {
                    b = a.series;
                    c.push(b.tooltipFormatter && b.tooltipFormatter(a) || a.point.tooltipFormatter(b.tooltipOptions.pointFormat))
                });
                c.push(f.footerFormat || "");
                return c.join("")
            }
            var d = this.chart, e = this.label, f = this.options, g, h, i, j = {}, k, l = [];
            k = f.formatter || c;
            var j = d.hoverPoints, m, p = f.crosshairs;
            i = this.shared;
            h = this.getAnchor(a, b);
            g = h[0];
            h = h[1];
            i && (!a.series || !a.series.noSharedTooltip) ? (j && n(j, function(a) {
                a.setState()
            }), d.hoverPoints = a, n(a, function(a) {
                a.setState("hover");
                l.push(a.getLabelConfig())
            }), j = {x: a[0].category,y: a[0].y}, j.points = l, a = a[0]) : j = a.getLabelConfig();
            k = k.call(j);
            j = a.series;
            i = i || !j.isCartesian || j.tooltipOutsidePlot || d.isInsidePlot(g, h);
            k === !1 || !i ? this.hide() : (this.tooltipIsHidden && e.show(), e.attr({text: k}), m = f.borderColor || a.color || j.color || "#606060", e.attr({stroke: m}), e = (f.positioner || this.getPosition).call(this, e.width, e.height, {plotX: g,plotY: h}), this.move(t(e.x), t(e.y)), this.tooltipIsHidden = !1);
            if (p) {
                p = na(p);
                for (e = p.length; e--; )
                    if (i = a.series[e ? "yAxis" : "xAxis"], p[e] && i)
                        if (i = i.getPlotLinePath(e ? o(a.stackY, a.y) : a.x, 1), this.crosshairs[e])
                            this.crosshairs[e].attr({d: i,visibility: "visible"});
                        else {
                            j = {"stroke-width": p[e].width || 1,stroke: p[e].color || "#C0C0C0",zIndex: p[e].zIndex || 2};
                            if (p[e].dashStyle)
                                j.dashstyle = p[e].dashStyle;
                            this.crosshairs[e] = d.renderer.path(i).attr(j).add()
                        }
            }
            E(d, "tooltipRefresh", {text: k,x: g + d.plotLeft,y: h + d.plotTop,borderColor: m})
        },tick: function() {
            this.tooltipTick && this.tooltipTick()
        }};
    Db.prototype = {normalizeMouseEvent: function(a) {
            var b, c, d, a = a || N.event;
            if (!a.target)
                a.target = a.srcElement;
            if (a.originalEvent)
                a = a.originalEvent;
            if (a.event)
                a = a.event;
            d = a.touches ? a.touches.item(0) : a;
            this.chartPosition = b = Jb(this.chart.container);
            d.pageX === A ? (c = a.x, b = a.y) : (c = d.pageX - b.left, b = d.pageY - b.top);
            return u(a, {chartX: t(c),chartY: t(b)})
        },getMouseCoordinates: function(a) {
            var b = {xAxis: [],yAxis: []}, c = this.chart;
            n(c.axes, function(d) {
                var e = d.isXAxis;
                b[e ? "xAxis" : "yAxis"].push({axis: d,value: d.translate((c.inverted ? !e : e) ? a.chartX - c.plotLeft : c.plotHeight - a.chartY + c.plotTop, !0)})
            });
            return b
        },onmousemove: function(a) {
            var b = this.chart, c = b.series, d, e, f = b.hoverPoint, g = b.hoverSeries, h, i, j = b.chartWidth, k = b.inverted ? b.plotHeight + b.plotTop - a.chartY : a.chartX - b.plotLeft;
            if (b.tooltip && this.options.tooltip.shared && (!g || !g.noSharedTooltip)) {
                e = [];
                h = c.length;
                for (i = 0; i < h; i++)
                    if (c[i].visible && c[i].options.enableMouseTracking !== !1 && !c[i].noSharedTooltip && c[i].tooltipPoints.length)
                        d = c[i].tooltipPoints[k], d._dist = M(k - d.plotX), j = O(j, d._dist), e.push(d);
                for (h = e.length; h--; )
                    e[h]._dist > j && e.splice(h, 1);
                if (e.length && e[0].plotX !== this.hoverX)
                    b.tooltip.refresh(e, a), this.hoverX = e[0].plotX
            }
            if (g && g.tracker && (d = g.tooltipPoints[k]) && d !== f)
                d.onMouseOver()
        },resetTracker: function(a) {
            var b = this.chart, c = b.hoverSeries, d = b.hoverPoint, e = b.hoverPoints || d, b = b.tooltip;
            (a = a && b && e) && na(e)[0].plotX === A && (a = !1);
            if (a)
                b.refresh(e);
            else {
                if (d)
                    d.onMouseOut();
                if (c)
                    c.onMouseOut();
                b && (b.hide(), b.hideCrosshairs());
                this.hoverX = null
            }
        },setDOMEvents: function() {
            function a() {
                if (b.selectionMarker) {
                    var f = {xAxis: [],yAxis: []}, g = b.selectionMarker.getBBox(), h = g.x - c.plotLeft, l = g.y - c.plotTop, m;
                    e && (n(c.axes, function(a) {
                        if (a.options.zoomEnabled !== !1) {
                            var b = a.isXAxis, d = c.inverted ? !b : b, e = a.translate(d ? h : c.plotHeight - l - g.height, !0, 0, 0, 1), d = a.translate(d ? h + g.width : c.plotHeight - l, !0, 0, 0, 1);
                            !isNaN(e) && !isNaN(d) && (f[b ? "xAxis" : "yAxis"].push({axis: a,min: O(e, d),max: x(e, d)}), m = !0)
                        }
                    }), m && E(c, "selection", f, function(a) {
                        c.zoom(a)
                    }));
                    b.selectionMarker = b.selectionMarker.destroy()
                }
                if (c)
                    F(d, {cursor: "auto"}), c.cancelClick = e, c.mouseIsDown = e = !1;
                P(B, ea ? "touchend" : "mouseup", a)
            }
            var b = this, c = b.chart, d = c.container, e, f = b.zoomX && !c.inverted || b.zoomY && c.inverted, g = b.zoomY && !c.inverted || b.zoomX && c.inverted;
            b.hideTooltipOnMouseMove = function(a) {
                Kb(a);
                b.chartPosition && c.hoverSeries && c.hoverSeries.isCartesian && !c.isInsidePlot(a.pageX - b.chartPosition.left - c.plotLeft, a.pageY - b.chartPosition.top - c.plotTop) && b.resetTracker()
            };
            b.hideTooltipOnMouseLeave = function() {
                b.resetTracker();
                b.chartPosition = null
            };
            d.onmousedown = function(d) {
                d = b.normalizeMouseEvent(d);
                !ea && d.preventDefault && d.preventDefault();
                c.mouseIsDown = !0;
                c.cancelClick = !1;
                c.mouseDownX = b.mouseDownX = d.chartX;
                b.mouseDownY = d.chartY;
                I(B, ea ? "touchend" : "mouseup", a)
            };
            var h = function(a) {
                if (!a || !(a.touches && a.touches.length > 1)) {
                    a = b.normalizeMouseEvent(a);
                    if (!ea)
                        a.returnValue = !1;
                    var d = a.chartX, h = a.chartY, l = !c.isInsidePlot(d - c.plotLeft, h - c.plotTop);
                    ea && a.type === "touchstart" && (z(a.target, "isTracker") ? c.runTrackerClick || a.preventDefault() : !c.runChartClick && !l && a.preventDefault());
                    if (l)
                        d < c.plotLeft ? d = c.plotLeft : d > c.plotLeft + c.plotWidth && (d = c.plotLeft + c.plotWidth), h < c.plotTop ? h = c.plotTop : h > c.plotTop + c.plotHeight && (h = c.plotTop + c.plotHeight);
                    if (c.mouseIsDown && a.type !== "touchstart") {
                        if (e = Math.sqrt(Math.pow(b.mouseDownX - d, 2) + Math.pow(b.mouseDownY - h, 2)), e > 10) {
                            a = c.isInsidePlot(b.mouseDownX - c.plotLeft, b.mouseDownY - c.plotTop);
                            if (c.hasCartesianSeries && (b.zoomX || b.zoomY) && a && !b.selectionMarker)
                                b.selectionMarker = c.renderer.rect(c.plotLeft, c.plotTop, f ? 1 : c.plotWidth, g ? 1 : c.plotHeight, 0).attr({fill: b.options.chart.selectionMarkerFill || "rgba(69,114,167,0.25)",zIndex: 7}).add();
                            if (b.selectionMarker && f) {
                                var m = d - b.mouseDownX;
                                b.selectionMarker.attr({width: M(m),x: (m > 0 ? 0 : m) + b.mouseDownX})
                            }
                            b.selectionMarker && g && (h -= b.mouseDownY, b.selectionMarker.attr({height: M(h),y: (h > 0 ? 0 : h) + b.mouseDownY}));
                            a && !b.selectionMarker && b.options.chart.panning && c.pan(d)
                        }
                    } else if (!l)
                        b.onmousemove(a);
                    return l || !c.hasCartesianSeries
                }
            };
            d.onmousemove = h;
            I(d, "mouseleave", b.hideTooltipOnMouseLeave);
            I(B, "mousemove", b.hideTooltipOnMouseMove);
            d.ontouchstart = function(a) {
                if (b.zoomX || b.zoomY)
                    d.onmousedown(a);
                h(a)
            };
            d.ontouchmove = h;
            d.ontouchend = function() {
                e && b.resetTracker()
            };
            d.onclick = function(a) {
                var d = c.hoverPoint, e, f, a = b.normalizeMouseEvent(a);
                a.cancelBubble = !0;
                if (!c.cancelClick)
                    d && (z(a.target, "isTracker") || z(a.target.parentNode, "isTracker")) ? (e = d.plotX, f = d.plotY, u(d, {pageX: b.chartPosition.left + c.plotLeft + (c.inverted ? c.plotWidth - f : e),pageY: b.chartPosition.top + c.plotTop + (c.inverted ? c.plotHeight - e : f)}), E(d.series, "click", u(a, {point: d})), d.firePointEvent("click", a)) : (u(a, b.getMouseCoordinates(a)), c.isInsidePlot(a.chartX - c.plotLeft, a.chartY -
                    c.plotTop) && E(c, "click", a))
            }
        },destroy: function() {
            var a = this.chart, b = a.container;
            if (a.trackerGroup)
                a.trackerGroup = a.trackerGroup.destroy();
            P(b, "mouseleave", this.hideTooltipOnMouseLeave);
            P(B, "mousemove", this.hideTooltipOnMouseMove);
            b.onclick = b.onmousedown = b.onmousemove = b.ontouchstart = b.ontouchend = b.ontouchmove = null;
            clearInterval(this.tooltipInterval)
        },init: function(a, b) {
            if (!a.trackerGroup)
                a.trackerGroup = a.renderer.g("tracker").attr({zIndex: 9}).add();
            if (b.enabled)
                a.tooltip = new pb(a, b), this.tooltipInterval = setInterval(function() {
                    a.tooltip.tick()
                }, 32);
            this.setDOMEvents()
        }};
    qb.prototype = {init: function(a) {
            var b = this, c = b.options = a.options.legend;
            if (c.enabled) {
                var d = c.itemStyle, e = o(c.padding, 8), f = c.itemMarginTop || 0;
                b.baseline = w(d.fontSize) + 3 + f;
                b.itemStyle = d;
                b.itemHiddenStyle = C(d, c.itemHiddenStyle);
                b.itemMarginTop = f;
                b.padding = e;
                b.initialItemX = e;
                b.initialItemY = e - 5;
                b.maxItemWidth = 0;
                b.chart = a;
                b.itemHeight = 0;
                b.lastLineHeight = 0;
                b.render();
                I(b.chart, "endResize", function() {
                    b.positionCheckboxes()
                })
            }
        },colorizeItem: function(a, b) {
            var c = this.options, d = a.legendItem, e = a.legendLine, f = a.legendSymbol, g = this.itemHiddenStyle.color, c = b ? c.itemStyle.color : g, g = b ? a.color : g;
            d && d.css({fill: c});
            e && e.attr({stroke: g});
            f && f.attr({stroke: g,fill: g})
        },positionItem: function(a) {
            var b = this.options, c = b.symbolPadding, b = !b.rtl, d = a._legendItemPos, e = d[0], d = d[1], f = a.checkbox;
            a.legendGroup && a.legendGroup.translate(b ? e : this.legendWidth - e - 2 * c - 4, d);
            if (f)
                f.x = e, f.y = d
        },destroyItem: function(a) {
            var b = a.checkbox;
            n(["legendItem", "legendLine", "legendSymbol", "legendGroup"], function(b) {
                a[b] && a[b].destroy()
            });
            b && Qa(a.checkbox)
        },destroy: function() {
            var a = this.group, b = this.box;
            if (b)
                this.box = b.destroy();
            if (a)
                this.group = a.destroy()
        },positionCheckboxes: function() {
            var a = this;
            n(a.allItems, function(b) {
                var c = b.checkbox, d = a.group.alignAttr;
                c && F(c, {left: d.translateX + b.legendItemWidth + c.x - 20 + "px",top: d.translateY + c.y + 3 + "px"})
            })
        },renderItem: function(a) {
            var q;
            var b = this, c = b.chart, d = c.renderer, e = b.options, f = e.layout === "horizontal", g = e.symbolWidth, h = e.symbolPadding, i = b.itemStyle, j = b.itemHiddenStyle, k = b.padding, l = !e.rtl, m = e.width, p = e.itemMarginBottom || 0, n = b.itemMarginTop, o = b.initialItemX, r = a.legendItem, s = a.series || a, t = s.options, u = t.showCheckbox;
            if (!r && (a.legendGroup = d.g("legend-item").attr({zIndex: 1}).add(b.scrollGroup), s.drawLegendSymbol(b, a), a.legendItem = r = d.text(e.labelFormatter.call(a), l ? g + h : -h, b.baseline, e.useHTML).css(C(a.visible ? i : j)).attr({align: l ? "left" : "right",zIndex: 2}).add(a.legendGroup), a.legendGroup.on("mouseover", function() {
                a.setState("hover");
                r.css(b.options.itemHoverStyle)
            }).on("mouseout", function() {
                r.css(a.visible ? i : j);
                a.setState()
            }).on("click", function(b) {
                var c = function() {
                    a.setVisible()
                }, b = {browserEvent: b};
                a.firePointEvent ? a.firePointEvent("legendItemClick", b, c) : E(a, "legendItemClick", b, c)
            }), b.colorizeItem(a, a.visible), t && u))
                a.checkbox = S("input", {type: "checkbox",checked: a.selected,defaultChecked: a.selected}, e.itemCheckboxStyle, c.container), I(a.checkbox, "click", function(b) {
                    E(a, "checkboxClick", {checked: b.target.checked}, function() {
                        a.select()
                    })
                });
            d = r.getBBox();
            q = a.legendItemWidth = e.itemWidth || g + h + d.width + k + (u ? 20 : 0), e = q;
            b.itemHeight = g = d.height;
            if (f && b.itemX - o + e > (m || c.chartWidth - 2 * k - o))
                b.itemX = o, b.itemY += n + b.lastLineHeight + p, b.lastLineHeight = 0;
            b.maxItemWidth = x(b.maxItemWidth, e);
            b.lastItemY = n + b.itemY + p;
            b.lastLineHeight = x(g, b.lastLineHeight);
            a._legendItemPos = [b.itemX, b.itemY];
            f ? b.itemX += e : (b.itemY += n + g + p, b.lastLineHeight = g);
            b.offsetWidth = m || x(f ? b.itemX - o : e, b.offsetWidth)
        },render: function() {
            var a = this, b = a.chart, c = b.renderer, d = a.group, e, f, g, h, i = a.box, j = a.options, k = a.padding, l = j.borderWidth, m = j.backgroundColor;
            a.itemX = a.initialItemX;
            a.itemY = a.initialItemY;
            a.offsetWidth = 0;
            a.lastItemY = 0;
            if (!d)
                a.group = d = c.g("legend").attr({zIndex: 7}).add(), a.contentGroup = c.g().attr({zIndex: 1}).add(d), a.scrollGroup = c.g().add(a.contentGroup), a.clipRect = c.clipRect(0, 0, 9999, b.chartHeight), a.contentGroup.clip(a.clipRect);
            e = [];
            n(b.series, function(a) {
                var b = a.options;
                b.showInLegend && (e = e.concat(a.legendItems || (b.legendType === "point" ? a.data : a)))
            });
            Qb(e, function(a, b) {
                return (a.options.legendIndex || 0) - (b.options.legendIndex || 0)
            });
            j.reversed && e.reverse();
            a.allItems = e;
            a.display = f = !!e.length;
            n(e, function(b) {
                a.renderItem(b)
            });
            g = j.width || a.offsetWidth;
            h = a.lastItemY + a.lastLineHeight;
            h = a.handleOverflow(h);
            if (l || m) {
                g += k;
                h += k;
                if (i) {
                    if (g > 0 && h > 0)
                        i[i.isNew ? "attr" : "animate"](i.crisp(null, null, null, g, h)), i.isNew = !1
                } else
                    a.box = i = c.rect(0, 0, g, h, j.borderRadius, l || 0).attr({stroke: j.borderColor,"stroke-width": l || 0,fill: m || U}).add(d).shadow(j.shadow), i.isNew = !0;
                i[f ? "show" : "hide"]()
            }
            a.legendWidth = g;
            a.legendHeight = h;
            n(e, function(b) {
                a.positionItem(b)
            });
            f && d.align(u({width: g,height: h}, j), !0, b.spacingBox);
            b.isResizing || this.positionCheckboxes()
        },handleOverflow: function(a) {
            var b = this, c = this.chart, d = c.renderer, e = this.options, f = e.y, f = c.spacingBox.height + (e.verticalAlign === "top" ? -f : f) - this.padding, g = e.maxHeight, h = this.clipRect, i = e.navigation, j = o(i.animation, !0), k = i.arrowSize || 12, l = this.nav;
            e.layout === "horizontal" && (f /= 2);
            g && (f = O(f, g));
            if (a > f) {
                this.clipHeight = c = f - 20;
                this.pageCount = wa(a / c);
                this.currentPage = o(this.currentPage, 1);
                this.fullHeight = a;
                h.attr({height: c});
                if (!l)
                    this.nav = l = d.g().attr({zIndex: 1}).add(this.group), this.up = d.symbol("triangle", 0, 0, k, k).on("click", function() {
                        b.scroll(-1, j)
                    }).add(l), this.pager = d.text("", 15, 10).css(i.style).add(l), this.down = d.symbol("triangle-down", 0, 0, k, k).on("click", function() {
                        b.scroll(1, j)
                    }).add(l);
                b.scroll(0);
                a = f
            } else
                l && (h.attr({height: c.chartHeight}), l.hide(), this.scrollGroup.attr({translateY: 1}));
            return a
        },scroll: function(a, b) {
            var c = this.pageCount, d = this.currentPage + a, e = this.clipHeight, f = this.options.navigation, g = f.activeColor, f = f.inactiveColor, h = this.pager, i = this.padding;
            d > c && (d = c);
            if (d > 0)
                b !== A && ua(b, this.chart), this.nav.attr({translateX: i,translateY: e + 7,visibility: "visible"}), this.up.attr({fill: d === 1 ? f : g}).css({cursor: d === 1 ? "default" : "pointer"}), h.attr({text: d + "/" + this.pageCount}), this.down.attr({x: 18 + this.pager.getBBox().width,fill: d === c ? f : g}).css({cursor: d === c ? "default" : "pointer"}), this.scrollGroup.animate({translateY: -O(e * (d - 1), this.fullHeight - e + i) + 1}), h.attr({text: d + "/" + c}), this.currentPage = d
        }};
    rb.prototype = {initSeries: function(a) {
            var b = this.options.chart, b = new Y[a.type || b.type || b.defaultSeriesType];
            b.init(this, a);
            return b
        },addSeries: function(a, b, c) {
            var d = this;
            a && (ua(c, d), b = o(b, !0), E(d, "addSeries", {options: a}, function() {
                d.initSeries(a);
                d.isDirtyLegend = !0;
                b && d.redraw()
            }))
        },isInsidePlot: function(a, b) {
            return a >= 0 && a <= this.plotWidth && b >= 0 && b <= this.plotHeight
        },adjustTickAmounts: function() {
            this.options.chart.alignTicks !== !1 && n(this.axes, function(a) {
                a.adjustTickAmount()
            });
            this.maxTicks = null
        },redraw: function(a) {
            var b = this.axes, c = this.series, d = this.tracker, e = this.legend, f = this.isDirtyLegend, g, h = this.isDirtyBox, i = c.length, j = i, k = this.clipRect, l = this.renderer, m = l.isHidden();
            ua(a, this);
            for (m && this.cloneRenderTo(); j--; )
                if (a = c[j], a.isDirty && a.options.stacking) {
                    g = !0;
                    break
                }
            if (g)
                for (j = i; j--; )
                    if (a = c[j], a.options.stacking)
                        a.isDirty = !0;
            n(c, function(a) {
                a.isDirty && a.options.legendType === "point" && (f = !0)
            });
            if (f && e.options.enabled)
                e.render(), this.isDirtyLegend = !1;
            if (this.hasCartesianSeries) {
                if (!this.isResizing)
                    this.maxTicks = null, n(b, function(a) {
                        a.setScale()
                    });
                this.adjustTickAmounts();
                this.getMargins();
                n(b, function(a) {
                    if (a.isDirtyExtremes)
                        a.isDirtyExtremes = !1, E(a, "afterSetExtremes", a.getExtremes());
                    if (a.isDirty || h || g)
                        a.redraw(), h = !0
                })
            }
            h && (this.drawChartBox(), k && (Fa(k), k.animate({width: this.plotSizeX,height: this.plotSizeY + 1})));
            n(c, function(a) {
                a.isDirty && a.visible && (!a.isCartesian || a.xAxis) && a.redraw()
            });
            d && d.resetTracker && d.resetTracker(!0);
            l.draw();
            E(this, "redraw");
            m && this.cloneRenderTo(!0)
        },showLoading: function(a) {
            var b = this.options, c = this.loadingDiv, d = b.loading;
            if (!c)
                this.loadingDiv = c = S(ia, {className: "highcharts-loading"}, u(d.style, {left: this.plotLeft + "px",top: this.plotTop + "px",width: this.plotWidth + "px",height: this.plotHeight + "px",zIndex: 10,display: U}), this.container), this.loadingSpan = S("span", null, d.labelStyle, c);
            this.loadingSpan.innerHTML = a || b.lang.loading;
            if (!this.loadingShown)
                F(c, {opacity: 0,display: ""}), eb(c, {opacity: d.style.opacity}, {duration: d.showDuration || 0}), this.loadingShown = !0
        },hideLoading: function() {
            var a = this.options, b = this.loadingDiv;
            b && eb(b, {opacity: 0}, {duration: a.loading.hideDuration || 100,complete: function() {
                    F(b, {display: U})
                }});
            this.loadingShown = !1
        },get: function(a) {
            var b = this.axes, c = this.series, d, e;
            for (d = 0; d < b.length; d++)
                if (b[d].options.id === a)
                    return b[d];
            for (d = 0; d < c.length; d++)
                if (c[d].options.id === a)
                    return c[d];
            for (d = 0; d < c.length; d++) {
                e = c[d].points || [];
                for (b = 0; b < e.length; b++)
                    if (e[b].id === a)
                        return e[b]
            }
            return null
        },getAxes: function() {
            var a = this, b = this.options, c = b.xAxis || {}, b = b.yAxis || {}, c = na(c);
            n(c, function(a, b) {
                a.index = b;
                a.isX = !0
            });
            b = na(b);
            n(b, function(a, b) {
                a.index = b
            });
            c = c.concat(b);
            n(c, function(b) {
                new ob(a, b)
            });
            a.adjustTickAmounts()
        },getSelectedPoints: function() {
            var a = [];
            n(this.series, function(b) {
                a = a.concat(ub(b.points, function(a) {
                    return a.selected
                }))
            });
            return a
        },getSelectedSeries: function() {
            return ub(this.series, function(a) {
                return a.selected
            })
        },showResetZoom: function() {
            var a = this, b = V.lang, c = a.options.chart.resetZoomButton, d = c.theme, e = d.states, f = c.relativeTo === "chart" ? null : {x: a.plotLeft,y: a.plotTop,width: a.plotWidth,height: a.plotHeight};
            this.resetZoomButton = a.renderer.button(b.resetZoom, null, null, function() {
                a.zoomOut()
            }, d, e && e.hover).attr({align: c.position.align,title: b.resetZoomTitle}).add().align(c.position, !1, f)
        },zoomOut: function() {
            var a = this, b = a.resetZoomButton;
            E(a, "selection", {resetSelection: !0}, function() {
                a.zoom()
            });
            if (b)
                a.resetZoomButton = b.destroy()
        },zoom: function(a) {
            var b = this, c = b.options.chart, d;
            b.resetZoomEnabled !== !1 && !b.resetZoomButton && b.showResetZoom();
            !a || a.resetSelection ? n(b.axes, function(a) {
                a.options.zoomEnabled !== !1 && (a.setExtremes(null, null, !1), d = !0)
            }) : n(a.xAxis.concat(a.yAxis), function(a) {
                var c = a.axis;
                if (b.tracker[c.isXAxis ? "zoomX" : "zoomY"])
                    c.setExtremes(a.min, a.max, !1), d = !0
            });
            d && b.redraw(o(c.animation, b.pointCount < 100))
        },pan: function(a) {
            var b = this.xAxis[0], c = this.mouseDownX, d = b.pointRange / 2, e = b.getExtremes(), f = b.translate(c - a, !0) + d, c = b.translate(c + this.plotWidth - a, !0) - d;
            (d = this.hoverPoints) && n(d, function(a) {
                a.setState()
            });
            b.series.length && f > O(e.dataMin, e.min) && c < x(e.dataMax, e.max) && b.setExtremes(f, c, !0, !1);
            this.mouseDownX = a;
            F(this.container, {cursor: "move"})
        },setTitle: function(a, b) {
            var c = this, d = c.options, e;
            c.chartTitleOptions = e = C(d.title, a);
            c.chartSubtitleOptions = d = C(d.subtitle, b);
            n([["title", a, e], ["subtitle", b, d]], function(a) {
                var b = a[0], d = c[b], e = a[1], a = a[2];
                d && e && (d = d.destroy());
                a && a.text && !d && (c[b] = c.renderer.text(a.text, 0, 0, a.useHTML).attr({align: a.align,"class": "highcharts-" + b,zIndex: a.zIndex || 4}).css(a.style).add().align(a, !1, c.spacingBox))
            })
        },getChartSize: function() {
            var a = this.options.chart, b = this.renderToClone || this.renderTo;
            this.containerWidth = Va(b, "width");
            this.containerHeight = Va(b, "height");
            this.chartWidth = a.width || this.containerWidth || 600;
            this.chartHeight = a.height || (this.containerHeight > 19 ? this.containerHeight : 400)
        },cloneRenderTo: function(a) {
            var b = this.renderToClone, c = this.container;
            a ? b && (this.renderTo.appendChild(c), Qa(b), delete this.renderToClone) : (c && this.renderTo.removeChild(c), this.renderToClone = b = this.renderTo.cloneNode(0), F(b, {position: "absolute",top: "-9999px",display: "block"}), B.body.appendChild(b), c && b.appendChild(c))
        },getContainer: function() {
            var a, b = this.options.chart, c, d, e;
            this.renderTo = a = b.renderTo;
            e = "highcharts-" + sb++;
            if (ra(a))
                this.renderTo = a = B.getElementById(a);
            a || mb(13, !0);
            a.innerHTML = "";
            a.offsetWidth || this.cloneRenderTo();
            this.getChartSize();
            c = this.chartWidth;
            d = this.chartHeight;
            this.container = a = S(ia, {className: "highcharts-container" + (b.className ? " " + b.className : ""),id: e}, u({position: "relative",overflow: "hidden",width: c + "px",height: d + "px",textAlign: "left",lineHeight: "normal"}, b.style), this.renderToClone || a);
            this.renderer = b.forExport ? new qa(a, c, d, !0) : new Ta(a, c, d);
            ga && this.renderer.create(this, a, c, d)
        },getMargins: function() {
            var a = this.options.chart, b = a.spacingTop, c = a.spacingRight, d = a.spacingBottom, a = a.spacingLeft, e, f = this.legend, g = this.optionsMarginTop, h = this.optionsMarginLeft, i = this.optionsMarginRight, j = this.optionsMarginBottom, k = this.chartTitleOptions, l = this.chartSubtitleOptions, m = this.options.legend, p = o(m.margin, 10), q = m.x, t = m.y, r = m.align, y = m.verticalAlign;
            this.resetMargins();
            e = this.axisOffset;
            if ((this.title || this.subtitle) && !s(this.optionsMarginTop))
                if (l = x(this.title && !k.floating && !k.verticalAlign && k.y || 0, this.subtitle && !l.floating && !l.verticalAlign && l.y || 0))
                    this.plotTop = x(this.plotTop, l + o(k.margin, 15) + b);
            if (f.display && !m.floating)
                if (r === "right") {
                    if (!s(i))
                        this.marginRight = x(this.marginRight, f.legendWidth - q + p + c)
                } else if (r === "left") {
                    if (!s(h))
                        this.plotLeft = x(this.plotLeft, f.legendWidth + q + p + a)
                } else if (y === "top") {
                    if (!s(g))
                        this.plotTop = x(this.plotTop, f.legendHeight + t + p + b)
                } else if (y === "bottom" && !s(j))
                    this.marginBottom = x(this.marginBottom, f.legendHeight - t + p + d);
            this.extraBottomMargin && (this.marginBottom += this.extraBottomMargin);
            this.extraTopMargin && (this.plotTop += this.extraTopMargin);
            this.hasCartesianSeries && n(this.axes, function(a) {
                a.getOffset()
            });
            s(h) || (this.plotLeft += e[3]);
            s(g) || (this.plotTop += e[0]);
            s(j) || (this.marginBottom += e[2]);
            s(i) || (this.marginRight += e[1]);
            this.setChartSize()
        },initReflow: function() {
            function a(a) {
                var g = c.width || Va(d, "width"), h = c.height || Va(d, "height"), a = a ? a.target : N;
                if (g && h && (a === N || a === B)) {
                    if (g !== b.containerWidth || h !== b.containerHeight)
                        clearTimeout(e), e = setTimeout(function() {
                            b.resize(g, h, !1)
                        }, 100);
                    b.containerWidth = g;
                    b.containerHeight = h
                }
            }
            var b = this, c = b.options.chart, d = b.renderTo, e;
            I(N, "resize", a);
            I(b, "destroy", function() {
                P(N, "resize", a)
            })
        },fireEndResize: function() {
            var a = this;
            a && E(a, "endResize", null, function() {
                a.isResizing -= 1
            })
        },resize: function(a, b, c) {
            var d, e, f = this.title, g = this.subtitle;
            this.isResizing += 1;
            ua(c, this);
            this.oldChartHeight = this.chartHeight;
            this.oldChartWidth = this.chartWidth;
            if (s(a))
                this.chartWidth = d = t(a);
            if (s(b))
                this.chartHeight = e = t(b);
            F(this.container, {width: d + "px",height: e + "px"});
            this.renderer.setSize(d, e, c);
            this.plotWidth = d - this.plotLeft - this.marginRight;
            this.plotHeight = e - this.plotTop - this.marginBottom;
            this.maxTicks = null;
            n(this.axes, function(a) {
                a.isDirty = !0;
                a.setScale()
            });
            n(this.series, function(a) {
                a.isDirty = !0
            });
            this.isDirtyBox = this.isDirtyLegend = !0;
            this.getMargins();
            a = this.spacingBox;
            f && f.align(null, null, a);
            g && g.align(null, null, a);
            this.redraw(c);
            this.oldChartHeight = null;
            E(this, "resize");
            Ra === !1 ? this.fireEndResize() : setTimeout(this.fireEndResize, Ra && Ra.duration || 500)
        },setChartSize: function() {
            var a = this.inverted, b = this.chartWidth, c = this.chartHeight, d = this.options.chart, e = d.spacingTop, f = d.spacingRight, g = d.spacingBottom, d = d.spacingLeft;
            this.plotLeft = t(this.plotLeft);
            this.plotTop = t(this.plotTop);
            this.plotWidth = t(b - this.plotLeft - this.marginRight);
            this.plotHeight = t(c - this.plotTop - this.marginBottom);
            this.plotSizeX = a ? this.plotHeight : this.plotWidth;
            this.plotSizeY = a ? this.plotWidth : this.plotHeight;
            this.spacingBox = {x: d,y: e,width: b - d - f,height: c - e - g};
            n(this.axes, function(a) {
                a.setAxisSize();
                a.setAxisTranslation()
            })
        },resetMargins: function() {
            var a = this.options.chart, b = a.spacingRight, c = a.spacingBottom, d = a.spacingLeft;
            this.plotTop = o(this.optionsMarginTop, a.spacingTop);
            this.marginRight = o(this.optionsMarginRight, b);
            this.marginBottom = o(this.optionsMarginBottom, c);
            this.plotLeft = o(this.optionsMarginLeft, d);
            this.axisOffset = [0, 0, 0, 0]
        },drawChartBox: function() {
            var a = this.options.chart, b = this.renderer, c = this.chartWidth, d = this.chartHeight, e = this.chartBackground, f = this.plotBackground, g = this.plotBorder, h = this.plotBGImage, i = a.borderWidth || 0, j = a.backgroundColor, k = a.plotBackgroundColor, l = a.plotBackgroundImage, m, p = {x: this.plotLeft,y: this.plotTop,width: this.plotWidth,height: this.plotHeight};
            m = i + (a.shadow ? 8 : 0);
            if (i || j)
                if (e)
                    e.animate(e.crisp(null, null, null, c - m, d - m));
                else {
                    e = {fill: j || U};
                    if (i)
                        e.stroke = a.borderColor, e["stroke-width"] = i;
                    this.chartBackground = b.rect(m / 2, m / 2, c -
                    m, d - m, a.borderRadius, i).attr(e).add().shadow(a.shadow)
                }
            if (k)
                f ? f.animate(p) : this.plotBackground = b.rect(this.plotLeft, this.plotTop, this.plotWidth, this.plotHeight, 0).attr({fill: k}).add().shadow(a.plotShadow);
            if (l)
                h ? h.animate(p) : this.plotBGImage = b.image(l, this.plotLeft, this.plotTop, this.plotWidth, this.plotHeight).add();
            if (a.plotBorderWidth)
                g ? g.animate(g.crisp(null, this.plotLeft, this.plotTop, this.plotWidth, this.plotHeight)) : this.plotBorder = b.rect(this.plotLeft, this.plotTop, this.plotWidth, this.plotHeight, 0, a.plotBorderWidth).attr({stroke: a.plotBorderColor,"stroke-width": a.plotBorderWidth,zIndex: 4}).add();
            this.isDirtyBox = !1
        },propFromSeries: function() {
            var a = this, b = a.options.chart, c, d = a.options.series, e, f;
            n(["inverted", "angular", "polar"], function(g) {
                c = Y[b.type || b.defaultSeriesType];
                f = a[g] || b[g] || c && c.prototype[g];
                for (e = d && d.length; !f && e--; )
                    (c = Y[d[e].type]) && c.prototype[g] && (f = !0);
                a[g] = f
            })
        },render: function() {
            var a = this, b = a.axes, c = a.renderer, d = a.options, e = d.labels, d = d.credits, f;
            a.setTitle();
            a.legend = new qb(a);
            n(b, function(a) {
                a.setScale()
            });
            a.getMargins();
            a.maxTicks = null;
            n(b, function(a) {
                a.setTickPositions(!0);
                a.setMaxTicks()
            });
            a.adjustTickAmounts();
            a.getMargins();
            a.drawChartBox();
            a.hasCartesianSeries && n(b, function(a) {
                a.render()
            });
            if (!a.seriesGroup)
                a.seriesGroup = c.g("series-group").attr({zIndex: 3}).add();
            n(a.series, function(a) {
                a.translate();
                a.setTooltipPoints();
                a.render()
            });
            e.items && n(e.items, function() {
                var b = u(e.style, this.style), d = w(b.left) + a.plotLeft, f = w(b.top) + a.plotTop + 12;
                delete b.left;
                delete b.top;
                c.text(this.html, d, f).attr({zIndex: 2}).css(b).add()
            });
            if (d.enabled && !a.credits)
                f = d.href, a.credits = c.text(d.text, 0, 0).on("click", function() {
                    if (f)
                        location.href = f
                }).attr({align: d.position.align,zIndex: 8}).css(d.style).add().align(d.position);
            a.hasRendered = !0
        },destroy: function() {
            var a = this, b = a.axes, c = a.series, d = a.container, e, f = d && d.parentNode;
            if (a !== null) {
                E(a, "destroy");
                P(a);
                for (e = b.length; e--; )
                    b[e] = b[e].destroy();
                for (e = c.length; e--; )
                    c[e] = c[e].destroy();
                n("title,subtitle,chartBackground,plotBackground,plotBGImage,plotBorder,seriesGroup,clipRect,credits,tracker,scroller,rangeSelector,legend,resetZoomButton,tooltip,renderer".split(","), function(b) {
                    var c = a[b];
                    c && (a[b] = c.destroy())
                });
                if (d)
                    d.innerHTML = "", P(d), f && Qa(d), d = null;
                for (e in a)
                    delete a[e];
                a = a.options = null
            }
        },firstRender: function() {
            var a = this, b = a.options, c = a.callback;
            if (!Da && N == N.top && B.readyState !== "complete" || ga && !N.canvg)
                ga ? Nb.push(function() {
                    a.firstRender()
                }, b.global.canvasToolsURL) : B.attachEvent("onreadystatechange", function() {
                    B.detachEvent("onreadystatechange", a.firstRender);
                    B.readyState === "complete" && a.firstRender()
                });
            else {
                a.getContainer();
                E(a, "init");
                if (Highcharts.RangeSelector && b.rangeSelector.enabled)
                    a.rangeSelector = new Highcharts.RangeSelector(a);
                a.resetMargins();
                a.setChartSize();
                a.propFromSeries();
                a.getAxes();
                n(b.series || [], function(b) {
                    a.initSeries(b)
                });
                if (Highcharts.Scroller && (b.navigator.enabled || b.scrollbar.enabled))
                    a.scroller = new Highcharts.Scroller(a);
                a.tracker = new Db(a, b);
                a.render();
                a.renderer.draw();
                c && c.apply(a, [a]);
                n(a.callbacks, function(b) {
                    b.apply(a, [a])
                });
                a.cloneRenderTo(!0);
                E(a, "load")
            }
        },init: function(a) {
            var b = this.options.chart, c;
            b.reflow !== !1 && I(this, "load", this.initReflow);
            if (a)
                for (c in a)
                    I(this, c, a[c]);
            this.xAxis = [];
            this.yAxis = [];
            this.animation = ga ? !1 : o(b.animation, !0);
            this.setSize = this.resize;
            this.pointCount = 0;
            this.counters = new Ab;
            this.firstRender()
        }};
    rb.prototype.callbacks = [];
    var Wa = function() {
    };
    Wa.prototype = {init: function(a, b, c) {
            var d = a.chart.counters;
            this.series = a;
            this.applyOptions(b, c);
            this.pointAttr = {};
            if (a.options.colorByPoint) {
                b = a.chart.options.colors;
                if (!this.options)
                    this.options = {};
                this.color = this.options.color = this.color || b[d.color++];
                d.wrapColor(b.length)
            }
            a.chart.pointCount++;
            return this
        },applyOptions: function(a, b) {
            var c = this.series, d = typeof a;
            this.config = a;
            if (d === "number" || a === null)
                this.y = a;
            else if (typeof a[0] === "number")
                this.x = a[0], this.y = a[1];
            else if (d === "object" && typeof a.length !== "number") {
                if (u(this, a), this.options = a, a.dataLabels)
                    c._hasPointLabels = !0
            } else if (typeof a[0] === "string")
                this.name = a[0], this.y = a[1];
            if (this.x === A)
                this.x = b === A ? c.autoIncrement() : b
        },destroy: function() {
            var a = this.series.chart, b = a.hoverPoints, c;
            a.pointCount--;
            if (b && (this.setState(), za(b, this), !b.length))
                a.hoverPoints = null;
            if (this === a.hoverPoint)
                this.onMouseOut();
            if (this.graphic || this.dataLabel)
                P(this), this.destroyElements();
            this.legendItem && a.legend.destroyItem(this);
            for (c in this)
                this[c] = null
        },destroyElements: function() {
            for (var a = "graphic,tracker,dataLabel,group,connector,shadowGroup".split(","), b, c = 6; c--; )
                b = a[c], this[b] && (this[b] = this[b].destroy())
        },getLabelConfig: function() {
            return {x: this.category,y: this.y,key: this.name || this.category,series: this.series,point: this,percentage: this.percentage,total: this.total || this.stackTotal}
        },select: function(a, b) {
            var c = this, d = c.series.chart, a = o(a, !c.selected);
            c.firePointEvent(a ? "select" : "unselect", {accumulate: b}, function() {
                c.selected = a;
                c.setState(a && "select");
                b || n(d.getSelectedPoints(), function(a) {
                    if (a.selected && a !== c)
                        a.selected = !1, a.setState(""), a.firePointEvent("unselect")
                })
            })
        },onMouseOver: function() {
            var a = this.series, b = a.chart, c = b.tooltip, d = b.hoverPoint;
            if (d && d !== this)
                d.onMouseOut();
            this.firePointEvent("mouseOver");
            c && (!c.shared || a.noSharedTooltip) && c.refresh(this);
            this.setState("hover");
            b.hoverPoint = this
        },onMouseOut: function() {
            this.firePointEvent("mouseOut");
            this.setState();
            this.series.chart.hoverPoint = null
        },tooltipFormatter: function(a) {
            var b = this.series, c = b.tooltipOptions, d = a.match(/\{(series|point)\.[a-zA-Z]+\}/g), e = /[{\.}]/, f, g, h, i, j = {y: 0,open: 0,high: 0,low: 0,close: 0,percentage: 1,total: 1};
            c.valuePrefix = c.valuePrefix || c.yPrefix;
            c.valueDecimals = c.valueDecimals || c.yDecimals;
            c.valueSuffix = c.valueSuffix || c.ySuffix;
            for (i in d)
                g = d[i], ra(g) && g !== a && (h = (" " + g).split(e), f = {point: this,series: b}[h[1]], h = h[2], f === this && j.hasOwnProperty(h) ? (f = j[h] ? h : "value", f = (c[f + "Prefix"] || "") + Xa(this[h], o(c[f + "Decimals"], -1)) + (c[f + "Suffix"] || "")) : f = f[h], a = a.replace(g, f));
            return a
        },update: function(a, b, c) {
            var d = this, e = d.series, f = d.graphic, g, h = e.data, i = h.length, j = e.chart, b = o(b, !0);
            d.firePointEvent("update", {options: a}, function() {
                d.applyOptions(a);
                aa(a) && (e.getAttribs(), f && f.attr(d.pointAttr[e.state]));
                for (g = 0; g < i; g++)
                    if (h[g] === d) {
                        e.xData[g] = d.x;
                        e.yData[g] = d.y;
                        e.options.data[g] = a;
                        break
                    }
                e.isDirty = !0;
                e.isDirtyData = !0;
                b && j.redraw(c)
            })
        },remove: function(a, b) {
            var c = this, d = c.series, e = d.chart, f, g = d.data, h = g.length;
            ua(b, e);
            a = o(a, !0);
            c.firePointEvent("remove", null, function() {
                for (f = 0; f < h; f++)
                    if (g[f] === c) {
                        g.splice(f, 1);
                        d.options.data.splice(f, 1);
                        d.xData.splice(f, 1);
                        d.yData.splice(f, 1);
                        break
                    }
                c.destroy();
                d.isDirty = !0;
                d.isDirtyData = !0;
                a && e.redraw()
            })
        },firePointEvent: function(a, b, c) {
            var d = this, e = this.series.options;
            (e.point.events[a] || d.options && d.options.events && d.options.events[a]) && this.importEvents();
            a === "click" && e.allowPointSelect && (c = function(a) {
                d.select(null, a.ctrlKey || a.metaKey || a.shiftKey)
            });
            E(this, a, b, c)
        },importEvents: function() {
            if (!this.hasImportedEvents) {
                var a = C(this.series.options.point, this.options).events, b;
                this.events = a;
                for (b in a)
                    I(this, b, a[b]);
                this.hasImportedEvents = !0
            }
        },setState: function(a) {
            var b = this.plotX, c = this.plotY, d = this.series, e = d.options.states, f = Z[d.type].marker && d.options.marker, g = f && !f.enabled, h = f && f.states[a], i = h && h.enabled === !1, j = d.stateMarkerGraphic, k = d.chart, l = this.pointAttr, a = a || "";
            if (!(a === this.state || this.selected && a !== "select" || e[a] && e[a].enabled === !1 || a && (i || g && !h.enabled))) {
                if (this.graphic)
                    e = f && this.graphic.symbolName && l[a].r, this.graphic.attr(C(l[a], e ? {x: b - e,y: c - e,width: 2 * e,height: 2 * e} : {}));
                else {
                    if (a && h) {
                        if (!j)
                            e = h.radius, d.stateMarkerGraphic = j = k.renderer.symbol(d.symbol, -e, -e, 2 * e, 2 * e).attr(l[a]).add(d.group);
                        j.translate(b, c)
                    }
                    if (j)
                        j[a ? "show" : "hide"]()
                }
                this.state = a
            }
        }};
    var R = function() {
    };
    R.prototype = {isCartesian: !0,type: "line",pointClass: Wa,sorted: !0,pointAttrToOptions: {stroke: "lineColor","stroke-width": "lineWidth",fill: "fillColor",r: "radius"},init: function(a, b) {
            var c, d;
            d = a.series.length;
            this.chart = a;
            this.options = b = this.setOptions(b);
            this.bindAxes();
            u(this, {index: d,name: b.name || "Series " + (d + 1),state: "",pointAttr: {},visible: b.visible !== !1,selected: b.selected === !0});
            if (ga)
                b.animation = !1;
            d = b.events;
            for (c in d)
                I(this, c, d[c]);
            if (d && d.click || b.point && b.point.events && b.point.events.click || b.allowPointSelect)
                a.runTrackerClick = !0;
            this.getColor();
            this.getSymbol();
            this.setData(b.data, !1);
            if (this.isCartesian)
                a.hasCartesianSeries = !0;
            a.series.push(this)
        },bindAxes: function() {
            var a = this, b = a.options, c = a.chart, d;
            a.isCartesian && n(["xAxis", "yAxis"], function(e) {
                n(c[e], function(c) {
                    d = c.options;
                    if (b[e] === d.index || b[e] === A && d.index === 0)
                        c.series.push(a), a[e] = c, c.isDirty = !0
                })
            })
        },autoIncrement: function() {
            var a = this.options, b = this.xIncrement, b = o(b, a.pointStart, 0);
            this.pointInterval = o(this.pointInterval, a.pointInterval, 1);
            this.xIncrement = b + this.pointInterval;
            return b
        },getSegments: function() {
            var a = -1, b = [], c, d = this.points, e = d.length;
            if (e)
                if (this.options.connectNulls) {
                    for (c = e; c--; )
                        d[c].y === null && d.splice(c, 1);
                    d.length && (b = [d])
                } else
                    n(d, function(c, g) {
                        c.y === null ? (g > a + 1 && b.push(d.slice(a + 1, g)), a = g) : g === e - 1 && b.push(d.slice(a + 1, g + 1))
                    });
            this.segments = b
        },setOptions: function(a) {
            var b = this.chart.options, c = b.plotOptions, d = a.data;
            a.data = null;
            c = C(c[this.type], c.series, a);
            c.data = a.data = d;
            this.tooltipOptions = C(b.tooltip, c.tooltip);
            return c
        },getColor: function() {
            var a = this.options, b = this.chart.options.colors, c = this.chart.counters;
            this.color = a.color || !a.colorByPoint && b[c.color++] || "gray";
            c.wrapColor(b.length)
        },getSymbol: function() {
            var a = this.options.marker, b = this.chart, c = b.options.symbols, b = b.counters;
            this.symbol = a.symbol || c[b.symbol++];
            if (/^url/.test(this.symbol))
                a.radius = 0;
            b.wrapSymbol(c.length)
        },drawLegendSymbol: function(a) {
            var b = this.options, c = b.marker, d = a.options.symbolWidth, e = this.chart.renderer, f = this.legendGroup, a = a.baseline, g;
            if (b.lineWidth) {
                g = {"stroke-width": b.lineWidth};
                if (b.dashStyle)
                    g.dashstyle = b.dashStyle;
                this.legendLine = e.path(["M", 0, a - 4, "L", d, a - 4]).attr(g).add(f)
            }
            if (c && c.enabled)
                b = c.radius, this.legendSymbol = e.symbol(this.symbol, d / 2 - b, a - 4 - b, 2 * b, 2 * b).attr(this.pointAttr[""]).add(f)
        },addPoint: function(a, b, c, d) {
            var e = this.data, f = this.graph, g = this.area, h = this.chart, i = this.xData, j = this.yData, k = f && f.shift || 0, l = this.options.data;
            ua(d, h);
            if (f && c)
                f.shift = k + 1;
            if (g) {
                if (c)
                    g.shift = k + 1;
                g.isArea = !0
            }
            b = o(b, !0);
            d = {series: this};
            this.pointClass.prototype.applyOptions.apply(d, [a]);
            i.push(d.x);
            j.push(this.valueCount === 4 ? [d.open, d.high, d.low, d.close] : d.y);
            l.push(a);
            c && (e[0] && e[0].remove ? e[0].remove(!1) : (e.shift(), i.shift(), j.shift(), l.shift()));
            this.getAttribs();
            this.isDirtyData = this.isDirty = !0;
            b && h.redraw()
        },setData: function(a, b) {
            var c = this.points, d = this.options, e = this.initialColor, f = this.chart, g = null, h = this.xAxis, i = this.pointClass.prototype;
            this.xIncrement = null;
            this.pointRange = h && h.categories && 1 || d.pointRange;
            if (s(e))
                f.counters.color = e;
            var j = [], k = [], l = a ? a.length : [], m = this.valueCount;
            if (l > (d.turboThreshold || 1E3)) {
                for (e = 0; g === null && e < l; )
                    g = a[e], e++;
                if (Ka(g)) {
                    i = o(d.pointStart, 0);
                    d = o(d.pointInterval, 1);
                    for (e = 0; e < l; e++)
                        j[e] = i, k[e] = a[e], i += d;
                    this.xIncrement = i
                } else if (Ja(g))
                    if (m)
                        for (e = 0; e < l; e++)
                            d = a[e], j[e] = d[0], k[e] = d.slice(1, m + 1);
                    else
                        for (e = 0; e < l; e++)
                            d = a[e], j[e] = d[0], k[e] = d[1]
            } else
                for (e = 0; e < l; e++)
                    d = {series: this}, i.applyOptions.apply(d, [a[e]]), j[e] = d.x, k[e] = i.toYData ? i.toYData.apply(d) : d.y;
            this.data = [];
            this.options.data = a;
            this.xData = j;
            this.yData = k;
            for (e = c && c.length || 0; e--; )
                c[e] && c[e].destroy && c[e].destroy();
            if (h)
                h.minRange = h.userMinRange;
            this.isDirty = this.isDirtyData = f.isDirtyBox = !0;
            o(b, !0) && f.redraw(!1)
        },remove: function(a, b) {
            var c = this, d = c.chart, a = o(a, !0);
            if (!c.isRemoving)
                c.isRemoving = !0, E(c, "remove", null, function() {
                    c.destroy();
                    d.isDirtyLegend = d.isDirtyBox = !0;
                    a && d.redraw(b)
                });
            c.isRemoving = !1
        },processData: function(a) {
            var b = this.xData, c = this.yData, d = b.length, e = 0, f = d, g, h, i = this.xAxis, j = this.options, k = j.cropThreshold, l = this.isCartesian;
            if (l && !this.isDirty && !i.isDirty && !this.yAxis.isDirty && !a)
                return !1;
            if (l && this.sorted && (!k || d > k || this.forceCrop))
                if (a = i.getExtremes(), i = a.min, k = a.max, b[d - 1] < i || b[0] > k)
                    b = [], c = [];
                else if (b[0] < i || b[d - 1] > k) {
                    for (a = 0; a < d; a++)
                        if (b[a] >= i) {
                            e = x(0, a - 1);
                            break
                        }
                    for (; a < d; a++)
                        if (b[a] > k) {
                            f = a + 1;
                            break
                        }
                    b = b.slice(e, f);
                    c = c.slice(e, f);
                    g = !0
                }
            for (a = b.length - 1; a > 0; a--)
                if (d = b[a] - b[a - 1], d > 0 && (h === A || d < h))
                    h = d;
            this.cropped = g;
            this.cropStart = e;
            this.processedXData = b;
            this.processedYData = c;
            if (j.pointRange === null)
                this.pointRange = h || 1;
            this.closestPointRange = h
        },generatePoints: function() {
            var a = this.options.data, b = this.data, c, d = this.processedXData, e = this.processedYData, f = this.pointClass, g = d.length, h = this.cropStart || 0, i, j = this.hasGroupedData, k, l = [], m;
            if (!b && !j)
                b = [], b.length = a.length, b = this.data = b;
            for (m = 0; m < g; m++)
                i = h + m, j ? l[m] = (new f).init(this, [d[m]].concat(na(e[m]))) : (b[i] ? k = b[i] : a[i] !== A && (b[i] = k = (new f).init(this, a[i], d[m])), l[m] = k);
            if (b && (g !== (c = b.length) || j))
                for (m = 0; m < c; m++)
                    if (m === h && !j && (m += g), b[m])
                        b[m].destroyElements(), b[m].plotX = A;
            this.data = b;
            this.points = l
        },translate: function() {
            this.processedXData || this.processData();
            this.generatePoints();
            for (var a = this.chart, b = this.options, c = b.stacking, d = this.xAxis, e = d.categories, f = this.yAxis, g = this.points, h = g.length, i = !!this.modifyValue, j, k = f.series, l = k.length; l--; )
                if (k[l].visible) {
                    l === this.index && (j = !0);
                    break
                }
            for (l = 0; l < h; l++) {
                var k = g[l], m = k.x, p = k.y, n = k.low, o = f.stacks[(p < b.threshold ? "-" : "") + this.stackKey];
                k.plotX = d.translate(m, 0, 0, 0, 1);
                if (c && this.visible && o && o[m]) {
                    n = o[m];
                    m = n.total;
                    n.cum = n = n.cum - p;
                    p = n + p;
                    if (j)
                        n = b.threshold;
                    c === "percent" && (n = m ? n * 100 / m : 0, p = m ? p * 100 / m : 0);
                    k.percentage = m ? k.y * 100 / m : 0;
                    k.stackTotal = m;
                    k.stackY = p
                }
                k.yBottom = s(n) ? f.translate(n, 0, 1, 0, 1) : null;
                i && (p = this.modifyValue(p, k));
                k.plotY = typeof p === "number" ? t(f.translate(p, 0, 1, 0, 1) * 10) / 10 : A;
                k.clientX = a.inverted ? a.plotHeight - k.plotX : k.plotX;
                k.category = e && e[k.x] !== A ? e[k.x] : k.x
            }
            this.getSegments()
        },setTooltipPoints: function(a) {
            var b = [], c = this.chart.plotSizeX, d, e;
            d = this.xAxis;
            var f, g, h = [];
            if (this.options.enableMouseTracking !== !1) {
                if (a)
                    this.tooltipPoints = null;
                n(this.segments || this.points, function(a) {
                    b = b.concat(a)
                });
                d && d.reversed && (b = b.reverse());
                a = b.length;
                for (g = 0; g < a; g++) {
                    f = b[g];
                    d = b[g - 1] ? b[g - 1]._high + 1 : 0;
                    for (f._high = e = b[g + 1] ? x(0, W((f.plotX + (b[g + 1] ? b[g + 1].plotX : c)) / 2)) : c; d >= 0 && d <= e; )
                        h[d++] = f
                }
                this.tooltipPoints = h
            }
        },tooltipHeaderFormatter: function(a) {
            var b = this.tooltipOptions, c = b.xDateFormat, d = this.xAxis, e = d && d.options.type === "datetime", f;
            if (e && !c)
                for (f in D)
                    if (D[f] >= d.closestPointRange) {
                        c = b.dateTimeLabelFormats[f];
                        break
                    }
            return b.headerFormat.replace("{point.key}", e ? db(c, a) : a).replace("{series.name}", this.name).replace("{series.color}", this.color)
        },onMouseOver: function() {
            var a = this.chart, b = a.hoverSeries;
            if (ea || !a.mouseIsDown) {
                if (b && b !== this)
                    b.onMouseOut();
                this.options.events.mouseOver && E(this, "mouseOver");
                this.setState("hover");
                a.hoverSeries = this
            }
        },onMouseOut: function() {
            var a = this.options, b = this.chart, c = b.tooltip, d = b.hoverPoint;
            if (d)
                d.onMouseOut();
            this && a.events.mouseOut && E(this, "mouseOut");
            c && !a.stickyTracking && !c.shared && c.hide();
            this.setState();
            b.hoverSeries = null
        },animate: function(a) {
            var b = this.chart, c = this.clipRect, d = this.options.animation;
            d && !aa(d) && (d = {});
            if (a) {
                if (!c.isAnimating)
                    c.attr("width", 0), c.isAnimating = !0
            } else
                c.animate({width: b.plotSizeX}, d), this.animate = null
        },drawPoints: function() {
            var a, b = this.points, c = this.chart, d, e, f, g, h, i, j, k;
            if (this.options.marker.enabled)
                for (f = b.length; f--; )
                    if (g = b[f], d = g.plotX, e = g.plotY, k = g.graphic, e !== A && !isNaN(e))
                        if (a = g.pointAttr[g.selected ? "select" : ""], h = a.r, i = o(g.marker && g.marker.symbol, this.symbol), j = i.indexOf("url") === 0, k)
                            k.animate(u({x: d - h,y: e - h}, k.symbolName ? {width: 2 * h,height: 2 * h} : {}));
                        else if (h > 0 || j)
                            g.graphic = c.renderer.symbol(i, d - h, e - h, 2 * h, 2 * h).attr(a).add(this.group)
        },convertAttribs: function(a, b, c, d) {
            var e = this.pointAttrToOptions, f, g, h = {}, a = a || {}, b = b || {}, c = c || {}, d = d || {};
            for (f in e)
                g = e[f], h[f] = o(a[g], b[f], c[f], d[f]);
            return h
        },getAttribs: function() {
            var a = this, b = Z[a.type].marker ? a.options.marker : a.options, c = b.states, d = c.hover, e, f = a.color, g = {stroke: f,fill: f}, h = a.points || [], i = [], j, k = a.pointAttrToOptions, l;
            a.options.marker ? (d.radius = d.radius || b.radius + 2, d.lineWidth = d.lineWidth || b.lineWidth + 1) : d.color = d.color || pa(d.color || f).brighten(d.brightness).get();
            i[""] = a.convertAttribs(b, g);
            n(["hover", "select"], function(b) {
                i[b] = a.convertAttribs(c[b], i[""])
            });
            a.pointAttr = i;
            for (f = h.length; f--; ) {
                g = h[f];
                if ((b = g.options && g.options.marker || g.options) && b.enabled === !1)
                    b.radius = 0;
                e = !1;
                if (g.options)
                    for (l in k)
                        s(b[k[l]]) && (e = !0);
                if (e) {
                    j = [];
                    c = b.states || {};
                    e = c.hover = c.hover || {};
                    if (!a.options.marker)
                        e.color = pa(e.color || g.options.color).brighten(e.brightness || d.brightness).get();
                    j[""] = a.convertAttribs(b, i[""]);
                    j.hover = a.convertAttribs(c.hover, i.hover, j[""]);
                    j.select = a.convertAttribs(c.select, i.select, j[""])
                } else
                    j = i;
                g.pointAttr = j
            }
        },destroy: function() {
            var a = this, b = a.chart, c = a.clipRect, d = /AppleWebKit\/533/.test(ya), e, f, g = a.data || [], h, i, j;
            E(a, "destroy");
            P(a);
            n(["xAxis", "yAxis"], function(b) {
                if (j = a[b])
                    za(j.series, a), j.isDirty = !0
            });
            a.legendItem && a.chart.legend.destroyItem(a);
            for (f = g.length; f--; )
                (h = g[f]) && h.destroy && h.destroy();
            a.points = null;
            if (c && c !== b.clipRect)
                a.clipRect = c.destroy();
            n("area,graph,dataLabelsGroup,group,tracker,trackerGroup".split(","), function(b) {
                a[b] && (e = d && b === "group" ? "hide" : "destroy", a[b][e]())
            });
            if (b.hoverSeries === a)
                b.hoverSeries = null;
            za(b.series, a);
            for (i in a)
                delete a[i]
        },drawDataLabels: function() {
            var a = this, b = a.options, c = b.dataLabels;
            if (c.enabled || a._hasPointLabels) {
                var d, e, f = a.points, g, h, i, j = a.dataLabelsGroup, k = a.chart, l = a.xAxis, l = l ? l.left : k.plotLeft, m = a.yAxis, m = m ? m.top : k.plotTop, p = k.renderer, q = k.inverted, u = a.type, r = b.stacking, y = u === "column" || u === "bar", x = c.verticalAlign === null, w = c.y === null, v = p.fontMetrics(c.style.fontSize), H = v.h, J = v.b, K, z;
                y && (v = {top: J,middle: J - H / 2,bottom: -H + J}, r ? (x && (c = C(c, {verticalAlign: "middle"})), w && (c = C(c, {y: v[c.verticalAlign]}))) : x ? c = C(c, {verticalAlign: "top"}) : w && (c = C(c, {y: v[c.verticalAlign]})));
                j ? j.translate(l, m) : j = a.dataLabelsGroup = p.g("data-labels").attr({visibility: a.visible ? "visible" : "hidden",zIndex: 6}).translate(l, m).add();
                h = c;
                n(f, function(f) {
                    K = f.dataLabel;
                    c = h;
                    (g = f.options) && g.dataLabels && (c = C(c, g.dataLabels));
                    if (z = c.enabled) {
                        var l = f.barX && f.barX + f.barW / 2 || o(f.plotX, -999), m = o(f.plotY, -999), n = c.y === null ? f.y >= b.threshold ? -H + J : J : c.y;
                        d = (q ? k.plotWidth - m : l) + c.x;
                        e = t((q ? k.plotHeight - l : m) + n)
                    }
                    if (K && a.isCartesian && (!k.isInsidePlot(d, e) || !z))
                        f.dataLabel = K.destroy();
                    else if (z) {
                        var l = c.align, v;
                        i = c.formatter.call(f.getLabelConfig(), c);
                        u === "column" && (d += {left: -1,right: 1}[l] * f.barW / 2 || 0);
                        !r && q && f.y < 0 && (l = "right", d -= 10);
                        c.style.color = o(c.color, c.style.color, a.color, "black");
                        if (K)
                            K.attr({text: i}).animate({x: d,y: e});
                        else if (s(i)) {
                            l = {align: l,fill: c.backgroundColor,stroke: c.borderColor,"stroke-width": c.borderWidth,r: c.borderRadius || 0,rotation: c.rotation,padding: c.padding,zIndex: 1};
                            for (v in l)
                                l[v] === A && delete l[v];
                            K = f.dataLabel = p[c.rotation ? "text" : "label"](i, d, e, null, null, null, c.useHTML, !0).attr(l).css(c.style).add(j).shadow(c.shadow)
                        }
                        if (y && b.stacking && K)
                            v = f.barX, l = f.barY, m = f.barW, f = f.barH, K.align(c, null, {x: q ? k.plotWidth - l - f : v,y: q ? k.plotHeight - v - m : l,width: q ? f : m,height: q ? m : f})
                    }
                })
            }
        },getSegmentPath: function(a) {
            var b = this, c = [];
            n(a, function(d, e) {
                b.getPointSpline ? c.push.apply(c, b.getPointSpline(a, d, e)) : (c.push(e ? "L" : "M"), e && b.options.step && c.push(d.plotX, a[e - 1].plotY), c.push(d.plotX, d.plotY))
            });
            return c
        },drawGraph: function() {
            var a = this, b = a.options, c = a.graph, d = [], e = a.group, f = b.lineColor || a.color, g = b.lineWidth, h = b.dashStyle, i, j = a.chart.renderer, k = [];
            n(a.segments, function(b) {
                i = a.getSegmentPath(b);
                b.length > 1 ? d = d.concat(i) : k.push(b[0])
            });
            a.graphPath = d;
            a.singlePoints = k;
            if (c)
                Fa(c), c.animate({d: d});
            else if (g) {
                c = {stroke: f,"stroke-width": g};
                if (h)
                    c.dashstyle = h;
                a.graph = j.path(d).attr(c).add(e).shadow(b.shadow)
            }
        },invertGroups: function() {
            function a() {
                var a = {width: b.yAxis.len,height: b.xAxis.len};
                c.attr(a).invert();
                d && d.attr(a).invert()
            }
            var b = this, c = b.group, d = b.trackerGroup, e = b.chart;
            I(e, "resize", a);
            I(b, "destroy", function() {
                P(e, "resize", a)
            });
            a();
            b.invertGroups = a
        },createGroup: function() {
            var a = this.chart;
            (this.group = a.renderer.g("series")).attr({visibility: this.visible ? "visible" : "hidden",zIndex: this.options.zIndex}).translate(this.xAxis.left, this.yAxis.top).add(a.seriesGroup);
            this.createGroup = Sb
        },render: function() {
            var a = this, b = a.chart, c, d = a.options, e = d.clip !== !1, f = d.animation, f = (d = f && a.animate) ? f && f.duration || 500 : 0, g = a.clipRect, h = b.renderer;
            if (!g && (g = a.clipRect = !b.hasRendered && b.clipRect ? b.clipRect : h.clipRect(0, 0, b.plotSizeX, b.plotSizeY + 1), !b.clipRect))
                b.clipRect = g;
            a.createGroup();
            c = a.group;
            a.drawDataLabels();
            d && a.animate(!0);
            a.getAttribs();
            a.drawGraph && a.drawGraph();
            a.drawPoints();
            a.options.enableMouseTracking !== !1 && a.drawTracker();
            b.inverted && a.invertGroups();
            e && !a.hasRendered && (c.clip(g), a.trackerGroup && a.trackerGroup.clip(b.clipRect));
            d && a.animate();
            setTimeout(function() {
                g.isAnimating = !1;
                if ((c = a.group) && g !== b.clipRect && g.renderer) {
                    if (e)
                        c.clip(a.clipRect = b.clipRect);
                    g.destroy()
                }
            }, f);
            a.isDirty = a.isDirtyData = !1;
            a.hasRendered = !0
        },redraw: function() {
            var a = this.chart, b = this.isDirtyData, c = this.group;
            c && (a.inverted && c.attr({width: a.plotWidth,height: a.plotHeight}), c.animate({translateX: this.xAxis.left,translateY: this.yAxis.top}));
            this.translate();
            this.setTooltipPoints(!0);
            this.render();
            b && E(this, "updatedData")
        },setState: function(a) {
            var b = this.options, c = this.graph, d = b.states, b = b.lineWidth, a = a || "";
            if (this.state !== a)
                this.state = a, d[a] && d[a].enabled === !1 || (a && (b = d[a].lineWidth || b + 1), c && !c.dashstyle && c.attr({"stroke-width": b}, a ? 0 : 500))
        },setVisible: function(a, b) {
            var c = this.chart, d = this.legendItem, e = this.group, f = this.tracker, g = this.dataLabelsGroup, h, i = this.points, j = c.options.chart.ignoreHiddenSeries;
            h = this.visible;
            h = (this.visible = a = a === A ? !h : a) ? "show" : "hide";
            if (e)
                e[h]();
            if (f)
                f[h]();
            else if (i)
                for (e = i.length; e--; )
                    if (f = i[e], f.tracker)
                        f.tracker[h]();
            if (g)
                g[h]();
            d && c.legend.colorizeItem(this, a);
            this.isDirty = !0;
            this.options.stacking && n(c.series, function(a) {
                if (a.options.stacking && a.visible)
                    a.isDirty = !0
            });
            if (j)
                c.isDirtyBox = !0;
            b !== !1 && c.redraw();
            E(this, h)
        },show: function() {
            this.setVisible(!0)
        },hide: function() {
            this.setVisible(!1)
        },select: function(a) {
            this.selected = a = a === A ? !this.selected : a;
            if (this.checkbox)
                this.checkbox.checked = a;
            E(this, a ? "select" : "unselect")
        },drawTrackerGroup: function() {
            var a = this.trackerGroup, b = this.chart;
            if (this.isCartesian) {
                if (!a)
                    this.trackerGroup = a = b.renderer.g().attr({zIndex: this.options.zIndex || 1}).add(b.trackerGroup);
                a.translate(this.xAxis.left, this.yAxis.top)
            }
            return a
        },drawTracker: function() {
            var a = this, b = a.options, c = b.trackByArea, d = [].concat(c ? a.areaPath : a.graphPath), e = d.length, f = a.chart, g = f.renderer, h = f.options.tooltip.snap, i = a.tracker, j = b.cursor, j = j && {cursor: j}, k = a.singlePoints, l = a.drawTrackerGroup(), m;
            if (e && !c)
                for (m = e + 1; m--; )
                    d[m] === "M" && d.splice(m + 1, 0, d[m + 1] - h, d[m + 2], "L"), (m && d[m] === "M" || m === e) && d.splice(m, 0, "L", d[m - 2] + h, d[m - 1]);
            for (m = 0; m < k.length; m++)
                e = k[m], d.push("M", e.plotX - h, e.plotY, "L", e.plotX + h, e.plotY);
            i ? i.attr({d: d}) : a.tracker = g.path(d).attr({isTracker: !0,"stroke-linejoin": "bevel",visibility: a.visible ? "visible" : "hidden",stroke: tb,fill: c ? tb : U,"stroke-width": b.lineWidth + (c ? 0 : 2 * h)}).on(ea ? "touchstart" : "mouseover", function() {
                if (f.hoverSeries !== a)
                    a.onMouseOver()
            }).on("mouseout", function() {
                if (!b.stickyTracking)
                    a.onMouseOut()
            }).css(j).add(l)
        }};
    G = ca(R);
    Y.line = G;
    Z.area = C(T, {threshold: 0});
    G = ca(R, {type: "area",getSegmentPath: function(a) {
            var b = R.prototype.getSegmentPath.call(this, a), c = [].concat(b), d, e = this.options;
            d = b.length;
            var f = this.yAxis.getThreshold(e.threshold);
            d === 3 && c.push("L", b[1], b[2]);
            if (e.stacking && this.type !== "areaspline")
                for (d = a.length - 1; d >= 0; d--)
                    d < a.length - 1 && e.step && c.push(a[d + 1].plotX, a[d].yBottom), c.push(a[d].plotX, a[d].yBottom);
            else
                c.push("L", a[a.length - 1].plotX, f, "L", a[0].plotX, f);
            this.areaPath = this.areaPath.concat(c);
            return b
        },drawGraph: function() {
            this.areaPath = [];
            R.prototype.drawGraph.apply(this);
            var a = this.areaPath, b = this.options, c = this.area;
            c ? c.animate({d: a}) : this.area = this.chart.renderer.path(a).attr({fill: o(b.fillColor, pa(this.color).setOpacity(b.fillOpacity || 0.75).get())}).add(this.group)
        },drawLegendSymbol: function(a, b) {
            b.legendSymbol = this.chart.renderer.rect(0, a.baseline - 11, a.options.symbolWidth, 12, 2).attr({zIndex: 3}).add(b.legendGroup)
        }});
    Y.area = G;
    Z.spline = C(T);
    ha = ca(R, {type: "spline",getPointSpline: function(a, b, c) {
            var d = b.plotX, e = b.plotY, f = a[c - 1], g = a[c + 1], h, i, j, k;
            if (c && c < a.length - 1) {
                a = f.plotY;
                j = g.plotX;
                var g = g.plotY, l;
                h = (1.5 * d + f.plotX) / 2.5;
                i = (1.5 * e + a) / 2.5;
                j = (1.5 * d + j) / 2.5;
                k = (1.5 * e + g) / 2.5;
                l = (k - i) * (j - d) / (j - h) + e - k;
                i += l;
                k += l;
                i > a && i > e ? (i = x(a, e), k = 2 * e - i) : i < a && i < e && (i = O(a, e), k = 2 * e - i);
                k > g && k > e ? (k = x(g, e), i = 2 * e - k) : k < g && k < e && (k = O(g, e), i = 2 * e - k);
                b.rightContX = j;
                b.rightContY = k
            }
            c ? (b = ["C", f.rightContX || f.plotX, f.rightContY || f.plotY, h || d, i || e, d, e], f.rightContX = f.rightContY = null) : b = ["M", d, e];
            return b
        }});
    Y.spline = ha;
    Z.areaspline = C(Z.area);
    var Ia = G.prototype, ha = ca(ha, {type: "areaspline",getSegmentPath: Ia.getSegmentPath,drawGraph: Ia.drawGraph});
    Y.areaspline = ha;
    Z.column = C(T, {borderColor: "#FFFFFF",borderWidth: 1,borderRadius: 0,groupPadding: 0.2,marker: null,pointPadding: 0.1,minPointLength: 0,cropThreshold: 50,pointRange: null,states: {hover: {brightness: 0.1,shadow: !1},select: {color: "#C0C0C0",borderColor: "#000000",shadow: !1}},dataLabels: {y: null,verticalAlign: null},threshold: 0});
    ha = ca(R, {type: "column",tooltipOutsidePlot: !0,pointAttrToOptions: {stroke: "borderColor","stroke-width": "borderWidth",fill: "color",r: "borderRadius"},init: function() {
            R.prototype.init.apply(this, arguments);
            var a = this, b = a.chart;
            b.hasRendered && n(b.series, function(b) {
                if (b.type === a.type)
                    b.isDirty = !0
            })
        },translate: function() {
            var a = this, b = a.chart, c = a.options, d = c.stacking, e = c.borderWidth, f = 0, g = a.xAxis, h = g.reversed, i = {}, j, k;
            R.prototype.translate.apply(a);
            n(b.series, function(b) {
                if (b.type === a.type && b.visible && a.options.group === b.options.group)
                    b.options.stacking ? (j = b.stackKey, i[j] === A && (i[j] = f++), k = i[j]) : k = f++, b.columnIndex = k
            });
            var l = a.points, g = M(g.transA) * (g.ordinalSlope || c.pointRange || g.closestPointRange || 1), m = g * c.groupPadding, p = (g - 2 * m) / f, q = c.pointWidth, t = s(q) ? (p - q) / 2 : p * c.pointPadding, r = o(q, p - 2 * t), y = wa(x(r, 1 + 2 * e)), w = t + (m + ((h ? f - a.columnIndex : a.columnIndex) || 0) * p - g / 2) * (h ? -1 : 1), z = a.yAxis.getThreshold(c.threshold), v = o(c.minPointLength, 5);
            n(l, function(c) {
                var f = c.plotY, g = o(c.yBottom, z), h = c.plotX + w, i = wa(O(f, g)), j = wa(x(f, g) - i), k = a.yAxis.stacks[(c.y < 0 ? "-" : "") + a.stackKey];
                d && a.visible && k && k[c.x] && k[c.x].setOffset(w, y);
                M(j) < v && v && (j = v, i = M(i - z) > v ? g - v : z - (f <= z ? v : 0));
                u(c, {barX: h,barY: i,barW: y,barH: j,pointWidth: r});
                c.shapeType = "rect";
                c.shapeArgs = f = b.renderer.Element.prototype.crisp.call(0, e, h, i, y, j);
                e % 2 && (f.y -= 1, f.height += 1);
                c.trackerArgs = M(j) < 3 && C(c.shapeArgs, {height: 6,y: i - 3})
            })
        },getSymbol: function() {
        },drawLegendSymbol: G.prototype.drawLegendSymbol,drawGraph: function() {
        },drawPoints: function() {
            var a = this, b = a.options, c = a.chart.renderer, d, e;
            n(a.points, function(f) {
                var g = f.plotY;
                if (g !== A && !isNaN(g) && f.y !== null)
                    d = f.graphic, e = f.shapeArgs, d ? (Fa(d), d.animate(C(e))) : f.graphic = d = c[f.shapeType](e).attr(f.pointAttr[f.selected ? "select" : ""]).add(a.group).shadow(b.shadow, null, b.stacking && !b.borderRadius)
            })
        },drawTracker: function() {
            var a = this, b = a.chart, c = b.renderer, d, e, f = +new Date, g = a.options, h = g.cursor, i = h && {cursor: h}, j = a.drawTrackerGroup(), k, l, m;
            n(a.points, function(h) {
                e = h.tracker;
                d = h.trackerArgs || h.shapeArgs;
                l = h.plotY;
                m = !a.isCartesian || l !== A && !isNaN(l);
                delete d.strokeWidth;
                if (h.y !== null && m)
                    e ? e.attr(d) : h.tracker = c[h.shapeType](d).attr({isTracker: f,fill: tb,visibility: a.visible ? "visible" : "hidden"}).on(ea ? "touchstart" : "mouseover", function(c) {
                        k = c.relatedTarget || c.fromElement;
                        if (b.hoverSeries !== a && z(k, "isTracker") !== f)
                            a.onMouseOver();
                        h.onMouseOver()
                    }).on("mouseout", function(b) {
                        if (!g.stickyTracking && (k = b.relatedTarget || b.toElement, z(k, "isTracker") !== f))
                            a.onMouseOut()
                    }).css(i).add(h.group || j)
            })
        },animate: function(a) {
            var b = this, c = b.points, d = b.options;
            if (!a)
                n(c, function(a) {
                    var c = a.graphic, a = a.shapeArgs, g = b.yAxis, h = d.threshold;
                    c && (c.attr({height: 0,y: s(h) ? g.getThreshold(h) : g.translate(g.getExtremes().min, 0, 1, 0, 1)}), c.animate({height: a.height,y: a.y}, d.animation))
                }), b.animate = null
        },remove: function() {
            var a = this, b = a.chart;
            b.hasRendered && n(b.series, function(b) {
                if (b.type === a.type)
                    b.isDirty = !0
            });
            R.prototype.remove.apply(a, arguments)
        }});
    Y.column = ha;
    Z.bar = C(Z.column, {dataLabels: {align: "left",x: 5,y: null,verticalAlign: "middle"}});
    Ia = ca(ha, {type: "bar",inverted: !0});
    Y.bar = Ia;
    Z.scatter = C(T, {lineWidth: 0,states: {hover: {lineWidth: 0}},tooltip: {headerFormat: '<span style="font-size: 10px; color:{series.color}">{series.name}</span><br/>',pointFormat: "x: <b>{point.x}</b><br/>y: <b>{point.y}</b><br/>"}});
    Ia = ca(R, {type: "scatter",sorted: !1,translate: function() {
            var a = this;
            R.prototype.translate.apply(a);
            n(a.points, function(b) {
                b.shapeType = "circle";
                b.shapeArgs = {x: b.plotX,y: b.plotY,r: a.chart.options.tooltip.snap}
            })
        },drawTracker: function() {
            for (var a = this, b = a.options.cursor, b = b && {cursor: b}, c = a.points, d = c.length, e; d--; )
                if (e = c[d].graphic)
                    e.element._i = d;
            a._hasTracking ? a._hasTracking = !0 : a.group.attr({isTracker: !0}).on(ea ? "touchstart" : "mouseover", function(b) {
                a.onMouseOver();
                if (b.target._i !== A)
                    c[b.target._i].onMouseOver()
            }).on("mouseout", function() {
                if (!a.options.stickyTracking)
                    a.onMouseOut()
            }).css(b)
        }});
    Y.scatter = Ia;
    Z.pie = C(T, {borderColor: "#FFFFFF",borderWidth: 1,center: ["50%", "50%"],colorByPoint: !0,dataLabels: {distance: 30,enabled: !0,formatter: function() {
                return this.point.name
            },y: 5},legendType: "point",marker: null,size: "75%",showInLegend: !1,slicedOffset: 10,states: {hover: {brightness: 0.1,shadow: !1}}});
    T = {type: "pie",isCartesian: !1,pointClass: ca(Wa, {init: function() {
                Wa.prototype.init.apply(this, arguments);
                var a = this, b;
                u(a, {visible: a.visible !== !1,name: o(a.name, "Slice")});
                b = function() {
                    a.slice()
                };
                I(a, "select", b);
                I(a, "unselect", b);
                return a
            },setVisible: function(a) {
                var b = this.series.chart, c = this.tracker, d = this.dataLabel, e = this.connector, f = this.shadowGroup, g;
                g = (this.visible = a = a === A ? !this.visible : a) ? "show" : "hide";
                this.group[g]();
                if (c)
                    c[g]();
                if (d)
                    d[g]();
                if (e)
                    e[g]();
                if (f)
                    f[g]();
                this.legendItem && b.legend.colorizeItem(this, a)
            },slice: function(a, b, c) {
                var d = this.series.chart, e = this.slicedTranslation;
                ua(c, d);
                o(b, !0);
                a = this.sliced = s(a) ? a : !this.sliced;
                a = {translateX: a ? e[0] : d.plotLeft,translateY: a ? e[1] : d.plotTop};
                this.group.animate(a);
                this.shadowGroup && this.shadowGroup.animate(a)
            }}),pointAttrToOptions: {stroke: "borderColor","stroke-width": "borderWidth",fill: "color"},getColor: function() {
            this.initialColor = this.chart.counters.color
        },animate: function() {
            var a = this;
            n(a.points, function(b) {
                var c = b.graphic, b = b.shapeArgs, d = -xa / 2;
                c && (c.attr({r: 0,start: d,end: d}), c.animate({r: b.r,start: b.start,end: b.end}, a.options.animation))
            });
            a.animate = null
        },setData: function(a, b) {
            R.prototype.setData.call(this, a, !1);
            this.processData();
            this.generatePoints();
            o(b, !0) && this.chart.redraw()
        },getCenter: function() {
            var a = this.options, b = this.chart, c = b.plotWidth, d = b.plotHeight, a = a.center.concat([a.size, a.innerSize || 0]), e = O(c, d), f;
            return Ea(a, function(a, b) {
                return (f = /%$/.test(a)) ? [c, d, e, e][b] * w(a) / 100 : a
            })
        },translate: function() {
            this.generatePoints();
            var a = 0, b = -0.25, c = this.options, d = c.slicedOffset, e = d + c.borderWidth, f, g = this.chart, h, i, j, k = this.points, l = 2 * xa, m, p, o, s = c.dataLabels.distance;
            this.center = f = this.getCenter();
            this.getX = function(a, b) {
                j = L.asin((a - f[1]) / (f[2] / 2 + s));
                return f[0] + (b ? -1 : 1) * X(j) * (f[2] / 2 + s)
            };
            n(k, function(b) {
                a += b.y
            });
            n(k, function(c) {
                m = a ? c.y / a : 0;
                h = t(b * l * 1E3) / 1E3;
                b += m;
                i = t(b * l * 1E3) / 1E3;
                c.shapeType = "arc";
                c.shapeArgs = {x: f[0],y: f[1],r: f[2] / 2,innerR: f[3] / 2,start: h,end: i};
                j = (i + h) / 2;
                c.slicedTranslation = Ea([X(j) * d + g.plotLeft, da(j) * d + g.plotTop], t);
                p = X(j) * f[2] / 2;
                o = da(j) * f[2] / 2;
                c.tooltipPos = [f[0] + p * 0.7, f[1] + o * 0.7];
                c.labelPos = [f[0] + p + X(j) * s, f[1] + o + da(j) * s, f[0] + p + X(j) * e, f[1] + o + da(j) * e, f[0] + p, f[1] + o, s < 0 ? "center" : j < l / 4 ? "left" : "right", j];
                c.percentage = m * 100;
                c.total = a
            });
            this.setTooltipPoints()
        },render: function() {
            this.getAttribs();
            this.drawPoints();
            this.options.enableMouseTracking !== !1 && this.drawTracker();
            this.drawDataLabels();
            this.options.animation && this.animate && this.animate();
            this.isDirty = !1
        },drawPoints: function() {
            var a = this, b = a.chart, c = b.renderer, d, e, f, g = a.options.shadow, h, i;
            n(a.points, function(j) {
                e = j.graphic;
                i = j.shapeArgs;
                f = j.group;
                h = j.shadowGroup;
                if (g && !h)
                    h = j.shadowGroup = c.g("shadow").attr({zIndex: 4}).add();
                if (!f)
                    f = j.group = c.g("point").attr({zIndex: 5}).add();
                d = j.sliced ? j.slicedTranslation : [b.plotLeft, b.plotTop];
                f.translate(d[0], d[1]);
                h && h.translate(d[0], d[1]);
                e ? e.animate(i) : j.graphic = e = c.arc(i).setRadialReference(a.center).attr(u(j.pointAttr[""], {"stroke-linejoin": "round"})).add(j.group).shadow(g, h);
                j.visible === !1 && j.setVisible(!1)
            })
        },drawDataLabels: function() {
            var a = this.data, b, c = this.chart, d = this.options.dataLabels, e = o(d.connectorPadding, 10), f = o(d.connectorWidth, 1), g, h, i = o(d.softConnector, !0), j = d.distance, k = this.center, l = k[2] / 2, m = k[1], p = j > 0, q = [[], []], s, r, t, u, x = 2, v;
            if (d.enabled) {
                R.prototype.drawDataLabels.apply(this);
                n(a, function(a) {
                    a.dataLabel && q[a.labelPos[7] < xa / 2 ? 0 : 1].push(a)
                });
                q[1].reverse();
                u = function(a, b) {
                    return b.y - a.y
                };
                for (a = q[0][0] && q[0][0].dataLabel && (q[0][0].dataLabel.getBBox().height || 21); x--; ) {
                    var w = [], C = [], z = q[x], A = z.length, B;
                    if (j > 0) {
                        for (v = m - l - j; v <= m + l + j; v += a)
                            w.push(v);
                        t = w.length;
                        if (A > t) {
                            h = [].concat(z);
                            h.sort(u);
                            for (v = A; v--; )
                                h[v].rank = v;
                            for (v = A; v--; )
                                z[v].rank >= t && z.splice(v, 1);
                            A = z.length
                        }
                        for (v = 0; v < A; v++) {
                            b = z[v];
                            h = b.labelPos;
                            b = 9999;
                            for (r = 0; r < t; r++)
                                g = M(w[r] - h[1]), g < b && (b = g, B = r);
                            if (B < v && w[v] !== null)
                                B = v;
                            else
                                for (t < A - v + B && w[v] !== null && (B = t - A + v); w[B] === null; )
                                    B++;
                            C.push({i: B,y: w[B]});
                            w[B] = null
                        }
                        C.sort(u)
                    }
                    for (v = 0; v < A; v++) {
                        b = z[v];
                        h = b.labelPos;
                        g = b.dataLabel;
                        t = b.visible === !1 ? "hidden" : "visible";
                        s = h[1];
                        if (j > 0) {
                            if (r = C.pop(), B = r.i, r = r.y, s > r && w[B + 1] !== null || s < r && w[B - 1] !== null)
                                r = s
                        } else
                            r = s;
                        s = d.justify ? k[0] + (x ? -1 : 1) * (l + j) : this.getX(B === 0 || B === w.length - 1 ? s : r, x);
                        g.attr({visibility: t,align: h[6]})[g.moved ? "animate" : "attr"]({x: s + d.x + ({left: e,right: -e}[h[6]] || 0),y: r + d.y});
                        g.moved = !0;
                        if (p && f)
                            g = b.connector, h = i ? ["M", s + (h[6] === "left" ? 5 : -5), r, "C", s, r, 2 * h[2] - h[4], 2 * h[3] - h[5], h[2], h[3], "L", h[4], h[5]] : ["M", s + (h[6] === "left" ? 5 : -5), r, "L", h[2], h[3], "L", h[4], h[5]], g ? (g.animate({d: h}), g.attr("visibility", t)) : b.connector = g = this.chart.renderer.path(h).attr({"stroke-width": f,stroke: d.connectorColor || b.color || "#606060",visibility: t,zIndex: 3}).translate(c.plotLeft, c.plotTop).add()
                    }
                }
            }
        },drawTracker: ha.prototype.drawTracker,drawLegendSymbol: G.prototype.drawLegendSymbol,getSymbol: function() {
        }};
    T = ca(R, T);
    Y.pie = T;
    u(Highcharts, {Axis: ob,CanVGRenderer: fb,Chart: rb,Color: pa,Legend: qb,Point: Wa,Tick: Sa,Tooltip: pb,Renderer: Ta,Series: R,SVGRenderer: qa,VMLRenderer: ka,dateFormat: db,pathAnim: Ua,getOptions: function() {
            return V
        },hasBidiBug: Rb,numberFormat: Xa,seriesTypes: Y,setOptions: function(a) {
            V = C(V, a);
            Bb();
            return V
        },addEvent: I,removeEvent: P,createElement: S,discardElement: Qa,css: F,each: n,extend: u,map: Ea,merge: C,pick: o,splat: na,extendClass: ca,pInt: w,product: "Highcharts",version: "2.2.5"})
})();
(function($) {
    $.fn.extend({gridselz: function() {
            var functionName = null;
            var options = {};
            if (arguments.length > 1) {
                functionName = arguments[0];
                options = arguments[1]
            } else if (typeof (arguments[0]) == 'string') {
                functionName = arguments[0];
            } else {
                options = arguments[0];
                return $(this).each(function() {
                    if (!$(this).data('gridselz-instance')) {
                        return new GridSelect(this, options);
                    }
                });
            }
            if (functionName) {
                $(this).data('gridselz-instance')[functionName](options);
            }
        }});
    var GridSelect = function(element, options) {
        this.select = j(element);
        if (!this.select.length || !this.select.is('select')) {
            throw ('GridSelect requires an element, and it must be a select');
        }
        var defaultOptions = {className: 'gridselz-radio',selectedClassName: 'gridselz-selected',onFocusCallback: function(event, select) {
            },onChangeCallback: function(event, select) {
            },onBlurCallback: function(event, select) {
            },onKeydownCallback: function(event, select) {
            },onMousedownCallback: function(event, select) {
            },buildItemContentCallback: function(select, value, contents) {
            }};
        this.options = $.extend(defaultOptions, options);
        this.init();
    };
    $.extend(GridSelect.prototype, {init: function() {
            this.build();
            this.bindEvents();
        },build: function() {
            this.select.data('gridselz-instance', this).hide();
            this.list = $('<ul/>', {'class': 'gridselz-list ' + this.options.className});
            this.list.append('<li style="height:0;width:0;margin:0;padding:0;overflow:hidden;position:absolute"><input class="save_on_enter" type="text" tabindex="10"/></li>')
            this.firstItem = this.list.find('input');
            var self = this;
            this.select.find('option').each(function(index, option) {
                var li = $('<li/>', {'class': 'gridselz-item','title': $(option).text()});
                var contents = self.options.buildItemContentCallback.call(this, self.select, $(option), li, index) || $(option).html();
                li.html('<a href="#" tabindex="-1">' + contents + '</a>');
                li.data('value', option.value);
                if (option.disabled) {
                    li.addClass('gridselz-option-disabled');
                    li.data('disabled', true);
                } else if (option.selected) {
                    li.addClass('gridselz-selected ' + self.options.selectedClassName);
                }
                self.list.append(li);
            });
            if (this.select.is(':disabled')) {
                this.disable();
            }
            this.list.insertAfter(this.select);
        },disable: function() {
            this.setDisabled(true);
        },enable: function() {
            this.setDisabled(false);
        },setDisabled: function(isDisabled) {
            this.list.toggleClass('gridselz-disabled', isDisabled);
            this.select.attr('disabled', this.disabled = isDisabled);
        },toggle: function() {
            this.disabled ? this.enable() : this.disable();
        },bindEvents: function() {
            var self = this;
            this.select.on('gridselz:update', function() {
                self.setValueFromSelect();
                self.updateDisabledOptions();
            });
            this.firstItem.on('focus', $.proxy(this.focus, this));
            this.firstItem.on('blur', $.proxy(this.blur, this));
            this.firstItem.on('keydown', $.proxy(this.keydown, this));
            this.list.find('li > a').on('mousedown', $.proxy(this.mousedown, this));
        },setValueFromSelect: function() {
            var index = this.select.get(0).options.selectedIndex;
            this.list.find('li.gridselz-item').removeClass('gridselz-selected ' + this.options.selectedClassName);
            if (this.select.get(0).options[index].selected) {
                $(this.list.find('li.gridselz-item')[index]).addClass('gridselz-selected ' + this.options.selectedClassName);
            }
        },updateDisabledOptions: function() {
            var self = this;
            $.each(this.select.get(0).options, function(index, option) {
                var li = $(self.list.find('li.gridselz-item')[index]);
                if (!!option.disabled != !!li.data('disabled')) {
                    if (option.disabled) {
                        li.addClass('gridselz-option-disabled');
                        li.data('disabled', true);
                    } else {
                        li.removeClass('gridselz-option-disabled');
                        li.data('disabled', null);
                    }
                }
            });
        },focus: function(event) {
            if (this.disabled) {
                return;
            }
            this.list.addClass("gridselz-focused");
            this.options.onFocusCallback.call(this, event, this.select);
        },blur: function(event) {
            if (this.disabled) {
                return;
            }
            this.list.removeClass("gridselz-focused");
            this.options.onBlurCallback.call(this, event, this.select);
        },shouldNotInterceptKeyEvent: function(event) {
            var allowedNavigationKeys = [j.ui.keyCode.TAB, j.ui.keyCode.ENTER, j.ui.keyCode.ESCAPE];
            return allowedNavigationKeys.contains(event.keyCode) || event.metaKey || event.ctrlKey || event.altKey;
        },keydown: function(event) {
            if (this.shouldNotInterceptKeyEvent(event)) {
                return;
            }
            event.stopPropagation();
            event.preventDefault();
            if (this.disabled) {
                return;
            }
            var currentNode = this.list.find('li.gridselz-selected');
            var newNode = [];
            switch (event.keyCode) {
                case j.ui.keyCode.UP:
                case j.ui.keyCode.LEFT:
                    newNode = currentNode.prev('li.gridselz-item');
                    break;
                case j.ui.keyCode.DOWN:
                case j.ui.keyCode.RIGHT:
                    newNode = currentNode.next('li.gridselz-item');
                    break;
                default:
                    if (event.keyCode >= 33 && event.keyCode <= 126) {
                        var s = String.fromCharCode(event.keyCode).toLowerCase();
                        this.list.find("li.gridselz-item").each(function() {
                            var item = $(this);
                            if (s.length > 0 && item.attr('title')[0].toLowerCase() === s) {
                                newNode = item;
                            }
                        });
                    }
                    break;
            }
            if (newNode.length) {
                if (newNode.data('disabled')) {
                    return;
                }
                currentNode.removeClass('gridselz-selected ' + this.options.selectedClassName);
                newNode.addClass('gridselz-selected ' + this.options.selectedClassName);
                this.select.val(newNode.data('value'));
                this.options.onChangeCallback.call(this, event, this.select);
            }
            this.options.onKeydownCallback.call(this, event, this.select);
        },mousedown: function(event) {
            event.stopPropagation();
            event.preventDefault();
            if (this.disabled) {
                return;
            }
            var target = j(event.target);
            if (target.length) {
                var closestLi = target.closest('li.gridselz-item');
                if (closestLi.data('disabled')) {
                    return;
                }
                this.list.find('li.gridselz-selected').removeClass('gridselz-selected ' + this.options.selectedClassName);
                closestLi.addClass('gridselz-selected ' + this.options.selectedClassName);
                this.select.val(closestLi.data('value'));
                this.options.onChangeCallback.call(this, event, this.select);
            }
            this.firstItem.focus();
            this.options.onMousedownCallback.call(this, event, this.select);
        }});
})(jQuery);
(function($) {
    $.InFieldLabels = function(label, field, options) {
        var base = this;
        base.$label = $(label);
        base.$field = $(field);
        base.$label.data("InFieldLabels", base);
        base.showing = true;
        base.init = function() {
            base.options = $.extend({}, $.InFieldLabels.defaultOptions, options);
            base.$label.css('position', 'absolute');
            var fieldPosition = base.$field.position();
            base.$label.css({'left': fieldPosition.left,'top': fieldPosition.top}).addClass(base.options.labelClass);
            if (base.$field.val() != "") {
                base.$label.hide();
                base.showing = false;
            }
            ;
            base.$field.focus(function() {
                base.fadeOnFocus();
            }).blur(function() {
                base.checkForEmpty(true);
            }).bind('keydown.infieldlabel', function(e) {
                base.hideOnChange(e);
            }).change(function(e) {
                base.checkForEmpty();
            }).bind('onPropertyChange', function() {
                base.checkForEmpty();
            });
        };
        base.fadeOnFocus = function() {
            if (base.showing) {
                base.setOpacity(base.options.fadeOpacity);
            }
            ;
        };
        base.setOpacity = function(opacity) {
            base.$label.stop().animate({opacity: opacity}, base.options.fadeDuration);
            base.showing = (opacity > 0.0);
        };
        base.checkForEmpty = function(blur) {
            if (base.$field.val() == "") {
                base.prepForShow();
                base.setOpacity(blur ? 1.0 : base.options.fadeOpacity);
            } else {
                base.setOpacity(0.0);
            }
            ;
        };
        base.prepForShow = function(e) {
            if (!base.showing) {
                base.$label.css({opacity: 0.0}).show();
                base.$field.bind('keydown.infieldlabel', function(e) {
                    base.hideOnChange(e);
                });
            }
            ;
        };
        base.hideOnChange = function(e) {
            if ((e.keyCode == 16) || (e.keyCode == 9))
                return;
            if (base.showing) {
                base.$label.hide();
                base.showing = false;
            }
            ;
            base.$field.unbind('keydown.infieldlabel');
        };
        base.init();
    };
    $.InFieldLabels.defaultOptions = {fadeOpacity: 0.5,fadeDuration: 300,labelClass: 'infield'};
    $.fn.inFieldLabels = function(options) {
        return this.each(function() {
            var for_attr = $(this).attr('for');
            if (!for_attr)
                return;
            var $field = $("input#" + for_attr + "[type='text']," + "input#" + for_attr + "[type='password']," + "textarea#" + for_attr);
            if ($field.length == 0)
                return;
            (new $.InFieldLabels(this, $field[0], options));
        });
    };
})(jQuery);
(function($) {
    var defaultNamespace = 'file_upload', undef = 'undefined', func = 'function', FileUpload, methods, MultiLoader = function(callBack, numOrList) {
        var loaded = 0, list = [];
        if (numOrList) {
            if (numOrList.length) {
                list = numOrList;
            } else {
                list[numOrList - 1] = null;
            }
        }
        this.complete = function() {
            loaded += 1;
            if (loaded === list.length) {
                callBack(list);
                loaded = 0;
                list = [];
            }
        };
        this.push = function(item) {
            list.push(item);
        };
        this.getList = function() {
            return list;
        };
    }, SequenceHandler = function() {
        var sequence = [];
        this.push = function(callBack) {
            sequence.push(callBack);
            if (sequence.length === 1) {
                callBack();
            }
        };
        this.next = function() {
            sequence.shift();
            if (sequence.length) {
                sequence[0]();
            }
        };
    };
    FileUpload = function(container) {
        var fileUpload = this, uploadForm, fileInput, settings = {namespace: defaultNamespace,uploadFormFilter: function(index) {
                return true;
            },fileInputFilter: function(index) {
                return true;
            },cssClass: defaultNamespace,dragDropSupport: true,dropZone: container,url: function(form) {
                return form.attr('action');
            },method: function(form) {
                return form.attr('method');
            },fieldName: function(input) {
                return input.attr('name');
            },formData: function(form) {
                return form.serializeArray();
            },requestHeaders: null,multipart: true,multiFileRequest: false,withCredentials: false,forceIframeUpload: false,sequentialUploads: false,maxChunkSize: null}, multiLoader = new MultiLoader(function(list) {
            if (typeof settings.onLoadAll === func) {
                settings.onLoadAll(list);
            }
        }), sequenceHandler = new SequenceHandler(), documentListeners = {}, dropZoneListeners = {}, protocolRegExp = /^http(s)?:\/\//, optionsReference, isXHRUploadCapable = function() {
            return typeof XMLHttpRequest !== undef && typeof XMLHttpRequestUpload !== undef && typeof File !== undef && (!settings.multipart || typeof FormData !== undef || (typeof FileReader !== undef && typeof XMLHttpRequest.prototype.sendAsBinary === func));
        }, initEventHandlers = function() {
            if (settings.dragDropSupport) {
                if (typeof settings.onDocumentDragEnter === func) {
                    documentListeners['dragenter.' + settings.namespace] = function(e) {
                        settings.onDocumentDragEnter(e);
                    };
                }
                if (typeof settings.onDocumentDragLeave === func) {
                    documentListeners['dragleave.' + settings.namespace] = function(e) {
                        settings.onDocumentDragLeave(e);
                    };
                }
                documentListeners['dragover.' + settings.namespace] = fileUpload.onDocumentDragOver;
                documentListeners['drop.' + settings.namespace] = fileUpload.onDocumentDrop;
                $(document).bind(documentListeners);
                if (typeof settings.onDragEnter === func) {
                    dropZoneListeners['dragenter.' + settings.namespace] = function(e) {
                        settings.onDragEnter(e);
                    };
                }
                if (typeof settings.onDragLeave === func) {
                    dropZoneListeners['dragleave.' + settings.namespace] = function(e) {
                        settings.onDragLeave(e);
                    };
                }
                dropZoneListeners['dragover.' + settings.namespace] = fileUpload.onDragOver;
                dropZoneListeners['drop.' + settings.namespace] = fileUpload.onDrop;
                settings.dropZone.bind(dropZoneListeners);
            }
            fileInput.bind('change.' + settings.namespace, fileUpload.onChange);
        }, removeEventHandlers = function() {
            $.each(documentListeners, function(key, value) {
                $(document).unbind(key, value);
            });
            $.each(dropZoneListeners, function(key, value) {
                settings.dropZone.unbind(key, value);
            });
            fileInput.unbind('change.' + settings.namespace);
        }, isChunkedUpload = function(settings) {
            return typeof settings.uploadedBytes !== undef;
        }, createProgressEvent = function(lengthComputable, loaded, total) {
            var event;
            if (typeof document.createEvent === func && typeof ProgressEvent !== undef) {
                event = document.createEvent('ProgressEvent');
                event.initProgressEvent('progress', false, false, lengthComputable, loaded, total);
            } else {
                event = {lengthComputable: true,loaded: loaded,total: total};
            }
            return event;
        }, getProgressTotal = function(files, index, settings) {
            var i, total;
            if (typeof settings.progressTotal === undef) {
                if (files[index]) {
                    total = files[index].size;
                    settings.progressTotal = total ? total : 1;
                } else {
                    total = 0;
                    for (i = 0; i < files.length; i += 1) {
                        total += files[i].size;
                    }
                    settings.progressTotal = total;
                }
            }
            return settings.progressTotal;
        }, handleGlobalProgress = function(event, files, index, xhr, settings) {
            var progressEvent, loaderList, globalLoaded = 0, globalTotal = 0;
            if (event.lengthComputable && typeof settings.onProgressAll === func) {
                settings.progressLoaded = parseInt(event.loaded / event.total * getProgressTotal(files, index, settings), 10);
                loaderList = multiLoader.getList();
                $.each(loaderList, function(index, item) {
                    globalLoaded += item[3].progressLoaded || 0;
                    globalTotal += getProgressTotal(item[0], item[1], item[3]);
                });
                progressEvent = createProgressEvent(true, globalLoaded, globalTotal);
                settings.onProgressAll(progressEvent, loaderList);
            }
        }, handleLoadEvent = function(event, files, index, xhr, settings) {
            var progressEvent;
            if (isChunkedUpload(settings)) {
                settings.uploadedBytes = settings.uploadedBytes + settings.chunkSize;
                progressEvent = createProgressEvent(true, settings.uploadedBytes, files[index].size);
                if (typeof settings.onProgress === func) {
                    settings.onProgress(progressEvent, files, index, xhr, settings);
                }
                handleGlobalProgress(progressEvent, files, index, xhr, settings);
                if (settings.uploadedBytes < files[index].size) {
                    if (typeof settings.resumeUpload === func) {
                        settings.resumeUpload(event, files, index, xhr, settings, function() {
                            upload(event, files, index, xhr, settings, true);
                        });
                    } else {
                        upload(event, files, index, xhr, settings, true);
                    }
                    return;
                }
            }
            settings.progressLoaded = getProgressTotal(files, index, settings);
            if (typeof settings.onLoad === func) {
                settings.onLoad(event, files, index, xhr, settings);
            }
            multiLoader.complete();
            sequenceHandler.next();
        }, handleProgressEvent = function(event, files, index, xhr, settings) {
            var progressEvent = event;
            if (isChunkedUpload(settings) && event.lengthComputable) {
                progressEvent = createProgressEvent(true, settings.uploadedBytes + parseInt(event.loaded / event.total * settings.chunkSize, 10), files[index].size);
            }
            if (typeof settings.onProgress === func) {
                settings.onProgress(progressEvent, files, index, xhr, settings);
            }
            handleGlobalProgress(progressEvent, files, index, xhr, settings);
        }, initUploadEventHandlers = function(files, index, xhr, settings) {
            if (xhr.upload) {
                xhr.upload.onprogress = function(e) {
                    handleProgressEvent(e, files, index, xhr, settings);
                };
            }
            xhr.onload = function(e) {
                handleLoadEvent(e, files, index, xhr, settings);
            };
            xhr.onabort = function(e) {
                settings.progressTotal = settings.progressLoaded;
                if (typeof settings.onAbort === func) {
                    settings.onAbort(e, files, index, xhr, settings);
                }
                multiLoader.complete();
                sequenceHandler.next();
            };
            xhr.onerror = function(e) {
                settings.progressTotal = settings.progressLoaded;
                if (typeof settings.onError === func) {
                    settings.onError(e, files, index, xhr, settings);
                }
                multiLoader.complete();
                sequenceHandler.next();
            };
        }, getUrl = function(settings) {
            if (typeof settings.url === func) {
                return settings.url(settings.uploadForm || uploadForm);
            }
            return settings.url;
        }, getMethod = function(settings) {
            if (typeof settings.method === func) {
                return settings.method(settings.uploadForm || uploadForm);
            }
            return settings.method;
        }, getFieldName = function(settings) {
            if (typeof settings.fieldName === func) {
                return settings.fieldName(settings.fileInput || fileInput);
            }
            return settings.fieldName;
        }, getFormData = function(settings) {
            var formData;
            if (typeof settings.formData === func) {
                return settings.formData(settings.uploadForm || uploadForm);
            } else if ($.isArray(settings.formData)) {
                return settings.formData;
            } else if (settings.formData) {
                formData = [];
                $.each(settings.formData, function(name, value) {
                    formData.push({name: name,value: value});
                });
                return formData;
            }
            return [];
        }, isSameDomain = function(url) {
            if (protocolRegExp.test(url)) {
                var host = location.host, indexStart = location.protocol.length + 2, index = url.indexOf(host, indexStart), pathIndex = index + host.length;
                if ((index === indexStart || index === url.indexOf('@', indexStart) + 1) && (url.length === pathIndex || $.inArray(url.charAt(pathIndex), ['/', '?', '#']) !== -1)) {
                    return true;
                }
                return false;
            }
            return true;
        }, initUploadRequest = function(files, index, xhr, settings) {
            var file = files[index], url = getUrl(settings), sameDomain = isSameDomain(url);
            xhr.open(getMethod(settings), url, true);
            if (sameDomain) {
                xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
                if (!settings.multipart || isChunkedUpload(settings)) {
                    xhr.setRequestHeader('X-File-Name', file.name);
                    xhr.setRequestHeader('X-File-Type', file.type);
                    xhr.setRequestHeader('X-File-Size', file.size);
                    if (!isChunkedUpload(settings)) {
                        xhr.setRequestHeader('Content-Type', file.type);
                    } else if (!settings.multipart) {
                        xhr.setRequestHeader('Content-Type', 'application/octet-stream');
                    }
                }
            } else if (settings.withCredentials) {
                xhr.withCredentials = true;
            }
            if ($.isArray(settings.requestHeaders)) {
                $.each(settings.requestHeaders, function(index, header) {
                    xhr.setRequestHeader(header.name, header.value);
                });
            } else if (settings.requestHeaders) {
                $.each(settings.requestHeaders, function(name, value) {
                    xhr.setRequestHeader(name, value);
                });
            }
        }, formDataUpload = function(files, xhr, settings) {
            var formData = new FormData(), i;
            $.each(getFormData(settings), function(index, field) {
                formData.append(field.name, field.value);
            });
            for (i = 0; i < files.length; i += 1) {
                formData.append(getFieldName(settings), files[i]);
            }
            xhr.send(formData);
        }, loadFileContent = function(file, callBack) {
            var fileReader = new FileReader();
            fileReader.onload = function(e) {
                file.content = e.target.result;
                callBack();
            };
            fileReader.readAsBinaryString(file);
        }, utf8encode = function(str) {
            return unescape(encodeURIComponent(str));
        }, buildMultiPartFormData = function(boundary, files, filesFieldName, fields) {
            var doubleDash = '--', crlf = '\r\n', formData = '';
            $.each(fields, function(index, field) {
                formData += doubleDash + boundary + crlf + 'Content-Disposition: form-data; name="' +
                utf8encode(field.name) + '"' + crlf + crlf +
                utf8encode(field.value) + crlf;
            });
            $.each(files, function(index, file) {
                formData += doubleDash + boundary + crlf + 'Content-Disposition: form-data; name="' +
                utf8encode(filesFieldName) + '"; filename="' + utf8encode(file.name) + '"' + crlf + 'Content-Type: ' + utf8encode(file.type) + crlf + crlf +
                file.content + crlf;
            });
            formData += doubleDash + boundary + doubleDash + crlf;
            return formData;
        }, fileReaderUpload = function(files, xhr, settings) {
            var boundary = '----MultiPartFormBoundary' + (new Date()).getTime(), loader, i;
            xhr.setRequestHeader('Content-Type', 'multipart/form-data; boundary=' + boundary);
            loader = new MultiLoader(function() {
                xhr.sendAsBinary(buildMultiPartFormData(boundary, files, getFieldName(settings), getFormData(settings)));
            }, files.length);
            for (i = 0; i < files.length; i += 1) {
                loadFileContent(files[i], loader.complete);
            }
        }, getBlob = function(file, settings) {
            var blob, ub = settings.uploadedBytes, mcs = settings.maxChunkSize;
            if (file && typeof file.slice === func && (ub || (mcs && mcs < file.size))) {
                settings.uploadedBytes = ub = ub || 0;
                blob = file.slice(ub, mcs || file.size - ub);
                settings.chunkSize = blob.size;
                return blob;
            }
            return file;
        }, upload = function(event, files, index, xhr, settings, nextChunk) {
            var send;
            if (!nextChunk) {
                if (typeof settings.onSend === func && settings.onSend(event, files, index, xhr, settings) === false) {
                    return;
                }
                multiLoader.push(Array.prototype.slice.call(arguments, 1));
            }
            send = function() {
                var blob = getBlob(files[index], settings), filesToUpload;
                initUploadEventHandlers(files, index, xhr, settings);
                initUploadRequest(files, index, xhr, settings);
                if (!settings.multipart) {
                    if (xhr.upload) {
                        xhr.send(blob);
                    } else {
                        $.error('Browser does not support XHR file uploads');
                    }
                } else {
                    filesToUpload = (typeof index === 'number') ? [blob] : files;
                    if (typeof FormData !== undef) {
                        formDataUpload(filesToUpload, xhr, settings);
                    } else if (typeof FileReader !== undef && typeof xhr.sendAsBinary === func) {
                        fileReaderUpload(filesToUpload, xhr, settings);
                    } else {
                        $.error('Browser does not support multipart/form-data XHR file uploads');
                    }
                }
            };
            if (!nextChunk && settings.sequentialUploads) {
                sequenceHandler.push(send);
            } else {
                send();
            }
        }, handleUpload = function(event, files, input, form, index) {
            var xhr = new XMLHttpRequest(), uploadSettings = $.extend({}, settings);
            uploadSettings.fileInput = input;
            uploadSettings.uploadForm = form;
            if (typeof uploadSettings.initUpload === func) {
                uploadSettings.initUpload(event, files, index, xhr, uploadSettings, function() {
                    upload(event, files, index, xhr, uploadSettings);
                });
            } else {
                upload(event, files, index, xhr, uploadSettings);
            }
        }, handleFiles = function(event, files, input, form) {
            var i;
            files = Array.prototype.slice.call(files, 0);
            if (settings.multiFileRequest && settings.multipart && files.length) {
                handleUpload(event, files, input, form);
            } else {
                for (i = 0; i < files.length; i += 1) {
                    handleUpload(event, files, input, form, i);
                }
            }
        }, handleLegacyGlobalProgress = function(event, files, index, iframe, settings) {
            var total = files[index].size ? files[index].size : 1, progressEvent = createProgressEvent(true, total, total);
            settings.progressLoaded = total;
            handleGlobalProgress(progressEvent, files, index, iframe, settings);
        }, legacyUploadFormDataInit = function(input, form, settings) {
            var formData = getFormData(settings);
            form.find(':input').not(':disabled').attr('disabled', true).addClass(settings.namespace + '_disabled');
            $.each(formData, function(index, field) {
                $('<input type="hidden"/>').attr('name', field.name).val(field.value).addClass(settings.namespace + '_form_data').appendTo(form);
            });
            input.attr('name', getFieldName(settings)).appendTo(form);
        }, legacyUploadFormDataReset = function(input, form, settings) {
            input.detach();
            form.find('.' + settings.namespace + '_disabled').removeAttr('disabled').removeClass(settings.namespace + '_disabled');
            form.find('.' + settings.namespace + '_form_data').remove();
        }, legacyUpload = function(event, files, input, form, iframe, settings) {
            var send;
            if (typeof settings.onSend === func && settings.onSend(event, files, 0, iframe, settings) === false) {
                return;
            }
            multiLoader.push([files, 0, iframe, settings]);
            send = function() {
                var originalAction = form.attr('action'), originalMethod = form.attr('method'), originalTarget = form.attr('target');
                iframe.unbind('abort').bind('abort', function(e) {
                    iframe.readyState = 0;
                    iframe.unbind('load').attr('src', 'javascript'.concat(':false;'));
                    handleLegacyGlobalProgress(e, files, 0, iframe, settings);
                    if (typeof settings.onAbort === func) {
                        settings.onAbort(e, files, 0, iframe, settings);
                    }
                    multiLoader.complete();
                    sequenceHandler.next();
                }).unbind('load').bind('load', function(e) {
                    iframe.readyState = 4;
                    handleLegacyGlobalProgress(e, files, 0, iframe, settings);
                    if (typeof settings.onLoad === func) {
                        settings.onLoad(e, files, 0, iframe, settings);
                    }
                    multiLoader.complete();
                    sequenceHandler.next();
                    $('<iframe src="javascript:false;" style="display:none"></iframe>').appendTo(form).remove();
                });
                form.attr('action', getUrl(settings)).attr('method', getMethod(settings)).attr('target', iframe.attr('name'));
                legacyUploadFormDataInit(input, form, settings);
                iframe.readyState = 2;
                form.get(0).submit();
                legacyUploadFormDataReset(input, form, settings);
                form.attr('action', originalAction).attr('method', originalMethod).attr('target', originalTarget);
            };
            if (settings.sequentialUploads) {
                sequenceHandler.push(send);
            } else {
                send();
            }
        }, handleLegacyUpload = function(event, input, form) {
            var iframe = $('<iframe src="javascript:false;" style="display:none" name="iframe_' +
            settings.namespace + '_' + (new Date()).getTime() + '"></iframe>'), uploadSettings = $.extend({}, settings), files = event.target.files;
            files = files ? Array.prototype.slice.call(files, 0) : [{name: input.val(),type: null,size: null}];
            uploadSettings.fileInput = input;
            uploadSettings.uploadForm = form;
            iframe.readyState = 0;
            iframe.abort = function() {
                iframe.trigger('abort');
            };
            iframe.bind('load', function() {
                iframe.unbind('load');
                if (typeof uploadSettings.initUpload === func) {
                    uploadSettings.initUpload(event, files, 0, iframe, uploadSettings, function() {
                        legacyUpload(event, files, input, form, iframe, uploadSettings);
                    });
                } else {
                    legacyUpload(event, files, input, form, iframe, uploadSettings);
                }
            }).appendTo(form);
        }, initUploadForm = function() {
            uploadForm = (container.is('form') ? container : container.find('form')).filter(settings.uploadFormFilter);
        }, initFileInput = function() {
            fileInput = (uploadForm.length ? uploadForm : container).find('input:file').filter(settings.fileInputFilter);
        }, replaceFileInput = function(input) {
            var inputClone = input.clone(true);
            $('<form/>').append(inputClone).get(0).reset();
            input.after(inputClone).detach();
            initFileInput();
        };
        this.onDocumentDragOver = function(e) {
            if (typeof settings.onDocumentDragOver === func && settings.onDocumentDragOver(e) === false) {
                return false;
            }
            e.preventDefault();
        };
        this.onDocumentDrop = function(e) {
            if (typeof settings.onDocumentDrop === func && settings.onDocumentDrop(e) === false) {
                return false;
            }
            e.preventDefault();
        };
        this.onDragOver = function(e) {
            if (typeof settings.onDragOver === func && settings.onDragOver(e) === false) {
                return false;
            }
            var dataTransfer = e.originalEvent.dataTransfer;
            if (dataTransfer && dataTransfer.files) {
                dataTransfer.dropEffect = dataTransfer.effectAllowed = 'copy';
                e.preventDefault();
            }
        };
        this.onDrop = function(e) {
            if (typeof settings.onDrop === func && settings.onDrop(e) === false) {
                return false;
            }
            var dataTransfer = e.originalEvent.dataTransfer;
            if (dataTransfer && dataTransfer.files && isXHRUploadCapable()) {
                handleFiles(e, dataTransfer.files);
            }
            e.preventDefault();
        };
        this.onChange = function(e) {
            if (typeof settings.onChange === func && settings.onChange(e) === false) {
                return false;
            }
            var input = $(e.target), form = $(e.target.form);
            if (form.length === 1) {
                input.data(defaultNamespace + '_form', form);
                replaceFileInput(input);
            } else {
                form = input.data(defaultNamespace + '_form');
            }
            if (!settings.forceIframeUpload && e.target.files && isXHRUploadCapable()) {
                handleFiles(e, e.target.files, input, form);
            } else {
                handleLegacyUpload(e, input, form);
            }
        };
        this.init = function(options) {
            if (options) {
                $.extend(settings, options);
                optionsReference = options;
            }
            initUploadForm();
            initFileInput();
            if (container.data(settings.namespace)) {
                $.error('FileUpload with namespace "' + settings.namespace + '" already assigned to this element');
                return;
            }
            container.data(settings.namespace, fileUpload).addClass(settings.cssClass);
            settings.dropZone.not(container).addClass(settings.cssClass);
            initEventHandlers();
        };
        this.options = function(options) {
            var oldCssClass, oldDropZone, uploadFormFilterUpdate, fileInputFilterUpdate;
            if (typeof options === undef) {
                return $.extend({}, settings);
            }
            if (optionsReference) {
                $.extend(optionsReference, options);
            }
            removeEventHandlers();
            $.each(options, function(name, value) {
                switch (name) {
                    case 'namespace':
                        $.error('The FileUpload namespace cannot be updated.');
                        return;
                    case 'uploadFormFilter':
                        uploadFormFilterUpdate = true;
                        fileInputFilterUpdate = true;
                        break;
                    case 'fileInputFilter':
                        fileInputFilterUpdate = true;
                        break;
                    case 'cssClass':
                        oldCssClass = settings.cssClass;
                        break;
                    case 'dropZone':
                        oldDropZone = settings.dropZone;
                        break;
                }
                settings[name] = value;
            });
            if (uploadFormFilterUpdate) {
                initUploadForm();
            }
            if (fileInputFilterUpdate) {
                initFileInput();
            }
            if (typeof oldCssClass !== undef) {
                container.removeClass(oldCssClass).addClass(settings.cssClass);
                (oldDropZone ? oldDropZone : settings.dropZone).not(container).removeClass(oldCssClass);
                settings.dropZone.not(container).addClass(settings.cssClass);
            } else if (oldDropZone) {
                oldDropZone.not(container).removeClass(settings.cssClass);
                settings.dropZone.not(container).addClass(settings.cssClass);
            }
            initEventHandlers();
        };
        this.option = function(name, value) {
            var options;
            if (typeof value === undef) {
                return settings[name];
            }
            options = {};
            options[name] = value;
            fileUpload.options(options);
        };
        this.destroy = function() {
            removeEventHandlers();
            container.removeData(settings.namespace).removeClass(settings.cssClass);
            settings.dropZone.not(container).removeClass(settings.cssClass);
        };
        this.upload = function(files) {
            if (!$.isArray(files)) {
                files = [files];
            }
            handleFiles(null, files);
        };
    };
    methods = {init: function(options) {
            return this.each(function() {
                (new FileUpload($(this))).init(options);
            });
        },option: function(option, value, namespace) {
            namespace = namespace ? namespace : defaultNamespace;
            var fileUpload = $(this).data(namespace);
            if (fileUpload) {
                if (typeof option === 'string') {
                    return fileUpload.option(option, value);
                }
                return fileUpload.options(option);
            } else {
                $.error('No FileUpload with namespace "' + namespace + '" assigned to this element');
            }
        },destroy: function(namespace) {
            namespace = namespace ? namespace : defaultNamespace;
            return this.each(function() {
                var fileUpload = $(this).data(namespace);
                if (fileUpload) {
                    fileUpload.destroy();
                } else {
                    $.error('No FileUpload with namespace "' + namespace + '" assigned to this element');
                }
            });
        },upload: function(files, namespace) {
            namespace = namespace ? namespace : defaultNamespace;
            var fileUpload = $(this).data(namespace);
            if (fileUpload) {
                fileUpload.upload(files);
            } else {
                $.error('No FileUpload with namespace "' + namespace + '" assigned to this element');
            }
        }};
    $.fn.fileUpload = function(method) {
        if (methods[method]) {
            return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
        } else if (typeof method === 'object' || !method) {
            return methods.init.apply(this, arguments);
        } else {
            $.error('Method ' + method + ' does not exist on jQuery.fileUpload');
        }
    };
}(jQuery));
(function($) {
    var undef = 'undefined', func = 'function', UploadHandler, methods, MultiLoader = function(callBack) {
        var loaded = 0, list = [];
        this.complete = function() {
            loaded += 1;
            if (loaded === list.length + 1) {
                callBack(list);
                loaded = 0;
                list = [];
            }
        };
        this.push = function(item) {
            list.push(item);
        };
        this.getList = function() {
            return list;
        };
    };
    UploadHandler = function(container, options) {
        var uploadHandler = this, dragOverTimeout, isDropZoneEnlarged, multiLoader = new MultiLoader(function(list) {
            uploadHandler.hideProgressBarAll(function() {
                uploadHandler.resetProgressBarAll();
                if (typeof uploadHandler.onCompleteAll === func) {
                    uploadHandler.onCompleteAll(list);
                }
            });
        });
        this.requestHeaders = {'Accept': 'application/json, text/javascript, */*; q=0.01'};
        this.dropZone = container;
        this.imageTypes = /^image\/(gif|jpeg|png)$/;
        this.previewMaxWidth = this.previewMaxHeight = 80;
        this.previewLoadDelay = 100;
        this.previewAsCanvas = true;
        this.previewSelector = '.file_upload_preview';
        this.progressSelector = '.file_upload_progress div';
        this.cancelSelector = '.file_upload_cancel button';
        this.cssClassSmall = 'file_upload_small';
        this.cssClassLarge = 'file_upload_large';
        this.cssClassHighlight = 'file_upload_highlight';
        this.dropEffect = 'highlight';
        this.uploadTable = this.downloadTable = null;
        this.buildUploadRow = this.buildDownloadRow = null;
        this.progressAllNode = null;
        this.loadImage = function(file, callBack, maxWidth, maxHeight, imageTypes, noCanvas) {
            var img, scaleImage, urlAPI, fileReader;
            if (imageTypes && !imageTypes.test(file.type)) {
                return null;
            }
            scaleImage = function(img) {
                var canvas = document.createElement('canvas'), scale = Math.min((maxWidth || img.width) / img.width, (maxHeight || img.height) / img.height);
                if (scale > 1) {
                    scale = 1;
                }
                img.width = parseInt(img.width * scale, 10);
                img.height = parseInt(img.height * scale, 10);
                if (noCanvas || typeof canvas.getContext !== func) {
                    return img;
                }
                canvas.width = img.width;
                canvas.height = img.height;
                canvas.getContext('2d').drawImage(img, 0, 0, img.width, img.height);
                return canvas;
            };
            img = document.createElement('img');
            urlAPI = typeof URL !== undef ? URL : typeof webkitURL !== undef ? webkitURL : null;
            if (urlAPI && typeof urlAPI.createObjectURL === func) {
                img.onload = function() {
                    urlAPI.revokeObjectURL(this.src);
                    callBack(scaleImage(img));
                };
                img.src = urlAPI.createObjectURL(file);
            } else if (typeof FileReader !== undef && typeof FileReader.prototype.readAsDataURL === func) {
                img.onload = function() {
                    callBack(scaleImage(img));
                };
                fileReader = new FileReader();
                fileReader.onload = function(e) {
                    img.src = e.target.result;
                };
                fileReader.readAsDataURL(file);
            } else {
                callBack(null);
            }
        };
        this.addNode = function(parentNode, node, callBack) {
            if (node) {
                node.css('display', 'none').appendTo(parentNode).fadeIn(function() {
                    if (typeof callBack === func) {
                        try {
                            callBack();
                        } catch (e) {
                            $(this).stop();
                            throw e;
                        }
                    }
                });
            } else if (typeof callBack === func) {
                callBack();
            }
        };
        this.removeNode = function(node, callBack) {
            if (node) {
                node.fadeOut(function() {
                    $(this).remove();
                    if (typeof callBack === func) {
                        try {
                            callBack();
                        } catch (e) {
                            $(this).stop();
                            throw e;
                        }
                    }
                });
            } else if (typeof callBack === func) {
                callBack();
            }
        };
        this.resetProgressBarAll = function() {
            if (uploadHandler.progressbarAll) {
                uploadHandler.progressbarAll.progressbar('value', 0);
            }
        };
        this.hideProgressBarAll = function(callBack) {
            if (uploadHandler.progressbarAll && !$(typeof uploadHandler.uploadTable === func ? uploadHandler.uploadTable(uploadHandler) : uploadHandler.uploadTable).find(uploadHandler.progressSelector + ':visible:first').length) {
                uploadHandler.progressbarAll.fadeOut(callBack);
            } else if (typeof callBack === func) {
                callBack();
            }
        };
        this.onAbort = function(event, files, index, xhr, handler) {
            handler.removeNode(handler.uploadRow, handler.hideProgressBarAll);
        };
        this.cancelUpload = function(event, files, index, xhr, handler) {
            var readyState = xhr.readyState;
            xhr.abort();
            if (typeof readyState !== 'number' || readyState < 2) {
                handler.onAbort(event, files, index, xhr, handler);
            }
        };
        this.initProgressBar = function(node, value) {
            if (!node || !node.length) {
                return null;
            }
            if (typeof node.progressbar === func) {
                return node.progressbar({value: value});
            } else {
                var progressbar = $('<progress value="' + value + '" max="100"/>').appendTo(node);
                progressbar.progressbar = function(key, value) {
                    progressbar.attr('value', value);
                };
                return progressbar;
            }
        };
        this.initUploadRow = function(event, files, index, xhr, handler, callBack) {
            var uploadRow = handler.uploadRow = (typeof handler.buildUploadRow === func ? handler.buildUploadRow(files, index, handler) : null);
            if (uploadRow) {
                handler.progressbar = handler.initProgressBar(uploadRow.find(handler.progressSelector), 0);
                uploadRow.find(handler.cancelSelector).click(function(e) {
                    handler.cancelUpload(e, files, index, xhr, handler);
                    return false;
                });
                uploadRow.find(handler.previewSelector).each(function() {
                    var previewNode = $(this), file = files[index];
                    if (file) {
                        setTimeout(function() {
                            handler.loadImage(file, function(img) {
                                handler.addNode(previewNode, $(img));
                            }, handler.previewMaxWidth, handler.previewMaxHeight, handler.imageTypes, !handler.previewAsCanvas);
                        }, handler.previewLoadDelay);
                    }
                });
            }
            handler.addNode((typeof handler.uploadTable === func ? handler.uploadTable(handler) : handler.uploadTable), uploadRow, callBack);
        };
        this.initUploadProgress = function(xhr, handler) {
            if (!xhr.upload && handler.progressbar) {
                handler.progressbar.progressbar('value', 100);
            }
        };
        this.onSend = function(event, files, index, xhr, handler) {
            handler.initUploadProgress(xhr, handler);
        };
        this.onProgressAll = function(event, list) {
            if (uploadHandler.progressbarAll && event.lengthComputable) {
                uploadHandler.progressbarAll.progressbar('value', parseInt(event.loaded / event.total * 100, 10));
            }
        };
        this.onProgress = function(event, files, index, xhr, handler) {
            if (handler.progressbar && event.lengthComputable) {
                handler.progressbar.progressbar('value', parseInt(event.loaded / event.total * 100, 10));
            }
        };
        this.onLoadAll = function(list) {
            multiLoader.complete();
        };
        this.initProgressBarAll = function() {
            if (!uploadHandler.progressbarAll) {
                uploadHandler.progressbarAll = uploadHandler.initProgressBar((typeof uploadHandler.progressAllNode === func ? uploadHandler.progressAllNode(uploadHandler) : uploadHandler.progressAllNode), 0);
            }
            if (uploadHandler.progressbarAll && uploadHandler.progressbarAll.is(':hidden')) {
                uploadHandler.progressbarAll.fadeIn();
            }
        };
        this.initUpload = function(event, files, index, xhr, handler, callBack) {
            handler.initUploadRow(event, files, index, xhr, handler, function() {
                if (typeof handler.beforeSend === func) {
                    handler.beforeSend(event, files, index, xhr, handler, callBack);
                } else {
                    callBack();
                }
            });
            handler.initProgressBarAll();
        };
        this.parseResponse = function(xhr) {
            if (typeof xhr.responseText !== undef) {
                return $.parseJSON(xhr.responseText);
            } else {
                return $.parseJSON(xhr.contents().text());
            }
        };
        this.initDownloadRow = function(event, files, index, xhr, handler, callBack) {
            var json, downloadRow;
            try {
                json = handler.response = handler.parseResponse(xhr);
                downloadRow = handler.downloadRow = (typeof handler.buildDownloadRow === func ? handler.buildDownloadRow(json, handler) : null);
                handler.addNode((typeof handler.downloadTable === func ? handler.downloadTable(handler) : handler.downloadTable), downloadRow, callBack);
            } catch (e) {
                if (typeof handler.onError === func) {
                    handler.originalEvent = event;
                    handler.onError(e, files, index, xhr, handler);
                } else {
                    throw e;
                }
            }
        };
        this.onLoad = function(event, files, index, xhr, handler) {
            multiLoader.push(Array.prototype.slice.call(arguments, 1));
            handler.removeNode(handler.uploadRow, function() {
                handler.initDownloadRow(event, files, index, xhr, handler, function() {
                    if (typeof handler.onComplete === func) {
                        handler.onComplete(event, files, index, xhr, handler);
                    }
                    multiLoader.complete();
                });
            });
        };
        this.dropZoneEnlarge = function() {
            if (!isDropZoneEnlarged) {
                if (typeof uploadHandler.dropZone.switchClass === func) {
                    uploadHandler.dropZone.switchClass(uploadHandler.cssClassSmall, uploadHandler.cssClassLarge);
                } else {
                    uploadHandler.dropZone.addClass(uploadHandler.cssClassLarge);
                    uploadHandler.dropZone.removeClass(uploadHandler.cssClassSmall);
                }
                isDropZoneEnlarged = true;
            }
        };
        this.dropZoneReduce = function() {
            if (typeof uploadHandler.dropZone.switchClass === func) {
                uploadHandler.dropZone.switchClass(uploadHandler.cssClassLarge, uploadHandler.cssClassSmall);
            } else {
                uploadHandler.dropZone.addClass(uploadHandler.cssClassSmall);
                uploadHandler.dropZone.removeClass(uploadHandler.cssClassLarge);
            }
            isDropZoneEnlarged = false;
        };
        this.onDocumentDragEnter = function(event) {
            uploadHandler.dropZoneEnlarge();
        };
        this.onDocumentDragOver = function(event) {
            if (dragOverTimeout) {
                clearTimeout(dragOverTimeout);
            }
            dragOverTimeout = setTimeout(function() {
                uploadHandler.dropZoneReduce();
            }, 200);
        };
        this.onDragEnter = this.onDragLeave = function(event) {
            uploadHandler.dropZone.toggleClass(uploadHandler.cssClassHighlight);
        };
        this.onDrop = function(event) {
            if (dragOverTimeout) {
                clearTimeout(dragOverTimeout);
            }
            if (uploadHandler.dropEffect && typeof uploadHandler.dropZone.effect === func) {
                uploadHandler.dropZone.effect(uploadHandler.dropEffect, function() {
                    uploadHandler.dropZone.removeClass(uploadHandler.cssClassHighlight);
                    uploadHandler.dropZoneReduce();
                });
            } else {
                uploadHandler.dropZone.removeClass(uploadHandler.cssClassHighlight);
                uploadHandler.dropZoneReduce();
            }
        };
        $.extend(this, options);
    };
    methods = {init: function(options) {
            return this.each(function() {
                $(this).fileUpload(new UploadHandler($(this), options));
            });
        },option: function(option, value, namespace) {
            if (typeof option === undef || (typeof option === 'string' && typeof value === undef)) {
                return $(this).fileUpload('option', option, value, namespace);
            }
            return this.each(function() {
                $(this).fileUpload('option', option, value, namespace);
            });
        },destroy: function(namespace) {
            return this.each(function() {
                $(this).fileUpload('destroy', namespace);
            });
        }};
    $.fn.fileUploadUI = function(method) {
        if (methods[method]) {
            return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
        } else if (typeof method === 'object' || !method) {
            return methods.init.apply(this, arguments);
        } else {
            $.error('Method ' + method + ' does not exist on jQuery.fileUploadUI');
        }
    };
}(jQuery));
var swfobject = function() {
    var b = "undefined", Q = "object", n = "Shockwave Flash", p = "ShockwaveFlash.ShockwaveFlash", P = "application/x-shockwave-flash", m = "SWFObjectExprInst", j = window, K = document, T = navigator, o = [], N = [], i = [], d = [], J, Z = null, M = null, l = null, e = false, A = false;
    var h = function() {
        var v = typeof K.getElementById != b && typeof K.getElementsByTagName != b && typeof K.createElement != b, AC = [0, 0, 0], x = null;
        if (typeof T.plugins != b && typeof T.plugins[n] == Q) {
            x = T.plugins[n].description;
            if (x && !(typeof T.mimeTypes != b && T.mimeTypes[P] && !T.mimeTypes[P].enabledPlugin)) {
                x = x.replace(/^.*\s+(\S+\s+\S+$)/, "$1");
                AC[0] = parseInt(x.replace(/^(.*)\..*$/, "$1"), 10);
                AC[1] = parseInt(x.replace(/^.*\.(.*)\s.*$/, "$1"), 10);
                AC[2] = /r/.test(x) ? parseInt(x.replace(/^.*r(.*)$/, "$1"), 10) : 0
            }
        } else {
            if (typeof j.ActiveXObject != b) {
                var y = null, AB = false;
                try {
                    y = new ActiveXObject(p + ".7")
                } catch (t) {
                    try {
                        y = new ActiveXObject(p + ".6");
                        AC = [6, 0, 21];
                        y.AllowScriptAccess = "always"
                    } catch (t) {
                        if (AC[0] == 6) {
                            AB = true
                        }
                    }
                    if (!AB) {
                        try {
                            y = new ActiveXObject(p)
                        } catch (t) {
                        }
                    }
                }
                if (!AB && y) {
                    try {
                        x = y.GetVariable("$version");
                        if (x) {
                            x = x.split(" ")[1].split(",");
                            AC = [parseInt(x[0], 10), parseInt(x[1], 10), parseInt(x[2], 10)]
                        }
                    } catch (t) {
                    }
                }
            }
        }
        var AD = T.userAgent.toLowerCase(), r = T.platform.toLowerCase(), AA = /webkit/.test(AD) ? parseFloat(AD.replace(/^.*webkit\/(\d+(\.\d+)?).*$/, "$1")) : false, q = false, z = r ? /win/.test(r) : /win/.test(AD), w = r ? /mac/.test(r) : /mac/.test(AD);
        return {w3cdom: v,pv: AC,webkit: AA,ie: q,win: z,mac: w}
    }();
    var L = function() {
        if (!h.w3cdom) {
            return
        }
        f(H);
        if (h.ie && h.win) {
            try {
                K.write("<script id=__ie_ondomload defer=true src=//:><\/script>");
                J = C("__ie_ondomload");
                if (J) {
                    I(J, "onreadystatechange", S)
                }
            } catch (q) {
            }
        }
        if (h.webkit && typeof K.readyState != b) {
            Z = setInterval(function() {
                if (/loaded|complete/.test(K.readyState)) {
                    E()
                }
            }, 10)
        }
        if (typeof K.addEventListener != b) {
            K.addEventListener("DOMContentLoaded", E, null)
        }
        R(E)
    }();
    function S() {
        if (J.readyState == "complete") {
            J.parentNode.removeChild(J);
            E()
        }
    }
    function E() {
        if (e) {
            return
        }
        if (h.ie && h.win) {
            var v = a("span");
            try {
                var u = K.getElementsByTagName("body")[0].appendChild(v);
                u.parentNode.removeChild(u)
            } catch (w) {
                return
            }
        }
        e = true;
        if (Z) {
            clearInterval(Z);
            Z = null
        }
        var q = o.length;
        for (var r = 0; r < q; r++) {
            o[r]()
        }
    }
    function f(q) {
        if (e) {
            q()
        } else {
            o[o.length] = q
        }
    }
    function R(r) {
        if (typeof j.addEventListener != b) {
            j.addEventListener("load", r, false)
        } else {
            if (typeof K.addEventListener != b) {
                K.addEventListener("load", r, false)
            } else {
                if (typeof j.attachEvent != b) {
                    I(j, "onload", r)
                } else {
                    if (typeof j.onload == "function") {
                        var q = j.onload;
                        j.onload = function() {
                            q();
                            r()
                        }
                    } else {
                        j.onload = r
                    }
                }
            }
        }
    }
    function H() {
        var t = N.length;
        for (var q = 0; q < t; q++) {
            var u = N[q].id;
            if (h.pv[0] > 0) {
                var r = C(u);
                if (r) {
                    N[q].width = r.getAttribute("width") ? r.getAttribute("width") : "0";
                    N[q].height = r.getAttribute("height") ? r.getAttribute("height") : "0";
                    if (c(N[q].swfVersion)) {
                        if (h.webkit && h.webkit < 312) {
                            Y(r)
                        }
                        W(u, true)
                    } else {
                        if (N[q].expressInstall && !A && c("6.0.65") && (h.win || h.mac)) {
                            k(N[q])
                        } else {
                            O(r)
                        }
                    }
                }
            } else {
                W(u, true)
            }
        }
    }
    function Y(t) {
        var q = t.getElementsByTagName(Q)[0];
        if (q) {
            var w = a("embed"), y = q.attributes;
            if (y) {
                var v = y.length;
                for (var u = 0; u < v; u++) {
                    if (y[u].nodeName == "DATA") {
                        w.setAttribute("src", y[u].nodeValue)
                    } else {
                        w.setAttribute(y[u].nodeName, y[u].nodeValue)
                    }
                }
            }
            var x = q.childNodes;
            if (x) {
                var z = x.length;
                for (var r = 0; r < z; r++) {
                    if (x[r].nodeType == 1 && x[r].nodeName == "PARAM") {
                        w.setAttribute(x[r].getAttribute("name"), x[r].getAttribute("value"))
                    }
                }
            }
            t.parentNode.replaceChild(w, t)
        }
    }
    function k(w) {
        A = true;
        var u = C(w.id);
        if (u) {
            if (w.altContentId) {
                var y = C(w.altContentId);
                if (y) {
                    M = y;
                    l = w.altContentId
                }
            } else {
                M = G(u)
            }
            if (!(/%$/.test(w.width)) && parseInt(w.width, 10) < 310) {
                w.width = "310"
            }
            if (!(/%$/.test(w.height)) && parseInt(w.height, 10) < 137) {
                w.height = "137"
            }
            K.title = K.title.slice(0, 47) + " - Flash Player Installation";
            var z = h.ie && h.win ? "ActiveX" : "PlugIn", q = K.title, r = "MMredirectURL=" + j.location + "&MMplayerType=" + z + "&MMdoctitle=" + q, x = w.id;
            if (h.ie && h.win && u.readyState != 4) {
                var t = a("div");
                x += "SWFObjectNew";
                t.setAttribute("id", x);
                u.parentNode.insertBefore(t, u);
                u.style.display = "none";
                var v = function() {
                    u.parentNode.removeChild(u)
                };
                I(j, "onload", v)
            }
            U({data: w.expressInstall,id: m,width: w.width,height: w.height}, {flashvars: r}, x)
        }
    }
    function O(t) {
        if (h.ie && h.win && t.readyState != 4) {
            var r = a("div");
            t.parentNode.insertBefore(r, t);
            r.parentNode.replaceChild(G(t), r);
            t.style.display = "none";
            var q = function() {
                t.parentNode.removeChild(t)
            };
            I(j, "onload", q)
        } else {
            t.parentNode.replaceChild(G(t), t)
        }
    }
    function G(v) {
        var u = a("div");
        if (h.win && h.ie) {
            u.innerHTML = v.innerHTML
        } else {
            var r = v.getElementsByTagName(Q)[0];
            if (r) {
                var w = r.childNodes;
                if (w) {
                    var q = w.length;
                    for (var t = 0; t < q; t++) {
                        if (!(w[t].nodeType == 1 && w[t].nodeName == "PARAM") && !(w[t].nodeType == 8)) {
                            u.appendChild(w[t].cloneNode(true))
                        }
                    }
                }
            }
        }
        return u
    }
    function U(AG, AE, t) {
        var q, v = C(t);
        if (v) {
            if (typeof AG.id == b) {
                AG.id = t
            }
            if (h.ie && h.win) {
                var AF = "";
                for (var AB in AG) {
                    if (AG[AB] != Object.prototype[AB]) {
                        if (AB.toLowerCase() == "data") {
                            AE.movie = AG[AB]
                        } else {
                            if (AB.toLowerCase() == "styleclass") {
                                AF += ' class="' + AG[AB] + '"'
                            } else {
                                if (AB.toLowerCase() != "classid") {
                                    AF += " " + AB + '="' + AG[AB] + '"'
                                }
                            }
                        }
                    }
                }
                var AD = "";
                for (var AA in AE) {
                    if (AE[AA] != Object.prototype[AA]) {
                        AD += '<param name="' + AA + '" value="' + AE[AA] + '" />'
                    }
                }
                v.outerHTML = '<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"' + AF + ">" + AD + "</object>";
                i[i.length] = AG.id;
                q = C(AG.id)
            } else {
                if (h.webkit && h.webkit < 312) {
                    var AC = a("embed");
                    AC.setAttribute("type", P);
                    for (var z in AG) {
                        if (AG[z] != Object.prototype[z]) {
                            if (z.toLowerCase() == "data") {
                                AC.setAttribute("src", AG[z])
                            } else {
                                if (z.toLowerCase() == "styleclass") {
                                    AC.setAttribute("class", AG[z])
                                } else {
                                    if (z.toLowerCase() != "classid") {
                                        AC.setAttribute(z, AG[z])
                                    }
                                }
                            }
                        }
                    }
                    for (var y in AE) {
                        if (AE[y] != Object.prototype[y]) {
                            if (y.toLowerCase() != "movie") {
                                AC.setAttribute(y, AE[y])
                            }
                        }
                    }
                    v.parentNode.replaceChild(AC, v);
                    q = AC
                } else {
                    var u = a(Q);
                    u.setAttribute("type", P);
                    for (var x in AG) {
                        if (AG[x] != Object.prototype[x]) {
                            if (x.toLowerCase() == "styleclass") {
                                u.setAttribute("class", AG[x])
                            } else {
                                if (x.toLowerCase() != "classid") {
                                    u.setAttribute(x, AG[x])
                                }
                            }
                        }
                    }
                    for (var w in AE) {
                        if (AE[w] != Object.prototype[w] && w.toLowerCase() != "movie") {
                            F(u, w, AE[w])
                        }
                    }
                    v.parentNode.replaceChild(u, v);
                    q = u
                }
            }
        }
        return q
    }
    function F(t, q, r) {
        var u = a("param");
        u.setAttribute("name", q);
        u.setAttribute("value", r);
        t.appendChild(u)
    }
    function X(r) {
        var q = C(r);
        if (q && (q.nodeName == "OBJECT" || q.nodeName == "EMBED")) {
            if (h.ie && h.win) {
                if (q.readyState == 4) {
                    B(r)
                } else {
                    j.attachEvent("onload", function() {
                        B(r)
                    })
                }
            } else {
                q.parentNode.removeChild(q)
            }
        }
    }
    function B(t) {
        var r = C(t);
        if (r) {
            for (var q in r) {
                if (typeof r[q] == "function") {
                    r[q] = null
                }
            }
            r.parentNode.removeChild(r)
        }
    }
    function C(t) {
        var q = null;
        try {
            q = K.getElementById(t)
        } catch (r) {
        }
        return q
    }
    function a(q) {
        return K.createElement(q)
    }
    function I(t, q, r) {
        t.attachEvent(q, r);
        d[d.length] = [t, q, r]
    }
    function c(t) {
        var r = h.pv, q = t.split(".");
        q[0] = parseInt(q[0], 10);
        q[1] = parseInt(q[1], 10) || 0;
        q[2] = parseInt(q[2], 10) || 0;
        return (r[0] > q[0] || (r[0] == q[0] && r[1] > q[1]) || (r[0] == q[0] && r[1] == q[1] && r[2] >= q[2])) ? true : false
    }
    function V(v, r) {
        if (h.ie && h.mac) {
            return
        }
        var u = K.getElementsByTagName("head")[0], t = a("style");
        t.setAttribute("type", "text/css");
        t.setAttribute("media", "screen");
        if (!(h.ie && h.win) && typeof K.createTextNode != b) {
            t.appendChild(K.createTextNode(v + " {" + r + "}"))
        }
        u.appendChild(t);
        if (h.ie && h.win && typeof K.styleSheets != b && K.styleSheets.length > 0) {
            var q = K.styleSheets[K.styleSheets.length - 1];
            if (typeof q.addRule == Q) {
                q.addRule(v, r)
            }
        }
    }
    function W(t, q) {
        var r = q ? "visible" : "hidden";
        if (e && C(t)) {
            C(t).style.visibility = r
        } else {
            V("#" + t, "visibility:" + r)
        }
    }
    function g(s) {
        var r = /[\\\"<>\.;]/;
        var q = r.exec(s) != null;
        return q ? encodeURIComponent(s) : s
    }
    var D = function() {
        if (h.ie && h.win) {
            window.attachEvent("onunload", function() {
                var w = d.length;
                for (var v = 0; v < w; v++) {
                    d[v][0].detachEvent(d[v][1], d[v][2])
                }
                var t = i.length;
                for (var u = 0; u < t; u++) {
                    X(i[u])
                }
                for (var r in h) {
                    h[r] = null
                }
                h = null;
                for (var q in swfobject) {
                    swfobject[q] = null
                }
                swfobject = null
            })
        }
    }();
    return {registerObject: function(u, q, t) {
            if (!h.w3cdom || !u || !q) {
                return
            }
            var r = {};
            r.id = u;
            r.swfVersion = q;
            r.expressInstall = t ? t : false;
            N[N.length] = r;
            W(u, false)
        },getObjectById: function(v) {
            var q = null;
            if (h.w3cdom) {
                var t = C(v);
                if (t) {
                    var u = t.getElementsByTagName(Q)[0];
                    if (!u || (u && typeof t.SetVariable != b)) {
                        q = t
                    } else {
                        if (typeof u.SetVariable != b) {
                            q = u
                        }
                    }
                }
            }
            return q
        },embedSWF: function(x, AE, AB, AD, q, w, r, z, AC) {
            if (!h.w3cdom || !x || !AE || !AB || !AD || !q) {
                return
            }
            AB += "";
            AD += "";
            if (c(q)) {
                W(AE, false);
                var AA = {};
                if (AC && typeof AC === Q) {
                    for (var v in AC) {
                        if (AC[v] != Object.prototype[v]) {
                            AA[v] = AC[v]
                        }
                    }
                }
                AA.data = x;
                AA.width = AB;
                AA.height = AD;
                var y = {};
                if (z && typeof z === Q) {
                    for (var u in z) {
                        if (z[u] != Object.prototype[u]) {
                            y[u] = z[u]
                        }
                    }
                }
                if (r && typeof r === Q) {
                    for (var t in r) {
                        if (r[t] != Object.prototype[t]) {
                            if (typeof y.flashvars != b) {
                                y.flashvars += "&" + t + "=" + r[t]
                            } else {
                                y.flashvars = t + "=" + r[t]
                            }
                        }
                    }
                }
                f(function() {
                    U(AA, y, AE);
                    if (AA.id == AE) {
                        W(AE, true)
                    }
                })
            } else {
                if (w && !A && c("6.0.65") && (h.win || h.mac)) {
                    A = true;
                    W(AE, false);
                    f(function() {
                        var AF = {};
                        AF.id = AF.altContentId = AE;
                        AF.width = AB;
                        AF.height = AD;
                        AF.expressInstall = w;
                        k(AF)
                    })
                }
            }
        },getFlashPlayerVersion: function() {
            return {major: h.pv[0],minor: h.pv[1],release: h.pv[2]}
        },hasFlashPlayerVersion: c,createSWF: function(t, r, q) {
            if (h.w3cdom) {
                return U(t, r, q)
            } else {
                return undefined
            }
        },removeSWF: function(q) {
            if (h.w3cdom) {
                X(q)
            }
        },createCSS: function(r, q) {
            if (h.w3cdom) {
                V(r, q)
            }
        },addDomLoadEvent: f,addLoadEvent: R,getQueryParamValue: function(v) {
            var u = K.location.search || K.location.hash;
            if (v == null) {
                return g(u)
            }
            if (u) {
                var t = u.substring(1).split("&");
                for (var r = 0; r < t.length; r++) {
                    if (t[r].substring(0, t[r].indexOf("=")) == v) {
                        return g(t[r].substring((t[r].indexOf("=") + 1)))
                    }
                }
            }
            return ""
        },expressInstallCallback: function() {
            if (A && M) {
                var q = C(m);
                if (q) {
                    q.parentNode.replaceChild(M, q);
                    if (l) {
                        W(l, true);
                        if (h.ie && h.win) {
                            M.style.display = "block"
                        }
                    }
                    M = null;
                    l = null;
                    A = false
                }
            }
        }}
}();
(function($) {
    var TotalPadding = 3;
    var BrowserAdjust = $.browser.webkit ? TotalPadding : ($.browser.msie ? TotalPadding / 2 : 0);
    $.fn.TextAreaExpander = function($scrollingContainingElement) {
        var minHeight = maxHeight = false;
        function setTarget(vlen, e, ewidth) {
            var hCheck = !($.browser.msie || $.browser.opera);
            var originalScrollTop;
            if ($scrollingContainingElement) {
                originalScrollTop = $scrollingContainingElement.scrollTop();
            }
            if (hCheck && (vlen < e.valLength || ewidth != e.boxWidth)) {
                e.style.height = TotalPadding + "px";
            }
            var h = Math.max(e.expandMin, Math.min(e.scrollHeight, e.expandMax) - BrowserAdjust);
            e.style.overflow = (e.scrollHeight - BrowserAdjust > h ? "auto" : "hidden");
            e.style.height = h + "px";
            if ($scrollingContainingElement) {
                $scrollingContainingElement.scrollTop(originalScrollTop);
            }
            e.valLength = vlen;
            e.boxWidth = ewidth;
        }
        function ResizeTextarea(e) {
            e = e.target || e;
            var vlen = e.value.length, ewidth = e.offsetWidth;
            if (vlen != e.valLength || ewidth != e.boxWidth) {
                setTarget(vlen, e, ewidth);
            }
            return true;
        }
        ;
        this.each(function() {
            if (this.nodeName.toLowerCase() != "textarea")
                return;
            var p = this.className.match(/expand(\d+)\-*(\d+)*/i);
            this.expandMin = minHeight || (p ? parseInt('0' + p[1], 10) : 0);
            this.expandMax = maxHeight || (p ? parseInt('0' + p[2], 10) : 99999);
            ResizeTextarea(this);
            if (!this.Initialized) {
                this.Initialized = true;
                $(this).on('keyup', ResizeTextarea).on('focus', ResizeTextarea);
            }
        });
        return this;
    };
})(jQuery);
window.j = window.jQuery.noConflict();
j(document).on('tracker:isReady', function() {
    for (var key in j.browser) {
        if (j.browser[key] == true) {
            j('body').addClass(key);
            try {
                if (key == 'mozilla' && parseInt(j.browser.version) < 2) {
                    j('body').addClass('ff_3');
                }
            } catch (e) {
            }
        }
    }
});
var ZeroClipboard = {version: "1.0.7",clients: {},moviePath: 'ZeroClipboard.swf',nextId: 1,$: function(thingy) {
        if (typeof (thingy) == 'string')
            thingy = document.getElementById(thingy);
        if (!thingy.addClass) {
            thingy.hide = function() {
                this.style.display = 'none';
            };
            thingy.show = function() {
                this.style.display = '';
            };
            thingy.addClass = function(name) {
                this.removeClass(name);
                this.className += ' ' + name;
            };
            thingy.removeClass = function(name) {
                var classes = this.className.split(/\s+/);
                var idx = -1;
                for (var k = 0; k < classes.length; k++) {
                    if (classes[k] == name) {
                        idx = k;
                        k = classes.length;
                    }
                }
                if (idx > -1) {
                    classes.splice(idx, 1);
                    this.className = classes.join(' ');
                }
                return this;
            };
            thingy.hasClass = function(name) {
                return !!this.className.match(new RegExp("\\s*" + name + "\\s*"));
            };
        }
        return thingy;
    },setMoviePath: function(path) {
        this.moviePath = path;
    },dispatch: function(id, eventName, args) {
        var client = this.clients[id];
        if (client) {
            client.receiveEvent(eventName, args);
        }
    },register: function(id, client) {
        this.clients[id] = client;
    },getDOMObjectPosition: function(obj, stopObj) {
        var info = {left: 0,top: 0,width: obj.width ? obj.width : obj.offsetWidth,height: obj.height ? obj.height : obj.offsetHeight};
        while (obj && (obj != stopObj)) {
            info.left += obj.offsetLeft;
            info.top += obj.offsetTop;
            obj = obj.offsetParent;
        }
        return info;
    },Client: function(elem) {
        this.handlers = {};
        this.id = ZeroClipboard.nextId++;
        this.movieId = 'ZeroClipboardMovie_' + this.id;
        ZeroClipboard.register(this.id, this);
        if (elem)
            this.glue(elem);
    }};
ZeroClipboard.Client.prototype = {id: 0,ready: false,movie: null,clipText: '',handCursorEnabled: true,cssEffects: true,handlers: null,glue: function(elem, appendElem, stylesToAdd) {
        this.domElement = ZeroClipboard.$(elem);
        var zIndex = 99;
        if (this.domElement.style.zIndex) {
            zIndex = parseInt(this.domElement.style.zIndex, 10) + 1;
        }
        if (typeof (appendElem) == 'string') {
            appendElem = ZeroClipboard.$(appendElem);
        }
        else if (typeof (appendElem) == 'undefined') {
            appendElem = document.getElementsByTagName('body')[0];
        }
        var box = ZeroClipboard.getDOMObjectPosition(this.domElement, appendElem);
        this.div = document.createElement('div');
        var style = this.div.style;
        style.position = 'absolute';
        style.left = '' + box.left + 'px';
        style.top = '' + box.top + 'px';
        style.width = '' + box.width + 'px';
        style.height = '' + box.height + 'px';
        style.zIndex = zIndex;
        if (typeof (stylesToAdd) == 'object') {
            for (addedStyle in stylesToAdd) {
                style[addedStyle] = stylesToAdd[addedStyle];
            }
        }
        appendElem.appendChild(this.div);
        this.div.innerHTML = this.getHTML(box.width, box.height);
    },getHTML: function(width, height) {
        var html = '';
        var flashvars = 'id=' + this.id + '&width=' + width + '&height=' + height;
        if (navigator.userAgent.match(/MSIE/)) {
            var protocol = location.href.match(/^https/i) ? 'https://' : 'http://';
            html += '<object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" codebase="' + protocol + 'download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=9,0,0,0" width="' + width + '" height="' + height + '" id="' + this.movieId + '" align="middle"><param name="allowScriptAccess" value="always" /><param name="allowFullScreen" value="false" /><param name="movie" value="' + ZeroClipboard.moviePath + '" /><param name="loop" value="false" /><param name="menu" value="false" /><param name="quality" value="best" /><param name="bgcolor" value="#ffffff" /><param name="flashvars" value="' + flashvars + '"/><param name="wmode" value="transparent"/></object>';
        }
        else {
            html += '<embed id="' + this.movieId + '" src="' + ZeroClipboard.moviePath + '" loop="false" menu="false" quality="best" bgcolor="#ffffff" width="' + width + '" height="' + height + '" name="' + this.movieId + '" align="middle" allowScriptAccess="always" allowFullScreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" flashvars="' + flashvars + '" wmode="transparent" />';
        }
        return html;
    },hide: function() {
        if (this.div) {
            this.div.style.left = '-2000px';
        }
    },show: function() {
        this.reposition();
    },destroy: function() {
        if (this.domElement && this.div) {
            this.hide();
            this.div.innerHTML = '';
            var body = document.getElementsByTagName('body')[0];
            try {
                body.removeChild(this.div);
            } catch (e) {
                ;
            }
            this.domElement = null;
            this.div = null;
        }
    },reposition: function(elem) {
        if (elem) {
            this.domElement = ZeroClipboard.$(elem);
            if (!this.domElement)
                this.hide();
        }
        if (this.domElement && this.div) {
            var box = ZeroClipboard.getDOMObjectPosition(this.domElement);
            var style = this.div.style;
            style.left = '' + box.left + 'px';
            style.top = '' + box.top + 'px';
        }
    },setText: function(newText) {
        this.clipText = newText;
        if (this.ready)
            this.movie.setText(newText);
    },addEventListener: function(eventName, func) {
        eventName = eventName.toString().toLowerCase().replace(/^on/, '');
        if (!this.handlers[eventName])
            this.handlers[eventName] = [];
        this.handlers[eventName].push(func);
    },setHandCursor: function(enabled) {
        this.handCursorEnabled = enabled;
        if (this.ready)
            this.movie.setHandCursor(enabled);
    },setCSSEffects: function(enabled) {
        this.cssEffects = !!enabled;
    },receiveEvent: function(eventName, args) {
        eventName = eventName.toString().toLowerCase().replace(/^on/, '');
        switch (eventName) {
            case 'load':
                this.movie = document.getElementById(this.movieId);
                if (!this.movie) {
                    var self = this;
                    setTimeout(function() {
                        self.receiveEvent('load', null);
                    }, 1);
                    return;
                }
                if (!this.ready && navigator.userAgent.match(/Firefox/) && navigator.userAgent.match(/Windows/)) {
                    var self = this;
                    setTimeout(function() {
                        self.receiveEvent('load', null);
                    }, 100);
                    this.ready = true;
                    return;
                }
                this.ready = true;
                this.movie.setText(this.clipText);
                this.movie.setHandCursor(this.handCursorEnabled);
                break;
            case 'mouseover':
                if (this.domElement && this.cssEffects) {
                    this.domElement.addClass('hover');
                    if (this.recoverActive)
                        this.domElement.addClass('active');
                }
                break;
            case 'mouseout':
                if (this.domElement && this.cssEffects) {
                    this.recoverActive = false;
                    if (this.domElement.hasClass('active')) {
                        this.domElement.removeClass('active');
                        this.recoverActive = true;
                    }
                    this.domElement.removeClass('hover');
                }
                break;
            case 'mousedown':
                if (this.domElement && this.cssEffects) {
                    this.domElement.addClass('active');
                }
                break;
            case 'mouseup':
                if (this.domElement && this.cssEffects) {
                    this.domElement.removeClass('active');
                    this.recoverActive = false;
                }
                break;
        }
        if (this.handlers[eventName]) {
            for (var idx = 0, len = this.handlers[eventName].length; idx < len; idx++) {
                var func = this.handlers[eventName][idx];
                if (typeof (func) == 'function') {
                    func(this, args);
                }
                else if ((typeof (func) == 'object') && (func.length == 2)) {
                    func[0][func[1]](this, args);
                }
                else if (typeof (func) == 'string') {
                    window[func](this, args);
                }
            }
        }
    }};
var Prototype = {Version: '1.7',Browser: (function() {
        var ua = navigator.userAgent;
        var isOpera = Object.prototype.toString.call(window.opera) == '[object Opera]';
        return {IE: !!window.attachEvent && !isOpera,Opera: isOpera,WebKit: ua.indexOf('AppleWebKit/') > -1,Gecko: ua.indexOf('Gecko') > -1 && ua.indexOf('KHTML') === -1,MobileSafari: /Apple.*Mobile/.test(ua)}
    })(),BrowserFeatures: {XPath: !!document.evaluate,SelectorsAPI: !!document.querySelector,ElementExtensions: (function() {
            var constructor = window.Element || window.HTMLElement;
            return !!(constructor && constructor.prototype);
        })(),SpecificElementExtensions: (function() {
            if (typeof window.HTMLDivElement !== 'undefined')
                return true;
            var div = document.createElement('div'), form = document.createElement('form'), isSupported = false;
            if (div['__proto__'] && (div['__proto__'] !== form['__proto__'])) {
                isSupported = true;
            }
            div = form = null;
            return isSupported;
        })()},ScriptFragment: '<script[^>]*>([\\S\\s]*?)<\/script>',JSONFilter: /^\/\*-secure-([\s\S]*)\*\/\s*$/,emptyFunction: function() {
    },K: function(x) {
        return x
    }};
if (Prototype.Browser.MobileSafari)
    Prototype.BrowserFeatures.SpecificElementExtensions = false;
var Abstract = {};
var Try = {these: function() {
        var returnValue;
        for (var i = 0, length = arguments.length; i < length; i++) {
            var lambda = arguments[i];
            try {
                returnValue = lambda();
                break;
            } catch (e) {
            }
        }
        return returnValue;
    }};
var Class = (function() {
    var IS_DONTENUM_BUGGY = (function() {
        for (var p in {toString: 1}) {
            if (p === 'toString')
                return false;
        }
        return true;
    })();
    function subclass() {
    }
    ;
    function create() {
        var parent = null, properties = $A(arguments);
        if (Object.isFunction(properties[0]))
            parent = properties.shift();
        function klass() {
            this.initialize.apply(this, arguments);
        }
        Object.extend(klass, Class.Methods);
        klass.superclass = parent;
        klass.subclasses = [];
        if (parent) {
            subclass.prototype = parent.prototype;
            klass.prototype = new subclass;
            parent.subclasses.push(klass);
        }
        for (var i = 0, length = properties.length; i < length; i++)
            klass.addMethods(properties[i]);
        if (!klass.prototype.initialize)
            klass.prototype.initialize = Prototype.emptyFunction;
        klass.prototype.constructor = klass;
        return klass;
    }
    function addMethods(source) {
        var ancestor = this.superclass && this.superclass.prototype, properties = Object.keys(source);
        if (IS_DONTENUM_BUGGY) {
            if (source.toString != Object.prototype.toString)
                properties.push("toString");
            if (source.valueOf != Object.prototype.valueOf)
                properties.push("valueOf");
        }
        for (var i = 0, length = properties.length; i < length; i++) {
            var property = properties[i], value = source[property];
            if (ancestor && Object.isFunction(value) && value.argumentNames()[0] == "$super") {
                var method = value;
                value = (function(m) {
                    return function() {
                        return ancestor[m].apply(this, arguments);
                    };
                })(property).wrap(method);
                value.valueOf = method.valueOf.bind(method);
                value.toString = method.toString.bind(method);
            }
            this.prototype[property] = value;
        }
        return this;
    }
    return {create: create,Methods: {addMethods: addMethods}};
})();
(function() {
    var _toString = Object.prototype.toString, NULL_TYPE = 'Null', UNDEFINED_TYPE = 'Undefined', BOOLEAN_TYPE = 'Boolean', NUMBER_TYPE = 'Number', STRING_TYPE = 'String', OBJECT_TYPE = 'Object', FUNCTION_CLASS = '[object Function]', BOOLEAN_CLASS = '[object Boolean]', NUMBER_CLASS = '[object Number]', STRING_CLASS = '[object String]', ARRAY_CLASS = '[object Array]', DATE_CLASS = '[object Date]', NATIVE_JSON_STRINGIFY_SUPPORT = window.JSON && typeof JSON.stringify === 'function' && JSON.stringify(0) === '0' && typeof JSON.stringify(Prototype.K) === 'undefined';
    function Type(o) {
        switch (o) {
            case null:
                return NULL_TYPE;
            case (void 0):
                return UNDEFINED_TYPE;
        }
        var type = typeof o;
        switch (type) {
            case 'boolean':
                return BOOLEAN_TYPE;
            case 'number':
                return NUMBER_TYPE;
            case 'string':
                return STRING_TYPE;
        }
        return OBJECT_TYPE;
    }
    function extend(destination, source) {
        for (var property in source)
            destination[property] = source[property];
        return destination;
    }
    function inspect(object) {
        try {
            if (isUndefined(object))
                return 'undefined';
            if (object === null)
                return 'null';
            return object.inspect ? object.inspect() : String(object);
        } catch (e) {
            if (e instanceof RangeError)
                return '...';
            throw e;
        }
    }
    function toJSON(value) {
        return Str('', {'': value}, []);
    }
    function Str(key, holder, stack) {
        var value = holder[key], type = typeof value;
        if (Type(value) === OBJECT_TYPE && typeof value.toJSON === 'function') {
            value = value.toJSON(key);
        }
        var _class = _toString.call(value);
        switch (_class) {
            case NUMBER_CLASS:
            case BOOLEAN_CLASS:
            case STRING_CLASS:
                value = value.valueOf();
        }
        switch (value) {
            case null:
                return 'null';
            case true:
                return 'true';
            case false:
                return 'false';
        }
        type = typeof value;
        switch (type) {
            case 'string':
                return value.inspect(true);
            case 'number':
                return isFinite(value) ? String(value) : 'null';
            case 'object':
                for (var i = 0, length = stack.length; i < length; i++) {
                    if (stack[i] === value) {
                        throw new TypeError();
                    }
                }
                stack.push(value);
                var partial = [];
                if (_class === ARRAY_CLASS) {
                    for (var i = 0, length = value.length; i < length; i++) {
                        var str = Str(i, value, stack);
                        partial.push(typeof str === 'undefined' ? 'null' : str);
                    }
                    partial = '[' + partial.join(',') + ']';
                } else {
                    var keys = Object.keys(value);
                    for (var i = 0, length = keys.length; i < length; i++) {
                        var key = keys[i], str = Str(key, value, stack);
                        if (typeof str !== "undefined") {
                            partial.push(key.inspect(true) + ':' + str);
                        }
                    }
                    partial = '{' + partial.join(',') + '}';
                }
                stack.pop();
                return partial;
        }
    }
    function stringify(object) {
        return JSON.stringify(object);
    }
    function toQueryString(object) {
        return $H(object).toQueryString();
    }
    function toHTML(object) {
        return object && object.toHTML ? object.toHTML() : String.interpret(object);
    }
    function keys(object) {
        if (Type(object) !== OBJECT_TYPE) {
            throw new TypeError();
        }
        var results = [];
        for (var property in object) {
            if (object.hasOwnProperty(property)) {
                results.push(property);
            }
        }
        return results;
    }
    function values(object) {
        var results = [];
        for (var property in object)
            results.push(object[property]);
        return results;
    }
    function clone(object) {
        return extend({}, object);
    }
    function isElement(object) {
        return !!(object && object.nodeType == 1);
    }
    function isArray(object) {
        return _toString.call(object) === ARRAY_CLASS;
    }
    var hasNativeIsArray = (typeof Array.isArray == 'function') && Array.isArray([]) && !Array.isArray({});
    if (hasNativeIsArray) {
        isArray = Array.isArray;
    }
    function isHash(object) {
        return object instanceof Hash;
    }
    function isFunction(object) {
        return _toString.call(object) === FUNCTION_CLASS;
    }
    function isString(object) {
        return _toString.call(object) === STRING_CLASS;
    }
    function isNumber(object) {
        return _toString.call(object) === NUMBER_CLASS;
    }
    function isDate(object) {
        return _toString.call(object) === DATE_CLASS;
    }
    function isUndefined(object) {
        return typeof object === "undefined";
    }
    extend(Object, {extend: extend,inspect: inspect,toJSON: NATIVE_JSON_STRINGIFY_SUPPORT ? stringify : toJSON,toQueryString: toQueryString,toHTML: toHTML,keys: Object.keys || keys,values: values,clone: clone,isElement: isElement,isArray: isArray,isHash: isHash,isFunction: isFunction,isString: isString,isNumber: isNumber,isDate: isDate,isUndefined: isUndefined});
})();
Object.extend(Function.prototype, (function() {
    var slice = Array.prototype.slice;
    function update(array, args) {
        var arrayLength = array.length, length = args.length;
        while (length--)
            array[arrayLength + length] = args[length];
        return array;
    }
    function merge(array, args) {
        array = slice.call(array, 0);
        return update(array, args);
    }
    function argumentNames() {
        var names = this.toString().match(/^[\s\(]*function[^(]*\(([^)]*)\)/)[1].replace(/\/\/.*?[\r\n]|\/\*(?:.|[\r\n])*?\*\//g, '').replace(/\s+/g, '').split(',');
        return names.length == 1 && !names[0] ? [] : names;
    }
    function bind(context) {
        if (arguments.length < 2 && Object.isUndefined(arguments[0]))
            return this;
        var __method = this, args = slice.call(arguments, 1);
        return function() {
            var a = merge(args, arguments);
            return __method.apply(context, a);
        }
    }
    function bindAsEventListener(context) {
        var __method = this, args = slice.call(arguments, 1);
        return function(event) {
            var a = update([event || window.event], args);
            return __method.apply(context, a);
        }
    }
    function curry() {
        if (!arguments.length)
            return this;
        var __method = this, args = slice.call(arguments, 0);
        return function() {
            var a = merge(args, arguments);
            return __method.apply(this, a);
        }
    }
    function delay(timeout) {
        var __method = this, args = slice.call(arguments, 1);
        timeout = timeout * 1000;
        return window.setTimeout(function() {
            return __method.apply(__method, args);
        }, timeout);
    }
    function defer() {
        var args = update([0.01], arguments);
        return this.delay.apply(this, args);
    }
    function wrap(wrapper) {
        var __method = this;
        return function() {
            var a = update([__method.bind(this)], arguments);
            return wrapper.apply(this, a);
        }
    }
    function methodize() {
        if (this._methodized)
            return this._methodized;
        var __method = this;
        return this._methodized = function() {
            var a = update([this], arguments);
            return __method.apply(null, a);
        };
    }
    return {argumentNames: argumentNames,bind: bind,bindAsEventListener: bindAsEventListener,curry: curry,delay: delay,defer: defer,wrap: wrap,methodize: methodize}
})());
(function(proto) {
    function toISOString() {
        return this.getUTCFullYear() + '-' +
        (this.getUTCMonth() + 1).toPaddedString(2) + '-' +
        this.getUTCDate().toPaddedString(2) + 'T' +
        this.getUTCHours().toPaddedString(2) + ':' +
        this.getUTCMinutes().toPaddedString(2) + ':' +
        this.getUTCSeconds().toPaddedString(2) + 'Z';
    }
    function toJSON() {
        return this.toISOString();
    }
    if (!proto.toISOString)
        proto.toISOString = toISOString;
    if (!proto.toJSON)
        proto.toJSON = toJSON;
})(Date.prototype);
RegExp.prototype.match = RegExp.prototype.test;
RegExp.escape = function(str) {
    return String(str).replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
};
var PeriodicalExecuter = Class.create({initialize: function(callback, frequency) {
        this.callback = callback;
        this.frequency = frequency;
        this.currentlyExecuting = false;
        this.registerCallback();
    },registerCallback: function() {
        this.timer = setInterval(this.onTimerEvent.bind(this), this.frequency * 1000);
    },execute: function() {
        this.callback(this);
    },stop: function() {
        if (!this.timer)
            return;
        clearInterval(this.timer);
        this.timer = null;
    },onTimerEvent: function() {
        if (!this.currentlyExecuting) {
            try {
                this.currentlyExecuting = true;
                this.execute();
                this.currentlyExecuting = false;
            } catch (e) {
                this.currentlyExecuting = false;
                throw e;
            }
        }
    }});
Object.extend(String, {interpret: function(value) {
        return value == null ? '' : String(value);
    },specialChar: {'\b': '\\b','\t': '\\t','\n': '\\n','\f': '\\f','\r': '\\r','\\': '\\\\'}});
Object.extend(String.prototype, (function() {
    var NATIVE_JSON_PARSE_SUPPORT = window.JSON && typeof JSON.parse === 'function' && JSON.parse('{"test": true}').test;
    function prepareReplacement(replacement) {
        if (Object.isFunction(replacement))
            return replacement;
        var template = new Template(replacement);
        return function(match) {
            return template.evaluate(match)
        };
    }
    function gsub(pattern, replacement) {
        var result = '', source = this, match;
        replacement = prepareReplacement(replacement);
        if (Object.isString(pattern))
            pattern = RegExp.escape(pattern);
        if (!(pattern.length || pattern.source)) {
            replacement = replacement('');
            return replacement + source.split('').join(replacement) + replacement;
        }
        while (source.length > 0) {
            if (match = source.match(pattern)) {
                result += source.slice(0, match.index);
                result += String.interpret(replacement(match));
                source = source.slice(match.index + match[0].length);
            } else {
                result += source, source = '';
            }
        }
        return result;
    }
    function sub(pattern, replacement, count) {
        replacement = prepareReplacement(replacement);
        count = Object.isUndefined(count) ? 1 : count;
        return this.gsub(pattern, function(match) {
            if (--count < 0)
                return match[0];
            return replacement(match);
        });
    }
    function scan(pattern, iterator) {
        this.gsub(pattern, iterator);
        return String(this);
    }
    function truncate(length, truncation) {
        length = length || 30;
        truncation = Object.isUndefined(truncation) ? '...' : truncation;
        return this.length > length ? this.slice(0, length - truncation.length) + truncation : String(this);
    }
    function strip() {
        return this.replace(/^\s+/, '').replace(/\s+$/, '');
    }
    function stripTags() {
        return this.replace(/<\w+(\s+("[^"]*"|'[^']*'|[^>])+)?>|<\/\w+>/gi, '');
    }
    function stripScripts() {
        return this.replace(new RegExp(Prototype.ScriptFragment, 'img'), '');
    }
    function extractScripts() {
        var matchAll = new RegExp(Prototype.ScriptFragment, 'img'), matchOne = new RegExp(Prototype.ScriptFragment, 'im');
        return (this.match(matchAll) || []).map(function(scriptTag) {
            return (scriptTag.match(matchOne) || ['', ''])[1];
        });
    }
    function evalScripts() {
        return this.extractScripts().map(function(script) {
            return eval(script)
        });
    }
    function escapeHTML() {
        return this.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
    }
    function unescapeHTML() {
        return this.stripTags().replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&amp;/g, '&');
    }
    function toQueryParams(separator) {
        var match = this.strip().match(/([^?#]*)(#.*)?$/);
        if (!match)
            return {};
        return match[1].split(separator || '&').inject({}, function(hash, pair) {
            if ((pair = pair.split('='))[0]) {
                var key = decodeURIComponent(pair.shift()), value = pair.length > 1 ? pair.join('=') : pair[0];
                if (value != undefined)
                    value = decodeURIComponent(value);
                if (key in hash) {
                    if (!Object.isArray(hash[key]))
                        hash[key] = [hash[key]];
                    hash[key].push(value);
                }
                else
                    hash[key] = value;
            }
            return hash;
        });
    }
    function toArray() {
        return this.split('');
    }
    function succ() {
        return this.slice(0, this.length - 1) +
        String.fromCharCode(this.charCodeAt(this.length - 1) + 1);
    }
    function times(count) {
        return count < 1 ? '' : new Array(count + 1).join(this);
    }
    function camelize() {
        return this.replace(/-+(.)?/g, function(match, chr) {
            return chr ? chr.toUpperCase() : '';
        });
    }
    function capitalize() {
        return this.charAt(0).toUpperCase() + this.substring(1).toLowerCase();
    }
    function underscore() {
        return this.replace(/::/g, '/').replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2').replace(/([a-z\d])([A-Z])/g, '$1_$2').replace(/-/g, '_').toLowerCase();
    }
    function dasherize() {
        return this.replace(/_/g, '-');
    }
    function inspect(useDoubleQuotes) {
        var escapedString = this.replace(/[\x00-\x1f\\]/g, function(character) {
            if (character in String.specialChar) {
                return String.specialChar[character];
            }
            return '\\u00' + character.charCodeAt().toPaddedString(2, 16);
        });
        if (useDoubleQuotes)
            return '"' + escapedString.replace(/"/g, '\\"') + '"';
        return "'" + escapedString.replace(/'/g, '\\\'') + "'";
    }
    function unfilterJSON(filter) {
        return this.replace(filter || Prototype.JSONFilter, '$1');
    }
    function isJSON() {
        var str = this;
        if (str.blank())
            return false;
        str = str.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@');
        str = str.replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']');
        str = str.replace(/(?:^|:|,)(?:\s*\[)+/g, '');
        return (/^[\],:{}\s]*$/).test(str);
    }
    function evalJSON(sanitize) {
        var json = this.unfilterJSON(), cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
        if (cx.test(json)) {
            json = json.replace(cx, function(a) {
                return '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
            });
        }
        try {
            if (!sanitize || json.isJSON())
                return eval('(' + json + ')');
        } catch (e) {
        }
        throw new SyntaxError('Badly formed JSON string: ' + this.inspect());
    }
    function parseJSON() {
        var json = this.unfilterJSON();
        return JSON.parse(json);
    }
    function include(pattern) {
        return this.indexOf(pattern) > -1;
    }
    function startsWith(pattern) {
        return this.lastIndexOf(pattern, 0) === 0;
    }
    function endsWith(pattern) {
        var d = this.length - pattern.length;
        return d >= 0 && this.indexOf(pattern, d) === d;
    }
    function empty() {
        return this == '';
    }
    function blank() {
        return /^\s*$/.test(this);
    }
    function interpolate(object, pattern) {
        return new Template(this, pattern).evaluate(object);
    }
    return {gsub: gsub,sub: sub,scan: scan,truncate: truncate,strip: String.prototype.trim || strip,stripTags: stripTags,stripScripts: stripScripts,extractScripts: extractScripts,evalScripts: evalScripts,escapeHTML: escapeHTML,unescapeHTML: unescapeHTML,toQueryParams: toQueryParams,parseQuery: toQueryParams,toArray: toArray,succ: succ,times: times,camelize: camelize,capitalize: capitalize,underscore: underscore,dasherize: dasherize,inspect: inspect,unfilterJSON: unfilterJSON,isJSON: isJSON,evalJSON: NATIVE_JSON_PARSE_SUPPORT ? parseJSON : evalJSON,include: include,startsWith: startsWith,endsWith: endsWith,empty: empty,blank: blank,interpolate: interpolate};
})());
var Template = Class.create({initialize: function(template, pattern) {
        this.template = template.toString();
        this.pattern = pattern || Template.Pattern;
    },evaluate: function(object) {
        if (object && Object.isFunction(object.toTemplateReplacements))
            object = object.toTemplateReplacements();
        return this.template.gsub(this.pattern, function(match) {
            if (object == null)
                return (match[1] + '');
            var before = match[1] || '';
            if (before == '\\')
                return match[2];
            var ctx = object, expr = match[3], pattern = /^([^.[]+|\[((?:.*?[^\\])?)\])(\.|\[|$)/;
            match = pattern.exec(expr);
            if (match == null)
                return before;
            while (match != null) {
                var comp = match[1].startsWith('[') ? match[2].replace(/\\\\]/g, ']') : match[1];
                ctx = ctx[comp];
                if (null == ctx || '' == match[3])
                    break;
                expr = expr.substring('[' == match[3] ? match[1].length : match[0].length);
                match = pattern.exec(expr);
            }
            return before + String.interpret(ctx);
        });
    }});
Template.Pattern = /(^|.|\r|\n)(#\{(.*?)\})/;
var $break = {};
var Enumerable = (function() {
    function each(iterator, context) {
        var index = 0;
        try {
            this._each(function(value) {
                iterator.call(context, value, index++);
            });
        } catch (e) {
            if (e != $break)
                throw e;
        }
        return this;
    }
    function eachSlice(number, iterator, context) {
        var index = -number, slices = [], array = this.toArray();
        if (number < 1)
            return array;
        while ((index += number) < array.length)
            slices.push(array.slice(index, index + number));
        return slices.collect(iterator, context);
    }
    function all(iterator, context) {
        iterator = iterator || Prototype.K;
        var result = true;
        this.each(function(value, index) {
            result = result && !!iterator.call(context, value, index);
            if (!result)
                throw $break;
        });
        return result;
    }
    function any(iterator, context) {
        iterator = iterator || Prototype.K;
        var result = false;
        this.each(function(value, index) {
            if (result = !!iterator.call(context, value, index))
                throw $break;
        });
        return result;
    }
    function collect(iterator, context) {
        iterator = iterator || Prototype.K;
        var results = [];
        this.each(function(value, index) {
            results.push(iterator.call(context, value, index));
        });
        return results;
    }
    function detect(iterator, context) {
        var result;
        this.each(function(value, index) {
            if (iterator.call(context, value, index)) {
                result = value;
                throw $break;
            }
        });
        return result;
    }
    function findAll(iterator, context) {
        var results = [];
        this.each(function(value, index) {
            if (iterator.call(context, value, index))
                results.push(value);
        });
        return results;
    }
    function grep(filter, iterator, context) {
        iterator = iterator || Prototype.K;
        var results = [];
        if (Object.isString(filter))
            filter = new RegExp(RegExp.escape(filter));
        this.each(function(value, index) {
            if (filter.match(value))
                results.push(iterator.call(context, value, index));
        });
        return results;
    }
    function include(object) {
        if (Object.isFunction(this.indexOf))
            if (this.indexOf(object) != -1)
                return true;
        var found = false;
        this.each(function(value) {
            if (value == object) {
                found = true;
                throw $break;
            }
        });
        return found;
    }
    function inGroupsOf(number, fillWith) {
        fillWith = Object.isUndefined(fillWith) ? null : fillWith;
        return this.eachSlice(number, function(slice) {
            while (slice.length < number)
                slice.push(fillWith);
            return slice;
        });
    }
    function inject(memo, iterator, context) {
        this.each(function(value, index) {
            memo = iterator.call(context, memo, value, index);
        });
        return memo;
    }
    function invoke(method) {
        var args = $A(arguments).slice(1);
        return this.map(function(value) {
            return value[method].apply(value, args);
        });
    }
    function max(iterator, context) {
        iterator = iterator || Prototype.K;
        var result;
        this.each(function(value, index) {
            value = iterator.call(context, value, index);
            if (result == null || value >= result)
                result = value;
        });
        return result;
    }
    function min(iterator, context) {
        iterator = iterator || Prototype.K;
        var result;
        this.each(function(value, index) {
            value = iterator.call(context, value, index);
            if (result == null || value < result)
                result = value;
        });
        return result;
    }
    function partition(iterator, context) {
        iterator = iterator || Prototype.K;
        var trues = [], falses = [];
        this.each(function(value, index) {
            (iterator.call(context, value, index) ? trues : falses).push(value);
        });
        return [trues, falses];
    }
    function pluck(property) {
        var results = [];
        this.each(function(value) {
            results.push(value[property]);
        });
        return results;
    }
    function reject(iterator, context) {
        var results = [];
        this.each(function(value, index) {
            if (!iterator.call(context, value, index))
                results.push(value);
        });
        return results;
    }
    function sortBy(iterator, context) {
        return this.map(function(value, index) {
            return {value: value,criteria: iterator.call(context, value, index)};
        }).sort(function(left, right) {
            var a = left.criteria, b = right.criteria;
            return a < b ? -1 : a > b ? 1 : 0;
        }).pluck('value');
    }
    function toArray() {
        return this.map();
    }
    function zip() {
        var iterator = Prototype.K, args = $A(arguments);
        if (Object.isFunction(args.last()))
            iterator = args.pop();
        var collections = [this].concat(args).map($A);
        return this.map(function(value, index) {
            return iterator(collections.pluck(index));
        });
    }
    function size() {
        return this.toArray().length;
    }
    function inspect() {
        return '#<Enumerable:' + this.toArray().inspect() + '>';
    }
    return {each: each,eachSlice: eachSlice,all: all,every: all,any: any,some: any,collect: collect,map: collect,detect: detect,findAll: findAll,select: findAll,filter: findAll,grep: grep,include: include,member: include,inGroupsOf: inGroupsOf,inject: inject,invoke: invoke,max: max,min: min,partition: partition,pluck: pluck,reject: reject,sortBy: sortBy,toArray: toArray,entries: toArray,zip: zip,size: size,inspect: inspect,find: detect};
})();
function $A(iterable) {
    if (!iterable)
        return [];
    if ('toArray' in Object(iterable))
        return iterable.toArray();
    var length = iterable.length || 0, results = new Array(length);
    while (length--)
        results[length] = iterable[length];
    return results;
}
function $w(string) {
    if (!Object.isString(string))
        return [];
    string = string.strip();
    return string ? string.split(/\s+/) : [];
}
Array.from = $A;
(function() {
    var arrayProto = Array.prototype, slice = arrayProto.slice, _each = arrayProto.forEach;
    function each(iterator, context) {
        for (var i = 0, length = this.length >>> 0; i < length; i++) {
            if (i in this)
                iterator.call(context, this[i], i, this);
        }
    }
    if (!_each)
        _each = each;
    function clear() {
        this.length = 0;
        return this;
    }
    function first() {
        return this[0];
    }
    function last() {
        return this[this.length - 1];
    }
    function compact() {
        return this.select(function(value) {
            return value != null;
        });
    }
    function flatten() {
        return this.inject([], function(array, value) {
            if (Object.isArray(value))
                return array.concat(value.flatten());
            array.push(value);
            return array;
        });
    }
    function without() {
        var values = slice.call(arguments, 0);
        return this.select(function(value) {
            return !values.include(value);
        });
    }
    function reverse(inline) {
        return (inline === false ? this.toArray() : this)._reverse();
    }
    function uniq(sorted) {
        return this.inject([], function(array, value, index) {
            if (0 == index || (sorted ? array.last() != value : !array.include(value)))
                array.push(value);
            return array;
        });
    }
    function intersect(array) {
        return this.uniq().findAll(function(item) {
            return array.detect(function(value) {
                return item === value
            });
        });
    }
    function clone() {
        return slice.call(this, 0);
    }
    function size() {
        return this.length;
    }
    function inspect() {
        return '[' + this.map(Object.inspect).join(', ') + ']';
    }
    function indexOf(item, i) {
        i || (i = 0);
        var length = this.length;
        if (i < 0)
            i = length + i;
        for (; i < length; i++)
            if (this[i] === item)
                return i;
        return -1;
    }
    function lastIndexOf(item, i) {
        i = isNaN(i) ? this.length : (i < 0 ? this.length + i : i) + 1;
        var n = this.slice(0, i).reverse().indexOf(item);
        return (n < 0) ? n : i - n - 1;
    }
    function concat() {
        var array = slice.call(this, 0), item;
        for (var i = 0, length = arguments.length; i < length; i++) {
            item = arguments[i];
            if (Object.isArray(item) && !('callee' in item)) {
                for (var j = 0, arrayLength = item.length; j < arrayLength; j++)
                    array.push(item[j]);
            } else {
                array.push(item);
            }
        }
        return array;
    }
    Object.extend(arrayProto, Enumerable);
    if (!arrayProto._reverse)
        arrayProto._reverse = arrayProto.reverse;
    Object.extend(arrayProto, {_each: _each,clear: clear,first: first,last: last,compact: compact,flatten: flatten,without: without,reverse: reverse,uniq: uniq,intersect: intersect,clone: clone,toArray: clone,size: size,inspect: inspect});
    var CONCAT_ARGUMENTS_BUGGY = (function() {
        return [].concat(arguments)[0][0] !== 1;
    })(1, 2)
    if (CONCAT_ARGUMENTS_BUGGY)
        arrayProto.concat = concat;
    if (!arrayProto.indexOf)
        arrayProto.indexOf = indexOf;
    if (!arrayProto.lastIndexOf)
        arrayProto.lastIndexOf = lastIndexOf;
})();
function $H(object) {
    return new Hash(object);
}
;
var Hash = Class.create(Enumerable, (function() {
    function initialize(object) {
        this._object = Object.isHash(object) ? object.toObject() : Object.clone(object);
    }
    function _each(iterator) {
        for (var key in this._object) {
            var value = this._object[key], pair = [key, value];
            pair.key = key;
            pair.value = value;
            iterator(pair);
        }
    }
    function set(key, value) {
        return this._object[key] = value;
    }
    function get(key) {
        if (this._object[key] !== Object.prototype[key])
            return this._object[key];
    }
    function unset(key) {
        var value = this._object[key];
        delete this._object[key];
        return value;
    }
    function toObject() {
        return Object.clone(this._object);
    }
    function keys() {
        return this.pluck('key');
    }
    function values() {
        return this.pluck('value');
    }
    function index(value) {
        var match = this.detect(function(pair) {
            return pair.value === value;
        });
        return match && match.key;
    }
    function merge(object) {
        return this.clone().update(object);
    }
    function update(object) {
        return new Hash(object).inject(this, function(result, pair) {
            result.set(pair.key, pair.value);
            return result;
        });
    }
    function toQueryPair(key, value) {
        if (Object.isUndefined(value))
            return key;
        return key + '=' + encodeURIComponent(String.interpret(value));
    }
    function toQueryString() {
        return this.inject([], function(results, pair) {
            var key = encodeURIComponent(pair.key), values = pair.value;
            if (values && typeof values == 'object') {
                if (Object.isArray(values)) {
                    var queryValues = [];
                    for (var i = 0, len = values.length, value; i < len; i++) {
                        value = values[i];
                        queryValues.push(toQueryPair(key, value));
                    }
                    return results.concat(queryValues);
                }
            } else
                results.push(toQueryPair(key, values));
            return results;
        }).join('&');
    }
    function inspect() {
        return '#<Hash:{' + this.map(function(pair) {
            return pair.map(Object.inspect).join(': ');
        }).join(', ') + '}>';
    }
    function clone() {
        return new Hash(this);
    }
    return {initialize: initialize,_each: _each,set: set,get: get,unset: unset,toObject: toObject,toTemplateReplacements: toObject,keys: keys,values: values,index: index,merge: merge,update: update,toQueryString: toQueryString,inspect: inspect,toJSON: toObject,clone: clone};
})());
Hash.from = $H;
Object.extend(Number.prototype, (function() {
    function toColorPart() {
        return this.toPaddedString(2, 16);
    }
    function succ() {
        return this + 1;
    }
    function times(iterator, context) {
        $R(0, this, true).each(iterator, context);
        return this;
    }
    function toPaddedString(length, radix) {
        var string = this.toString(radix || 10);
        return '0'.times(length - string.length) + string;
    }
    function abs() {
        return Math.abs(this);
    }
    function round() {
        return Math.round(this);
    }
    function ceil() {
        return Math.ceil(this);
    }
    function floor() {
        return Math.floor(this);
    }
    return {toColorPart: toColorPart,succ: succ,times: times,toPaddedString: toPaddedString,abs: abs,round: round,ceil: ceil,floor: floor};
})());
function $R(start, end, exclusive) {
    return new ObjectRange(start, end, exclusive);
}
var ObjectRange = Class.create(Enumerable, (function() {
    function initialize(start, end, exclusive) {
        this.start = start;
        this.end = end;
        this.exclusive = exclusive;
    }
    function _each(iterator) {
        var value = this.start;
        while (this.include(value)) {
            iterator(value);
            value = value.succ();
        }
    }
    function include(value) {
        if (value < this.start)
            return false;
        if (this.exclusive)
            return value < this.end;
        return value <= this.end;
    }
    return {initialize: initialize,_each: _each,include: include};
})());
var Ajax = {getTransport: function() {
        return Try.these(function() {
            return new XMLHttpRequest()
        }, function() {
            return new ActiveXObject('Msxml2.XMLHTTP')
        }, function() {
            return new ActiveXObject('Microsoft.XMLHTTP')
        }) || false;
    },activeRequestCount: 0};
Ajax.Responders = {responders: [],_each: function(iterator) {
        this.responders._each(iterator);
    },register: function(responder) {
        if (!this.include(responder))
            this.responders.push(responder);
    },unregister: function(responder) {
        this.responders = this.responders.without(responder);
    },dispatch: function(callback, request, transport, json) {
        this.each(function(responder) {
            if (Object.isFunction(responder[callback])) {
                try {
                    responder[callback].apply(responder, [request, transport, json]);
                } catch (e) {
                }
            }
        });
    }};
Object.extend(Ajax.Responders, Enumerable);
Ajax.Responders.register({onCreate: function() {
        Ajax.activeRequestCount++
    },onComplete: function() {
        Ajax.activeRequestCount--
    }});
Ajax.Base = Class.create({initialize: function(options) {
        this.options = {method: 'post',asynchronous: true,contentType: 'application/x-www-form-urlencoded',encoding: 'UTF-8',parameters: '',evalJSON: true,evalJS: true};
        Object.extend(this.options, options || {});
        this.options.method = this.options.method.toLowerCase();
        if (Object.isHash(this.options.parameters))
            this.options.parameters = this.options.parameters.toObject();
    }});
Ajax.Request = Class.create(Ajax.Base, {_complete: false,initialize: function($super, url, options) {
        $super(options);
        this.transport = Ajax.getTransport();
        this.request(url);
    },request: function(url) {
        this.url = url;
        this.method = this.options.method;
        var params = Object.isString(this.options.parameters) ? this.options.parameters : Object.toQueryString(this.options.parameters);
        if (!['get', 'post'].include(this.method)) {
            params += (params ? '&' : '') + "_method=" + this.method;
            this.method = 'post';
        }
        if (params && this.method === 'get') {
            this.url += (this.url.include('?') ? '&' : '?') + params;
        }
        this.parameters = params.toQueryParams();
        try {
            var response = new Ajax.Response(this);
            if (this.options.onCreate)
                this.options.onCreate(response);
            Ajax.Responders.dispatch('onCreate', this, response);
            this.transport.open(this.method.toUpperCase(), this.url, this.options.asynchronous);
            if (this.options.asynchronous)
                this.respondToReadyState.bind(this).defer(1);
            this.transport.onreadystatechange = this.onStateChange.bind(this);
            this.setRequestHeaders();
            this.body = this.method == 'post' ? (this.options.postBody || params) : null;
            this.transport.send(this.body);
            if (!this.options.asynchronous && this.transport.overrideMimeType)
                this.onStateChange();
        }
        catch (e) {
            this.dispatchException(e);
        }
    },onStateChange: function() {
        var readyState = this.transport.readyState;
        if (readyState > 1 && !((readyState == 4) && this._complete))
            this.respondToReadyState(this.transport.readyState);
    },setRequestHeaders: function() {
        var headers = {'X-Requested-With': 'XMLHttpRequest','X-Prototype-Version': Prototype.Version,'Accept': 'text/javascript, text/html, application/xml, text/xml, */*'};
        if (this.method == 'post') {
            headers['Content-type'] = this.options.contentType +
            (this.options.encoding ? '; charset=' + this.options.encoding : '');
            if (this.transport.overrideMimeType && (navigator.userAgent.match(/Gecko\/(\d{4})/) || [0, 2005])[1] < 2005)
                headers['Connection'] = 'close';
        }
        if (typeof this.options.requestHeaders == 'object') {
            var extras = this.options.requestHeaders;
            if (Object.isFunction(extras.push))
                for (var i = 0, length = extras.length; i < length; i += 2)
                    headers[extras[i]] = extras[i + 1];
            else
                $H(extras).each(function(pair) {
                    headers[pair.key] = pair.value
                });
        }
        for (var name in headers)
            this.transport.setRequestHeader(name, headers[name]);
    },success: function() {
        var status = this.getStatus();
        return !status || (status >= 200 && status < 300) || status == 304;
    },getStatus: function() {
        try {
            if (this.transport.status === 1223)
                return 204;
            return this.transport.status || 0;
        } catch (e) {
            return 0
        }
    },respondToReadyState: function(readyState) {
        var state = Ajax.Request.Events[readyState], response = new Ajax.Response(this);
        if (state == 'Complete') {
            try {
                this._complete = true;
                (this.options['on' + response.status] || this.options['on' + (this.success() ? 'Success' : 'Failure')] || Prototype.emptyFunction)(response, response.headerJSON);
            } catch (e) {
                this.dispatchException(e);
            }
            var contentType = response.getHeader('Content-type');
            if (this.options.evalJS == 'force' || (this.options.evalJS && this.isSameOrigin() && contentType && contentType.match(/^\s*(text|application)\/(x-)?(java|ecma)script(;.*)?\s*$/i)))
                this.evalResponse();
        }
        try {
            (this.options['on' + state] || Prototype.emptyFunction)(response, response.headerJSON);
            Ajax.Responders.dispatch('on' + state, this, response, response.headerJSON);
        } catch (e) {
            this.dispatchException(e);
        }
        if (state == 'Complete') {
            this.transport.onreadystatechange = Prototype.emptyFunction;
        }
    },isSameOrigin: function() {
        var m = this.url.match(/^\s*https?:\/\/[^\/]*/);
        return !m || (m[0] == '#{protocol}//#{domain}#{port}'.interpolate({protocol: location.protocol,domain: document.domain,port: location.port ? ':' + location.port : ''}));
    },getHeader: function(name) {
        try {
            return this.transport.getResponseHeader(name) || null;
        } catch (e) {
            return null;
        }
    },evalResponse: function() {
        try {
            return eval((this.transport.responseText || '').unfilterJSON());
        } catch (e) {
            this.dispatchException(e);
        }
    },dispatchException: function(exception) {
        (this.options.onException || Prototype.emptyFunction)(this, exception);
        Ajax.Responders.dispatch('onException', this, exception);
    }});
Ajax.Request.Events = ['Uninitialized', 'Loading', 'Loaded', 'Interactive', 'Complete'];
Ajax.Response = Class.create({initialize: function(request) {
        this.request = request;
        var transport = this.transport = request.transport, readyState = this.readyState = transport.readyState;
        if ((readyState > 2 && !Prototype.Browser.IE) || readyState == 4) {
            this.status = this.getStatus();
            this.statusText = this.getStatusText();
            this.responseText = String.interpret(transport.responseText);
            this.headerJSON = this._getHeaderJSON();
        }
        if (readyState == 4) {
            var xml = transport.responseXML;
            this.responseXML = Object.isUndefined(xml) ? null : xml;
            this.responseJSON = this._getResponseJSON();
        }
    },status: 0,statusText: '',getStatus: Ajax.Request.prototype.getStatus,getStatusText: function() {
        try {
            return this.transport.statusText || '';
        } catch (e) {
            return ''
        }
    },getHeader: Ajax.Request.prototype.getHeader,getAllHeaders: function() {
        try {
            return this.getAllResponseHeaders();
        } catch (e) {
            return null
        }
    },getResponseHeader: function(name) {
        return this.transport.getResponseHeader(name);
    },getAllResponseHeaders: function() {
        return this.transport.getAllResponseHeaders();
    },_getHeaderJSON: function() {
        var json = this.getHeader('X-JSON');
        if (!json)
            return null;
        json = decodeURIComponent(escape(json));
        try {
            return json.evalJSON(this.request.options.sanitizeJSON || !this.request.isSameOrigin());
        } catch (e) {
            this.request.dispatchException(e);
        }
    },_getResponseJSON: function() {
        var options = this.request.options;
        if (!options.evalJSON || (options.evalJSON != 'force' && !(this.getHeader('Content-type') || '').include('application/json')) || this.responseText.blank())
            return null;
        try {
            return this.responseText.evalJSON(options.sanitizeJSON || !this.request.isSameOrigin());
        } catch (e) {
            this.request.dispatchException(e);
        }
    }});
Ajax.Updater = Class.create(Ajax.Request, {initialize: function($super, container, url, options) {
        this.container = {success: (container.success || container),failure: (container.failure || (container.success ? null : container))};
        options = Object.clone(options);
        var onComplete = options.onComplete;
        options.onComplete = (function(response, json) {
            this.updateContent(response.responseText);
            if (Object.isFunction(onComplete))
                onComplete(response, json);
        }).bind(this);
        $super(url, options);
    },updateContent: function(responseText) {
        var receiver = this.container[this.success() ? 'success' : 'failure'], options = this.options;
        if (!options.evalScripts)
            responseText = responseText.stripScripts();
        if (receiver = $(receiver)) {
            if (options.insertion) {
                if (Object.isString(options.insertion)) {
                    var insertion = {};
                    insertion[options.insertion] = responseText;
                    receiver.insert(insertion);
                }
                else
                    options.insertion(receiver, responseText);
            }
            else
                receiver.update(responseText);
        }
    }});
Ajax.PeriodicalUpdater = Class.create(Ajax.Base, {initialize: function($super, container, url, options) {
        $super(options);
        this.onComplete = this.options.onComplete;
        this.frequency = (this.options.frequency || 2);
        this.decay = (this.options.decay || 1);
        this.updater = {};
        this.container = container;
        this.url = url;
        this.start();
    },start: function() {
        this.options.onComplete = this.updateComplete.bind(this);
        this.onTimerEvent();
    },stop: function() {
        this.updater.options.onComplete = undefined;
        clearTimeout(this.timer);
        (this.onComplete || Prototype.emptyFunction).apply(this, arguments);
    },updateComplete: function(response) {
        if (this.options.decay) {
            this.decay = (response.responseText == this.lastText ? this.decay * this.options.decay : 1);
            this.lastText = response.responseText;
        }
        this.timer = this.onTimerEvent.bind(this).delay(this.decay * this.frequency);
    },onTimerEvent: function() {
        this.updater = new Ajax.Updater(this.container, this.url, this.options);
    }});
function $(element) {
    if (arguments.length > 1) {
        for (var i = 0, elements = [], length = arguments.length; i < length; i++)
            elements.push($(arguments[i]));
        return elements;
    }
    if (Object.isString(element))
        element = document.getElementById(element);
    return Element.extend(element);
}
if (Prototype.BrowserFeatures.XPath) {
    document._getElementsByXPath = function(expression, parentElement) {
        var results = [];
        var query = document.evaluate(expression, $(parentElement) || document, null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);
        for (var i = 0, length = query.snapshotLength; i < length; i++)
            results.push(Element.extend(query.snapshotItem(i)));
        return results;
    };
}
if (!Node)
    var Node = {};
if (!Node.ELEMENT_NODE) {
    Object.extend(Node, {ELEMENT_NODE: 1,ATTRIBUTE_NODE: 2,TEXT_NODE: 3,CDATA_SECTION_NODE: 4,ENTITY_REFERENCE_NODE: 5,ENTITY_NODE: 6,PROCESSING_INSTRUCTION_NODE: 7,COMMENT_NODE: 8,DOCUMENT_NODE: 9,DOCUMENT_TYPE_NODE: 10,DOCUMENT_FRAGMENT_NODE: 11,NOTATION_NODE: 12});
}
(function(global) {
    function shouldUseCache(tagName, attributes) {
        if (tagName === 'select')
            return false;
        if ('type' in attributes)
            return false;
        return true;
    }
    var HAS_EXTENDED_CREATE_ELEMENT_SYNTAX = (function() {
        try {
            var el = document.createElement('<input name="x">');
            return el.tagName.toLowerCase() === 'input' && el.name === 'x';
        }
        catch (err) {
            return false;
        }
    })();
    var element = global.Element;
    global.Element = function(tagName, attributes) {
        attributes = attributes || {};
        tagName = tagName.toLowerCase();
        var cache = Element.cache;
        if (HAS_EXTENDED_CREATE_ELEMENT_SYNTAX && attributes.name) {
            tagName = '<' + tagName + ' name="' + attributes.name + '">';
            delete attributes.name;
            return Element.writeAttribute(document.createElement(tagName), attributes);
        }
        if (!cache[tagName])
            cache[tagName] = Element.extend(document.createElement(tagName));
        var node = shouldUseCache(tagName, attributes) ? cache[tagName].cloneNode(false) : document.createElement(tagName);
        return Element.writeAttribute(node, attributes);
    };
    Object.extend(global.Element, element || {});
    if (element)
        global.Element.prototype = element.prototype;
})(this);
Element.idCounter = 1;
Element.cache = {};
Element._purgeElement = function(element) {
    var uid = element._prototypeUID;
    if (uid) {
        Element.stopObserving(element);
        element._prototypeUID = void 0;
        delete Element.Storage[uid];
    }
}
Element.Methods = {visible: function(element) {
        return $(element).style.display != 'none';
    },toggle: function(element) {
        element = $(element);
        Element[Element.visible(element) ? 'hide' : 'show'](element);
        return element;
    },hide: function(element) {
        element = $(element);
        element.style.display = 'none';
        return element;
    },show: function(element) {
        element = $(element);
        element.style.display = '';
        return element;
    },remove: function(element) {
        element = $(element);
        element.parentNode.removeChild(element);
        return element;
    },update: (function() {
        var SELECT_ELEMENT_INNERHTML_BUGGY = (function() {
            var el = document.createElement("select"), isBuggy = true;
            el.innerHTML = "<option value=\"test\">test</option>";
            if (el.options && el.options[0]) {
                isBuggy = el.options[0].nodeName.toUpperCase() !== "OPTION";
            }
            el = null;
            return isBuggy;
        })();
        var TABLE_ELEMENT_INNERHTML_BUGGY = (function() {
            try {
                var el = document.createElement("table");
                if (el && el.tBodies) {
                    el.innerHTML = "<tbody><tr><td>test</td></tr></tbody>";
                    var isBuggy = typeof el.tBodies[0] == "undefined";
                    el = null;
                    return isBuggy;
                }
            } catch (e) {
                return true;
            }
        })();
        var LINK_ELEMENT_INNERHTML_BUGGY = (function() {
            try {
                var el = document.createElement('div');
                el.innerHTML = "<link>";
                var isBuggy = (el.childNodes.length === 0);
                el = null;
                return isBuggy;
            } catch (e) {
                return true;
            }
        })();
        var ANY_INNERHTML_BUGGY = SELECT_ELEMENT_INNERHTML_BUGGY || TABLE_ELEMENT_INNERHTML_BUGGY || LINK_ELEMENT_INNERHTML_BUGGY;
        var SCRIPT_ELEMENT_REJECTS_TEXTNODE_APPENDING = (function() {
            var s = document.createElement("script"), isBuggy = false;
            try {
                s.appendChild(document.createTextNode(""));
                isBuggy = !s.firstChild || s.firstChild && s.firstChild.nodeType !== 3;
            } catch (e) {
                isBuggy = true;
            }
            s = null;
            return isBuggy;
        })();
        function update(element, content) {
            element = $(element);
            var purgeElement = Element._purgeElement;
            var descendants = element.getElementsByTagName('*'), i = descendants.length;
            while (i--)
                purgeElement(descendants[i]);
            if (content && content.toElement)
                content = content.toElement();
            if (Object.isElement(content))
                return element.update().insert(content);
            content = Object.toHTML(content);
            var tagName = element.tagName.toUpperCase();
            if (tagName === 'SCRIPT' && SCRIPT_ELEMENT_REJECTS_TEXTNODE_APPENDING) {
                element.text = content;
                return element;
            }
            if (ANY_INNERHTML_BUGGY) {
                if (tagName in Element._insertionTranslations.tags) {
                    while (element.firstChild) {
                        element.removeChild(element.firstChild);
                    }
                    Element._getContentFromAnonymousElement(tagName, content.stripScripts()).each(function(node) {
                        element.appendChild(node)
                    });
                } else if (LINK_ELEMENT_INNERHTML_BUGGY && Object.isString(content) && content.indexOf('<link') > -1) {
                    while (element.firstChild) {
                        element.removeChild(element.firstChild);
                    }
                    var nodes = Element._getContentFromAnonymousElement(tagName, content.stripScripts(), true);
                    nodes.each(function(node) {
                        element.appendChild(node)
                    });
                }
                else {
                    element.innerHTML = content.stripScripts();
                }
            }
            else {
                element.innerHTML = content.stripScripts();
            }
            content.evalScripts.bind(content).defer();
            return element;
        }
        return update;
    })(),replace: function(element, content) {
        element = $(element);
        if (content && content.toElement)
            content = content.toElement();
        else if (!Object.isElement(content)) {
            content = Object.toHTML(content);
            var range = element.ownerDocument.createRange();
            range.selectNode(element);
            content.evalScripts.bind(content).defer();
            content = range.createContextualFragment(content.stripScripts());
        }
        element.parentNode.replaceChild(content, element);
        return element;
    },insert: function(element, insertions) {
        element = $(element);
        if (Object.isString(insertions) || Object.isNumber(insertions) || Object.isElement(insertions) || (insertions && (insertions.toElement || insertions.toHTML)))
            insertions = {bottom: insertions};
        var content, insert, tagName, childNodes;
        for (var position in insertions) {
            content = insertions[position];
            position = position.toLowerCase();
            insert = Element._insertionTranslations[position];
            if (content && content.toElement)
                content = content.toElement();
            if (Object.isElement(content)) {
                insert(element, content);
                continue;
            }
            content = Object.toHTML(content);
            tagName = ((position == 'before' || position == 'after') ? element.parentNode : element).tagName.toUpperCase();
            childNodes = Element._getContentFromAnonymousElement(tagName, content.stripScripts());
            if (position == 'top' || position == 'after')
                childNodes.reverse();
            childNodes.each(insert.curry(element));
            content.evalScripts.bind(content).defer();
        }
        return element;
    },wrap: function(element, wrapper, attributes) {
        element = $(element);
        if (Object.isElement(wrapper))
            $(wrapper).writeAttribute(attributes || {});
        else if (Object.isString(wrapper))
            wrapper = new Element(wrapper, attributes);
        else
            wrapper = new Element('div', wrapper);
        if (element.parentNode)
            element.parentNode.replaceChild(wrapper, element);
        wrapper.appendChild(element);
        return wrapper;
    },inspect: function(element) {
        element = $(element);
        var result = '<' + element.tagName.toLowerCase();
        $H({'id': 'id','className': 'class'}).each(function(pair) {
            var property = pair.first(), attribute = pair.last(), value = (element[property] || '').toString();
            if (value)
                result += ' ' + attribute + '=' + value.inspect(true);
        });
        return result + '>';
    },recursivelyCollect: function(element, property, maximumLength) {
        element = $(element);
        maximumLength = maximumLength || -1;
        var elements = [];
        while (element = element[property]) {
            if (element.nodeType == 1)
                elements.push(Element.extend(element));
            if (elements.length == maximumLength)
                break;
        }
        return elements;
    },ancestors: function(element) {
        return Element.recursivelyCollect(element, 'parentNode');
    },descendants: function(element) {
        return Element.select(element, "*");
    },firstDescendant: function(element) {
        element = $(element).firstChild;
        while (element && element.nodeType != 1)
            element = element.nextSibling;
        return $(element);
    },immediateDescendants: function(element) {
        var results = [], child = $(element).firstChild;
        while (child) {
            if (child.nodeType === 1) {
                results.push(Element.extend(child));
            }
            child = child.nextSibling;
        }
        return results;
    },previousSiblings: function(element, maximumLength) {
        return Element.recursivelyCollect(element, 'previousSibling');
    },nextSiblings: function(element) {
        return Element.recursivelyCollect(element, 'nextSibling');
    },siblings: function(element) {
        element = $(element);
        return Element.previousSiblings(element).reverse().concat(Element.nextSiblings(element));
    },match: function(element, selector) {
        element = $(element);
        if (Object.isString(selector))
            return Prototype.Selector.match(element, selector);
        return selector.match(element);
    },up: function(element, expression, index) {
        element = $(element);
        if (arguments.length == 1)
            return $(element.parentNode);
        var ancestors = Element.ancestors(element);
        return Object.isNumber(expression) ? ancestors[expression] : Prototype.Selector.find(ancestors, expression, index);
    },down: function(element, expression, index) {
        element = $(element);
        if (arguments.length == 1)
            return Element.firstDescendant(element);
        return Object.isNumber(expression) ? Element.descendants(element)[expression] : Element.select(element, expression)[index || 0];
    },previous: function(element, expression, index) {
        element = $(element);
        if (Object.isNumber(expression))
            index = expression, expression = false;
        if (!Object.isNumber(index))
            index = 0;
        if (expression) {
            return Prototype.Selector.find(element.previousSiblings(), expression, index);
        } else {
            return element.recursivelyCollect("previousSibling", index + 1)[index];
        }
    },next: function(element, expression, index) {
        element = $(element);
        if (Object.isNumber(expression))
            index = expression, expression = false;
        if (!Object.isNumber(index))
            index = 0;
        if (expression) {
            return Prototype.Selector.find(element.nextSiblings(), expression, index);
        } else {
            var maximumLength = Object.isNumber(index) ? index + 1 : 1;
            return element.recursivelyCollect("nextSibling", index + 1)[index];
        }
    },select: function(element) {
        element = $(element);
        var expressions = Array.prototype.slice.call(arguments, 1).join(', ');
        return Prototype.Selector.select(expressions, element);
    },adjacent: function(element) {
        element = $(element);
        var expressions = Array.prototype.slice.call(arguments, 1).join(', ');
        return Prototype.Selector.select(expressions, element.parentNode).without(element);
    },identify: function(element) {
        element = $(element);
        var id = Element.readAttribute(element, 'id');
        if (id)
            return id;
        do {
            id = 'anonymous_element_' + Element.idCounter++
        } while ($(id));
        Element.writeAttribute(element, 'id', id);
        return id;
    },readAttribute: function(element, name) {
        element = $(element);
        if (Prototype.Browser.IE) {
            var t = Element._attributeTranslations.read;
            if (t.values[name])
                return t.values[name](element, name);
            if (t.names[name])
                name = t.names[name];
            if (name.include(':')) {
                return (!element.attributes || !element.attributes[name]) ? null : element.attributes[name].value;
            }
        }
        return element.getAttribute(name);
    },writeAttribute: function(element, name, value) {
        element = $(element);
        var attributes = {}, t = Element._attributeTranslations.write;
        if (typeof name == 'object')
            attributes = name;
        else
            attributes[name] = Object.isUndefined(value) ? true : value;
        for (var attr in attributes) {
            name = t.names[attr] || attr;
            value = attributes[attr];
            if (t.values[attr])
                name = t.values[attr](element, value);
            if (value === false || value === null)
                element.removeAttribute(name);
            else if (value === true)
                element.setAttribute(name, name);
            else
                element.setAttribute(name, value);
        }
        return element;
    },getHeight: function(element) {
        return Element.getDimensions(element).height;
    },getWidth: function(element) {
        return Element.getDimensions(element).width;
    },classNames: function(element) {
        return new Element.ClassNames(element);
    },hasClassName: function(element, className) {
        if (!(element = $(element)))
            return;
        var elementClassName = element.className;
        return (elementClassName.length > 0 && (elementClassName == className || new RegExp("(^|\\s)" + className + "(\\s|$)").test(elementClassName)));
    },addClassName: function(element, className) {
        if (!(element = $(element)))
            return;
        if (!Element.hasClassName(element, className))
            element.className += (element.className ? ' ' : '') + className;
        return element;
    },removeClassName: function(element, className) {
        if (!(element = $(element)))
            return;
        element.className = element.className.replace(new RegExp("(^|\\s+)" + className + "(\\s+|$)"), ' ').strip();
        return element;
    },toggleClassName: function(element, className) {
        if (!(element = $(element)))
            return;
        return Element[Element.hasClassName(element, className) ? 'removeClassName' : 'addClassName'](element, className);
    },cleanWhitespace: function(element) {
        element = $(element);
        var node = element.firstChild;
        while (node) {
            var nextNode = node.nextSibling;
            if (node.nodeType == 3 && !/\S/.test(node.nodeValue))
                element.removeChild(node);
            node = nextNode;
        }
        return element;
    },empty: function(element) {
        return $(element).innerHTML.blank();
    },descendantOf: function(element, ancestor) {
        element = $(element), ancestor = $(ancestor);
        if (element.compareDocumentPosition)
            return (element.compareDocumentPosition(ancestor) & 8) === 8;
        if (ancestor.contains)
            return ancestor.contains(element) && ancestor !== element;
        while (element = element.parentNode)
            if (element == ancestor)
                return true;
        return false;
    },scrollTo: function(element) {
        element = $(element);
        var pos = Element.cumulativeOffset(element);
        window.scrollTo(pos[0], pos[1]);
        return element;
    },getStyle: function(element, style) {
        element = $(element);
        style = style == 'float' ? 'cssFloat' : style.camelize();
        var value = element.style[style];
        if (!value || value == 'auto') {
            var css = document.defaultView.getComputedStyle(element, null);
            value = css ? css[style] : null;
        }
        if (style == 'opacity')
            return value ? parseFloat(value) : 1.0;
        return value == 'auto' ? null : value;
    },getOpacity: function(element) {
        return $(element).getStyle('opacity');
    },setStyle: function(element, styles) {
        element = $(element);
        var elementStyle = element.style, match;
        if (Object.isString(styles)) {
            element.style.cssText += ';' + styles;
            return styles.include('opacity') ? element.setOpacity(styles.match(/opacity:\s*(\d?\.?\d*)/)[1]) : element;
        }
        for (var property in styles)
            if (property == 'opacity')
                element.setOpacity(styles[property]);
            else
                elementStyle[(property == 'float' || property == 'cssFloat') ? (Object.isUndefined(elementStyle.styleFloat) ? 'cssFloat' : 'styleFloat') : property] = styles[property];
        return element;
    },setOpacity: function(element, value) {
        element = $(element);
        element.style.opacity = (value == 1 || value === '') ? '' : (value < 0.00001) ? 0 : value;
        return element;
    },makePositioned: function(element) {
        element = $(element);
        var pos = Element.getStyle(element, 'position');
        if (pos == 'static' || !pos) {
            element._madePositioned = true;
            element.style.position = 'relative';
            if (Prototype.Browser.Opera) {
                element.style.top = 0;
                element.style.left = 0;
            }
        }
        return element;
    },undoPositioned: function(element) {
        element = $(element);
        if (element._madePositioned) {
            element._madePositioned = undefined;
            element.style.position = element.style.top = element.style.left = element.style.bottom = element.style.right = '';
        }
        return element;
    },makeClipping: function(element) {
        element = $(element);
        if (element._overflow)
            return element;
        element._overflow = Element.getStyle(element, 'overflow') || 'auto';
        if (element._overflow !== 'hidden')
            element.style.overflow = 'hidden';
        return element;
    },undoClipping: function(element) {
        element = $(element);
        if (!element._overflow)
            return element;
        element.style.overflow = element._overflow == 'auto' ? '' : element._overflow;
        element._overflow = null;
        return element;
    },clonePosition: function(element, source) {
        var options = Object.extend({setLeft: true,setTop: true,setWidth: true,setHeight: true,offsetTop: 0,offsetLeft: 0}, arguments[2] || {});
        source = $(source);
        var p = Element.viewportOffset(source), delta = [0, 0], parent = null;
        element = $(element);
        if (Element.getStyle(element, 'position') == 'absolute') {
            parent = Element.getOffsetParent(element);
            delta = Element.viewportOffset(parent);
        }
        if (parent == document.body) {
            delta[0] -= document.body.offsetLeft;
            delta[1] -= document.body.offsetTop;
        }
        if (options.setLeft)
            element.style.left = (p[0] - delta[0] + options.offsetLeft) + 'px';
        if (options.setTop)
            element.style.top = (p[1] - delta[1] + options.offsetTop) + 'px';
        if (options.setWidth)
            element.style.width = source.offsetWidth + 'px';
        if (options.setHeight)
            element.style.height = source.offsetHeight + 'px';
        return element;
    }};
Object.extend(Element.Methods, {getElementsBySelector: Element.Methods.select,childElements: Element.Methods.immediateDescendants});
Element._attributeTranslations = {write: {names: {className: 'class',htmlFor: 'for'},values: {}}};
if (Prototype.Browser.Opera) {
    Element.Methods.getStyle = Element.Methods.getStyle.wrap(function(proceed, element, style) {
        switch (style) {
            case 'height':
            case 'width':
                if (!Element.visible(element))
                    return null;
                var dim = parseInt(proceed(element, style), 10);
                if (dim !== element['offset' + style.capitalize()])
                    return dim + 'px';
                var properties;
                if (style === 'height') {
                    properties = ['border-top-width', 'padding-top', 'padding-bottom', 'border-bottom-width'];
                }
                else {
                    properties = ['border-left-width', 'padding-left', 'padding-right', 'border-right-width'];
                }
                return properties.inject(dim, function(memo, property) {
                    var val = proceed(element, property);
                    return val === null ? memo : memo - parseInt(val, 10);
                }) + 'px';
            default:
                return proceed(element, style);
        }
    });
    Element.Methods.readAttribute = Element.Methods.readAttribute.wrap(function(proceed, element, attribute) {
        if (attribute === 'title')
            return element.title;
        return proceed(element, attribute);
    });
}
else if (Prototype.Browser.IE) {
    Element.Methods.getStyle = function(element, style) {
        element = $(element);
        style = (style == 'float' || style == 'cssFloat') ? 'styleFloat' : style.camelize();
        var value = element.style[style];
        if (!value && element.currentStyle)
            value = element.currentStyle[style];
        if (style == 'opacity') {
            if (value = (element.getStyle('filter') || '').match(/alpha\(opacity=(.*)\)/))
                if (value[1])
                    return parseFloat(value[1]) / 100;
            return 1.0;
        }
        if (value == 'auto') {
            if ((style == 'width' || style == 'height') && (element.getStyle('display') != 'none'))
                return element['offset' + style.capitalize()] + 'px';
            return null;
        }
        return value;
    };
    Element.Methods.setOpacity = function(element, value) {
        function stripAlpha(filter) {
            return filter.replace(/alpha\([^\)]*\)/gi, '');
        }
        element = $(element);
        var currentStyle = element.currentStyle;
        if ((currentStyle && !currentStyle.hasLayout) || (!currentStyle && element.style.zoom == 'normal'))
            element.style.zoom = 1;
        var filter = element.getStyle('filter'), style = element.style;
        if (value == 1 || value === '') {
            (filter = stripAlpha(filter)) ? style.filter = filter : style.removeAttribute('filter');
            return element;
        } else if (value < 0.00001)
            value = 0;
        style.filter = stripAlpha(filter) + 'alpha(opacity=' + (value * 100) + ')';
        return element;
    };
    Element._attributeTranslations = (function() {
        var classProp = 'className', forProp = 'for', el = document.createElement('div');
        el.setAttribute(classProp, 'x');
        if (el.className !== 'x') {
            el.setAttribute('class', 'x');
            if (el.className === 'x') {
                classProp = 'class';
            }
        }
        el = null;
        el = document.createElement('label');
        el.setAttribute(forProp, 'x');
        if (el.htmlFor !== 'x') {
            el.setAttribute('htmlFor', 'x');
            if (el.htmlFor === 'x') {
                forProp = 'htmlFor';
            }
        }
        el = null;
        return {read: {names: {'class': classProp,'className': classProp,'for': forProp,'htmlFor': forProp},values: {_getAttr: function(element, attribute) {
                        return element.getAttribute(attribute);
                    },_getAttr2: function(element, attribute) {
                        return element.getAttribute(attribute, 2);
                    },_getAttrNode: function(element, attribute) {
                        var node = element.getAttributeNode(attribute);
                        return node ? node.value : "";
                    },_getEv: (function() {
                        var el = document.createElement('div'), f;
                        el.onclick = Prototype.emptyFunction;
                        var value = el.getAttribute('onclick');
                        if (String(value).indexOf('{') > -1) {
                            f = function(element, attribute) {
                                attribute = element.getAttribute(attribute);
                                if (!attribute)
                                    return null;
                                attribute = attribute.toString();
                                attribute = attribute.split('{')[1];
                                attribute = attribute.split('}')[0];
                                return attribute.strip();
                            };
                        }
                        else if (value === '') {
                            f = function(element, attribute) {
                                attribute = element.getAttribute(attribute);
                                if (!attribute)
                                    return null;
                                return attribute.strip();
                            };
                        }
                        el = null;
                        return f;
                    })(),_flag: function(element, attribute) {
                        return $(element).hasAttribute(attribute) ? attribute : null;
                    },style: function(element) {
                        return element.style.cssText.toLowerCase();
                    },title: function(element) {
                        return element.title;
                    }}}}
    })();
    Element._attributeTranslations.write = {names: Object.extend({cellpadding: 'cellPadding',cellspacing: 'cellSpacing'}, Element._attributeTranslations.read.names),values: {checked: function(element, value) {
                element.checked = !!value;
            },style: function(element, value) {
                element.style.cssText = value ? value : '';
            }}};
    Element._attributeTranslations.has = {};
    $w('colSpan rowSpan vAlign dateTime accessKey tabIndex ' + 'encType maxLength readOnly longDesc frameBorder').each(function(attr) {
        Element._attributeTranslations.write.names[attr.toLowerCase()] = attr;
        Element._attributeTranslations.has[attr.toLowerCase()] = attr;
    });
    (function(v) {
        Object.extend(v, {href: v._getAttr2,src: v._getAttr2,type: v._getAttr,action: v._getAttrNode,disabled: v._flag,checked: v._flag,readonly: v._flag,multiple: v._flag,onload: v._getEv,onunload: v._getEv,onclick: v._getEv,ondblclick: v._getEv,onmousedown: v._getEv,onmouseup: v._getEv,onmouseover: v._getEv,onmousemove: v._getEv,onmouseout: v._getEv,onfocus: v._getEv,onblur: v._getEv,onkeypress: v._getEv,onkeydown: v._getEv,onkeyup: v._getEv,onsubmit: v._getEv,onreset: v._getEv,onselect: v._getEv,onchange: v._getEv});
    })(Element._attributeTranslations.read.values);
    if (Prototype.BrowserFeatures.ElementExtensions) {
        (function() {
            function _descendants(element) {
                var nodes = element.getElementsByTagName('*'), results = [];
                for (var i = 0, node; node = nodes[i]; i++)
                    if (node.tagName !== "!")
                        results.push(node);
                return results;
            }
            Element.Methods.down = function(element, expression, index) {
                element = $(element);
                if (arguments.length == 1)
                    return element.firstDescendant();
                return Object.isNumber(expression) ? _descendants(element)[expression] : Element.select(element, expression)[index || 0];
            }
        })();
    }
}
else if (Prototype.Browser.Gecko && /rv:1\.8\.0/.test(navigator.userAgent)) {
    Element.Methods.setOpacity = function(element, value) {
        element = $(element);
        element.style.opacity = (value == 1) ? 0.999999 : (value === '') ? '' : (value < 0.00001) ? 0 : value;
        return element;
    };
}
else if (Prototype.Browser.WebKit) {
    Element.Methods.setOpacity = function(element, value) {
        element = $(element);
        element.style.opacity = (value == 1 || value === '') ? '' : (value < 0.00001) ? 0 : value;
        if (value == 1)
            if (element.tagName.toUpperCase() == 'IMG' && element.width) {
                element.width++;
                element.width--;
            } else
                try {
                    var n = document.createTextNode(' ');
                    element.appendChild(n);
                    element.removeChild(n);
                } catch (e) {
                }
        return element;
    };
}
if ('outerHTML' in document.documentElement) {
    Element.Methods.replace = function(element, content) {
        element = $(element);
        if (content && content.toElement)
            content = content.toElement();
        if (Object.isElement(content)) {
            element.parentNode.replaceChild(content, element);
            return element;
        }
        content = Object.toHTML(content);
        var parent = element.parentNode, tagName = parent.tagName.toUpperCase();
        if (Element._insertionTranslations.tags[tagName]) {
            var nextSibling = element.next(), fragments = Element._getContentFromAnonymousElement(tagName, content.stripScripts());
            parent.removeChild(element);
            if (nextSibling)
                fragments.each(function(node) {
                    parent.insertBefore(node, nextSibling)
                });
            else
                fragments.each(function(node) {
                    parent.appendChild(node)
                });
        }
        else
            element.outerHTML = content.stripScripts();
        content.evalScripts.bind(content).defer();
        return element;
    };
}
Element._returnOffset = function(l, t) {
    var result = [l, t];
    result.left = l;
    result.top = t;
    return result;
};
Element._getContentFromAnonymousElement = function(tagName, html, force) {
    var div = new Element('div'), t = Element._insertionTranslations.tags[tagName];
    var workaround = false;
    if (t)
        workaround = true;
    else if (force) {
        workaround = true;
        t = ['', '', 0];
    }
    if (workaround) {
        div.innerHTML = '&nbsp;' + t[0] + html + t[1];
        div.removeChild(div.firstChild);
        for (var i = t[2]; i--; ) {
            div = div.firstChild;
        }
    }
    else {
        div.innerHTML = html;
    }
    return $A(div.childNodes);
};
Element._insertionTranslations = {before: function(element, node) {
        element.parentNode.insertBefore(node, element);
    },top: function(element, node) {
        element.insertBefore(node, element.firstChild);
    },bottom: function(element, node) {
        element.appendChild(node);
    },after: function(element, node) {
        element.parentNode.insertBefore(node, element.nextSibling);
    },tags: {TABLE: ['<table>', '</table>', 1],TBODY: ['<table><tbody>', '</tbody></table>', 2],TR: ['<table><tbody><tr>', '</tr></tbody></table>', 3],TD: ['<table><tbody><tr><td>', '</td></tr></tbody></table>', 4],SELECT: ['<select>', '</select>', 1]}};
(function() {
    var tags = Element._insertionTranslations.tags;
    Object.extend(tags, {THEAD: tags.TBODY,TFOOT: tags.TBODY,TH: tags.TD});
})();
Element.Methods.Simulated = {hasAttribute: function(element, attribute) {
        attribute = Element._attributeTranslations.has[attribute] || attribute;
        var node = $(element).getAttributeNode(attribute);
        return !!(node && node.specified);
    }};
Element.Methods.ByTag = {};
Object.extend(Element, Element.Methods);
(function(div) {
    if (!Prototype.BrowserFeatures.ElementExtensions && div['__proto__']) {
        window.HTMLElement = {};
        window.HTMLElement.prototype = div['__proto__'];
        Prototype.BrowserFeatures.ElementExtensions = true;
    }
    div = null;
})(document.createElement('div'));
Element.extend = (function() {
    function checkDeficiency(tagName) {
        if (typeof window.Element != 'undefined') {
            var proto = window.Element.prototype;
            if (proto) {
                var id = '_' + (Math.random() + '').slice(2), el = document.createElement(tagName);
                proto[id] = 'x';
                var isBuggy = (el[id] !== 'x');
                delete proto[id];
                el = null;
                return isBuggy;
            }
        }
        return false;
    }
    function extendElementWith(element, methods) {
        for (var property in methods) {
            var value = methods[property];
            if (Object.isFunction(value) && !(property in element))
                element[property] = value.methodize();
        }
    }
    var HTMLOBJECTELEMENT_PROTOTYPE_BUGGY = checkDeficiency('object');
    if (Prototype.BrowserFeatures.SpecificElementExtensions) {
        if (HTMLOBJECTELEMENT_PROTOTYPE_BUGGY) {
            return function(element) {
                if (element && typeof element._extendedByPrototype == 'undefined') {
                    var t = element.tagName;
                    if (t && (/^(?:object|applet|embed)$/i.test(t))) {
                        extendElementWith(element, Element.Methods);
                        extendElementWith(element, Element.Methods.Simulated);
                        extendElementWith(element, Element.Methods.ByTag[t.toUpperCase()]);
                    }
                }
                return element;
            }
        }
        return Prototype.K;
    }
    var Methods = {}, ByTag = Element.Methods.ByTag;
    var extend = Object.extend(function(element) {
        if (!element || typeof element._extendedByPrototype != 'undefined' || element.nodeType != 1 || element == window)
            return element;
        var methods = Object.clone(Methods), tagName = element.tagName.toUpperCase();
        if (ByTag[tagName])
            Object.extend(methods, ByTag[tagName]);
        extendElementWith(element, methods);
        element._extendedByPrototype = Prototype.emptyFunction;
        return element;
    }, {refresh: function() {
            if (!Prototype.BrowserFeatures.ElementExtensions) {
                Object.extend(Methods, Element.Methods);
                Object.extend(Methods, Element.Methods.Simulated);
            }
        }});
    extend.refresh();
    return extend;
})();
if (document.documentElement.hasAttribute) {
    Element.hasAttribute = function(element, attribute) {
        return element.hasAttribute(attribute);
    };
}
else {
    Element.hasAttribute = Element.Methods.Simulated.hasAttribute;
}
Element.addMethods = function(methods) {
    var F = Prototype.BrowserFeatures, T = Element.Methods.ByTag;
    if (!methods) {
        Object.extend(Form, Form.Methods);
        Object.extend(Form.Element, Form.Element.Methods);
        Object.extend(Element.Methods.ByTag, {"FORM": Object.clone(Form.Methods),"INPUT": Object.clone(Form.Element.Methods),"SELECT": Object.clone(Form.Element.Methods),"TEXTAREA": Object.clone(Form.Element.Methods),"BUTTON": Object.clone(Form.Element.Methods)});
    }
    if (arguments.length == 2) {
        var tagName = methods;
        methods = arguments[1];
    }
    if (!tagName)
        Object.extend(Element.Methods, methods || {});
    else {
        if (Object.isArray(tagName))
            tagName.each(extend);
        else
            extend(tagName);
    }
    function extend(tagName) {
        tagName = tagName.toUpperCase();
        if (!Element.Methods.ByTag[tagName])
            Element.Methods.ByTag[tagName] = {};
        Object.extend(Element.Methods.ByTag[tagName], methods);
    }
    function copy(methods, destination, onlyIfAbsent) {
        onlyIfAbsent = onlyIfAbsent || false;
        for (var property in methods) {
            var value = methods[property];
            if (!Object.isFunction(value))
                continue;
            if (!onlyIfAbsent || !(property in destination))
                destination[property] = value.methodize();
        }
    }
    function findDOMClass(tagName) {
        var klass;
        var trans = {"OPTGROUP": "OptGroup","TEXTAREA": "TextArea","P": "Paragraph","FIELDSET": "FieldSet","UL": "UList","OL": "OList","DL": "DList","DIR": "Directory","H1": "Heading","H2": "Heading","H3": "Heading","H4": "Heading","H5": "Heading","H6": "Heading","Q": "Quote","INS": "Mod","DEL": "Mod","A": "Anchor","IMG": "Image","CAPTION": "TableCaption","COL": "TableCol","COLGROUP": "TableCol","THEAD": "TableSection","TFOOT": "TableSection","TBODY": "TableSection","TR": "TableRow","TH": "TableCell","TD": "TableCell","FRAMESET": "FrameSet","IFRAME": "IFrame"};
        if (trans[tagName])
            klass = 'HTML' + trans[tagName] + 'Element';
        if (window[klass])
            return window[klass];
        klass = 'HTML' + tagName + 'Element';
        if (window[klass])
            return window[klass];
        klass = 'HTML' + tagName.capitalize() + 'Element';
        if (window[klass])
            return window[klass];
        var element = document.createElement(tagName), proto = element['__proto__'] || element.constructor.prototype;
        element = null;
        return proto;
    }
    var elementPrototype = window.HTMLElement ? HTMLElement.prototype : Element.prototype;
    if (F.ElementExtensions) {
        copy(Element.Methods, elementPrototype);
        copy(Element.Methods.Simulated, elementPrototype, true);
    }
    if (F.SpecificElementExtensions) {
        for (var tag in Element.Methods.ByTag) {
            var klass = findDOMClass(tag);
            if (Object.isUndefined(klass))
                continue;
            copy(T[tag], klass.prototype);
        }
    }
    Object.extend(Element, Element.Methods);
    delete Element.ByTag;
    if (Element.extend.refresh)
        Element.extend.refresh();
    Element.cache = {};
};
document.viewport = {getDimensions: function() {
        return {width: this.getWidth(),height: this.getHeight()};
    },getScrollOffsets: function() {
        return Element._returnOffset(window.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft, window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop);
    }};
(function(viewport) {
    var B = Prototype.Browser, doc = document, element, property = {};
    function getRootElement() {
        if (B.WebKit && !doc.evaluate)
            return document;
        if (B.Opera && window.parseFloat(window.opera.version()) < 9.5)
            return document.body;
        return document.documentElement;
    }
    function define(D) {
        if (!element)
            element = getRootElement();
        property[D] = 'client' + D;
        viewport['get' + D] = function() {
            return element[property[D]]
        };
        return viewport['get' + D]();
    }
    viewport.getWidth = define.curry('Width');
    viewport.getHeight = define.curry('Height');
})(document.viewport);
Element.Storage = {UID: 1};
Element.addMethods({getStorage: function(element) {
        if (!(element = $(element)))
            return;
        var uid;
        if (element === window) {
            uid = 0;
        } else {
            if (typeof element._prototypeUID === "undefined")
                element._prototypeUID = Element.Storage.UID++;
            uid = element._prototypeUID;
        }
        if (!Element.Storage[uid])
            Element.Storage[uid] = $H();
        return Element.Storage[uid];
    },store: function(element, key, value) {
        if (!(element = $(element)))
            return;
        if (arguments.length === 2) {
            Element.getStorage(element).update(key);
        } else {
            Element.getStorage(element).set(key, value);
        }
        return element;
    },retrieve: function(element, key, defaultValue) {
        if (!(element = $(element)))
            return;
        var hash = Element.getStorage(element), value = hash.get(key);
        if (Object.isUndefined(value)) {
            hash.set(key, defaultValue);
            value = defaultValue;
        }
        return value;
    },clone: function(element, deep) {
        if (!(element = $(element)))
            return;
        var clone = element.cloneNode(deep);
        clone._prototypeUID = void 0;
        if (deep) {
            var descendants = Element.select(clone, '*'), i = descendants.length;
            while (i--) {
                descendants[i]._prototypeUID = void 0;
            }
        }
        return Element.extend(clone);
    },purge: function(element) {
        if (!(element = $(element)))
            return;
        var purgeElement = Element._purgeElement;
        purgeElement(element);
        var descendants = element.getElementsByTagName('*'), i = descendants.length;
        while (i--)
            purgeElement(descendants[i]);
        return null;
    }});
(function() {
    function toDecimal(pctString) {
        var match = pctString.match(/^(\d+)%?$/i);
        if (!match)
            return null;
        return (Number(match[1]) / 100);
    }
    function getPixelValue(value, property, context) {
        var element = null;
        if (Object.isElement(value)) {
            element = value;
            value = element.getStyle(property);
        }
        if (value === null) {
            return null;
        }
        if ((/^(?:-)?\d+(\.\d+)?(px)?$/i).test(value)) {
            return window.parseFloat(value);
        }
        var isPercentage = value.include('%'), isViewport = (context === document.viewport);
        if (/\d/.test(value) && element && element.runtimeStyle && !(isPercentage && isViewport)) {
            var style = element.style.left, rStyle = element.runtimeStyle.left;
            element.runtimeStyle.left = element.currentStyle.left;
            element.style.left = value || 0;
            value = element.style.pixelLeft;
            element.style.left = style;
            element.runtimeStyle.left = rStyle;
            return value;
        }
        if (element && isPercentage) {
            context = context || element.parentNode;
            var decimal = toDecimal(value);
            var whole = null;
            var position = element.getStyle('position');
            var isHorizontal = property.include('left') || property.include('right') || property.include('width');
            var isVertical = property.include('top') || property.include('bottom') || property.include('height');
            if (context === document.viewport) {
                if (isHorizontal) {
                    whole = document.viewport.getWidth();
                } else if (isVertical) {
                    whole = document.viewport.getHeight();
                }
            } else {
                if (isHorizontal) {
                    whole = $(context).measure('width');
                } else if (isVertical) {
                    whole = $(context).measure('height');
                }
            }
            return (whole === null) ? 0 : whole * decimal;
        }
        return 0;
    }
    function toCSSPixels(number) {
        if (Object.isString(number) && number.endsWith('px')) {
            return number;
        }
        return number + 'px';
    }
    function isDisplayed(element) {
        var originalElement = element;
        while (element && element.parentNode) {
            var display = element.getStyle('display');
            if (display === 'none') {
                return false;
            }
            element = $(element.parentNode);
        }
        return true;
    }
    var hasLayout = Prototype.K;
    if ('currentStyle' in document.documentElement) {
        hasLayout = function(element) {
            if (!element.currentStyle.hasLayout) {
                element.style.zoom = 1;
            }
            return element;
        };
    }
    function cssNameFor(key) {
        if (key.include('border'))
            key = key + '-width';
        return key.camelize();
    }
    Element.Layout = Class.create(Hash, {initialize: function($super, element, preCompute) {
            $super();
            this.element = $(element);
            Element.Layout.PROPERTIES.each(function(property) {
                this._set(property, null);
            }, this);
            if (preCompute) {
                this._preComputing = true;
                this._begin();
                Element.Layout.PROPERTIES.each(this._compute, this);
                this._end();
                this._preComputing = false;
            }
        },_set: function(property, value) {
            return Hash.prototype.set.call(this, property, value);
        },set: function(property, value) {
            throw "Properties of Element.Layout are read-only.";
        },get: function($super, property) {
            var value = $super(property);
            return value === null ? this._compute(property) : value;
        },_begin: function() {
            if (this._prepared)
                return;
            var element = this.element;
            if (isDisplayed(element)) {
                this._prepared = true;
                return;
            }
            var originalStyles = {position: element.style.position || '',width: element.style.width || '',visibility: element.style.visibility || '',display: element.style.display || ''};
            element.store('prototype_original_styles', originalStyles);
            var position = element.getStyle('position'), width = element.getStyle('width');
            if (width === "0px" || width === null) {
                element.style.display = 'block';
                width = element.getStyle('width');
            }
            var context = (position === 'fixed') ? document.viewport : element.parentNode;
            element.setStyle({position: 'absolute',visibility: 'hidden',display: 'block'});
            var positionedWidth = element.getStyle('width');
            var newWidth;
            if (width && (positionedWidth === width)) {
                newWidth = getPixelValue(element, 'width', context);
            } else if (position === 'absolute' || position === 'fixed') {
                newWidth = getPixelValue(element, 'width', context);
            } else {
                var parent = element.parentNode, pLayout = $(parent).getLayout();
                newWidth = pLayout.get('width') -
                this.get('margin-left') -
                this.get('border-left') -
                this.get('padding-left') -
                this.get('padding-right') -
                this.get('border-right') -
                this.get('margin-right');
            }
            element.setStyle({width: newWidth + 'px'});
            this._prepared = true;
        },_end: function() {
            var element = this.element;
            var originalStyles = element.retrieve('prototype_original_styles');
            element.store('prototype_original_styles', null);
            element.setStyle(originalStyles);
            this._prepared = false;
        },_compute: function(property) {
            var COMPUTATIONS = Element.Layout.COMPUTATIONS;
            if (!(property in COMPUTATIONS)) {
                throw "Property not found.";
            }
            return this._set(property, COMPUTATIONS[property].call(this, this.element));
        },toObject: function() {
            var args = $A(arguments);
            var keys = (args.length === 0) ? Element.Layout.PROPERTIES : args.join(' ').split(' ');
            var obj = {};
            keys.each(function(key) {
                if (!Element.Layout.PROPERTIES.include(key))
                    return;
                var value = this.get(key);
                if (value != null)
                    obj[key] = value;
            }, this);
            return obj;
        },toHash: function() {
            var obj = this.toObject.apply(this, arguments);
            return new Hash(obj);
        },toCSS: function() {
            var args = $A(arguments);
            var keys = (args.length === 0) ? Element.Layout.PROPERTIES : args.join(' ').split(' ');
            var css = {};
            keys.each(function(key) {
                if (!Element.Layout.PROPERTIES.include(key))
                    return;
                if (Element.Layout.COMPOSITE_PROPERTIES.include(key))
                    return;
                var value = this.get(key);
                if (value != null)
                    css[cssNameFor(key)] = value + 'px';
            }, this);
            return css;
        },inspect: function() {
            return "#<Element.Layout>";
        }});
    Object.extend(Element.Layout, {PROPERTIES: $w('height width top left right bottom border-left border-right border-top border-bottom padding-left padding-right padding-top padding-bottom margin-top margin-bottom margin-left margin-right padding-box-width padding-box-height border-box-width border-box-height margin-box-width margin-box-height'),COMPOSITE_PROPERTIES: $w('padding-box-width padding-box-height margin-box-width margin-box-height border-box-width border-box-height'),COMPUTATIONS: {'height': function(element) {
                if (!this._preComputing)
                    this._begin();
                var bHeight = this.get('border-box-height');
                if (bHeight <= 0) {
                    if (!this._preComputing)
                        this._end();
                    return 0;
                }
                var bTop = this.get('border-top'), bBottom = this.get('border-bottom');
                var pTop = this.get('padding-top'), pBottom = this.get('padding-bottom');
                if (!this._preComputing)
                    this._end();
                return bHeight - bTop - bBottom - pTop - pBottom;
            },'width': function(element) {
                if (!this._preComputing)
                    this._begin();
                var bWidth = this.get('border-box-width');
                if (bWidth <= 0) {
                    if (!this._preComputing)
                        this._end();
                    return 0;
                }
                var bLeft = this.get('border-left'), bRight = this.get('border-right');
                var pLeft = this.get('padding-left'), pRight = this.get('padding-right');
                if (!this._preComputing)
                    this._end();
                return bWidth - bLeft - bRight - pLeft - pRight;
            },'padding-box-height': function(element) {
                var height = this.get('height'), pTop = this.get('padding-top'), pBottom = this.get('padding-bottom');
                return height + pTop + pBottom;
            },'padding-box-width': function(element) {
                var width = this.get('width'), pLeft = this.get('padding-left'), pRight = this.get('padding-right');
                return width + pLeft + pRight;
            },'border-box-height': function(element) {
                if (!this._preComputing)
                    this._begin();
                var height = element.offsetHeight;
                if (!this._preComputing)
                    this._end();
                return height;
            },'border-box-width': function(element) {
                if (!this._preComputing)
                    this._begin();
                var width = element.offsetWidth;
                if (!this._preComputing)
                    this._end();
                return width;
            },'margin-box-height': function(element) {
                var bHeight = this.get('border-box-height'), mTop = this.get('margin-top'), mBottom = this.get('margin-bottom');
                if (bHeight <= 0)
                    return 0;
                return bHeight + mTop + mBottom;
            },'margin-box-width': function(element) {
                var bWidth = this.get('border-box-width'), mLeft = this.get('margin-left'), mRight = this.get('margin-right');
                if (bWidth <= 0)
                    return 0;
                return bWidth + mLeft + mRight;
            },'top': function(element) {
                var offset = element.positionedOffset();
                return offset.top;
            },'bottom': function(element) {
                var offset = element.positionedOffset(), parent = element.getOffsetParent(), pHeight = parent.measure('height');
                var mHeight = this.get('border-box-height');
                return pHeight - mHeight - offset.top;
            },'left': function(element) {
                var offset = element.positionedOffset();
                return offset.left;
            },'right': function(element) {
                var offset = element.positionedOffset(), parent = element.getOffsetParent(), pWidth = parent.measure('width');
                var mWidth = this.get('border-box-width');
                return pWidth - mWidth - offset.left;
            },'padding-top': function(element) {
                return getPixelValue(element, 'paddingTop');
            },'padding-bottom': function(element) {
                return getPixelValue(element, 'paddingBottom');
            },'padding-left': function(element) {
                return getPixelValue(element, 'paddingLeft');
            },'padding-right': function(element) {
                return getPixelValue(element, 'paddingRight');
            },'border-top': function(element) {
                return getPixelValue(element, 'borderTopWidth');
            },'border-bottom': function(element) {
                return getPixelValue(element, 'borderBottomWidth');
            },'border-left': function(element) {
                return getPixelValue(element, 'borderLeftWidth');
            },'border-right': function(element) {
                return getPixelValue(element, 'borderRightWidth');
            },'margin-top': function(element) {
                return getPixelValue(element, 'marginTop');
            },'margin-bottom': function(element) {
                return getPixelValue(element, 'marginBottom');
            },'margin-left': function(element) {
                return getPixelValue(element, 'marginLeft');
            },'margin-right': function(element) {
                return getPixelValue(element, 'marginRight');
            }}});
    if ('getBoundingClientRect' in document.documentElement) {
        Object.extend(Element.Layout.COMPUTATIONS, {'right': function(element) {
                var parent = hasLayout(element.getOffsetParent());
                var rect = element.getBoundingClientRect(), pRect = parent.getBoundingClientRect();
                return (pRect.right - rect.right).round();
            },'bottom': function(element) {
                var parent = hasLayout(element.getOffsetParent());
                var rect = element.getBoundingClientRect(), pRect = parent.getBoundingClientRect();
                return (pRect.bottom - rect.bottom).round();
            }});
    }
    Element.Offset = Class.create({initialize: function(left, top) {
            this.left = left.round();
            this.top = top.round();
            this[0] = this.left;
            this[1] = this.top;
        },relativeTo: function(offset) {
            return new Element.Offset(this.left - offset.left, this.top - offset.top);
        },inspect: function() {
            return "#<Element.Offset left: #{left} top: #{top}>".interpolate(this);
        },toString: function() {
            return "[#{left}, #{top}]".interpolate(this);
        },toArray: function() {
            return [this.left, this.top];
        }});
    function getLayout(element, preCompute) {
        return new Element.Layout(element, preCompute);
    }
    function measure(element, property) {
        return $(element).getLayout().get(property);
    }
    function getDimensions(element) {
        element = $(element);
        var display = Element.getStyle(element, 'display');
        if (display && display !== 'none') {
            return {width: element.offsetWidth,height: element.offsetHeight};
        }
        var style = element.style;
        var originalStyles = {visibility: style.visibility,position: style.position,display: style.display};
        var newStyles = {visibility: 'hidden',display: 'block'};
        if (originalStyles.position !== 'fixed')
            newStyles.position = 'absolute';
        Element.setStyle(element, newStyles);
        var dimensions = {width: element.offsetWidth,height: element.offsetHeight};
        Element.setStyle(element, originalStyles);
        return dimensions;
    }
    function getOffsetParent(element) {
        element = $(element);
        if (isDocument(element) || isDetached(element) || isBody(element) || isHtml(element))
            return $(document.body);
        var isInline = (Element.getStyle(element, 'display') === 'inline');
        if (!isInline && element.offsetParent)
            return $(element.offsetParent);
        while ((element = element.parentNode) && element !== document.body) {
            if (Element.getStyle(element, 'position') !== 'static') {
                return isHtml(element) ? $(document.body) : $(element);
            }
        }
        return $(document.body);
    }
    function cumulativeOffset(element) {
        element = $(element);
        var valueT = 0, valueL = 0;
        if (element.parentNode) {
            do {
                valueT += element.offsetTop || 0;
                valueL += element.offsetLeft || 0;
                element = element.offsetParent;
            } while (element);
        }
        return new Element.Offset(valueL, valueT);
    }
    function positionedOffset(element) {
        element = $(element);
        var layout = element.getLayout();
        var valueT = 0, valueL = 0;
        do {
            valueT += element.offsetTop || 0;
            valueL += element.offsetLeft || 0;
            element = element.offsetParent;
            if (element) {
                if (isBody(element))
                    break;
                var p = Element.getStyle(element, 'position');
                if (p !== 'static')
                    break;
            }
        } while (element);
        valueL -= layout.get('margin-top');
        valueT -= layout.get('margin-left');
        return new Element.Offset(valueL, valueT);
    }
    function cumulativeScrollOffset(element) {
        var valueT = 0, valueL = 0;
        do {
            valueT += element.scrollTop || 0;
            valueL += element.scrollLeft || 0;
            element = element.parentNode;
        } while (element);
        return new Element.Offset(valueL, valueT);
    }
    function viewportOffset(forElement) {
        element = $(element);
        var valueT = 0, valueL = 0, docBody = document.body;
        var element = forElement;
        do {
            valueT += element.offsetTop || 0;
            valueL += element.offsetLeft || 0;
            if (element.offsetParent == docBody && Element.getStyle(element, 'position') == 'absolute')
                break;
        } while (element = element.offsetParent);
        element = forElement;
        do {
            if (element != docBody) {
                valueT -= element.scrollTop || 0;
                valueL -= element.scrollLeft || 0;
            }
        } while (element = element.parentNode);
        return new Element.Offset(valueL, valueT);
    }
    function absolutize(element) {
        element = $(element);
        if (Element.getStyle(element, 'position') === 'absolute') {
            return element;
        }
        var offsetParent = getOffsetParent(element);
        var eOffset = element.viewportOffset(), pOffset = offsetParent.viewportOffset();
        var offset = eOffset.relativeTo(pOffset);
        var layout = element.getLayout();
        element.store('prototype_absolutize_original_styles', {left: element.getStyle('left'),top: element.getStyle('top'),width: element.getStyle('width'),height: element.getStyle('height')});
        element.setStyle({position: 'absolute',top: offset.top + 'px',left: offset.left + 'px',width: layout.get('width') + 'px',height: layout.get('height') + 'px'});
        return element;
    }
    function relativize(element) {
        element = $(element);
        if (Element.getStyle(element, 'position') === 'relative') {
            return element;
        }
        var originalStyles = element.retrieve('prototype_absolutize_original_styles');
        if (originalStyles)
            element.setStyle(originalStyles);
        return element;
    }
    if (Prototype.Browser.IE) {
        getOffsetParent = getOffsetParent.wrap(function(proceed, element) {
            element = $(element);
            if (isDocument(element) || isDetached(element) || isBody(element) || isHtml(element))
                return $(document.body);
            var position = element.getStyle('position');
            if (position !== 'static')
                return proceed(element);
            element.setStyle({position: 'relative'});
            var value = proceed(element);
            element.setStyle({position: position});
            return value;
        });
        positionedOffset = positionedOffset.wrap(function(proceed, element) {
            element = $(element);
            if (!element.parentNode)
                return new Element.Offset(0, 0);
            var position = element.getStyle('position');
            if (position !== 'static')
                return proceed(element);
            var offsetParent = element.getOffsetParent();
            if (offsetParent && offsetParent.getStyle('position') === 'fixed')
                hasLayout(offsetParent);
            element.setStyle({position: 'relative'});
            var value = proceed(element);
            element.setStyle({position: position});
            return value;
        });
    } else if (Prototype.Browser.Webkit) {
        cumulativeOffset = function(element) {
            element = $(element);
            var valueT = 0, valueL = 0;
            do {
                valueT += element.offsetTop || 0;
                valueL += element.offsetLeft || 0;
                if (element.offsetParent == document.body)
                    if (Element.getStyle(element, 'position') == 'absolute')
                        break;
                element = element.offsetParent;
            } while (element);
            return new Element.Offset(valueL, valueT);
        };
    }
    Element.addMethods({getLayout: getLayout,measure: measure,getDimensions: getDimensions,getOffsetParent: getOffsetParent,cumulativeOffset: cumulativeOffset,positionedOffset: positionedOffset,cumulativeScrollOffset: cumulativeScrollOffset,viewportOffset: viewportOffset,absolutize: absolutize,relativize: relativize});
    function isBody(element) {
        return element.nodeName.toUpperCase() === 'BODY';
    }
    function isHtml(element) {
        return element.nodeName.toUpperCase() === 'HTML';
    }
    function isDocument(element) {
        return element.nodeType === Node.DOCUMENT_NODE;
    }
    function isDetached(element) {
        return element !== document.body && !Element.descendantOf(element, document.body);
    }
    if ('getBoundingClientRect' in document.documentElement) {
        Element.addMethods({viewportOffset: function(element) {
                element = $(element);
                if (isDetached(element))
                    return new Element.Offset(0, 0);
                var rect = element.getBoundingClientRect(), docEl = document.documentElement;
                return new Element.Offset(rect.left - docEl.clientLeft, rect.top - docEl.clientTop);
            }});
    }
})();
window.$$ = function() {
    var expression = $A(arguments).join(', ');
    return Prototype.Selector.select(expression, document);
};
Prototype.Selector = (function() {
    function select() {
        throw new Error('Method "Prototype.Selector.select" must be defined.');
    }
    function match() {
        throw new Error('Method "Prototype.Selector.match" must be defined.');
    }
    function find(elements, expression, index) {
        index = index || 0;
        var match = Prototype.Selector.match, length = elements.length, matchIndex = 0, i;
        for (i = 0; i < length; i++) {
            if (match(elements[i], expression) && index == matchIndex++) {
                return Element.extend(elements[i]);
            }
        }
    }
    function extendElements(elements) {
        for (var i = 0, length = elements.length; i < length; i++) {
            Element.extend(elements[i]);
        }
        return elements;
    }
    var K = Prototype.K;
    return {select: select,match: match,find: find,extendElements: (Element.extend === K) ? K : extendElements,extendElement: Element.extend};
})();
Prototype._original_property = window.Sizzle;
(function() {
    var chunker = /((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^[\]]*\]|['"][^'"]*['"]|[^[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g, done = 0, toString = Object.prototype.toString, hasDuplicate = false, baseHasDuplicate = true;
    [0, 0].sort(function() {
        baseHasDuplicate = false;
        return 0;
    });
    var Sizzle = function(selector, context, results, seed) {
        results = results || [];
        var origContext = context = context || document;
        if (context.nodeType !== 1 && context.nodeType !== 9) {
            return [];
        }
        if (!selector || typeof selector !== "string") {
            return results;
        }
        var parts = [], m, set, checkSet, check, mode, extra, prune = true, contextXML = isXML(context), soFar = selector;
        while ((chunker.exec(""), m = chunker.exec(soFar)) !== null) {
            soFar = m[3];
            parts.push(m[1]);
            if (m[2]) {
                extra = m[3];
                break;
            }
        }
        if (parts.length > 1 && origPOS.exec(selector)) {
            if (parts.length === 2 && Expr.relative[parts[0]]) {
                set = posProcess(parts[0] + parts[1], context);
            } else {
                set = Expr.relative[parts[0]] ? [context] : Sizzle(parts.shift(), context);
                while (parts.length) {
                    selector = parts.shift();
                    if (Expr.relative[selector])
                        selector += parts.shift();
                    set = posProcess(selector, set);
                }
            }
        } else {
            if (!seed && parts.length > 1 && context.nodeType === 9 && !contextXML && Expr.match.ID.test(parts[0]) && !Expr.match.ID.test(parts[parts.length - 1])) {
                var ret = Sizzle.find(parts.shift(), context, contextXML);
                context = ret.expr ? Sizzle.filter(ret.expr, ret.set)[0] : ret.set[0];
            }
            if (context) {
                var ret = seed ? {expr: parts.pop(),set: makeArray(seed)} : Sizzle.find(parts.pop(), parts.length === 1 && (parts[0] === "~" || parts[0] === "+") && context.parentNode ? context.parentNode : context, contextXML);
                set = ret.expr ? Sizzle.filter(ret.expr, ret.set) : ret.set;
                if (parts.length > 0) {
                    checkSet = makeArray(set);
                } else {
                    prune = false;
                }
                while (parts.length) {
                    var cur = parts.pop(), pop = cur;
                    if (!Expr.relative[cur]) {
                        cur = "";
                    } else {
                        pop = parts.pop();
                    }
                    if (pop == null) {
                        pop = context;
                    }
                    Expr.relative[cur](checkSet, pop, contextXML);
                }
            } else {
                checkSet = parts = [];
            }
        }
        if (!checkSet) {
            checkSet = set;
        }
        if (!checkSet) {
            throw "Syntax error, unrecognized expression: " + (cur || selector);
        }
        if (toString.call(checkSet) === "[object Array]") {
            if (!prune) {
                results.push.apply(results, checkSet);
            } else if (context && context.nodeType === 1) {
                for (var i = 0; checkSet[i] != null; i++) {
                    if (checkSet[i] && (checkSet[i] === true || checkSet[i].nodeType === 1 && contains(context, checkSet[i]))) {
                        results.push(set[i]);
                    }
                }
            } else {
                for (var i = 0; checkSet[i] != null; i++) {
                    if (checkSet[i] && checkSet[i].nodeType === 1) {
                        results.push(set[i]);
                    }
                }
            }
        } else {
            makeArray(checkSet, results);
        }
        if (extra) {
            Sizzle(extra, origContext, results, seed);
            Sizzle.uniqueSort(results);
        }
        return results;
    };
    Sizzle.uniqueSort = function(results) {
        if (sortOrder) {
            hasDuplicate = baseHasDuplicate;
            results.sort(sortOrder);
            if (hasDuplicate) {
                for (var i = 1; i < results.length; i++) {
                    if (results[i] === results[i - 1]) {
                        results.splice(i--, 1);
                    }
                }
            }
        }
        return results;
    };
    Sizzle.matches = function(expr, set) {
        return Sizzle(expr, null, null, set);
    };
    Sizzle.find = function(expr, context, isXML) {
        var set, match;
        if (!expr) {
            return [];
        }
        for (var i = 0, l = Expr.order.length; i < l; i++) {
            var type = Expr.order[i], match;
            if ((match = Expr.leftMatch[type].exec(expr))) {
                var left = match[1];
                match.splice(1, 1);
                if (left.substr(left.length - 1) !== "\\") {
                    match[1] = (match[1] || "").replace(/\\/g, "");
                    set = Expr.find[type](match, context, isXML);
                    if (set != null) {
                        expr = expr.replace(Expr.match[type], "");
                        break;
                    }
                }
            }
        }
        if (!set) {
            set = context.getElementsByTagName("*");
        }
        return {set: set,expr: expr};
    };
    Sizzle.filter = function(expr, set, inplace, not) {
        var old = expr, result = [], curLoop = set, match, anyFound, isXMLFilter = set && set[0] && isXML(set[0]);
        while (expr && set.length) {
            for (var type in Expr.filter) {
                if ((match = Expr.match[type].exec(expr)) != null) {
                    var filter = Expr.filter[type], found, item;
                    anyFound = false;
                    if (curLoop == result) {
                        result = [];
                    }
                    if (Expr.preFilter[type]) {
                        match = Expr.preFilter[type](match, curLoop, inplace, result, not, isXMLFilter);
                        if (!match) {
                            anyFound = found = true;
                        } else if (match === true) {
                            continue;
                        }
                    }
                    if (match) {
                        for (var i = 0; (item = curLoop[i]) != null; i++) {
                            if (item) {
                                found = filter(item, match, i, curLoop);
                                var pass = not ^ !!found;
                                if (inplace && found != null) {
                                    if (pass) {
                                        anyFound = true;
                                    } else {
                                        curLoop[i] = false;
                                    }
                                } else if (pass) {
                                    result.push(item);
                                    anyFound = true;
                                }
                            }
                        }
                    }
                    if (found !== undefined) {
                        if (!inplace) {
                            curLoop = result;
                        }
                        expr = expr.replace(Expr.match[type], "");
                        if (!anyFound) {
                            return [];
                        }
                        break;
                    }
                }
            }
            if (expr == old) {
                if (anyFound == null) {
                    throw "Syntax error, unrecognized expression: " + expr;
                } else {
                    break;
                }
            }
            old = expr;
        }
        return curLoop;
    };
    var Expr = Sizzle.selectors = {order: ["ID", "NAME", "TAG"],match: {ID: /#((?:[\w\u00c0-\uFFFF-]|\\.)+)/,CLASS: /\.((?:[\w\u00c0-\uFFFF-]|\\.)+)/,NAME: /\[name=['"]*((?:[\w\u00c0-\uFFFF-]|\\.)+)['"]*\]/,ATTR: /\[\s*((?:[\w\u00c0-\uFFFF-]|\\.)+)\s*(?:(\S?=)\s*(['"]*)(.*?)\3|)\s*\]/,TAG: /^((?:[\w\u00c0-\uFFFF\*-]|\\.)+)/,CHILD: /:(only|nth|last|first)-child(?:\((even|odd|[\dn+-]*)\))?/,POS: /:(nth|eq|gt|lt|first|last|even|odd)(?:\((\d*)\))?(?=[^-]|$)/,PSEUDO: /:((?:[\w\u00c0-\uFFFF-]|\\.)+)(?:\((['"]*)((?:\([^\)]+\)|[^\2\(\)]*)+)\2\))?/},leftMatch: {},attrMap: {"class": "className","for": "htmlFor"},attrHandle: {href: function(elem) {
                return elem.getAttribute("href");
            }},relative: {"+": function(checkSet, part, isXML) {
                var isPartStr = typeof part === "string", isTag = isPartStr && !/\W/.test(part), isPartStrNotTag = isPartStr && !isTag;
                if (isTag && !isXML) {
                    part = part.toUpperCase();
                }
                for (var i = 0, l = checkSet.length, elem; i < l; i++) {
                    if ((elem = checkSet[i])) {
                        while ((elem = elem.previousSibling) && elem.nodeType !== 1) {
                        }
                        checkSet[i] = isPartStrNotTag || elem && elem.nodeName === part ? elem || false : elem === part;
                    }
                }
                if (isPartStrNotTag) {
                    Sizzle.filter(part, checkSet, true);
                }
            },">": function(checkSet, part, isXML) {
                var isPartStr = typeof part === "string";
                if (isPartStr && !/\W/.test(part)) {
                    part = isXML ? part : part.toUpperCase();
                    for (var i = 0, l = checkSet.length; i < l; i++) {
                        var elem = checkSet[i];
                        if (elem) {
                            var parent = elem.parentNode;
                            checkSet[i] = parent.nodeName === part ? parent : false;
                        }
                    }
                } else {
                    for (var i = 0, l = checkSet.length; i < l; i++) {
                        var elem = checkSet[i];
                        if (elem) {
                            checkSet[i] = isPartStr ? elem.parentNode : elem.parentNode === part;
                        }
                    }
                    if (isPartStr) {
                        Sizzle.filter(part, checkSet, true);
                    }
                }
            },"": function(checkSet, part, isXML) {
                var doneName = done++, checkFn = dirCheck;
                if (!/\W/.test(part)) {
                    var nodeCheck = part = isXML ? part : part.toUpperCase();
                    checkFn = dirNodeCheck;
                }
                checkFn("parentNode", part, doneName, checkSet, nodeCheck, isXML);
            },"~": function(checkSet, part, isXML) {
                var doneName = done++, checkFn = dirCheck;
                if (typeof part === "string" && !/\W/.test(part)) {
                    var nodeCheck = part = isXML ? part : part.toUpperCase();
                    checkFn = dirNodeCheck;
                }
                checkFn("previousSibling", part, doneName, checkSet, nodeCheck, isXML);
            }},find: {ID: function(match, context, isXML) {
                if (typeof context.getElementById !== "undefined" && !isXML) {
                    var m = context.getElementById(match[1]);
                    return m ? [m] : [];
                }
            },NAME: function(match, context, isXML) {
                if (typeof context.getElementsByName !== "undefined") {
                    var ret = [], results = context.getElementsByName(match[1]);
                    for (var i = 0, l = results.length; i < l; i++) {
                        if (results[i].getAttribute("name") === match[1]) {
                            ret.push(results[i]);
                        }
                    }
                    return ret.length === 0 ? null : ret;
                }
            },TAG: function(match, context) {
                return context.getElementsByTagName(match[1]);
            }},preFilter: {CLASS: function(match, curLoop, inplace, result, not, isXML) {
                match = " " + match[1].replace(/\\/g, "") + " ";
                if (isXML) {
                    return match;
                }
                for (var i = 0, elem; (elem = curLoop[i]) != null; i++) {
                    if (elem) {
                        if (not ^ (elem.className && (" " + elem.className + " ").indexOf(match) >= 0)) {
                            if (!inplace)
                                result.push(elem);
                        } else if (inplace) {
                            curLoop[i] = false;
                        }
                    }
                }
                return false;
            },ID: function(match) {
                return match[1].replace(/\\/g, "");
            },TAG: function(match, curLoop) {
                for (var i = 0; curLoop[i] === false; i++) {
                }
                return curLoop[i] && isXML(curLoop[i]) ? match[1] : match[1].toUpperCase();
            },CHILD: function(match) {
                if (match[1] == "nth") {
                    var test = /(-?)(\d*)n((?:\+|-)?\d*)/.exec(match[2] == "even" && "2n" || match[2] == "odd" && "2n+1" || !/\D/.test(match[2]) && "0n+" + match[2] || match[2]);
                    match[2] = (test[1] + (test[2] || 1)) - 0;
                    match[3] = test[3] - 0;
                }
                match[0] = done++;
                return match;
            },ATTR: function(match, curLoop, inplace, result, not, isXML) {
                var name = match[1].replace(/\\/g, "");
                if (!isXML && Expr.attrMap[name]) {
                    match[1] = Expr.attrMap[name];
                }
                if (match[2] === "~=") {
                    match[4] = " " + match[4] + " ";
                }
                return match;
            },PSEUDO: function(match, curLoop, inplace, result, not) {
                if (match[1] === "not") {
                    if ((chunker.exec(match[3]) || "").length > 1 || /^\w/.test(match[3])) {
                        match[3] = Sizzle(match[3], null, null, curLoop);
                    } else {
                        var ret = Sizzle.filter(match[3], curLoop, inplace, true ^ not);
                        if (!inplace) {
                            result.push.apply(result, ret);
                        }
                        return false;
                    }
                } else if (Expr.match.POS.test(match[0]) || Expr.match.CHILD.test(match[0])) {
                    return true;
                }
                return match;
            },POS: function(match) {
                match.unshift(true);
                return match;
            }},filters: {enabled: function(elem) {
                return elem.disabled === false && elem.type !== "hidden";
            },disabled: function(elem) {
                return elem.disabled === true;
            },checked: function(elem) {
                return elem.checked === true;
            },selected: function(elem) {
                elem.parentNode.selectedIndex;
                return elem.selected === true;
            },parent: function(elem) {
                return !!elem.firstChild;
            },empty: function(elem) {
                return !elem.firstChild;
            },has: function(elem, i, match) {
                return !!Sizzle(match[3], elem).length;
            },header: function(elem) {
                return /h\d/i.test(elem.nodeName);
            },text: function(elem) {
                return "text" === elem.type;
            },radio: function(elem) {
                return "radio" === elem.type;
            },checkbox: function(elem) {
                return "checkbox" === elem.type;
            },file: function(elem) {
                return "file" === elem.type;
            },password: function(elem) {
                return "password" === elem.type;
            },submit: function(elem) {
                return "submit" === elem.type;
            },image: function(elem) {
                return "image" === elem.type;
            },reset: function(elem) {
                return "reset" === elem.type;
            },button: function(elem) {
                return "button" === elem.type || elem.nodeName.toUpperCase() === "BUTTON";
            },input: function(elem) {
                return /input|select|textarea|button/i.test(elem.nodeName);
            }},setFilters: {first: function(elem, i) {
                return i === 0;
            },last: function(elem, i, match, array) {
                return i === array.length - 1;
            },even: function(elem, i) {
                return i % 2 === 0;
            },odd: function(elem, i) {
                return i % 2 === 1;
            },lt: function(elem, i, match) {
                return i < match[3] - 0;
            },gt: function(elem, i, match) {
                return i > match[3] - 0;
            },nth: function(elem, i, match) {
                return match[3] - 0 == i;
            },eq: function(elem, i, match) {
                return match[3] - 0 == i;
            }},filter: {PSEUDO: function(elem, match, i, array) {
                var name = match[1], filter = Expr.filters[name];
                if (filter) {
                    return filter(elem, i, match, array);
                } else if (name === "contains") {
                    return (elem.textContent || elem.innerText || "").indexOf(match[3]) >= 0;
                } else if (name === "not") {
                    var not = match[3];
                    for (var i = 0, l = not.length; i < l; i++) {
                        if (not[i] === elem) {
                            return false;
                        }
                    }
                    return true;
                }
            },CHILD: function(elem, match) {
                var type = match[1], node = elem;
                switch (type) {
                    case 'only':
                    case 'first':
                        while ((node = node.previousSibling)) {
                            if (node.nodeType === 1)
                                return false;
                        }
                        if (type == 'first')
                            return true;
                        node = elem;
                    case 'last':
                        while ((node = node.nextSibling)) {
                            if (node.nodeType === 1)
                                return false;
                        }
                        return true;
                    case 'nth':
                        var first = match[2], last = match[3];
                        if (first == 1 && last == 0) {
                            return true;
                        }
                        var doneName = match[0], parent = elem.parentNode;
                        if (parent && (parent.sizcache !== doneName || !elem.nodeIndex)) {
                            var count = 0;
                            for (node = parent.firstChild; node; node = node.nextSibling) {
                                if (node.nodeType === 1) {
                                    node.nodeIndex = ++count;
                                }
                            }
                            parent.sizcache = doneName;
                        }
                        var diff = elem.nodeIndex - last;
                        if (first == 0) {
                            return diff == 0;
                        } else {
                            return (diff % first == 0 && diff / first >= 0);
                        }
                }
            },ID: function(elem, match) {
                return elem.nodeType === 1 && elem.getAttribute("id") === match;
            },TAG: function(elem, match) {
                return (match === "*" && elem.nodeType === 1) || elem.nodeName === match;
            },CLASS: function(elem, match) {
                return (" " + (elem.className || elem.getAttribute("class")) + " ").indexOf(match) > -1;
            },ATTR: function(elem, match) {
                var name = match[1], result = Expr.attrHandle[name] ? Expr.attrHandle[name](elem) : elem[name] != null ? elem[name] : elem.getAttribute(name), value = result + "", type = match[2], check = match[4];
                return result == null ? type === "!=" : type === "=" ? value === check : type === "*=" ? value.indexOf(check) >= 0 : type === "~=" ? (" " + value + " ").indexOf(check) >= 0 : !check ? value && result !== false : type === "!=" ? value != check : type === "^=" ? value.indexOf(check) === 0 : type === "$=" ? value.substr(value.length - check.length) === check : type === "|=" ? value === check || value.substr(0, check.length + 1) === check + "-" : false;
            },POS: function(elem, match, i, array) {
                var name = match[2], filter = Expr.setFilters[name];
                if (filter) {
                    return filter(elem, i, match, array);
                }
            }}};
    var origPOS = Expr.match.POS;
    for (var type in Expr.match) {
        Expr.match[type] = new RegExp(Expr.match[type].source + /(?![^\[]*\])(?![^\(]*\))/.source);
        Expr.leftMatch[type] = new RegExp(/(^(?:.|\r|\n)*?)/.source + Expr.match[type].source);
    }
    var makeArray = function(array, results) {
        array = Array.prototype.slice.call(array, 0);
        if (results) {
            results.push.apply(results, array);
            return results;
        }
        return array;
    };
    try {
        Array.prototype.slice.call(document.documentElement.childNodes, 0);
    } catch (e) {
        makeArray = function(array, results) {
            var ret = results || [];
            if (toString.call(array) === "[object Array]") {
                Array.prototype.push.apply(ret, array);
            } else {
                if (typeof array.length === "number") {
                    for (var i = 0, l = array.length; i < l; i++) {
                        ret.push(array[i]);
                    }
                } else {
                    for (var i = 0; array[i]; i++) {
                        ret.push(array[i]);
                    }
                }
            }
            return ret;
        };
    }
    var sortOrder;
    if (document.documentElement.compareDocumentPosition) {
        sortOrder = function(a, b) {
            if (!a.compareDocumentPosition || !b.compareDocumentPosition) {
                if (a == b) {
                    hasDuplicate = true;
                }
                return 0;
            }
            var ret = a.compareDocumentPosition(b) & 4 ? -1 : a === b ? 0 : 1;
            if (ret === 0) {
                hasDuplicate = true;
            }
            return ret;
        };
    } else if ("sourceIndex" in document.documentElement) {
        sortOrder = function(a, b) {
            if (!a.sourceIndex || !b.sourceIndex) {
                if (a == b) {
                    hasDuplicate = true;
                }
                return 0;
            }
            var ret = a.sourceIndex - b.sourceIndex;
            if (ret === 0) {
                hasDuplicate = true;
            }
            return ret;
        };
    } else if (document.createRange) {
        sortOrder = function(a, b) {
            if (!a.ownerDocument || !b.ownerDocument) {
                if (a == b) {
                    hasDuplicate = true;
                }
                return 0;
            }
            var aRange = a.ownerDocument.createRange(), bRange = b.ownerDocument.createRange();
            aRange.setStart(a, 0);
            aRange.setEnd(a, 0);
            bRange.setStart(b, 0);
            bRange.setEnd(b, 0);
            var ret = aRange.compareBoundaryPoints(Range.START_TO_END, bRange);
            if (ret === 0) {
                hasDuplicate = true;
            }
            return ret;
        };
    }
    (function() {
        var form = document.createElement("div"), id = "script" + (new Date).getTime();
        form.innerHTML = "<a name='" + id + "'/>";
        var root = document.documentElement;
        root.insertBefore(form, root.firstChild);
        if (!!document.getElementById(id)) {
            Expr.find.ID = function(match, context, isXML) {
                if (typeof context.getElementById !== "undefined" && !isXML) {
                    var m = context.getElementById(match[1]);
                    return m ? m.id === match[1] || typeof m.getAttributeNode !== "undefined" && m.getAttributeNode("id").nodeValue === match[1] ? [m] : undefined : [];
                }
            };
            Expr.filter.ID = function(elem, match) {
                var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
                return elem.nodeType === 1 && node && node.nodeValue === match;
            };
        }
        root.removeChild(form);
        root = form = null;
    })();
    (function() {
        var div = document.createElement("div");
        div.appendChild(document.createComment(""));
        if (div.getElementsByTagName("*").length > 0) {
            Expr.find.TAG = function(match, context) {
                var results = context.getElementsByTagName(match[1]);
                if (match[1] === "*") {
                    var tmp = [];
                    for (var i = 0; results[i]; i++) {
                        if (results[i].nodeType === 1) {
                            tmp.push(results[i]);
                        }
                    }
                    results = tmp;
                }
                return results;
            };
        }
        div.innerHTML = "<a href='#'></a>";
        if (div.firstChild && typeof div.firstChild.getAttribute !== "undefined" && div.firstChild.getAttribute("href") !== "#") {
            Expr.attrHandle.href = function(elem) {
                return elem.getAttribute("href", 2);
            };
        }
        div = null;
    })();
    if (document.querySelectorAll)
        (function() {
            var oldSizzle = Sizzle, div = document.createElement("div");
            div.innerHTML = "<p class='TEST'></p>";
            if (div.querySelectorAll && div.querySelectorAll(".TEST").length === 0) {
                return;
            }
            Sizzle = function(query, context, extra, seed) {
                context = context || document;
                if (!seed && context.nodeType === 9 && !isXML(context)) {
                    try {
                        return makeArray(context.querySelectorAll(query), extra);
                    } catch (e) {
                    }
                }
                return oldSizzle(query, context, extra, seed);
            };
            for (var prop in oldSizzle) {
                Sizzle[prop] = oldSizzle[prop];
            }
            div = null;
        })();
    if (document.getElementsByClassName && document.documentElement.getElementsByClassName)
        (function() {
            var div = document.createElement("div");
            div.innerHTML = "<div class='test e'></div><div class='test'></div>";
            if (div.getElementsByClassName("e").length === 0)
                return;
            div.lastChild.className = "e";
            if (div.getElementsByClassName("e").length === 1)
                return;
            Expr.order.splice(1, 0, "CLASS");
            Expr.find.CLASS = function(match, context, isXML) {
                if (typeof context.getElementsByClassName !== "undefined" && !isXML) {
                    return context.getElementsByClassName(match[1]);
                }
            };
            div = null;
        })();
    function dirNodeCheck(dir, cur, doneName, checkSet, nodeCheck, isXML) {
        var sibDir = dir == "previousSibling" && !isXML;
        for (var i = 0, l = checkSet.length; i < l; i++) {
            var elem = checkSet[i];
            if (elem) {
                if (sibDir && elem.nodeType === 1) {
                    elem.sizcache = doneName;
                    elem.sizset = i;
                }
                elem = elem[dir];
                var match = false;
                while (elem) {
                    if (elem.sizcache === doneName) {
                        match = checkSet[elem.sizset];
                        break;
                    }
                    if (elem.nodeType === 1 && !isXML) {
                        elem.sizcache = doneName;
                        elem.sizset = i;
                    }
                    if (elem.nodeName === cur) {
                        match = elem;
                        break;
                    }
                    elem = elem[dir];
                }
                checkSet[i] = match;
            }
        }
    }
    function dirCheck(dir, cur, doneName, checkSet, nodeCheck, isXML) {
        var sibDir = dir == "previousSibling" && !isXML;
        for (var i = 0, l = checkSet.length; i < l; i++) {
            var elem = checkSet[i];
            if (elem) {
                if (sibDir && elem.nodeType === 1) {
                    elem.sizcache = doneName;
                    elem.sizset = i;
                }
                elem = elem[dir];
                var match = false;
                while (elem) {
                    if (elem.sizcache === doneName) {
                        match = checkSet[elem.sizset];
                        break;
                    }
                    if (elem.nodeType === 1) {
                        if (!isXML) {
                            elem.sizcache = doneName;
                            elem.sizset = i;
                        }
                        if (typeof cur !== "string") {
                            if (elem === cur) {
                                match = true;
                                break;
                            }
                        } else if (Sizzle.filter(cur, [elem]).length > 0) {
                            match = elem;
                            break;
                        }
                    }
                    elem = elem[dir];
                }
                checkSet[i] = match;
            }
        }
    }
    var contains = document.compareDocumentPosition ? function(a, b) {
        return a.compareDocumentPosition(b) & 16;
    } : function(a, b) {
        return a !== b && (a.contains ? a.contains(b) : true);
    };
    var isXML = function(elem) {
        return elem.nodeType === 9 && elem.documentElement.nodeName !== "HTML" || !!elem.ownerDocument && elem.ownerDocument.documentElement.nodeName !== "HTML";
    };
    var posProcess = function(selector, context) {
        var tmpSet = [], later = "", match, root = context.nodeType ? [context] : context;
        while ((match = Expr.match.PSEUDO.exec(selector))) {
            later += match[0];
            selector = selector.replace(Expr.match.PSEUDO, "");
        }
        selector = Expr.relative[selector] ? selector + "*" : selector;
        for (var i = 0, l = root.length; i < l; i++) {
            Sizzle(selector, root[i], tmpSet);
        }
        return Sizzle.filter(later, tmpSet);
    };
    window.Sizzle = Sizzle;
})();
;
(function(engine) {
    var extendElements = Prototype.Selector.extendElements;
    function select(selector, scope) {
        return extendElements(engine(selector, scope || document));
    }
    function match(element, selector) {
        return engine.matches(selector, [element]).length == 1;
    }
    Prototype.Selector.engine = engine;
    Prototype.Selector.select = select;
    Prototype.Selector.match = match;
})(Sizzle);
window.Sizzle = Prototype._original_property;
delete Prototype._original_property;
var Form = {reset: function(form) {
        form = $(form);
        form.reset();
        return form;
    },serializeElements: function(elements, options) {
        if (typeof options != 'object')
            options = {hash: !!options};
        else if (Object.isUndefined(options.hash))
            options.hash = true;
        var key, value, submitted = false, submit = options.submit, accumulator, initial;
        if (options.hash) {
            initial = {};
            accumulator = function(result, key, value) {
                if (key in result) {
                    if (!Object.isArray(result[key]))
                        result[key] = [result[key]];
                    result[key].push(value);
                } else
                    result[key] = value;
                return result;
            };
        } else {
            initial = '';
            accumulator = function(result, key, value) {
                return result + (result ? '&' : '') + encodeURIComponent(key) + '=' + encodeURIComponent(value);
            }
        }
        return elements.inject(initial, function(result, element) {
            if (!element.disabled && element.name) {
                key = element.name;
                value = $(element).getValue();
                if (value != null && element.type != 'file' && (element.type != 'submit' || (!submitted && submit !== false && (!submit || key == submit) && (submitted = true)))) {
                    result = accumulator(result, key, value);
                }
            }
            return result;
        });
    }};
Form.Methods = {serialize: function(form, options) {
        return Form.serializeElements(Form.getElements(form), options);
    },getElements: function(form) {
        var elements = $(form).getElementsByTagName('*'), element, arr = [], serializers = Form.Element.Serializers;
        for (var i = 0; element = elements[i]; i++) {
            arr.push(element);
        }
        return arr.inject([], function(elements, child) {
            if (serializers[child.tagName.toLowerCase()])
                elements.push(Element.extend(child));
            return elements;
        })
    },getInputs: function(form, typeName, name) {
        form = $(form);
        var inputs = form.getElementsByTagName('input');
        if (!typeName && !name)
            return $A(inputs).map(Element.extend);
        for (var i = 0, matchingInputs = [], length = inputs.length; i < length; i++) {
            var input = inputs[i];
            if ((typeName && input.type != typeName) || (name && input.name != name))
                continue;
            matchingInputs.push(Element.extend(input));
        }
        return matchingInputs;
    },disable: function(form) {
        form = $(form);
        Form.getElements(form).invoke('disable');
        return form;
    },enable: function(form) {
        form = $(form);
        Form.getElements(form).invoke('enable');
        return form;
    },findFirstElement: function(form) {
        var elements = $(form).getElements().findAll(function(element) {
            return 'hidden' != element.type && !element.disabled;
        });
        var firstByIndex = elements.findAll(function(element) {
            return element.hasAttribute('tabIndex') && element.tabIndex >= 0;
        }).sortBy(function(element) {
            return element.tabIndex
        }).first();
        return firstByIndex ? firstByIndex : elements.find(function(element) {
            return /^(?:input|select|textarea)$/i.test(element.tagName);
        });
    },focusFirstElement: function(form) {
        form = $(form);
        var element = form.findFirstElement();
        if (element)
            element.activate();
        return form;
    },request: function(form, options) {
        form = $(form), options = Object.clone(options || {});
        var params = options.parameters, action = form.readAttribute('action') || '';
        if (action.blank())
            action = window.location.href;
        options.parameters = form.serialize(true);
        if (params) {
            if (Object.isString(params))
                params = params.toQueryParams();
            Object.extend(options.parameters, params);
        }
        if (form.hasAttribute('method') && !options.method)
            options.method = form.method;
        return new Ajax.Request(action, options);
    }};
Form.Element = {focus: function(element) {
        $(element).focus();
        return element;
    },select: function(element) {
        $(element).select();
        return element;
    }};
Form.Element.Methods = {serialize: function(element) {
        element = $(element);
        if (!element.disabled && element.name) {
            var value = element.getValue();
            if (value != undefined) {
                var pair = {};
                pair[element.name] = value;
                return Object.toQueryString(pair);
            }
        }
        return '';
    },getValue: function(element) {
        element = $(element);
        var method = element.tagName.toLowerCase();
        return Form.Element.Serializers[method](element);
    },setValue: function(element, value) {
        element = $(element);
        var method = element.tagName.toLowerCase();
        Form.Element.Serializers[method](element, value);
        return element;
    },clear: function(element) {
        $(element).value = '';
        return element;
    },present: function(element) {
        return $(element).value != '';
    },activate: function(element) {
        element = $(element);
        try {
            element.focus();
            if (element.select && (element.tagName.toLowerCase() != 'input' || !(/^(?:button|reset|submit)$/i.test(element.type))))
                element.select();
        } catch (e) {
        }
        return element;
    },disable: function(element) {
        element = $(element);
        element.disabled = true;
        return element;
    },enable: function(element) {
        element = $(element);
        element.disabled = false;
        return element;
    }};
var Field = Form.Element;
var $F = Form.Element.Methods.getValue;
Form.Element.Serializers = (function() {
    function input(element, value) {
        switch (element.type.toLowerCase()) {
            case 'checkbox':
            case 'radio':
                return inputSelector(element, value);
            default:
                return valueSelector(element, value);
        }
    }
    function inputSelector(element, value) {
        if (Object.isUndefined(value))
            return element.checked ? element.value : null;
        else
            element.checked = !!value;
    }
    function valueSelector(element, value) {
        if (Object.isUndefined(value))
            return element.value;
        else
            element.value = value;
    }
    function select(element, value) {
        if (Object.isUndefined(value))
            return (element.type === 'select-one' ? selectOne : selectMany)(element);
        var opt, currentValue, single = !Object.isArray(value);
        for (var i = 0, length = element.length; i < length; i++) {
            opt = element.options[i];
            currentValue = this.optionValue(opt);
            if (single) {
                if (currentValue == value) {
                    opt.selected = true;
                    return;
                }
            }
            else
                opt.selected = value.include(currentValue);
        }
    }
    function selectOne(element) {
        var index = element.selectedIndex;
        return index >= 0 ? optionValue(element.options[index]) : null;
    }
    function selectMany(element) {
        var values, length = element.length;
        if (!length)
            return null;
        for (var i = 0, values = []; i < length; i++) {
            var opt = element.options[i];
            if (opt.selected)
                values.push(optionValue(opt));
        }
        return values;
    }
    function optionValue(opt) {
        return Element.hasAttribute(opt, 'value') ? opt.value : opt.text;
    }
    return {input: input,inputSelector: inputSelector,textarea: valueSelector,select: select,selectOne: selectOne,selectMany: selectMany,optionValue: optionValue,button: valueSelector};
})();
Abstract.TimedObserver = Class.create(PeriodicalExecuter, {initialize: function($super, element, frequency, callback) {
        $super(callback, frequency);
        this.element = $(element);
        this.lastValue = this.getValue();
    },execute: function() {
        var value = this.getValue();
        if (Object.isString(this.lastValue) && Object.isString(value) ? this.lastValue != value : String(this.lastValue) != String(value)) {
            this.callback(this.element, value);
            this.lastValue = value;
        }
    }});
Form.Element.Observer = Class.create(Abstract.TimedObserver, {getValue: function() {
        return Form.Element.getValue(this.element);
    }});
Form.Observer = Class.create(Abstract.TimedObserver, {getValue: function() {
        return Form.serialize(this.element);
    }});
Abstract.EventObserver = Class.create({initialize: function(element, callback) {
        this.element = $(element);
        this.callback = callback;
        this.lastValue = this.getValue();
        if (this.element.tagName.toLowerCase() == 'form')
            this.registerFormCallbacks();
        else
            this.registerCallback(this.element);
    },onElementEvent: function() {
        var value = this.getValue();
        if (this.lastValue != value) {
            this.callback(this.element, value);
            this.lastValue = value;
        }
    },registerFormCallbacks: function() {
        Form.getElements(this.element).each(this.registerCallback, this);
    },registerCallback: function(element) {
        if (element.type) {
            switch (element.type.toLowerCase()) {
                case 'checkbox':
                case 'radio':
                    Event.observe(element, 'click', this.onElementEvent.bind(this));
                    break;
                default:
                    Event.observe(element, 'change', this.onElementEvent.bind(this));
                    break;
            }
        }
    }});
Form.Element.EventObserver = Class.create(Abstract.EventObserver, {getValue: function() {
        return Form.Element.getValue(this.element);
    }});
Form.EventObserver = Class.create(Abstract.EventObserver, {getValue: function() {
        return Form.serialize(this.element);
    }});
(function() {
    var Event = {KEY_BACKSPACE: 8,KEY_TAB: 9,KEY_RETURN: 13,KEY_ESC: 27,KEY_LEFT: 37,KEY_UP: 38,KEY_RIGHT: 39,KEY_DOWN: 40,KEY_DELETE: 46,KEY_HOME: 36,KEY_END: 35,KEY_PAGEUP: 33,KEY_PAGEDOWN: 34,KEY_INSERT: 45,cache: {}};
    var docEl = document.documentElement;
    var MOUSEENTER_MOUSELEAVE_EVENTS_SUPPORTED = 'onmouseenter' in docEl && 'onmouseleave' in docEl;
    var isIELegacyEvent = function(event) {
        return false;
    };
    if (window.attachEvent) {
        if (window.addEventListener) {
            isIELegacyEvent = function(event) {
                return !(event instanceof window.Event);
            };
        } else {
            isIELegacyEvent = function(event) {
                return true;
            };
        }
    }
    var _isButton;
    function _isButtonForDOMEvents(event, code) {
        return event.which ? (event.which === code + 1) : (event.button === code);
    }
    var legacyButtonMap = {0: 1,1: 4,2: 2};
    function _isButtonForLegacyEvents(event, code) {
        return event.button === legacyButtonMap[code];
    }
    function _isButtonForWebKit(event, code) {
        switch (code) {
            case 0:
                return event.which == 1 && !event.metaKey;
            case 1:
                return event.which == 2 || (event.which == 1 && event.metaKey);
            case 2:
                return event.which == 3;
            default:
                return false;
        }
    }
    if (window.attachEvent) {
        if (!window.addEventListener) {
            _isButton = _isButtonForLegacyEvents;
        } else {
            _isButton = function(event, code) {
                return isIELegacyEvent(event) ? _isButtonForLegacyEvents(event, code) : _isButtonForDOMEvents(event, code);
            }
        }
    } else if (Prototype.Browser.WebKit) {
        _isButton = _isButtonForWebKit;
    } else {
        _isButton = _isButtonForDOMEvents;
    }
    function isLeftClick(event) {
        return _isButton(event, 0)
    }
    function isMiddleClick(event) {
        return _isButton(event, 1)
    }
    function isRightClick(event) {
        return _isButton(event, 2)
    }
    function element(event) {
        event = Event.extend(event);
        var node = event.target, type = event.type, currentTarget = event.currentTarget;
        if (currentTarget && currentTarget.tagName) {
            if (type === 'load' || type === 'error' || (type === 'click' && currentTarget.tagName.toLowerCase() === 'input' && currentTarget.type === 'radio'))
                node = currentTarget;
        }
        if (node.nodeType == Node.TEXT_NODE)
            node = node.parentNode;
        return Element.extend(node);
    }
    function findElement(event, expression) {
        var element = Event.element(event);
        if (!expression)
            return element;
        while (element) {
            if (Object.isElement(element) && Prototype.Selector.match(element, expression)) {
                return Element.extend(element);
            }
            element = element.parentNode;
        }
    }
    function pointer(event) {
        return {x: pointerX(event),y: pointerY(event)};
    }
    function pointerX(event) {
        var docElement = document.documentElement, body = document.body || {scrollLeft: 0};
        return event.pageX || (event.clientX +
        (docElement.scrollLeft || body.scrollLeft) -
        (docElement.clientLeft || 0));
    }
    function pointerY(event) {
        var docElement = document.documentElement, body = document.body || {scrollTop: 0};
        return event.pageY || (event.clientY +
        (docElement.scrollTop || body.scrollTop) -
        (docElement.clientTop || 0));
    }
    function stop(event) {
        Event.extend(event);
        event.preventDefault();
        event.stopPropagation();
        event.stopped = true;
    }
    Event.Methods = {isLeftClick: isLeftClick,isMiddleClick: isMiddleClick,isRightClick: isRightClick,element: element,findElement: findElement,pointer: pointer,pointerX: pointerX,pointerY: pointerY,stop: stop};
    var methods = Object.keys(Event.Methods).inject({}, function(m, name) {
        m[name] = Event.Methods[name].methodize();
        return m;
    });
    if (window.attachEvent) {
        function _relatedTarget(event) {
            var element;
            switch (event.type) {
                case 'mouseover':
                case 'mouseenter':
                    element = event.fromElement;
                    break;
                case 'mouseout':
                case 'mouseleave':
                    element = event.toElement;
                    break;
                default:
                    return null;
            }
            return Element.extend(element);
        }
        var additionalMethods = {stopPropagation: function() {
                this.cancelBubble = true
            },preventDefault: function() {
                this.returnValue = false
            },inspect: function() {
                return '[object Event]'
            }};
        Event.extend = function(event, element) {
            if (!event)
                return false;
            if (!isIELegacyEvent(event))
                return event;
            if (event._extendedByPrototype)
                return event;
            event._extendedByPrototype = Prototype.emptyFunction;
            var pointer = Event.pointer(event);
            Object.extend(event, {target: event.srcElement || element,relatedTarget: _relatedTarget(event),pageX: pointer.x,pageY: pointer.y});
            Object.extend(event, methods);
            Object.extend(event, additionalMethods);
            return event;
        };
    } else {
        Event.extend = Prototype.K;
    }
    if (window.addEventListener) {
        Event.prototype = window.Event.prototype || document.createEvent('HTMLEvents').__proto__;
        Object.extend(Event.prototype, methods);
    }
    function _createResponder(element, eventName, handler) {
        var registry = Element.retrieve(element, 'prototype_event_registry');
        if (Object.isUndefined(registry)) {
            CACHE.push(element);
            registry = Element.retrieve(element, 'prototype_event_registry', $H());
        }
        var respondersForEvent = registry.get(eventName);
        if (Object.isUndefined(respondersForEvent)) {
            respondersForEvent = [];
            registry.set(eventName, respondersForEvent);
        }
        if (respondersForEvent.pluck('handler').include(handler))
            return false;
        var responder;
        if (eventName.include(":")) {
            responder = function(event) {
                if (Object.isUndefined(event.eventName))
                    return false;
                if (event.eventName !== eventName)
                    return false;
                Event.extend(event, element);
                handler.call(element, event);
            };
        } else {
            if (!MOUSEENTER_MOUSELEAVE_EVENTS_SUPPORTED && (eventName === "mouseenter" || eventName === "mouseleave")) {
                if (eventName === "mouseenter" || eventName === "mouseleave") {
                    responder = function(event) {
                        Event.extend(event, element);
                        var parent = event.relatedTarget;
                        while (parent && parent !== element) {
                            try {
                                parent = parent.parentNode;
                            }
                            catch (e) {
                                parent = element;
                            }
                        }
                        if (parent === element)
                            return;
                        handler.call(element, event);
                    };
                }
            } else {
                responder = function(event) {
                    Event.extend(event, element);
                    handler.call(element, event);
                };
            }
        }
        responder.handler = handler;
        respondersForEvent.push(responder);
        return responder;
    }
    function _destroyCache() {
        for (var i = 0, length = CACHE.length; i < length; i++) {
            Event.stopObserving(CACHE[i]);
            CACHE[i] = null;
        }
    }
    var CACHE = [];
    if (Prototype.Browser.IE)
        window.attachEvent('onunload', _destroyCache);
    if (Prototype.Browser.WebKit)
        window.addEventListener('unload', Prototype.emptyFunction, false);
    var _getDOMEventName = Prototype.K, translations = {mouseenter: "mouseover",mouseleave: "mouseout"};
    if (!MOUSEENTER_MOUSELEAVE_EVENTS_SUPPORTED) {
        _getDOMEventName = function(eventName) {
            return (translations[eventName] || eventName);
        };
    }
    function observe(element, eventName, handler) {
        element = $(element);
        var responder = _createResponder(element, eventName, handler);
        if (!responder)
            return element;
        if (eventName.include(':')) {
            if (element.addEventListener)
                element.addEventListener("dataavailable", responder, false);
            else {
                element.attachEvent("ondataavailable", responder);
                element.attachEvent("onlosecapture", responder);
            }
        } else {
            var actualEventName = _getDOMEventName(eventName);
            if (element.addEventListener)
                element.addEventListener(actualEventName, responder, false);
            else
                element.attachEvent("on" + actualEventName, responder);
        }
        return element;
    }
    function stopObserving(element, eventName, handler) {
        element = $(element);
        var registry = Element.retrieve(element, 'prototype_event_registry');
        if (!registry)
            return element;
        if (!eventName) {
            registry.each(function(pair) {
                var eventName = pair.key;
                stopObserving(element, eventName);
            });
            return element;
        }
        var responders = registry.get(eventName);
        if (!responders)
            return element;
        if (!handler) {
            responders.each(function(r) {
                stopObserving(element, eventName, r.handler);
            });
            return element;
        }
        var i = responders.length, responder;
        while (i--) {
            if (responders[i].handler === handler) {
                responder = responders[i];
                break;
            }
        }
        if (!responder)
            return element;
        if (eventName.include(':')) {
            if (element.removeEventListener)
                element.removeEventListener("dataavailable", responder, false);
            else {
                element.detachEvent("ondataavailable", responder);
                element.detachEvent("onlosecapture", responder);
            }
        } else {
            var actualEventName = _getDOMEventName(eventName);
            if (element.removeEventListener)
                element.removeEventListener(actualEventName, responder, false);
            else
                element.detachEvent('on' + actualEventName, responder);
        }
        registry.set(eventName, responders.without(responder));
        return element;
    }
    function fire(element, eventName, memo, bubble) {
        element = $(element);
        if (Object.isUndefined(bubble))
            bubble = true;
        if (element == document && document.createEvent && !element.dispatchEvent)
            element = document.documentElement;
        var event;
        if (document.createEvent) {
            event = document.createEvent('HTMLEvents');
            event.initEvent('dataavailable', bubble, true);
        } else {
            event = document.createEventObject();
            event.eventType = bubble ? 'ondataavailable' : 'onlosecapture';
        }
        event.eventName = eventName;
        event.memo = memo || {};
        if (document.createEvent)
            element.dispatchEvent(event);
        else
            element.fireEvent(event.eventType, event);
        return Event.extend(event);
    }
    Event.Handler = Class.create({initialize: function(element, eventName, selector, callback) {
            this.element = $(element);
            this.eventName = eventName;
            this.selector = selector;
            this.callback = callback;
            this.handler = this.handleEvent.bind(this);
        },start: function() {
            Event.observe(this.element, this.eventName, this.handler);
            return this;
        },stop: function() {
            Event.stopObserving(this.element, this.eventName, this.handler);
            return this;
        },handleEvent: function(event) {
            var element = Event.findElement(event, this.selector);
            if (element)
                this.callback.call(this.element, event, element);
        }});
    function on(element, eventName, selector, callback) {
        element = $(element);
        if (Object.isFunction(selector) && Object.isUndefined(callback)) {
            callback = selector, selector = null;
        }
        return new Event.Handler(element, eventName, selector, callback).start();
    }
    Object.extend(Event, Event.Methods);
    Object.extend(Event, {fire: fire,observe: observe,stopObserving: stopObserving,on: on});
    Element.addMethods({fire: fire,observe: observe,stopObserving: stopObserving,on: on});
    Object.extend(document, {fire: fire.methodize(),observe: observe.methodize(),stopObserving: stopObserving.methodize(),on: on.methodize(),loaded: false});
    if (window.Event)
        Object.extend(window.Event, Event);
    else
        window.Event = Event;
})();
(function() {
    var timer;
    function fireContentLoadedEvent() {
        if (document.loaded)
            return;
        if (timer)
            window.clearTimeout(timer);
        document.loaded = true;
        document.fire('dom:loaded');
    }
    function checkReadyState() {
        if (document.readyState === 'complete') {
            document.stopObserving('readystatechange', checkReadyState);
            fireContentLoadedEvent();
        }
    }
    function pollDoScroll() {
        try {
            document.documentElement.doScroll('left');
        }
        catch (e) {
            timer = pollDoScroll.defer();
            return;
        }
        fireContentLoadedEvent();
    }
    if (document.addEventListener) {
        document.addEventListener('DOMContentLoaded', fireContentLoadedEvent, false);
    } else {
        document.observe('readystatechange', checkReadyState);
        if (window == top)
            timer = pollDoScroll.defer();
    }
    Event.observe(window, 'load', fireContentLoadedEvent);
})();
Element.addMethods();
Hash.toQueryString = Object.toQueryString;
var Toggle = {display: Element.toggle};
Element.Methods.childOf = Element.Methods.descendantOf;
var Insertion = {Before: function(element, content) {
        return Element.insert(element, {before: content});
    },Top: function(element, content) {
        return Element.insert(element, {top: content});
    },Bottom: function(element, content) {
        return Element.insert(element, {bottom: content});
    },After: function(element, content) {
        return Element.insert(element, {after: content});
    }};
var $continue = new Error('"throw $continue" is deprecated, use "return" instead');
var Position = {includeScrollOffsets: false,prepare: function() {
        this.deltaX = window.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft || 0;
        this.deltaY = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;
    },within: function(element, x, y) {
        if (this.includeScrollOffsets)
            return this.withinIncludingScrolloffsets(element, x, y);
        this.xcomp = x;
        this.ycomp = y;
        this.offset = Element.cumulativeOffset(element);
        return (y >= this.offset[1] && y < this.offset[1] + element.offsetHeight && x >= this.offset[0] && x < this.offset[0] + element.offsetWidth);
    },withinIncludingScrolloffsets: function(element, x, y) {
        var offsetcache = Element.cumulativeScrollOffset(element);
        this.xcomp = x + offsetcache[0] - this.deltaX;
        this.ycomp = y + offsetcache[1] - this.deltaY;
        this.offset = Element.cumulativeOffset(element);
        return (this.ycomp >= this.offset[1] && this.ycomp < this.offset[1] + element.offsetHeight && this.xcomp >= this.offset[0] && this.xcomp < this.offset[0] + element.offsetWidth);
    },overlap: function(mode, element) {
        if (!mode)
            return 0;
        if (mode == 'vertical')
            return ((this.offset[1] + element.offsetHeight) - this.ycomp) / element.offsetHeight;
        if (mode == 'horizontal')
            return ((this.offset[0] + element.offsetWidth) - this.xcomp) / element.offsetWidth;
    },cumulativeOffset: Element.Methods.cumulativeOffset,positionedOffset: Element.Methods.positionedOffset,absolutize: function(element) {
        Position.prepare();
        return Element.absolutize(element);
    },relativize: function(element) {
        Position.prepare();
        return Element.relativize(element);
    },realOffset: Element.Methods.cumulativeScrollOffset,offsetParent: Element.Methods.getOffsetParent,page: Element.Methods.viewportOffset,clone: function(source, target, options) {
        options = options || {};
        return Element.clonePosition(target, source, options);
    }};
if (!document.getElementsByClassName)
    document.getElementsByClassName = function(instanceMethods) {
        function iter(name) {
            return name.blank() ? null : "[contains(concat(' ', @class, ' '), ' " + name + " ')]";
        }
        instanceMethods.getElementsByClassName = Prototype.BrowserFeatures.XPath ? function(element, className) {
            className = className.toString().strip();
            var cond = /\s/.test(className) ? $w(className).map(iter).join('') : iter(className);
            return cond ? document._getElementsByXPath('.//*' + cond, element) : [];
        } : function(element, className) {
            className = className.toString().strip();
            var elements = [], classNames = (/\s/.test(className) ? $w(className) : null);
            if (!classNames && !className)
                return elements;
            var nodes = $(element).getElementsByTagName('*');
            className = ' ' + className + ' ';
            for (var i = 0, child, cn; child = nodes[i]; i++) {
                if (child.className && (cn = ' ' + child.className + ' ') && (cn.include(className) || (classNames && classNames.all(function(name) {
                    return !name.toString().blank() && cn.include(' ' + name + ' ');
                }))))
                    elements.push(Element.extend(child));
            }
            return elements;
        };
        return function(className, parentElement) {
            return $(parentElement || document.body).getElementsByClassName(className);
        };
    }(Element.Methods);
Element.ClassNames = Class.create();
Element.ClassNames.prototype = {initialize: function(element) {
        this.element = $(element);
    },_each: function(iterator) {
        this.element.className.split(/\s+/).select(function(name) {
            return name.length > 0;
        })._each(iterator);
    },set: function(className) {
        this.element.className = className;
    },add: function(classNameToAdd) {
        if (this.include(classNameToAdd))
            return;
        this.set($A(this).concat(classNameToAdd).join(' '));
    },remove: function(classNameToRemove) {
        if (!this.include(classNameToRemove))
            return;
        this.set($A(this).without(classNameToRemove).join(' '));
    },toString: function() {
        return $A(this).join(' ');
    }};
Object.extend(Element.ClassNames.prototype, Enumerable);
(function() {
    window.Selector = Class.create({initialize: function(expression) {
            this.expression = expression.strip();
        },findElements: function(rootElement) {
            return Prototype.Selector.select(this.expression, rootElement);
        },match: function(element) {
            return Prototype.Selector.match(element, this.expression);
        },toString: function() {
            return this.expression;
        },inspect: function() {
            return "#<Selector: " + this.expression + ">";
        }});
    Object.extend(Selector, {matchElements: function(elements, expression) {
            var match = Prototype.Selector.match, results = [];
            for (var i = 0, length = elements.length; i < length; i++) {
                var element = elements[i];
                if (match(element, expression)) {
                    results.push(Element.extend(element));
                }
            }
            return results;
        },findElement: function(elements, expression, index) {
            index = index || 0;
            var matchIndex = 0, element;
            for (var i = 0, length = elements.length; i < length; i++) {
                element = elements[i];
                if (Prototype.Selector.match(element, expression) && index === matchIndex++) {
                    return Element.extend(element);
                }
            }
        },findChildElements: function(element, expressions) {
            var selector = expressions.toArray().join(', ');
            return Prototype.Selector.select(selector, element || document);
        }});
})();
if (!document.createElement('canvas').getContext) {
    (function() {
        var m = Math;
        var mr = m.round;
        var ms = m.sin;
        var mc = m.cos;
        var abs = m.abs;
        var sqrt = m.sqrt;
        var Z = 10;
        var Z2 = Z / 2;
        function getContext() {
            return this.context_ || (this.context_ = new CanvasRenderingContext2D_(this));
        }
        var slice = Array.prototype.slice;
        function bind(f, obj, var_args) {
            var a = slice.call(arguments, 2);
            return function() {
                return f.apply(obj, a.concat(slice.call(arguments)));
            };
        }
        var G_vmlCanvasManager_ = {init: function(opt_doc) {
                if (/MSIE/.test(navigator.userAgent) && !window.opera) {
                    var doc = opt_doc || document;
                    doc.createElement('canvas');
                    doc.attachEvent('onreadystatechange', bind(this.init_, this, doc));
                }
            },init_: function(doc) {
                if (!doc.namespaces['g_vml_']) {
                    doc.namespaces.add('g_vml_', 'urn:schemas-microsoft-com:vml', '#default#VML');
                }
                if (!doc.namespaces['g_o_']) {
                    doc.namespaces.add('g_o_', 'urn:schemas-microsoft-com:office:office', '#default#VML');
                }
                if (!doc.styleSheets['ex_canvas_']) {
                    var ss = doc.createStyleSheet();
                    ss.owningElement.id = 'ex_canvas_';
                    ss.cssText = 'canvas{display:inline-block;overflow:hidden;' + 'text-align:left;width:300px;height:150px}' + 'g_vml_\\:*{behavior:url(#default#VML)}' + 'g_o_\\:*{behavior:url(#default#VML)}';
                }
                var els = doc.getElementsByTagName('canvas');
                for (var i = 0; i < els.length; i++) {
                    this.initElement(els[i]);
                }
            },initElement: function(el) {
                if (!el.getContext) {
                    el.getContext = getContext;
                    el.innerHTML = '';
                    el.attachEvent('onpropertychange', onPropertyChange);
                    el.attachEvent('onresize', onResize);
                    var attrs = el.attributes;
                    if (attrs.width && attrs.width.specified) {
                        el.style.width = attrs.width.nodeValue + 'px';
                    } else {
                        el.width = el.clientWidth;
                    }
                    if (attrs.height && attrs.height.specified) {
                        el.style.height = attrs.height.nodeValue + 'px';
                    } else {
                        el.height = el.clientHeight;
                    }
                }
                return el;
            }};
        function onPropertyChange(e) {
            var el = e.srcElement;
            switch (e.propertyName) {
                case 'width':
                    el.style.width = el.attributes.width.nodeValue + 'px';
                    el.getContext().clearRect();
                    break;
                case 'height':
                    el.style.height = el.attributes.height.nodeValue + 'px';
                    el.getContext().clearRect();
                    break;
            }
        }
        function onResize(e) {
            var el = e.srcElement;
            if (el.firstChild) {
                el.firstChild.style.width = el.clientWidth + 'px';
                el.firstChild.style.height = el.clientHeight + 'px';
            }
        }
        G_vmlCanvasManager_.init();
        var dec2hex = [];
        for (var i = 0; i < 16; i++) {
            for (var j = 0; j < 16; j++) {
                dec2hex[i * 16 + j] = i.toString(16) + j.toString(16);
            }
        }
        function createMatrixIdentity() {
            return [[1, 0, 0], [0, 1, 0], [0, 0, 1]];
        }
        function matrixMultiply(m1, m2) {
            var result = createMatrixIdentity();
            for (var x = 0; x < 3; x++) {
                for (var y = 0; y < 3; y++) {
                    var sum = 0;
                    for (var z = 0; z < 3; z++) {
                        sum += m1[x][z] * m2[z][y];
                    }
                    result[x][y] = sum;
                }
            }
            return result;
        }
        function copyState(o1, o2) {
            o2.fillStyle = o1.fillStyle;
            o2.lineCap = o1.lineCap;
            o2.lineJoin = o1.lineJoin;
            o2.lineWidth = o1.lineWidth;
            o2.miterLimit = o1.miterLimit;
            o2.shadowBlur = o1.shadowBlur;
            o2.shadowColor = o1.shadowColor;
            o2.shadowOffsetX = o1.shadowOffsetX;
            o2.shadowOffsetY = o1.shadowOffsetY;
            o2.strokeStyle = o1.strokeStyle;
            o2.globalAlpha = o1.globalAlpha;
            o2.arcScaleX_ = o1.arcScaleX_;
            o2.arcScaleY_ = o1.arcScaleY_;
            o2.lineScale_ = o1.lineScale_;
        }
        function processStyle(styleString) {
            var str, alpha = 1;
            styleString = String(styleString);
            if (styleString.substring(0, 3) == 'rgb') {
                var start = styleString.indexOf('(', 3);
                var end = styleString.indexOf(')', start + 1);
                var guts = styleString.substring(start + 1, end).split(',');
                str = '#';
                for (var i = 0; i < 3; i++) {
                    str += dec2hex[Number(guts[i])];
                }
                if (guts.length == 4 && styleString.substr(3, 1) == 'a') {
                    alpha = guts[3];
                }
            } else {
                str = styleString;
            }
            return {color: str,alpha: alpha};
        }
        function processLineCap(lineCap) {
            switch (lineCap) {
                case 'butt':
                    return 'flat';
                case 'round':
                    return 'round';
                case 'square':
                default:
                    return 'square';
            }
        }
        function CanvasRenderingContext2D_(surfaceElement) {
            this.m_ = createMatrixIdentity();
            this.mStack_ = [];
            this.aStack_ = [];
            this.currentPath_ = [];
            this.strokeStyle = '#000';
            this.fillStyle = '#000';
            this.lineWidth = 1;
            this.lineJoin = 'miter';
            this.lineCap = 'butt';
            this.miterLimit = Z * 1;
            this.globalAlpha = 1;
            this.canvas = surfaceElement;
            var el = surfaceElement.ownerDocument.createElement('div');
            el.style.width = surfaceElement.clientWidth + 'px';
            el.style.height = surfaceElement.clientHeight + 'px';
            el.style.overflow = 'hidden';
            el.style.position = 'absolute';
            surfaceElement.appendChild(el);
            this.element_ = el;
            this.arcScaleX_ = 1;
            this.arcScaleY_ = 1;
            this.lineScale_ = 1;
        }
        var contextPrototype = CanvasRenderingContext2D_.prototype;
        contextPrototype.clearRect = function() {
            this.element_.innerHTML = '';
        };
        contextPrototype.beginPath = function() {
            this.currentPath_ = [];
        };
        contextPrototype.moveTo = function(aX, aY) {
            var p = this.getCoords_(aX, aY);
            this.currentPath_.push({type: 'moveTo',x: p.x,y: p.y});
            this.currentX_ = p.x;
            this.currentY_ = p.y;
        };
        contextPrototype.lineTo = function(aX, aY) {
            var p = this.getCoords_(aX, aY);
            this.currentPath_.push({type: 'lineTo',x: p.x,y: p.y});
            this.currentX_ = p.x;
            this.currentY_ = p.y;
        };
        contextPrototype.bezierCurveTo = function(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {
            var p = this.getCoords_(aX, aY);
            var cp1 = this.getCoords_(aCP1x, aCP1y);
            var cp2 = this.getCoords_(aCP2x, aCP2y);
            bezierCurveTo(this, cp1, cp2, p);
        };
        function bezierCurveTo(self, cp1, cp2, p) {
            self.currentPath_.push({type: 'bezierCurveTo',cp1x: cp1.x,cp1y: cp1.y,cp2x: cp2.x,cp2y: cp2.y,x: p.x,y: p.y});
            self.currentX_ = p.x;
            self.currentY_ = p.y;
        }
        contextPrototype.quadraticCurveTo = function(aCPx, aCPy, aX, aY) {
            var cp = this.getCoords_(aCPx, aCPy);
            var p = this.getCoords_(aX, aY);
            var cp1 = {x: this.currentX_ + 2.0 / 3.0 * (cp.x - this.currentX_),y: this.currentY_ + 2.0 / 3.0 * (cp.y - this.currentY_)};
            var cp2 = {x: cp1.x + (p.x - this.currentX_) / 3.0,y: cp1.y + (p.y - this.currentY_) / 3.0};
            bezierCurveTo(this, cp1, cp2, p);
        };
        contextPrototype.arc = function(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
            aRadius *= Z;
            var arcType = aClockwise ? 'at' : 'wa';
            var xStart = aX + mc(aStartAngle) * aRadius - Z2;
            var yStart = aY + ms(aStartAngle) * aRadius - Z2;
            var xEnd = aX + mc(aEndAngle) * aRadius - Z2;
            var yEnd = aY + ms(aEndAngle) * aRadius - Z2;
            if (xStart == xEnd && !aClockwise) {
                xStart += 0.125;
            }
            var p = this.getCoords_(aX, aY);
            var pStart = this.getCoords_(xStart, yStart);
            var pEnd = this.getCoords_(xEnd, yEnd);
            this.currentPath_.push({type: arcType,x: p.x,y: p.y,radius: aRadius,xStart: pStart.x,yStart: pStart.y,xEnd: pEnd.x,yEnd: pEnd.y});
        };
        contextPrototype.rect = function(aX, aY, aWidth, aHeight) {
            this.moveTo(aX, aY);
            this.lineTo(aX + aWidth, aY);
            this.lineTo(aX + aWidth, aY + aHeight);
            this.lineTo(aX, aY + aHeight);
            this.closePath();
        };
        contextPrototype.strokeRect = function(aX, aY, aWidth, aHeight) {
            var oldPath = this.currentPath_;
            this.beginPath();
            this.moveTo(aX, aY);
            this.lineTo(aX + aWidth, aY);
            this.lineTo(aX + aWidth, aY + aHeight);
            this.lineTo(aX, aY + aHeight);
            this.closePath();
            this.stroke();
            this.currentPath_ = oldPath;
        };
        contextPrototype.fillRect = function(aX, aY, aWidth, aHeight) {
            var oldPath = this.currentPath_;
            this.beginPath();
            this.moveTo(aX, aY);
            this.lineTo(aX + aWidth, aY);
            this.lineTo(aX + aWidth, aY + aHeight);
            this.lineTo(aX, aY + aHeight);
            this.closePath();
            this.fill();
            this.currentPath_ = oldPath;
        };
        contextPrototype.createLinearGradient = function(aX0, aY0, aX1, aY1) {
            var gradient = new CanvasGradient_('gradient');
            gradient.x0_ = aX0;
            gradient.y0_ = aY0;
            gradient.x1_ = aX1;
            gradient.y1_ = aY1;
            return gradient;
        };
        contextPrototype.createRadialGradient = function(aX0, aY0, aR0, aX1, aY1, aR1) {
            var gradient = new CanvasGradient_('gradientradial');
            gradient.x0_ = aX0;
            gradient.y0_ = aY0;
            gradient.r0_ = aR0;
            gradient.x1_ = aX1;
            gradient.y1_ = aY1;
            gradient.r1_ = aR1;
            return gradient;
        };
        contextPrototype.drawImage = function(image, var_args) {
            var dx, dy, dw, dh, sx, sy, sw, sh;
            var oldRuntimeWidth = image.runtimeStyle.width;
            var oldRuntimeHeight = image.runtimeStyle.height;
            image.runtimeStyle.width = 'auto';
            image.runtimeStyle.height = 'auto';
            var w = image.width;
            var h = image.height;
            image.runtimeStyle.width = oldRuntimeWidth;
            image.runtimeStyle.height = oldRuntimeHeight;
            if (arguments.length == 3) {
                dx = arguments[1];
                dy = arguments[2];
                sx = sy = 0;
                sw = dw = w;
                sh = dh = h;
            } else if (arguments.length == 5) {
                dx = arguments[1];
                dy = arguments[2];
                dw = arguments[3];
                dh = arguments[4];
                sx = sy = 0;
                sw = w;
                sh = h;
            } else if (arguments.length == 9) {
                sx = arguments[1];
                sy = arguments[2];
                sw = arguments[3];
                sh = arguments[4];
                dx = arguments[5];
                dy = arguments[6];
                dw = arguments[7];
                dh = arguments[8];
            } else {
                throw Error('Invalid number of arguments');
            }
            var d = this.getCoords_(dx, dy);
            var w2 = sw / 2;
            var h2 = sh / 2;
            var vmlStr = [];
            var W = 10;
            var H = 10;
            vmlStr.push(' <g_vml_:group', ' coordsize="', Z * W, ',', Z * H, '"', ' coordorigin="0,0"', ' style="width:', W, 'px;height:', H, 'px;position:absolute;');
            if (this.m_[0][0] != 1 || this.m_[0][1]) {
                var filter = [];
                filter.push('M11=', this.m_[0][0], ',', 'M12=', this.m_[1][0], ',', 'M21=', this.m_[0][1], ',', 'M22=', this.m_[1][1], ',', 'Dx=', mr(d.x / Z), ',', 'Dy=', mr(d.y / Z), '');
                var max = d;
                var c2 = this.getCoords_(dx + dw, dy);
                var c3 = this.getCoords_(dx, dy + dh);
                var c4 = this.getCoords_(dx + dw, dy + dh);
                max.x = m.max(max.x, c2.x, c3.x, c4.x);
                max.y = m.max(max.y, c2.y, c3.y, c4.y);
                vmlStr.push('padding:0 ', mr(max.x / Z), 'px ', mr(max.y / Z), 'px 0;filter:progid:DXImageTransform.Microsoft.Matrix(', filter.join(''), ", sizingmethod='clip');")
            } else {
                vmlStr.push('top:', mr(d.y / Z), 'px;left:', mr(d.x / Z), 'px;');
            }
            vmlStr.push(' ">', '<g_vml_:image src="', image.src, '"', ' style="width:', Z * dw, 'px;', ' height:', Z * dh, 'px;"', ' cropleft="', sx / w, '"', ' croptop="', sy / h, '"', ' cropright="', (w - sx - sw) / w, '"', ' cropbottom="', (h - sy - sh) / h, '"', ' />', '</g_vml_:group>');
            this.element_.insertAdjacentHTML('BeforeEnd', vmlStr.join(''));
        };
        contextPrototype.stroke = function(aFill) {
            var lineStr = [];
            var lineOpen = false;
            var a = processStyle(aFill ? this.fillStyle : this.strokeStyle);
            var color = a.color;
            var opacity = a.alpha * this.globalAlpha;
            var W = 10;
            var H = 10;
            lineStr.push('<g_vml_:shape', ' filled="', !!aFill, '"', ' style="position:absolute;width:', W, 'px;height:', H, 'px;"', ' coordorigin="0 0" coordsize="', Z * W, ' ', Z * H, '"', ' stroked="', !aFill, '"', ' path="');
            var newSeq = false;
            var min = {x: null,y: null};
            var max = {x: null,y: null};
            for (var i = 0; i < this.currentPath_.length; i++) {
                var p = this.currentPath_[i];
                var c;
                switch (p.type) {
                    case 'moveTo':
                        c = p;
                        lineStr.push(' m ', mr(p.x), ',', mr(p.y));
                        break;
                    case 'lineTo':
                        lineStr.push(' l ', mr(p.x), ',', mr(p.y));
                        break;
                    case 'close':
                        lineStr.push(' x ');
                        p = null;
                        break;
                    case 'bezierCurveTo':
                        lineStr.push(' c ', mr(p.cp1x), ',', mr(p.cp1y), ',', mr(p.cp2x), ',', mr(p.cp2y), ',', mr(p.x), ',', mr(p.y));
                        break;
                    case 'at':
                    case 'wa':
                        lineStr.push(' ', p.type, ' ', mr(p.x - this.arcScaleX_ * p.radius), ',', mr(p.y - this.arcScaleY_ * p.radius), ' ', mr(p.x + this.arcScaleX_ * p.radius), ',', mr(p.y + this.arcScaleY_ * p.radius), ' ', mr(p.xStart), ',', mr(p.yStart), ' ', mr(p.xEnd), ',', mr(p.yEnd));
                        break;
                }
                if (p) {
                    if (min.x == null || p.x < min.x) {
                        min.x = p.x;
                    }
                    if (max.x == null || p.x > max.x) {
                        max.x = p.x;
                    }
                    if (min.y == null || p.y < min.y) {
                        min.y = p.y;
                    }
                    if (max.y == null || p.y > max.y) {
                        max.y = p.y;
                    }
                }
            }
            lineStr.push(' ">');
            if (!aFill) {
                var lineWidth = this.lineScale_ * this.lineWidth;
                if (lineWidth < 1) {
                    opacity *= lineWidth;
                }
                lineStr.push('<g_vml_:stroke', ' opacity="', opacity, '"', ' joinstyle="', this.lineJoin, '"', ' miterlimit="', this.miterLimit, '"', ' endcap="', processLineCap(this.lineCap), '"', ' weight="', lineWidth, 'px"', ' color="', color, '" />');
            } else if (typeof this.fillStyle == 'object') {
                var fillStyle = this.fillStyle;
                var angle = 0;
                var focus = {x: 0,y: 0};
                var shift = 0;
                var expansion = 1;
                if (fillStyle.type_ == 'gradient') {
                    var x0 = fillStyle.x0_ / this.arcScaleX_;
                    var y0 = fillStyle.y0_ / this.arcScaleY_;
                    var x1 = fillStyle.x1_ / this.arcScaleX_;
                    var y1 = fillStyle.y1_ / this.arcScaleY_;
                    var p0 = this.getCoords_(x0, y0);
                    var p1 = this.getCoords_(x1, y1);
                    var dx = p1.x - p0.x;
                    var dy = p1.y - p0.y;
                    angle = Math.atan2(dx, dy) * 180 / Math.PI;
                    if (angle < 0) {
                        angle += 360;
                    }
                    if (angle < 1e-6) {
                        angle = 0;
                    }
                } else {
                    var p0 = this.getCoords_(fillStyle.x0_, fillStyle.y0_);
                    var width = max.x - min.x;
                    var height = max.y - min.y;
                    focus = {x: (p0.x - min.x) / width,y: (p0.y - min.y) / height};
                    width /= this.arcScaleX_ * Z;
                    height /= this.arcScaleY_ * Z;
                    var dimension = m.max(width, height);
                    shift = 2 * fillStyle.r0_ / dimension;
                    expansion = 2 * fillStyle.r1_ / dimension - shift;
                }
                var stops = fillStyle.colors_;
                stops.sort(function(cs1, cs2) {
                    return cs1.offset - cs2.offset;
                });
                var length = stops.length;
                var color1 = stops[0].color;
                var color2 = stops[length - 1].color;
                var opacity1 = stops[0].alpha * this.globalAlpha;
                var opacity2 = stops[length - 1].alpha * this.globalAlpha;
                var colors = [];
                for (var i = 0; i < length; i++) {
                    var stop = stops[i];
                    colors.push(stop.offset * expansion + shift + ' ' + stop.color);
                }
                lineStr.push('<g_vml_:fill type="', fillStyle.type_, '"', ' method="none" focus="100%"', ' color="', color1, '"', ' color2="', color2, '"', ' colors="', colors.join(','), '"', ' opacity="', opacity2, '"', ' g_o_:opacity2="', opacity1, '"', ' angle="', angle, '"', ' focusposition="', focus.x, ',', focus.y, '" />');
            } else {
                lineStr.push('<g_vml_:fill color="', color, '" opacity="', opacity, '" />');
            }
            lineStr.push('</g_vml_:shape>');
            this.element_.insertAdjacentHTML('beforeEnd', lineStr.join(''));
        };
        contextPrototype.fill = function() {
            this.stroke(true);
        }
        contextPrototype.closePath = function() {
            this.currentPath_.push({type: 'close'});
        };
        contextPrototype.getCoords_ = function(aX, aY) {
            var m = this.m_;
            return {x: Z * (aX * m[0][0] + aY * m[1][0] + m[2][0]) - Z2,y: Z * (aX * m[0][1] + aY * m[1][1] + m[2][1]) - Z2}
        };
        contextPrototype.save = function() {
            var o = {};
            copyState(this, o);
            this.aStack_.push(o);
            this.mStack_.push(this.m_);
            this.m_ = matrixMultiply(createMatrixIdentity(), this.m_);
        };
        contextPrototype.restore = function() {
            copyState(this.aStack_.pop(), this);
            this.m_ = this.mStack_.pop();
        };
        function matrixIsFinite(m) {
            for (var j = 0; j < 3; j++) {
                for (var k = 0; k < 2; k++) {
                    if (!isFinite(m[j][k]) || isNaN(m[j][k])) {
                        return false;
                    }
                }
            }
            return true;
        }
        function setM(ctx, m, updateLineScale) {
            if (!matrixIsFinite(m)) {
                return;
            }
            ctx.m_ = m;
            if (updateLineScale) {
                var det = m[0][0] * m[1][1] - m[0][1] * m[1][0];
                ctx.lineScale_ = sqrt(abs(det));
            }
        }
        contextPrototype.translate = function(aX, aY) {
            var m1 = [[1, 0, 0], [0, 1, 0], [aX, aY, 1]];
            setM(this, matrixMultiply(m1, this.m_), false);
        };
        contextPrototype.rotate = function(aRot) {
            var c = mc(aRot);
            var s = ms(aRot);
            var m1 = [[c, s, 0], [-s, c, 0], [0, 0, 1]];
            setM(this, matrixMultiply(m1, this.m_), false);
        };
        contextPrototype.scale = function(aX, aY) {
            this.arcScaleX_ *= aX;
            this.arcScaleY_ *= aY;
            var m1 = [[aX, 0, 0], [0, aY, 0], [0, 0, 1]];
            setM(this, matrixMultiply(m1, this.m_), true);
        };
        contextPrototype.transform = function(m11, m12, m21, m22, dx, dy) {
            var m1 = [[m11, m12, 0], [m21, m22, 0], [dx, dy, 1]];
            setM(this, matrixMultiply(m1, this.m_), true);
        };
        contextPrototype.setTransform = function(m11, m12, m21, m22, dx, dy) {
            var m = [[m11, m12, 0], [m21, m22, 0], [dx, dy, 1]];
            setM(this, m, true);
        };
        contextPrototype.clip = function() {
        };
        contextPrototype.arcTo = function() {
        };
        contextPrototype.createPattern = function() {
            return new CanvasPattern_;
        };
        function CanvasGradient_(aType) {
            this.type_ = aType;
            this.x0_ = 0;
            this.y0_ = 0;
            this.r0_ = 0;
            this.x1_ = 0;
            this.y1_ = 0;
            this.r1_ = 0;
            this.colors_ = [];
        }
        CanvasGradient_.prototype.addColorStop = function(aOffset, aColor) {
            aColor = processStyle(aColor);
            this.colors_.push({offset: aOffset,color: aColor.color,alpha: aColor.alpha});
        };
        function CanvasPattern_() {
        }
        G_vmlCanvasManager = G_vmlCanvasManager_;
        CanvasRenderingContext2D = CanvasRenderingContext2D_;
        CanvasGradient = CanvasGradient_;
        CanvasPattern = CanvasPattern_;
    })();
}
var CHART_LINE = 1;
var CHART_AREA = 2;
var CHART_BAR = 3;
var CHART_STACKED = 4;
function Chart(el) {
    this._cont = el;
    this._yMin = null;
    this._yMax = null;
    this._xGridDensity = 0;
    this._yGridDensity = 0;
    this._flags = 0;
    this._series = new Array();
    this._labelPrecision = 0;
    this._horizontalLabels = new Array();
    this._barWidth = 10;
    this._barDistance = 2;
    this._bars = 0;
    this._showLegend = true;
    if ((typeof CanvasChartPainterFactory != 'undefined') && (window.CanvasRenderingContext2D)) {
        this._painterFactory = CanvasChartPainterFactory;
    }
    else if (typeof JsGraphicsChartPainterFactory != 'undefined') {
        this._painterFactory = JsGraphicsChartPainterFactory;
    }
    else {
        this._painterFactory = null;
    }
}
Chart.prototype.setPainterFactory = function(f) {
    this._painterFactory = f;
};
Chart.prototype.setVerticalRange = function(min, max) {
    this._yMin = min;
    this._yMax = max;
};
Chart.prototype.setLabelPrecision = function(precision) {
    this._labelPrecision = precision;
};
Chart.prototype.setShowLegend = function(b) {
    this._showLegend = b;
};
Chart.prototype.setGridDensity = function(horizontal, vertical) {
    this._xGridDensity = horizontal;
    this._yGridDensity = vertical;
};
Chart.prototype.setHorizontalLabels = function(labels) {
    this._horizontalLabels = labels;
};
Chart.prototype.setDefaultType = function(flags) {
    this._flags = flags;
};
Chart.prototype.setBarWidth = function(width) {
    this._barWidth = width;
};
Chart.prototype.setBarDistance = function(distance) {
    this._barDistance = distance;
};
Chart.prototype.add = function(label, color, values, flags) {
    var o, offset;
    if (!flags) {
        flags = this._flags;
    }
    if ((flags & CHART_BAR) == CHART_BAR) {
        offset = this._barDistance + this._bars * (this._barWidth + this._barDistance);
        this._bars++;
    }
    else {
        offset = 0;
    }
    o = new ChartSeries(label, color, values, flags, offset);
    this._series.push(o);
};
Chart.prototype.draw = function() {
    var painter, i, o, o2, len, xlen, ymin, ymax, series, type, self, bLabels;
    if (!this._painterFactory) {
        return;
    }
    series = new Array();
    stackedSeries = new Array();
    xlen = 0;
    ymin = this._yMin;
    ymax = this._yMax;
    for (i = 0; i < this._series.length; i++) {
        o = this._series[i]
        if ((o.flags & CHART_STACKED) == CHART_STACKED) {
            series.push(o);
        }
    }
    for (i = series.length - 2; i >= 0; i--) {
        o = series[i].values;
        o2 = series[i + 1].values;
        len = (o2.length > o.length) ? o2.length : o.length;
        for (jvar = 0; jvar < len; jvar++) {
            if ((o[jvar]) && (!o2[jvar])) {
                continue;
            }
            if ((!o[jvar]) && (o2[jvar])) {
                o[jvar] = o2[jvar];
            }
            else {
                o[jvar] = parseInt(o[jvar]) + parseFloat(o2[jvar]);
            }
        }
    }
    for (i = 0; i < this._series.length; i++) {
        o = this._series[i]
        if ((o.flags & CHART_STACKED) != CHART_STACKED) {
            series.push(o);
        }
    }
    for (i = 0; i < series.length; i++) {
        o = series[i]
        if (o.values.length > xlen) {
            xlen = o.values.length;
        }
        for (jvar = 0; jvar < o.values.length; jvar++) {
            if ((o.values[jvar] < ymin) || (ymin == null)) {
                ymin = o.values[jvar];
            }
            if (o.values[jvar] > ymax) {
                ymax = o.values[jvar];
            }
        }
    }
    bLabels = ((this._xGridDensity) && (this._yGridDensity) && (this._horizontalLabels.length >= this._xGridDensity));
    painter = this._painterFactory();
    painter.create(this._cont);
    painter.init(xlen, ymin, ymax, this._xGridDensity, this._yGridDensity, bLabels);
    painter.drawBackground();
    if (this._showLegend) {
        painter.drawLegend(series);
    }
    if (bLabels) {
        painter.drawVerticalAxis(this._yGridDensity, this._labelPrecision);
        painter.drawHorizontalAxis(xlen, this._horizontalLabels, this._xGridDensity, this._labelPrecision);
    }
    painter.drawChart();
    for (i = 0; i < series.length; i++) {
        type = series[i].flags & ~CHART_STACKED;
        switch (type) {
            case CHART_LINE:
                painter.drawLine(series[i].color, series[i].values);
                break;
            case CHART_AREA:
                painter.drawArea(series[i].color, series[i].values);
                break;
            case CHART_BAR:
                painter.drawBars(series[i].color, series[i].values, xlen, series[i].offset, this._barWidth);
                break;
            default:
                ;
        }
        ;
    }
    painter.drawAxis();
};
function ChartSeries(label, color, values, flags, offset) {
    this.label = label;
    this.color = color;
    this.values = values;
    this.flags = flags;
    this.offset = offset;
}
function AbstractChartPainter() {
}
;
AbstractChartPainter.prototype.calc = function(w, h, xlen, ymin, ymax, xgd, ygd) {
    this.range = ymax - ymin;
    this.xstep = w / (xlen - 1);
    this.xgrid = (xgd) ? w / (xgd - 1) : 0;
    this.ygrid = (ygd) ? h / (ygd - 1) : 0;
    this.ymin = ymin;
    this.ymax = ymax;
};
AbstractChartPainter.prototype.create = function(el) {
};
AbstractChartPainter.prototype.init = function(xlen, ymin, ymax, xgd, ygd, bLabels) {
};
AbstractChartPainter.prototype.drawLegend = function(series) {
};
AbstractChartPainter.prototype.drawVerticalAxis = function(ygd, precision) {
};
AbstractChartPainter.prototype.drawHorizontalAxis = function(xlen, labels, xgd, precision) {
};
AbstractChartPainter.prototype.drawAxis = function() {
};
AbstractChartPainter.prototype.drawBackground = function() {
};
AbstractChartPainter.prototype.drawChart = function() {
};
AbstractChartPainter.prototype.drawArea = function(color, values) {
};
AbstractChartPainter.prototype.drawLine = function(color, values) {
};
AbstractChartPainter.prototype.drawBars = function(color, values, xlen, xoffset, width) {
};
function CanvasChartPainterFactory() {
    return new CanvasChartPainter();
}
function CanvasChartPainter() {
    this.base = AbstractChartPainter;
}
;
CanvasChartPainter.prototype = new AbstractChartPainter;
CanvasChartPainter.prototype.create = function(el) {
    while (el.firstChild) {
        el.removeChild(el.lastChild);
    }
    this.el = el;
    this.w = el.clientWidth;
    this.h = el.clientHeight;
    this.canvas = document.createElement('canvas');
    this.canvas.width = this.w;
    this.canvas.height = this.h;
    this.canvas.style.width = this.w + 'px';
    this.canvas.style.height = this.h + 'px';
    el.appendChild(this.canvas);
    if ((!this.canvas.getContext) && (typeof G_vmlCanvasManager != "undefined")) {
        this.canvas = G_vmlCanvasManager.initElement(this.canvas);
    }
};
CanvasChartPainter.prototype.init = function(xlen, ymin, ymax, xgd, ygd, bLegendLabels) {
    this.ctx = this.canvas.getContext('2d');
    this.chartx = 0;
    this.chartw = this.w;
    this.charth = this.h;
    this.charty = 0;
    this.xlen = xlen;
    this.ymin = ymin;
    this.ymax = ymax;
    this.xgd = xgd;
    this.ygd = ygd;
    this.calc(this.chartw, this.charth, xlen, ymin, ymax, xgd, ygd);
};
CanvasChartPainter.prototype.drawLegend = function(series) {
    var legend, list, item, label;
    legend = document.createElement('div');
    legend.className = 'legend';
    legend.style.position = 'absolute';
    list = document.createElement('ul');
    for (i = 0; i < series.length; i++) {
        item = document.createElement('li');
        item.style.color = series[i].color;
        label = document.createElement('span');
        label.appendChild(document.createTextNode(series[i].label));
        label.style.color = 'black';
        item.appendChild(label);
        list.appendChild(item);
    }
    legend.appendChild(list);
    this.el.appendChild(legend);
    legend.style.right = '0px';
    legend.style.top = this.charty + (this.charth / 2) - (legend.offsetHeight / 2) + 'px';
    this.legend = legend;
    this.chartw = this.w - (this.legend.offsetWidth + 5);
    this.calc(this.chartw, this.charth, this.xlen, this.ymin, this.ymax, this.xgd, this.ygd);
};
CanvasChartPainter.prototype.drawVerticalAxis = function(ygd, precision) {
    var axis, item, step, y, ty, n, yoffset, value, multiplier, w, items, pos;
    multiplier = Math.pow(10, precision);
    step = this.range / (ygd - 1);
    axis = document.createElement('div');
    axis.style.position = 'absolute';
    axis.style.left = '0px';
    axis.style.top = '0px';
    axis.style.textAlign = 'right';
    this.el.appendChild(axis);
    this.ctx.fillStyle = 'black';
    w = 0;
    items = new Array();
    for (n = 0, i = this.ymax; (i > this.ymin) && (n < ygd - 1); i -= step, n++) {
        item = document.createElement('span');
        item.className = "chartText";
        value = parseInt(i * multiplier) / multiplier;
        item.appendChild(document.createTextNode(value));
        axis.appendChild(item);
        items.push([i, item]);
        if (item.offsetWidth > w) {
            w = item.offsetWidth;
        }
    }
    item = document.createElement('span');
    item.className = "chartText";
    item.appendChild(document.createTextNode(this.ymin));
    axis.appendChild(item);
    items.push([this.ymin, item]);
    if (item.offsetWidth > w) {
        w = item.offsetWidth;
    }
    axis.style.width = w + 'px';
    this.chartx = w + 5;
    this.charty = item.offsetHeight / 2;
    this.charth = this.h - ((item.offsetHeight * 1.5) + 5);
    this.chartw = this.w - (((this.legend) ? this.legend.offsetWidth : 0) + w + 10);
    this.calc(this.chartw, this.charth, this.xlen, this.ymin, this.ymax, this.xgd, this.ygd);
    n = this.range / this.charth;
    yoffset = (this.ymin / n);
    for (i = 0; i < items.length; i++) {
        item = items[i][1];
        pos = items[i][0];
        if (pos == this.ymin) {
            y = this.charty + this.charth - 1;
        }
        else {
            y = this.charty + (this.charth - (pos / n) + yoffset);
        }
        this.normalizedFillRect(this.chartx - 5, y, 5, 1);
        ty = y - (item.offsetHeight / 2);
        item.style.position = 'absolute';
        item.style.right = '0px';
        item.style.top = ty + 'px';
    }
};
CanvasChartPainter.prototype.drawHorizontalAxis = function(xlen, labels, xgd, precision) {
    var axis, item, step, x, tx, n, multiplier;
    multiplier = Math.pow(10, precision);
    n = this.chartw / (xgd - 1);
    axis = document.createElement('div');
    axis.style.position = 'absolute';
    axis.style.left = '0px';
    axis.style.top = (this.charty + this.charth + 5) + 'px';
    axis.style.width = this.w + 'px';
    this.el.appendChild(axis);
    this.ctx.fillStyle = 'black';
    for (i = 0; i < xgd; i++) {
        item = document.createElement('span');
        item.className = "chartText";
        item.appendChild(document.createTextNode(labels[i]));
        axis.appendChild(item);
        x = this.chartx + (n * i);
        tx = x - (item.offsetWidth / 2)
        item.style.position = 'absolute';
        item.style.left = tx + 'px';
        item.style.top = '0px';
        this.normalizedFillRect(x, this.charty + this.charth, 1, 5);
    }
};
CanvasChartPainter.prototype.normalizedFillRect = function(x, y, w, h) {
    var normX = (w > 0) ? x : x += w;
    var normY = (h > 0) ? y : y += h;
    this.ctx.fillRect(normX, normY, Math.abs(w), Math.abs(h));
};
CanvasChartPainter.prototype.drawAxis = function() {
    this.ctx.fillStyle = 'black';
    this.normalizedFillRect(this.chartx, this.charty, 1, this.charth - 1);
    this.normalizedFillRect(this.chartx, this.charty + this.charth - 1, this.chartw + 1, 1);
};
CanvasChartPainter.prototype.drawBackground = function() {
    this.ctx.fillStyle = 'white';
    this.normalizedFillRect(0, 0, this.w, this.h);
};
CanvasChartPainter.prototype.drawChart = function() {
    this.ctx.fillStyle = 'silver';
    if (this.xgrid) {
        for (i = this.xgrid; i < this.chartw; i += this.xgrid) {
            this.normalizedFillRect(this.chartx + i, this.charty, 1, this.charth - 1);
        }
    }
    if (this.ygrid) {
        for (i = this.charth - this.ygrid; i > 0; i -= this.ygrid) {
            this.normalizedFillRect(this.chartx + 1, this.charty + i, this.chartw, 1);
        }
    }
};
CanvasChartPainter.prototype.drawArea = function(color, values) {
    var i, len, x, y, n, yoffset;
    n = this.range / this.charth;
    yoffset = (this.ymin / n);
    len = values.length;
    if (len) {
        this.ctx.fillStyle = color;
        x = this.chartx + 1;
        this.ctx.beginPath();
        this.ctx.moveTo(x, this.charty + this.charth - 1);
        y = this.charty + this.charth - (values[0] / n) + yoffset;
        this.ctx.lineTo(x, y);
        for (i = 1; i < len; i++) {
            y = this.charty + this.charth - (values[i] / n) + yoffset;
            x += this.xstep;
            this.ctx.lineTo(x, y);
        }
        this.ctx.lineTo(x, this.charty + this.charth - 1);
        this.ctx.closePath();
        this.ctx.fill();
    }
};
CanvasChartPainter.prototype.drawLine = function(color, values) {
    var i, len, x, y, n, yoffset;
    n = this.range / this.charth;
    yoffset = (this.ymin / n);
    len = values.length;
    if (len) {
        this.ctx.lineWidth = 1;
        this.ctx.strokeStyle = color;
        x = this.chartx + 1;
        y = this.charty + this.charth - (values[0] / n) + yoffset;
        this.ctx.beginPath();
        this.ctx.moveTo(x, y);
        for (i = 1; i < len; i++) {
            y = this.charty + this.charth - (values[i] / n) + yoffset;
            x += this.xstep;
            this.ctx.lineTo(x, y);
        }
        this.ctx.stroke();
    }
};
CanvasChartPainter.prototype.drawBars = function(color, values, xlen, xoffset, width) {
    var i, len, x, y, n, yoffset;
    n = this.range / this.charth;
    yoffset = (this.ymin / n);
    len = values.length;
    if (len > xlen) {
        len = xlen;
    }
    if (len) {
        this.ctx.fillStyle = color;
        x = this.chartx + xoffset + 1;
        for (i = 0; i < len; i++) {
            y = this.charty + this.charth - (values[i] / n) + yoffset;
            this.ctx.beginPath();
            this.ctx.moveTo(x, this.charty + this.charth - 1);
            this.ctx.lineTo(x, y);
            this.ctx.lineTo(x + width, y);
            this.ctx.lineTo(x + width, this.charty + this.charth - 1);
            this.ctx.closePath();
            this.ctx.fill();
            x += this.xstep;
        }
    }
};
String.prototype.parseColor = function() {
    var color = '#';
    if (this.slice(0, 4) == 'rgb(') {
        var cols = this.slice(4, this.length - 1).split(',');
        var i = 0;
        do {
            color += parseInt(cols[i]).toColorPart()
        } while (++i < 3);
    } else {
        if (this.slice(0, 1) == '#') {
            if (this.length == 4)
                for (var i = 1; i < 4; i++)
                    color += (this.charAt(i) + this.charAt(i)).toLowerCase();
            if (this.length == 7)
                color = this.toLowerCase();
        }
    }
    return (color.length == 7 ? color : (arguments[0] || this));
};
Element.collectTextNodes = function(element) {
    return $A($(element).childNodes).collect(function(node) {
        return (node.nodeType == 3 ? node.nodeValue : (node.hasChildNodes() ? Element.collectTextNodes(node) : ''));
    }).flatten().join('');
};
Element.collectTextNodesIgnoreClass = function(element, className) {
    return $A($(element).childNodes).collect(function(node) {
        return (node.nodeType == 3 ? node.nodeValue : ((node.hasChildNodes() && !Element.hasClassName(node, className)) ? Element.collectTextNodesIgnoreClass(node, className) : ''));
    }).flatten().join('');
};
Element.setContentZoom = function(element, percent) {
    element = $(element);
    element.setStyle({fontSize: (percent / 100) + 'em'});
    if (Prototype.Browser.WebKit)
        window.scrollBy(0, 0);
    return element;
};
Element.getInlineOpacity = function(element) {
    return $(element).style.opacity || '';
};
Element.forceRerendering = function(element) {
    try {
        element = $(element);
        var n = document.createTextNode(' ');
        element.appendChild(n);
        element.removeChild(n);
    } catch (e) {
    }
};
var Effect = {_elementDoesNotExistError: {name: 'ElementDoesNotExistError',message: 'The specified DOM element does not exist, but is required for this effect to operate'},Transitions: {linear: Prototype.K,sinoidal: function(pos) {
            return (-Math.cos(pos * Math.PI) / 2) + 0.5;
        },reverse: function(pos) {
            return 1 - pos;
        },flicker: function(pos) {
            var pos = ((-Math.cos(pos * Math.PI) / 4) + 0.75) + Math.random() / 4;
            return pos > 1 ? 1 : pos;
        },wobble: function(pos) {
            return (-Math.cos(pos * Math.PI * (9 * pos)) / 2) + 0.5;
        },pulse: function(pos, pulses) {
            pulses = pulses || 5;
            return (((pos % (1 / pulses)) * pulses).round() == 0 ? ((pos * pulses * 2) - (pos * pulses * 2).floor()) : 1 - ((pos * pulses * 2) - (pos * pulses * 2).floor()));
        },spring: function(pos) {
            return 1 - (Math.cos(pos * 4.5 * Math.PI) * Math.exp(-pos * 6));
        },none: function(pos) {
            return 0;
        },full: function(pos) {
            return 1;
        }},DefaultOptions: {duration: 1.0,fps: 100,sync: false,from: 0.0,to: 1.0,delay: 0.0,queue: 'parallel'},tagifyText: function(element) {
        var tagifyStyle = 'position:relative';
        if (Prototype.Browser.IE)
            tagifyStyle += ';zoom:1';
        element = $(element);
        $A(element.childNodes).each(function(child) {
            if (child.nodeType == 3) {
                child.nodeValue.toArray().each(function(character) {
                    element.insertBefore(new Element('span', {style: tagifyStyle}).update(character == ' ' ? String.fromCharCode(160) : character), child);
                });
                Element.remove(child);
            }
        });
    },multiple: function(element, effect) {
        var elements;
        if (((typeof element == 'object') || Object.isFunction(element)) && (element.length))
            elements = element;
        else
            elements = $(element).childNodes;
        var options = Object.extend({speed: 0.1,delay: 0.0}, arguments[2] || {});
        var masterDelay = options.delay;
        $A(elements).each(function(element, index) {
            new effect(element, Object.extend(options, {delay: index * options.speed + masterDelay}));
        });
    },PAIRS: {'slide': ['SlideDown', 'SlideUp'],'blind': ['BlindDown', 'BlindUp'],'appear': ['Appear', 'Fade']},toggle: function(element, effect) {
        element = $(element);
        effect = (effect || 'appear').toLowerCase();
        var options = Object.extend({queue: {position: 'end',scope: (element.id || 'global'),limit: 1}}, arguments[2] || {});
        Effect[element.visible() ? Effect.PAIRS[effect][1] : Effect.PAIRS[effect][0]](element, options);
    }};
Effect.DefaultOptions.transition = Effect.Transitions.sinoidal;
Effect.ScopedQueue = Class.create(Enumerable, {initialize: function() {
        this.effects = [];
        this.interval = null;
    },_each: function(iterator) {
        this.effects._each(iterator);
    },add: function(effect) {
        var timestamp = new Date().getTime();
        var position = Object.isString(effect.options.queue) ? effect.options.queue : effect.options.queue.position;
        switch (position) {
            case 'front':
                this.effects.findAll(function(e) {
                    return e.state == 'idle'
                }).each(function(e) {
                    e.startOn += effect.finishOn;
                    e.finishOn += effect.finishOn;
                });
                break;
            case 'with-last':
                timestamp = this.effects.pluck('startOn').max() || timestamp;
                break;
            case 'end':
                timestamp = this.effects.pluck('finishOn').max() || timestamp;
                break;
        }
        effect.startOn += timestamp;
        effect.finishOn += timestamp;
        if (!effect.options.queue.limit || (this.effects.length < effect.options.queue.limit))
            this.effects.push(effect);
        if (!this.interval)
            this.interval = setInterval(this.loop.bind(this), 15);
    },remove: function(effect) {
        this.effects = this.effects.reject(function(e) {
            return e == effect
        });
        if (this.effects.length == 0) {
            clearInterval(this.interval);
            this.interval = null;
        }
    },loop: function() {
        var timePos = new Date().getTime();
        for (var i = 0, len = this.effects.length; i < len; i++)
            this.effects[i] && this.effects[i].loop(timePos);
    }});
Effect.Queues = {instances: $H(),get: function(queueName) {
        if (!Object.isString(queueName))
            return queueName;
        return this.instances.get(queueName) || this.instances.set(queueName, new Effect.ScopedQueue());
    }};
Effect.Queue = Effect.Queues.get('global');
Effect.Base = Class.create({position: null,start: function(options) {
        function codeForEvent(options, eventName) {
            return ((options[eventName + 'Internal'] ? 'this.options.' + eventName + 'Internal(this);' : '') +
            (options[eventName] ? 'this.options.' + eventName + '(this);' : ''));
        }
        if (options && options.transition === false)
            options.transition = Effect.Transitions.linear;
        this.options = Object.extend(Object.extend({}, Effect.DefaultOptions), options || {});
        this.currentFrame = 0;
        this.state = 'idle';
        this.startOn = this.options.delay * 1000;
        this.finishOn = this.startOn + (this.options.duration * 1000);
        this.fromToDelta = this.options.to - this.options.from;
        this.totalTime = this.finishOn - this.startOn;
        this.totalFrames = this.options.fps * this.options.duration;
        eval('this.render = function(pos){ ' + 'if (this.state=="idle"){this.state="running";' +
        codeForEvent(this.options, 'beforeSetup') +
        (this.setup ? 'this.setup();' : '') +
        codeForEvent(this.options, 'afterSetup') + '};if (this.state=="running"){' + 'pos=this.options.transition(pos)*' + this.fromToDelta + '+' + this.options.from + ';' + 'this.position=pos;' +
        codeForEvent(this.options, 'beforeUpdate') +
        (this.update ? 'this.update(pos);' : '') +
        codeForEvent(this.options, 'afterUpdate') + '}}');
        this.event('beforeStart');
        if (!this.options.sync)
            Effect.Queues.get(Object.isString(this.options.queue) ? 'global' : this.options.queue.scope).add(this);
    },loop: function(timePos) {
        if (timePos >= this.startOn) {
            if (timePos >= this.finishOn) {
                this.render(1.0);
                this.cancel();
                this.event('beforeFinish');
                if (this.finish)
                    this.finish();
                this.event('afterFinish');
                return;
            }
            var pos = (timePos - this.startOn) / this.totalTime, frame = (pos * this.totalFrames).round();
            if (frame > this.currentFrame) {
                this.render(pos);
                this.currentFrame = frame;
            }
        }
    },cancel: function() {
        if (!this.options.sync)
            Effect.Queues.get(Object.isString(this.options.queue) ? 'global' : this.options.queue.scope).remove(this);
        this.state = 'finished';
    },event: function(eventName) {
        if (this.options[eventName + 'Internal'])
            this.options[eventName + 'Internal'](this);
        if (this.options[eventName])
            this.options[eventName](this);
    },inspect: function() {
        var data = $H();
        for (property in this)
            if (!Object.isFunction(this[property]))
                data.set(property, this[property]);
        return '#<Effect:' + data.inspect() + ',options:' + $H(this.options).inspect() + '>';
    }});
Effect.Parallel = Class.create(Effect.Base, {initialize: function(effects) {
        this.effects = effects || [];
        this.start(arguments[1]);
    },update: function(position) {
        this.effects.invoke('render', position);
    },finish: function(position) {
        this.effects.each(function(effect) {
            effect.render(1.0);
            effect.cancel();
            effect.event('beforeFinish');
            if (effect.finish)
                effect.finish(position);
            effect.event('afterFinish');
        });
    }});
Effect.Tween = Class.create(Effect.Base, {initialize: function(object, from, to) {
        object = Object.isString(object) ? $(object) : object;
        var args = $A(arguments), method = args.last(), options = args.length == 5 ? args[3] : null;
        this.method = Object.isFunction(method) ? method.bind(object) : Object.isFunction(object[method]) ? object[method].bind(object) : function(value) {
            object[method] = value
        };
        this.start(Object.extend({from: from,to: to}, options || {}));
    },update: function(position) {
        this.method(position);
    }});
Effect.Event = Class.create(Effect.Base, {initialize: function() {
        this.start(Object.extend({duration: 0}, arguments[0] || {}));
    },update: Prototype.emptyFunction});
Effect.Opacity = Class.create(Effect.Base, {initialize: function(element) {
        this.element = $(element);
        if (!this.element)
            throw (Effect._elementDoesNotExistError);
        if (Prototype.Browser.IE && (!this.element.currentStyle.hasLayout))
            this.element.setStyle({zoom: 1});
        var options = Object.extend({from: this.element.getOpacity() || 0.0,to: 1.0}, arguments[1] || {});
        this.start(options);
    },update: function(position) {
        this.element.setOpacity(position);
    }});
Effect.Move = Class.create(Effect.Base, {initialize: function(element) {
        this.element = $(element);
        if (!this.element)
            throw (Effect._elementDoesNotExistError);
        var options = Object.extend({x: 0,y: 0,mode: 'relative'}, arguments[1] || {});
        this.start(options);
    },setup: function() {
        this.element.makePositioned();
        this.originalLeft = parseFloat(this.element.getStyle('left') || '0');
        this.originalTop = parseFloat(this.element.getStyle('top') || '0');
        if (this.options.mode == 'absolute') {
            this.options.x = this.options.x - this.originalLeft;
            this.options.y = this.options.y - this.originalTop;
        }
    },update: function(position) {
        this.element.setStyle({left: (this.options.x * position + this.originalLeft).round() + 'px',top: (this.options.y * position + this.originalTop).round() + 'px'});
    }});
Effect.MoveBy = function(element, toTop, toLeft) {
    return new Effect.Move(element, Object.extend({x: toLeft,y: toTop}, arguments[3] || {}));
};
Effect.Scale = Class.create(Effect.Base, {initialize: function(element, percent) {
        this.element = $(element);
        if (!this.element)
            throw (Effect._elementDoesNotExistError);
        var options = Object.extend({scaleX: true,scaleY: true,scaleContent: true,scaleFromCenter: false,scaleMode: 'box',scaleFrom: 100.0,scaleTo: percent}, arguments[2] || {});
        this.start(options);
    },setup: function() {
        this.restoreAfterFinish = this.options.restoreAfterFinish || false;
        this.elementPositioning = this.element.getStyle('position');
        this.originalStyle = {};
        ['top', 'left', 'width', 'height', 'fontSize'].each(function(k) {
            this.originalStyle[k] = this.element.style[k];
        }.bind(this));
        this.originalTop = this.element.offsetTop;
        this.originalLeft = this.element.offsetLeft;
        var fontSize = this.element.getStyle('font-size') || '100%';
        ['em', 'px', '%', 'pt'].each(function(fontSizeType) {
            if (fontSize.indexOf(fontSizeType) > 0) {
                this.fontSize = parseFloat(fontSize);
                this.fontSizeType = fontSizeType;
            }
        }.bind(this));
        this.factor = (this.options.scaleTo - this.options.scaleFrom) / 100;
        this.dims = null;
        if (this.options.scaleMode == 'box')
            this.dims = [this.element.offsetHeight, this.element.offsetWidth];
        if (/^content/.test(this.options.scaleMode))
            this.dims = [this.element.scrollHeight, this.element.scrollWidth];
        if (!this.dims)
            this.dims = [this.options.scaleMode.originalHeight, this.options.scaleMode.originalWidth];
    },update: function(position) {
        var currentScale = (this.options.scaleFrom / 100.0) + (this.factor * position);
        if (this.options.scaleContent && this.fontSize)
            this.element.setStyle({fontSize: this.fontSize * currentScale + this.fontSizeType});
        this.setDimensions(this.dims[0] * currentScale, this.dims[1] * currentScale);
    },finish: function(position) {
        if (this.restoreAfterFinish)
            this.element.setStyle(this.originalStyle);
    },setDimensions: function(height, width) {
        var d = {};
        if (this.options.scaleX)
            d.width = width.round() + 'px';
        if (this.options.scaleY)
            d.height = height.round() + 'px';
        if (this.options.scaleFromCenter) {
            var topd = (height - this.dims[0]) / 2;
            var leftd = (width - this.dims[1]) / 2;
            if (this.elementPositioning == 'absolute') {
                if (this.options.scaleY)
                    d.top = this.originalTop - topd + 'px';
                if (this.options.scaleX)
                    d.left = this.originalLeft - leftd + 'px';
            } else {
                if (this.options.scaleY)
                    d.top = -topd + 'px';
                if (this.options.scaleX)
                    d.left = -leftd + 'px';
            }
        }
        this.element.setStyle(d);
    }});
Effect.Highlight = Class.create(Effect.Base, {initialize: function(element) {
        this.element = $(element);
        if (!this.element)
            throw (Effect._elementDoesNotExistError);
        var options = Object.extend({startcolor: '#ffff99'}, arguments[1] || {});
        this.start(options);
    },setup: function() {
        if (this.element.getStyle('display') == 'none') {
            this.cancel();
            return;
        }
        this.oldStyle = {};
        if (!this.options.keepBackgroundImage) {
            this.oldStyle.backgroundImage = this.element.getStyle('background-image');
            this.element.setStyle({backgroundImage: 'none'});
        }
        if (!this.options.endcolor)
            this.options.endcolor = this.element.getStyle('background-color').parseColor('#ffffff');
        if (!this.options.restorecolor)
            this.options.restorecolor = this.element.getStyle('background-color');
        this._base = $R(0, 2).map(function(i) {
            return parseInt(this.options.startcolor.slice(i * 2 + 1, i * 2 + 3), 16)
        }.bind(this));
        this._delta = $R(0, 2).map(function(i) {
            return parseInt(this.options.endcolor.slice(i * 2 + 1, i * 2 + 3), 16) - this._base[i]
        }.bind(this));
    },update: function(position) {
        this.element.setStyle({backgroundColor: $R(0, 2).inject('#', function(m, v, i) {
                return m + ((this._base[i] + (this._delta[i] * position)).round().toColorPart());
            }.bind(this))});
    },finish: function() {
        this.element.setStyle(Object.extend(this.oldStyle, {backgroundColor: this.options.restorecolor}));
    }});
Effect.ScrollTo = function(element) {
    var options = arguments[1] || {}, scrollOffsets = document.viewport.getScrollOffsets(), elementOffsets = $(element).cumulativeOffset(), max = (window.height || document.body.scrollHeight) - document.viewport.getHeight();
    if (options.offset)
        elementOffsets[1] += options.offset;
    return new Effect.Tween(null, scrollOffsets.top, elementOffsets[1] > max ? max : elementOffsets[1], options, function(p) {
        scrollTo(scrollOffsets.left, p.round())
    });
};
Effect.Fade = function(element) {
    element = $(element);
    var oldOpacity = element.getInlineOpacity();
    var options = Object.extend({from: element.getOpacity() || 1.0,to: 0.0,afterFinishInternal: function(effect) {
            if (effect.options.to != 0)
                return;
            effect.element.hide().setStyle({opacity: oldOpacity});
        }}, arguments[1] || {});
    return new Effect.Opacity(element, options);
};
Effect.Appear = function(element) {
    element = $(element);
    var options = Object.extend({from: (element.getStyle('display') == 'none' ? 0.0 : element.getOpacity() || 0.0),to: 1.0,afterFinishInternal: function(effect) {
            effect.element.forceRerendering();
        },beforeSetup: function(effect) {
            effect.element.setOpacity(effect.options.from).show();
        }}, arguments[1] || {});
    return new Effect.Opacity(element, options);
};
Effect.Puff = function(element) {
    element = $(element);
    var oldStyle = {opacity: element.getInlineOpacity(),position: element.getStyle('position'),top: element.style.top,left: element.style.left,width: element.style.width,height: element.style.height};
    return new Effect.Parallel([new Effect.Scale(element, 200, {sync: true,scaleFromCenter: true,scaleContent: true,restoreAfterFinish: true}), new Effect.Opacity(element, {sync: true,to: 0.0})], Object.extend({duration: 1.0,beforeSetupInternal: function(effect) {
            Position.absolutize(effect.effects[0].element)
        },afterFinishInternal: function(effect) {
            effect.effects[0].element.hide().setStyle(oldStyle);
        }}, arguments[1] || {}));
};
Effect.BlindUp = function(element) {
    element = $(element);
    element.makeClipping();
    return new Effect.Scale(element, 0, Object.extend({scaleContent: false,scaleX: false,restoreAfterFinish: true,afterFinishInternal: function(effect) {
            effect.element.hide().undoClipping();
        }}, arguments[1] || {}));
};
Effect.BlindDown = function(element) {
    element = $(element);
    var elementDimensions = element.getDimensions();
    return new Effect.Scale(element, 100, Object.extend({scaleContent: false,scaleX: false,scaleFrom: 0,scaleMode: {originalHeight: elementDimensions.height,originalWidth: elementDimensions.width},restoreAfterFinish: true,afterSetup: function(effect) {
            effect.element.makeClipping().setStyle({height: '0px'}).show();
        },afterFinishInternal: function(effect) {
            effect.element.undoClipping();
        }}, arguments[1] || {}));
};
Effect.SwitchOff = function(element) {
    element = $(element);
    var oldOpacity = element.getInlineOpacity();
    return new Effect.Appear(element, Object.extend({duration: 0.4,from: 0,transition: Effect.Transitions.flicker,afterFinishInternal: function(effect) {
            new Effect.Scale(effect.element, 1, {duration: 0.3,scaleFromCenter: true,scaleX: false,scaleContent: false,restoreAfterFinish: true,beforeSetup: function(effect) {
                    effect.element.makePositioned().makeClipping();
                },afterFinishInternal: function(effect) {
                    effect.element.hide().undoClipping().undoPositioned().setStyle({opacity: oldOpacity});
                }})
        }}, arguments[1] || {}));
};
Effect.DropOut = function(element) {
    element = $(element);
    var oldStyle = {top: element.getStyle('top'),left: element.getStyle('left'),opacity: element.getInlineOpacity()};
    return new Effect.Parallel([new Effect.Move(element, {x: 0,y: 100,sync: true}), new Effect.Opacity(element, {sync: true,to: 0.0})], Object.extend({duration: 0.5,beforeSetup: function(effect) {
            effect.effects[0].element.makePositioned();
        },afterFinishInternal: function(effect) {
            effect.effects[0].element.hide().undoPositioned().setStyle(oldStyle);
        }}, arguments[1] || {}));
};
Effect.Shake = function(element) {
    element = $(element);
    var options = Object.extend({distance: 20,duration: 0.5}, arguments[1] || {});
    var distance = parseFloat(options.distance);
    var split = parseFloat(options.duration) / 10.0;
    var oldStyle = {top: element.getStyle('top'),left: element.getStyle('left')};
    return new Effect.Move(element, {x: distance,y: 0,duration: split,afterFinishInternal: function(effect) {
            new Effect.Move(effect.element, {x: -distance * 2,y: 0,duration: split * 2,afterFinishInternal: function(effect) {
                    new Effect.Move(effect.element, {x: distance * 2,y: 0,duration: split * 2,afterFinishInternal: function(effect) {
                            new Effect.Move(effect.element, {x: -distance * 2,y: 0,duration: split * 2,afterFinishInternal: function(effect) {
                                    new Effect.Move(effect.element, {x: distance * 2,y: 0,duration: split * 2,afterFinishInternal: function(effect) {
                                            new Effect.Move(effect.element, {x: -distance,y: 0,duration: split,afterFinishInternal: function(effect) {
                                                    effect.element.undoPositioned().setStyle(oldStyle);
                                                }})
                                        }})
                                }})
                        }})
                }})
        }});
};
Effect.SlideDown = function(element) {
    element = $(element).cleanWhitespace();
    var oldInnerBottom = element.down().getStyle('bottom');
    var elementDimensions = element.getDimensions();
    return new Effect.Scale(element, 100, Object.extend({scaleContent: false,scaleX: false,scaleFrom: window.opera ? 0 : 1,scaleMode: {originalHeight: elementDimensions.height,originalWidth: elementDimensions.width},restoreAfterFinish: true,afterSetup: function(effect) {
            effect.element.makePositioned();
            effect.element.down().makePositioned();
            if (window.opera)
                effect.element.setStyle({top: ''});
            effect.element.makeClipping().setStyle({height: '0px'}).show();
        },afterUpdateInternal: function(effect) {
            effect.element.down().setStyle({bottom: (effect.dims[0] - effect.element.clientHeight) + 'px'});
        },afterFinishInternal: function(effect) {
            effect.element.undoClipping().undoPositioned();
            effect.element.down().undoPositioned().setStyle({bottom: oldInnerBottom});
        }}, arguments[1] || {}));
};
Effect.SlideUp = function(element) {
    element = $(element).cleanWhitespace();
    var oldInnerBottom = element.down().getStyle('bottom');
    var elementDimensions = element.getDimensions();
    return new Effect.Scale(element, window.opera ? 0 : 1, Object.extend({scaleContent: false,scaleX: false,scaleMode: 'box',scaleFrom: 100,scaleMode: {originalHeight: elementDimensions.height,originalWidth: elementDimensions.width},restoreAfterFinish: true,afterSetup: function(effect) {
            effect.element.makePositioned();
            effect.element.down().makePositioned();
            if (window.opera)
                effect.element.setStyle({top: ''});
            effect.element.makeClipping().show();
        },afterUpdateInternal: function(effect) {
            effect.element.down().setStyle({bottom: (effect.dims[0] - effect.element.clientHeight) + 'px'});
        },afterFinishInternal: function(effect) {
            effect.element.hide().undoClipping().undoPositioned();
            effect.element.down().undoPositioned().setStyle({bottom: oldInnerBottom});
        }}, arguments[1] || {}));
};
Effect.Squish = function(element) {
    return new Effect.Scale(element, window.opera ? 1 : 0, {restoreAfterFinish: true,beforeSetup: function(effect) {
            effect.element.makeClipping();
        },afterFinishInternal: function(effect) {
            effect.element.hide().undoClipping();
        }});
};
Effect.Grow = function(element) {
    element = $(element);
    var options = Object.extend({direction: 'center',moveTransition: Effect.Transitions.sinoidal,scaleTransition: Effect.Transitions.sinoidal,opacityTransition: Effect.Transitions.full}, arguments[1] || {});
    var oldStyle = {top: element.style.top,left: element.style.left,height: element.style.height,width: element.style.width,opacity: element.getInlineOpacity()};
    var dims = element.getDimensions();
    var initialMoveX, initialMoveY;
    var moveX, moveY;
    switch (options.direction) {
        case 'top-left':
            initialMoveX = initialMoveY = moveX = moveY = 0;
            break;
        case 'top-right':
            initialMoveX = dims.width;
            initialMoveY = moveY = 0;
            moveX = -dims.width;
            break;
        case 'bottom-left':
            initialMoveX = moveX = 0;
            initialMoveY = dims.height;
            moveY = -dims.height;
            break;
        case 'bottom-right':
            initialMoveX = dims.width;
            initialMoveY = dims.height;
            moveX = -dims.width;
            moveY = -dims.height;
            break;
        case 'center':
            initialMoveX = dims.width / 2;
            initialMoveY = dims.height / 2;
            moveX = -dims.width / 2;
            moveY = -dims.height / 2;
            break;
    }
    return new Effect.Move(element, {x: initialMoveX,y: initialMoveY,duration: 0.01,beforeSetup: function(effect) {
            effect.element.hide().makeClipping().makePositioned();
        },afterFinishInternal: function(effect) {
            new Effect.Parallel([new Effect.Opacity(effect.element, {sync: true,to: 1.0,from: 0.0,transition: options.opacityTransition}), new Effect.Move(effect.element, {x: moveX,y: moveY,sync: true,transition: options.moveTransition}), new Effect.Scale(effect.element, 100, {scaleMode: {originalHeight: dims.height,originalWidth: dims.width},sync: true,scaleFrom: window.opera ? 1 : 0,transition: options.scaleTransition,restoreAfterFinish: true})], Object.extend({beforeSetup: function(effect) {
                    effect.effects[0].element.setStyle({height: '0px'}).show();
                },afterFinishInternal: function(effect) {
                    effect.effects[0].element.undoClipping().undoPositioned().setStyle(oldStyle);
                }}, options))
        }});
};
Effect.Shrink = function(element) {
    element = $(element);
    var options = Object.extend({direction: 'center',moveTransition: Effect.Transitions.sinoidal,scaleTransition: Effect.Transitions.sinoidal,opacityTransition: Effect.Transitions.none}, arguments[1] || {});
    var oldStyle = {top: element.style.top,left: element.style.left,height: element.style.height,width: element.style.width,opacity: element.getInlineOpacity()};
    var dims = element.getDimensions();
    var moveX, moveY;
    switch (options.direction) {
        case 'top-left':
            moveX = moveY = 0;
            break;
        case 'top-right':
            moveX = dims.width;
            moveY = 0;
            break;
        case 'bottom-left':
            moveX = 0;
            moveY = dims.height;
            break;
        case 'bottom-right':
            moveX = dims.width;
            moveY = dims.height;
            break;
        case 'center':
            moveX = dims.width / 2;
            moveY = dims.height / 2;
            break;
    }
    return new Effect.Parallel([new Effect.Opacity(element, {sync: true,to: 0.0,from: 1.0,transition: options.opacityTransition}), new Effect.Scale(element, window.opera ? 1 : 0, {sync: true,transition: options.scaleTransition,restoreAfterFinish: true}), new Effect.Move(element, {x: moveX,y: moveY,sync: true,transition: options.moveTransition})], Object.extend({beforeStartInternal: function(effect) {
            effect.effects[0].element.makePositioned().makeClipping();
        },afterFinishInternal: function(effect) {
            effect.effects[0].element.hide().undoClipping().undoPositioned().setStyle(oldStyle);
        }}, options));
};
Effect.Pulsate = function(element) {
    element = $(element);
    var options = arguments[1] || {};
    var oldOpacity = element.getInlineOpacity();
    var transition = options.transition || Effect.Transitions.sinoidal;
    var reverser = function(pos) {
        return transition(1 - Effect.Transitions.pulse(pos, options.pulses))
    };
    reverser.bind(transition);
    return new Effect.Opacity(element, Object.extend(Object.extend({duration: 2.0,from: 0,afterFinishInternal: function(effect) {
            effect.element.setStyle({opacity: oldOpacity});
        }}, options), {transition: reverser}));
};
Effect.Fold = function(element) {
    element = $(element);
    var oldStyle = {top: element.style.top,left: element.style.left,width: element.style.width,height: element.style.height};
    element.makeClipping();
    return new Effect.Scale(element, 5, Object.extend({scaleContent: false,scaleX: false,afterFinishInternal: function(effect) {
            new Effect.Scale(element, 1, {scaleContent: false,scaleY: false,afterFinishInternal: function(effect) {
                    effect.element.hide().undoClipping().setStyle(oldStyle);
                }});
        }}, arguments[1] || {}));
};
Effect.Morph = Class.create(Effect.Base, {initialize: function(element) {
        this.element = $(element);
        if (!this.element)
            throw (Effect._elementDoesNotExistError);
        var options = Object.extend({style: {}}, arguments[1] || {});
        if (!Object.isString(options.style))
            this.style = $H(options.style);
        else {
            if (options.style.include(':'))
                this.style = options.style.parseStyle();
            else {
                this.element.addClassName(options.style);
                this.style = $H(this.element.getStyles());
                this.element.removeClassName(options.style);
                var css = this.element.getStyles();
                this.style = this.style.reject(function(style) {
                    return style.value == css[style.key];
                });
                options.afterFinishInternal = function(effect) {
                    effect.element.addClassName(effect.options.style);
                    effect.transforms.each(function(transform) {
                        effect.element.style[transform.style] = '';
                    });
                }
            }
        }
        this.start(options);
    },setup: function() {
        function parseColor(color) {
            if (!color || ['rgba(0, 0, 0, 0)', 'transparent'].include(color))
                color = '#ffffff';
            color = color.parseColor();
            return $R(0, 2).map(function(i) {
                return parseInt(color.slice(i * 2 + 1, i * 2 + 3), 16)
            });
        }
        this.transforms = this.style.map(function(pair) {
            var property = pair[0], value = pair[1], unit = null;
            if (value.parseColor('#zzzzzz') != '#zzzzzz') {
                value = value.parseColor();
                unit = 'color';
            } else if (property == 'opacity') {
                value = parseFloat(value);
                if (Prototype.Browser.IE && (!this.element.currentStyle.hasLayout))
                    this.element.setStyle({zoom: 1});
            } else if (Element.CSS_LENGTH.test(value)) {
                var components = value.match(/^([\+\-]?[0-9\.]+)(.*)$/);
                value = parseFloat(components[1]);
                unit = (components.length == 3) ? components[2] : null;
            }
            var originalValue = this.element.getStyle(property);
            return {style: property.camelize(),originalValue: unit == 'color' ? parseColor(originalValue) : parseFloat(originalValue || 0),targetValue: unit == 'color' ? parseColor(value) : value,unit: unit};
        }.bind(this)).reject(function(transform) {
            return ((transform.originalValue == transform.targetValue) || (transform.unit != 'color' && (isNaN(transform.originalValue) || isNaN(transform.targetValue))))
        });
    },update: function(position) {
        var style = {}, transform, i = this.transforms.length;
        while (i--)
            style[(transform = this.transforms[i]).style] = transform.unit == 'color' ? '#' +
            (Math.round(transform.originalValue[0] +
            (transform.targetValue[0] - transform.originalValue[0]) * position)).toColorPart() +
            (Math.round(transform.originalValue[1] +
            (transform.targetValue[1] - transform.originalValue[1]) * position)).toColorPart() +
            (Math.round(transform.originalValue[2] +
            (transform.targetValue[2] - transform.originalValue[2]) * position)).toColorPart() : (transform.originalValue +
            (transform.targetValue - transform.originalValue) * position).toFixed(3) +
            (transform.unit === null ? '' : transform.unit);
        this.element.setStyle(style, true);
    }});
Effect.Transform = Class.create({initialize: function(tracks) {
        this.tracks = [];
        this.options = arguments[1] || {};
        this.addTracks(tracks);
    },addTracks: function(tracks) {
        tracks.each(function(track) {
            track = $H(track);
            var data = track.values().first();
            this.tracks.push($H({ids: track.keys().first(),effect: Effect.Morph,options: {style: data}}));
        }.bind(this));
        return this;
    },play: function() {
        return new Effect.Parallel(this.tracks.map(function(track) {
            var ids = track.get('ids'), effect = track.get('effect'), options = track.get('options');
            var elements = [$(ids) || $$(ids)].flatten();
            return elements.map(function(e) {
                return new effect(e, Object.extend({sync: true}, options))
            });
        }).flatten(), this.options);
    }});
Element.CSS_PROPERTIES = $w('backgroundColor backgroundPosition borderBottomColor borderBottomStyle ' + 'borderBottomWidth borderLeftColor borderLeftStyle borderLeftWidth ' + 'borderRightColor borderRightStyle borderRightWidth borderSpacing ' + 'borderTopColor borderTopStyle borderTopWidth bottom clip color ' + 'fontSize fontWeight height left letterSpacing lineHeight ' + 'marginBottom marginLeft marginRight marginTop markerOffset maxHeight ' + 'maxWidth minHeight minWidth opacity outlineColor outlineOffset ' + 'outlineWidth paddingBottom paddingLeft paddingRight paddingTop ' + 'right textIndent top width wordSpacing zIndex');
Element.CSS_LENGTH = /^(([\+\-]?[0-9\.]+)(em|ex|px|in|cm|mm|pt|pc|\%))|0$/;
String.__parseStyleElement = document.createElement('div');
String.prototype.parseStyle = function() {
    var style, styleRules = $H();
    if (Prototype.Browser.WebKit)
        style = new Element('div', {style: this}).style;
    else {
        String.__parseStyleElement.innerHTML = '<div style="' + this + '"></div>';
        style = String.__parseStyleElement.childNodes[0].style;
    }
    Element.CSS_PROPERTIES.each(function(property) {
        if (style[property])
            styleRules.set(property, style[property]);
    });
    if (Prototype.Browser.IE && this.include('opacity'))
        styleRules.set('opacity', this.match(/opacity:\s*((?:0|1)?(?:\.\d*)?)/)[1]);
    return styleRules;
};
if (document.defaultView && document.defaultView.getComputedStyle) {
    Element.getStyles = function(element) {
        var css = document.defaultView.getComputedStyle($(element), null);
        return Element.CSS_PROPERTIES.inject({}, function(styles, property) {
            styles[property] = css[property];
            return styles;
        });
    };
} else {
    Element.getStyles = function(element) {
        element = $(element);
        var css = element.currentStyle, styles;
        styles = Element.CSS_PROPERTIES.inject({}, function(hash, property) {
            hash.set(property, css[property]);
            return hash;
        });
        if (!styles.opacity)
            styles.set('opacity', element.getOpacity());
        return styles;
    };
}
;
Effect.Methods = {morph: function(element, style) {
        element = $(element);
        new Effect.Morph(element, Object.extend({style: style}, arguments[2] || {}));
        return element;
    },visualEffect: function(element, effect, options) {
        element = $(element)
        var s = effect.dasherize().camelize(), klass = s.charAt(0).toUpperCase() + s.substring(1);
        new Effect[klass](element, options);
        return element;
    },highlight: function(element, options) {
        element = $(element);
        new Effect.Highlight(element, options);
        return element;
    }};
$w('fade appear grow shrink fold blindUp blindDown slideUp slideDown ' + 'pulsate shake puff squish switchOff dropOut').each(function(effect) {
    Effect.Methods[effect] = function(element, options) {
        element = $(element);
        Effect[effect.charAt(0).toUpperCase() + effect.substring(1)](element, options);
        return element;
    }
});
$w('getInlineOpacity forceRerendering setContentZoom collectTextNodes collectTextNodesIgnoreClass getStyles').each(function(f) {
    Effect.Methods[f] = Element[f];
});
Element.addMethods(Effect.Methods);
if (typeof Effect == 'undefined')
    throw ("controls.js requires including script.aculo.us' effects.js library");
var Autocompleter = {}
Autocompleter.Base = Class.create({baseInitialize: function(element, update, options) {
        element = $(element)
        this.element = element;
        this.update = $(update);
        this.hasFocus = false;
        this.changed = false;
        this.active = false;
        this.index = 0;
        this.entryCount = 0;
        this.oldElementValue = this.element.value;
        if (this.setOptions)
            this.setOptions(options);
        else
            this.options = options || {};
        this.options.paramName = this.options.paramName || this.element.name;
        this.options.tokens = this.options.tokens || [];
        this.options.frequency = this.options.frequency || 0.4;
        this.options.minChars = this.options.minChars || 1;
        this.options.onShow = this.options.onShow || function(element, update) {
            if (!update.style.position || update.style.position == 'absolute') {
                update.style.position = 'absolute';
                Position.clone(element, update, {setHeight: false,offsetTop: element.offsetHeight});
            }
            Effect.Appear(update, {duration: 0.15});
        };
        this.options.onHide = this.options.onHide || function(element, update) {
            new Effect.Fade(update, {duration: 0.15})
        };
        if (typeof (this.options.tokens) == 'string')
            this.options.tokens = new Array(this.options.tokens);
        if (!this.options.tokens.include('\n'))
            this.options.tokens.push('\n');
        this.observer = null;
        this.element.setAttribute('autocomplete', 'off');
        Element.hide(this.update);
        Event.observe(this.element, 'blur', this.onBlur.bindAsEventListener(this));
        Event.observe(this.element, 'keypress', this.onKeyPress.bindAsEventListener(this));
    },show: function() {
        if (Element.getStyle(this.update, 'display') == 'none')
            this.options.onShow(this.element, this.update);
        if (!this.iefix && (Prototype.Browser.IE) && (Element.getStyle(this.update, 'position') == 'absolute')) {
            new Insertion.After(this.update, '<iframe id="' + this.update.id + '_iefix" ' + 'style="display:none;position:absolute;filter:progid:DXImageTransform.Microsoft.Alpha(opacity=0);" ' + 'src="javascript:false;" frameborder="0" scrolling="no"></iframe>');
            this.iefix = $(this.update.id + '_iefix');
        }
        if (this.iefix)
            setTimeout(this.fixIEOverlapping.bind(this), 50);
    },fixIEOverlapping: function() {
        Position.clone(this.update, this.iefix, {setTop: (!this.update.style.height)});
        this.iefix.style.zIndex = 1;
        this.update.style.zIndex = 2;
        Element.show(this.iefix);
    },hide: function() {
        this.stopIndicator();
        if (Element.getStyle(this.update, 'display') != 'none')
            this.options.onHide(this.element, this.update);
        if (this.iefix)
            Element.hide(this.iefix);
    },startIndicator: function() {
        if (this.options.indicator)
            Element.show(this.options.indicator);
    },stopIndicator: function() {
        if (this.options.indicator)
            Element.hide(this.options.indicator);
    },onKeyPress: function(event) {
        if (this.active)
            switch (event.keyCode) {
                case Event.KEY_TAB:
                case Event.KEY_RETURN:
                    this.selectEntry();
                    Event.stop(event);
                case Event.KEY_ESC:
                    this.hide();
                    this.active = false;
                    Event.stop(event);
                    return;
                case Event.KEY_LEFT:
                case Event.KEY_RIGHT:
                    return;
                case Event.KEY_UP:
                    this.markPrevious();
                    this.render();
                    if (Prototype.Browser.WebKit)
                        Event.stop(event);
                    return;
                case Event.KEY_DOWN:
                    this.markNext();
                    this.render();
                    if (Prototype.Browser.WebKit)
                        Event.stop(event);
                    return;
            }
        else
        if (event.keyCode == Event.KEY_TAB || event.keyCode == Event.KEY_RETURN || (Prototype.Browser.WebKit > 0 && event.keyCode == 0))
            return;
        this.changed = true;
        this.hasFocus = true;
        if (this.observer)
            clearTimeout(this.observer);
        this.observer = setTimeout(this.onObserverEvent.bind(this), this.options.frequency * 1000);
    },activate: function() {
        this.changed = false;
        this.hasFocus = true;
        this.getUpdatedChoices();
    },onHover: function(event) {
        var element = Event.findElement(event, 'LI');
        if (this.index != element.autocompleteIndex)
        {
            this.index = element.autocompleteIndex;
            this.render();
        }
        Event.stop(event);
    },onClick: function(event) {
        var element = Event.findElement(event, 'LI');
        this.index = element.autocompleteIndex;
        this.selectEntry();
        this.hide();
    },onBlur: function(event) {
        setTimeout(this.hide.bind(this), 250);
        this.hasFocus = false;
        this.active = false;
    },render: function() {
        if (this.entryCount > 0) {
            for (var i = 0; i < this.entryCount; i++)
                this.index == i ? Element.addClassName(this.getEntry(i), "selected") : Element.removeClassName(this.getEntry(i), "selected");
            if (this.hasFocus) {
                this.show();
                this.active = true;
            }
        } else {
            this.active = false;
            this.hide();
        }
    },markPrevious: function() {
        if (this.index > 0)
            this.index--
        else
            this.index = this.entryCount - 1;
        this.getEntry(this.index).scrollIntoView(true);
    },markNext: function() {
        if (this.index < this.entryCount - 1)
            this.index++
        else
            this.index = 0;
        this.getEntry(this.index).scrollIntoView(false);
    },getEntry: function(index) {
        return this.update.firstChild.childNodes[index];
    },getCurrentEntry: function() {
        return this.getEntry(this.index);
    },selectEntry: function() {
        this.active = false;
        this.updateElement(this.getCurrentEntry());
    },updateElement: function(selectedElement) {
        if (this.options.updateElement) {
            this.options.updateElement(selectedElement);
            return;
        }
        var value = '';
        if (this.options.select) {
            var nodes = $(selectedElement).select('.' + this.options.select) || [];
            if (nodes.length > 0)
                value = Element.collectTextNodes(nodes[0], this.options.select);
        } else
            value = Element.collectTextNodesIgnoreClass(selectedElement, 'informal');
        var bounds = this.getTokenBounds();
        if (bounds[0] != -1) {
            var newValue = this.element.value.substr(0, bounds[0]);
            var whitespace = this.element.value.substr(bounds[0]).match(/^\s+/);
            if (whitespace)
                newValue += whitespace[0];
            this.element.value = newValue + value + this.element.value.substr(bounds[1]);
        } else {
            this.element.value = value;
        }
        this.oldElementValue = this.element.value;
        this.element.focus();
        if (this.options.afterUpdateElement)
            this.options.afterUpdateElement(this.element, selectedElement);
    },updateChoices: function(choices) {
        if (!this.changed && this.hasFocus) {
            this.update.innerHTML = choices;
            Element.cleanWhitespace(this.update);
            Element.cleanWhitespace(this.update.down());
            if (this.update.firstChild && this.update.down().childNodes) {
                this.entryCount = this.update.down().childNodes.length;
                for (var i = 0; i < this.entryCount; i++) {
                    var entry = this.getEntry(i);
                    entry.autocompleteIndex = i;
                    this.addObservers(entry);
                }
            } else {
                this.entryCount = 0;
            }
            this.stopIndicator();
            this.index = 0;
            if (this.entryCount == 1 && this.options.autoSelect) {
                this.selectEntry();
                this.hide();
            } else {
                this.render();
            }
        }
    },addObservers: function(element) {
        Event.observe(element, "mouseover", this.onHover.bindAsEventListener(this));
        Event.observe(element, "click", this.onClick.bindAsEventListener(this));
    },onObserverEvent: function() {
        this.changed = false;
        this.tokenBounds = null;
        if (this.getToken().length >= this.options.minChars) {
            this.getUpdatedChoices();
        } else {
            this.active = false;
            this.hide();
        }
        this.oldElementValue = this.element.value;
    },getToken: function() {
        var bounds = this.getTokenBounds();
        return this.element.value.substring(bounds[0], bounds[1]).strip();
    },getTokenBounds: function() {
        if (null != this.tokenBounds)
            return this.tokenBounds;
        var value = this.element.value;
        if (value.strip().empty())
            return [-1, 0];
        var diff = arguments.callee.getFirstDifferencePos(value, this.oldElementValue);
        var offset = (diff == this.oldElementValue.length ? 1 : 0);
        var prevTokenPos = -1, nextTokenPos = value.length;
        var tp;
        for (var index = 0, l = this.options.tokens.length; index < l; ++index) {
            tp = value.lastIndexOf(this.options.tokens[index], diff + offset - 1);
            if (tp > prevTokenPos)
                prevTokenPos = tp;
            tp = value.indexOf(this.options.tokens[index], diff + offset);
            if (-1 != tp && tp < nextTokenPos)
                nextTokenPos = tp;
        }
        return (this.tokenBounds = [prevTokenPos + 1, nextTokenPos]);
    }});
Autocompleter.Base.prototype.getTokenBounds.getFirstDifferencePos = function(newS, oldS) {
    var boundary = Math.min(newS.length, oldS.length);
    for (var index = 0; index < boundary; ++index)
        if (newS[index] != oldS[index])
            return index;
    return boundary;
};
Ajax.Autocompleter = Class.create(Autocompleter.Base, {initialize: function(element, update, url, options) {
        this.baseInitialize(element, update, options);
        this.options.asynchronous = true;
        this.options.onComplete = this.onComplete.bind(this);
        this.options.defaultParams = this.options.parameters || null;
        this.url = url;
    },getUpdatedChoices: function() {
        this.startIndicator();
        var entry = encodeURIComponent(this.options.paramName) + '=' +
        encodeURIComponent(this.getToken());
        this.options.parameters = this.options.callback ? this.options.callback(this.element, entry) : entry;
        if (this.options.defaultParams)
            this.options.parameters += '&' + this.options.defaultParams;
        new Ajax.Request(this.url, this.options);
    },onComplete: function(request) {
        this.updateChoices(request.responseText);
    }});
Autocompleter.Local = Class.create(Autocompleter.Base, {initialize: function(element, update, array, options) {
        this.baseInitialize(element, update, options);
        this.options.array = array;
    },getUpdatedChoices: function() {
        this.updateChoices(this.options.selector(this));
    },setOptions: function(options) {
        this.options = Object.extend({choices: 10,partialSearch: true,partialChars: 2,ignoreCase: true,fullSearch: false,selector: function(instance) {
                var ret = [];
                var partial = [];
                var entry = instance.getToken();
                var count = 0;
                for (var i = 0; i < instance.options.array.length && ret.length < instance.options.choices; i++) {
                    var elem = instance.options.array[i];
                    var foundPos = instance.options.ignoreCase ? elem.toLowerCase().indexOf(entry.toLowerCase()) : elem.indexOf(entry);
                    while (foundPos != -1) {
                        if (foundPos == 0 && elem.length != entry.length) {
                            ret.push("<li><strong>" + elem.substr(0, entry.length) + "</strong>" +
                            elem.substr(entry.length) + "</li>");
                            break;
                        } else if (entry.length >= instance.options.partialChars && instance.options.partialSearch && foundPos != -1) {
                            if (instance.options.fullSearch || /\s/.test(elem.substr(foundPos - 1, 1))) {
                                partial.push("<li>" + elem.substr(0, foundPos) + "<strong>" +
                                elem.substr(foundPos, entry.length) + "</strong>" + elem.substr(foundPos + entry.length) + "</li>");
                                break;
                            }
                        }
                        foundPos = instance.options.ignoreCase ? elem.toLowerCase().indexOf(entry.toLowerCase(), foundPos + 1) : elem.indexOf(entry, foundPos + 1);
                    }
                }
                if (partial.length)
                    ret = ret.concat(partial.slice(0, instance.options.choices - ret.length))
                return "<ul>" + ret.join('') + "</ul>";
            }}, options || {});
    }});
Field.scrollFreeActivate = function(field) {
    setTimeout(function() {
        Field.activate(field);
    }, 1);
}
Ajax.InPlaceEditor = Class.create({initialize: function(element, url, options) {
        this.url = url;
        this.element = element = $(element);
        this.prepareOptions();
        this._controls = {};
        arguments.callee.dealWithDeprecatedOptions(options);
        Object.extend(this.options, options || {});
        if (!this.options.formId && this.element.id) {
            this.options.formId = this.element.id + '-inplaceeditor';
            if ($(this.options.formId))
                this.options.formId = '';
        }
        if (this.options.externalControl)
            this.options.externalControl = $(this.options.externalControl);
        if (!this.options.externalControl)
            this.options.externalControlOnly = false;
        this._originalBackground = this.element.getStyle('background-color') || 'transparent';
        this.element.title = this.options.clickToEditText;
        this._boundCancelHandler = this.handleFormCancellation.bind(this);
        this._boundComplete = (this.options.onComplete || Prototype.emptyFunction).bind(this);
        this._boundFailureHandler = this.handleAJAXFailure.bind(this);
        this._boundSubmitHandler = this.handleFormSubmission.bind(this);
        this._boundWrapperHandler = this.wrapUp.bind(this);
        this.registerListeners();
    },checkForEscapeOrReturn: function(e) {
        if (!this._editing || e.ctrlKey || e.altKey || e.shiftKey)
            return;
        if (Event.KEY_ESC == e.keyCode)
            this.handleFormCancellation(e);
        else if (Event.KEY_RETURN == e.keyCode)
            this.handleFormSubmission(e);
    },createControl: function(mode, handler, extraClasses) {
        var control = this.options[mode + 'Control'];
        var text = this.options[mode + 'Text'];
        if ('button' == control) {
            var btn = document.createElement('input');
            btn.type = 'submit';
            btn.value = text;
            btn.className = 'editor_' + mode + '_button';
            if ('cancel' == mode)
                btn.onclick = this._boundCancelHandler;
            this._form.appendChild(btn);
            this._controls[mode] = btn;
        } else if ('link' == control) {
            var link = document.createElement('a');
            link.href = '#';
            link.appendChild(document.createTextNode(text));
            link.onclick = 'cancel' == mode ? this._boundCancelHandler : this._boundSubmitHandler;
            link.className = 'editor_' + mode + '_link';
            if (extraClasses)
                link.className += ' ' + extraClasses;
            this._form.appendChild(link);
            this._controls[mode] = link;
        }
    },createEditField: function() {
        var text = (this.options.loadTextURL ? this.options.loadingText : this.getText());
        var fld;
        if (1 >= this.options.rows && !/\r|\n/.test(this.getText())) {
            fld = document.createElement('input');
            fld.type = 'text';
            var size = this.options.size || this.options.cols || 0;
            if (0 < size)
                fld.size = size;
        } else {
            fld = document.createElement('textarea');
            fld.rows = (1 >= this.options.rows ? this.options.autoRows : this.options.rows);
            fld.cols = this.options.cols || 40;
        }
        fld.name = this.options.paramName;
        fld.value = text;
        fld.className = 'editor_field';
        if (this.options.submitOnBlur)
            fld.onblur = this._boundSubmitHandler;
        this._controls.editor = fld;
        if (this.options.loadTextURL)
            this.loadExternalText();
        this._form.appendChild(this._controls.editor);
    },createForm: function() {
        var ipe = this;
        function addText(mode, condition) {
            var text = ipe.options['text' + mode + 'Controls'];
            if (!text || condition === false)
                return;
            ipe._form.appendChild(document.createTextNode(text));
        }
        ;
        this._form = $(document.createElement('form'));
        this._form.id = this.options.formId;
        this._form.addClassName(this.options.formClassName);
        this._form.onsubmit = this._boundSubmitHandler;
        this.createEditField();
        if ('textarea' == this._controls.editor.tagName.toLowerCase())
            this._form.appendChild(document.createElement('br'));
        if (this.options.onFormCustomization)
            this.options.onFormCustomization(this, this._form);
        addText('Before', this.options.okControl || this.options.cancelControl);
        this.createControl('ok', this._boundSubmitHandler);
        addText('Between', this.options.okControl && this.options.cancelControl);
        this.createControl('cancel', this._boundCancelHandler, 'editor_cancel');
        addText('After', this.options.okControl || this.options.cancelControl);
    },destroy: function() {
        if (this._oldInnerHTML)
            this.element.innerHTML = this._oldInnerHTML;
        this.leaveEditMode();
        this.unregisterListeners();
    },enterEditMode: function(e) {
        if (this._saving || this._editing)
            return;
        this._editing = true;
        this.triggerCallback('onEnterEditMode');
        if (this.options.externalControl)
            this.options.externalControl.hide();
        this.element.hide();
        this.createForm();
        this.element.parentNode.insertBefore(this._form, this.element);
        if (!this.options.loadTextURL)
            this.postProcessEditField();
        if (e)
            Event.stop(e);
    },enterHover: function(e) {
        if (this.options.hoverClassName)
            this.element.addClassName(this.options.hoverClassName);
        if (this._saving)
            return;
        this.triggerCallback('onEnterHover');
    },getText: function() {
        return this.element.innerHTML;
    },handleAJAXFailure: function(transport) {
        this.triggerCallback('onFailure', transport);
        if (this._oldInnerHTML) {
            this.element.innerHTML = this._oldInnerHTML;
            this._oldInnerHTML = null;
        }
    },handleFormCancellation: function(e) {
        this.wrapUp();
        if (e)
            Event.stop(e);
    },handleFormSubmission: function(e) {
        var form = this._form;
        var value = $F(this._controls.editor);
        this.prepareSubmission();
        var params = this.options.callback(form, value) || '';
        if (Object.isString(params))
            params = params.toQueryParams();
        params.editorId = this.element.id;
        if (this.options.htmlResponse) {
            var options = Object.extend({evalScripts: true}, this.options.ajaxOptions);
            Object.extend(options, {parameters: params,onComplete: this._boundWrapperHandler,onFailure: this._boundFailureHandler});
            new Ajax.Updater({success: this.element}, this.url, options);
        } else {
            var options = Object.extend({method: 'get'}, this.options.ajaxOptions);
            Object.extend(options, {parameters: params,onComplete: this._boundWrapperHandler,onFailure: this._boundFailureHandler});
            new Ajax.Request(this.url, options);
        }
        if (e)
            Event.stop(e);
    },leaveEditMode: function() {
        this.element.removeClassName(this.options.savingClassName);
        this.removeForm();
        this.leaveHover();
        this.element.style.backgroundColor = this._originalBackground;
        this.element.show();
        if (this.options.externalControl)
            this.options.externalControl.show();
        this._saving = false;
        this._editing = false;
        this._oldInnerHTML = null;
        this.triggerCallback('onLeaveEditMode');
    },leaveHover: function(e) {
        if (this.options.hoverClassName)
            this.element.removeClassName(this.options.hoverClassName);
        if (this._saving)
            return;
        this.triggerCallback('onLeaveHover');
    },loadExternalText: function() {
        this._form.addClassName(this.options.loadingClassName);
        this._controls.editor.disabled = true;
        var options = Object.extend({method: 'get'}, this.options.ajaxOptions);
        Object.extend(options, {parameters: 'editorId=' + encodeURIComponent(this.element.id),onComplete: Prototype.emptyFunction,onSuccess: function(transport) {
                this._form.removeClassName(this.options.loadingClassName);
                var text = transport.responseText;
                if (this.options.stripLoadedTextTags)
                    text = text.stripTags();
                this._controls.editor.value = text;
                this._controls.editor.disabled = false;
                this.postProcessEditField();
            }.bind(this),onFailure: this._boundFailureHandler});
        new Ajax.Request(this.options.loadTextURL, options);
    },postProcessEditField: function() {
        var fpc = this.options.fieldPostCreation;
        if (fpc)
            $(this._controls.editor)['focus' == fpc ? 'focus' : 'activate']();
    },prepareOptions: function() {
        this.options = Object.clone(Ajax.InPlaceEditor.DefaultOptions);
        Object.extend(this.options, Ajax.InPlaceEditor.DefaultCallbacks);
        [this._extraDefaultOptions].flatten().compact().each(function(defs) {
            Object.extend(this.options, defs);
        }.bind(this));
    },prepareSubmission: function() {
        this._saving = true;
        this.removeForm();
        this.leaveHover();
        this.showSaving();
    },registerListeners: function() {
        this._listeners = {};
        var listener;
        $H(Ajax.InPlaceEditor.Listeners).each(function(pair) {
            listener = this[pair.value].bind(this);
            this._listeners[pair.key] = listener;
            if (!this.options.externalControlOnly)
                this.element.observe(pair.key, listener);
            if (this.options.externalControl)
                this.options.externalControl.observe(pair.key, listener);
        }.bind(this));
    },removeForm: function() {
        if (!this._form)
            return;
        this._form.remove();
        this._form = null;
        this._controls = {};
    },showSaving: function() {
        this._oldInnerHTML = this.element.innerHTML;
        this.element.innerHTML = this.options.savingText;
        this.element.addClassName(this.options.savingClassName);
        this.element.style.backgroundColor = this._originalBackground;
        this.element.show();
    },triggerCallback: function(cbName, arg) {
        if ('function' == typeof this.options[cbName]) {
            this.options[cbName](this, arg);
        }
    },unregisterListeners: function() {
        $H(this._listeners).each(function(pair) {
            if (!this.options.externalControlOnly)
                this.element.stopObserving(pair.key, pair.value);
            if (this.options.externalControl)
                this.options.externalControl.stopObserving(pair.key, pair.value);
        }.bind(this));
    },wrapUp: function(transport) {
        this.leaveEditMode();
        this._boundComplete(transport, this.element);
    }});
Object.extend(Ajax.InPlaceEditor.prototype, {dispose: Ajax.InPlaceEditor.prototype.destroy});
Ajax.InPlaceCollectionEditor = Class.create(Ajax.InPlaceEditor, {initialize: function($super, element, url, options) {
        this._extraDefaultOptions = Ajax.InPlaceCollectionEditor.DefaultOptions;
        $super(element, url, options);
    },createEditField: function() {
        var list = document.createElement('select');
        list.name = this.options.paramName;
        list.size = 1;
        this._controls.editor = list;
        this._collection = this.options.collection || [];
        if (this.options.loadCollectionURL)
            this.loadCollection();
        else
            this.checkForExternalText();
        this._form.appendChild(this._controls.editor);
    },loadCollection: function() {
        this._form.addClassName(this.options.loadingClassName);
        this.showLoadingText(this.options.loadingCollectionText);
        var options = Object.extend({method: 'get'}, this.options.ajaxOptions);
        Object.extend(options, {parameters: 'editorId=' + encodeURIComponent(this.element.id),onComplete: Prototype.emptyFunction,onSuccess: function(transport) {
                var js = transport.responseText.strip();
                if (!/^\[.*\]$/.test(js))
                    throw 'Server returned an invalid collection representation.';
                this._collection = eval(js);
                this.checkForExternalText();
            }.bind(this),onFailure: this.onFailure});
        new Ajax.Request(this.options.loadCollectionURL, options);
    },showLoadingText: function(text) {
        this._controls.editor.disabled = true;
        var tempOption = this._controls.editor.firstChild;
        if (!tempOption) {
            tempOption = document.createElement('option');
            tempOption.value = '';
            this._controls.editor.appendChild(tempOption);
            tempOption.selected = true;
        }
        tempOption.update((text || '').stripScripts().stripTags());
    },checkForExternalText: function() {
        this._text = this.getText();
        if (this.options.loadTextURL)
            this.loadExternalText();
        else
            this.buildOptionList();
    },loadExternalText: function() {
        this.showLoadingText(this.options.loadingText);
        var options = Object.extend({method: 'get'}, this.options.ajaxOptions);
        Object.extend(options, {parameters: 'editorId=' + encodeURIComponent(this.element.id),onComplete: Prototype.emptyFunction,onSuccess: function(transport) {
                this._text = transport.responseText.strip();
                this.buildOptionList();
            }.bind(this),onFailure: this.onFailure});
        new Ajax.Request(this.options.loadTextURL, options);
    },buildOptionList: function() {
        this._form.removeClassName(this.options.loadingClassName);
        this._collection = this._collection.map(function(entry) {
            return 2 === entry.length ? entry : [entry, entry].flatten();
        });
        var marker = ('value' in this.options) ? this.options.value : this._text;
        var textFound = this._collection.any(function(entry) {
            return entry[0] == marker;
        }.bind(this));
        this._controls.editor.update('');
        var option;
        this._collection.each(function(entry, index) {
            option = document.createElement('option');
            option.value = entry[0];
            option.selected = textFound ? entry[0] == marker : 0 == index;
            option.appendChild(document.createTextNode(entry[1]));
            this._controls.editor.appendChild(option);
        }.bind(this));
        this._controls.editor.disabled = false;
        Field.scrollFreeActivate(this._controls.editor);
    }});
Ajax.InPlaceEditor.prototype.initialize.dealWithDeprecatedOptions = function(options) {
    if (!options)
        return;
    function fallback(name, expr) {
        if (name in options || expr === undefined)
            return;
        options[name] = expr;
    }
    ;
    fallback('cancelControl', (options.cancelLink ? 'link' : (options.cancelButton ? 'button' : options.cancelLink == options.cancelButton == false ? false : undefined)));
    fallback('okControl', (options.okLink ? 'link' : (options.okButton ? 'button' : options.okLink == options.okButton == false ? false : undefined)));
    fallback('highlightColor', options.highlightcolor);
    fallback('highlightEndColor', options.highlightendcolor);
};
Object.extend(Ajax.InPlaceEditor, {DefaultOptions: {ajaxOptions: {},autoRows: 3,cancelControl: 'link',cancelText: 'cancel',clickToEditText: 'Click to edit',externalControl: null,externalControlOnly: false,fieldPostCreation: 'activate',formClassName: 'inplaceeditor-form',formId: null,highlightColor: '#ffff99',highlightEndColor: '#ffffff',hoverClassName: '',htmlResponse: true,loadingClassName: 'inplaceeditor-loading',loadingText: 'Loading...',okControl: 'button',okText: 'ok',paramName: 'value',rows: 1,savingClassName: 'inplaceeditor-saving',savingText: 'Saving...',size: 0,stripLoadedTextTags: false,submitOnBlur: false,textAfterControls: '',textBeforeControls: '',textBetweenControls: ''},DefaultCallbacks: {callback: function(form) {
            return Form.serialize(form);
        },onComplete: function(transport, element) {
            new Effect.Highlight(element, {startcolor: this.options.highlightColor,keepBackgroundImage: true});
        },onEnterEditMode: null,onEnterHover: function(ipe) {
            ipe.element.style.backgroundColor = ipe.options.highlightColor;
            if (ipe._effect)
                ipe._effect.cancel();
        },onFailure: function(transport, ipe) {
            alert('Error communication with the server: ' + transport.responseText.stripTags());
        },onFormCustomization: null,onLeaveEditMode: null,onLeaveHover: function(ipe) {
            ipe._effect = new Effect.Highlight(ipe.element, {startcolor: ipe.options.highlightColor,endcolor: ipe.options.highlightEndColor,restorecolor: ipe._originalBackground,keepBackgroundImage: true});
        }},Listeners: {click: 'enterEditMode',keydown: 'checkForEscapeOrReturn',mouseover: 'enterHover',mouseout: 'leaveHover'}});
Ajax.InPlaceCollectionEditor.DefaultOptions = {loadingCollectionText: 'Loading options...'};
Form.Element.DelayedObserver = Class.create({initialize: function(element, delay, callback) {
        this.delay = delay || 0.5;
        this.element = $(element);
        this.callback = callback;
        this.timer = null;
        this.lastValue = $F(this.element);
        Event.observe(this.element, 'keyup', this.delayedListener.bindAsEventListener(this));
    },delayedListener: function(event) {
        if (this.lastValue == $F(this.element))
            return;
        if (this.timer)
            clearTimeout(this.timer);
        this.timer = setTimeout(this.onTimerEvent.bind(this), this.delay * 1000);
        this.lastValue = $F(this.element);
    },onTimerEvent: function() {
        this.timer = null;
        this.callback(this.element, $F(this.element));
    }});
var Scriptaculous = {Version: '1.8.0',require: function(libraryName) {
        document.write('<script type="text/javascript" src="' + libraryName + '"><\/script>');
    },REQUIRED_PROTOTYPE: '1.6.0',load: function() {
        function convertVersionString(versionString) {
            var r = versionString.split('.');
            return parseInt(r[0]) * 100000 + parseInt(r[1]) * 1000 + parseInt(r[2]);
        }
        if ((typeof Prototype == 'undefined') || (typeof Element == 'undefined') || (typeof Element.Methods == 'undefined') || (convertVersionString(Prototype.Version) < convertVersionString(Scriptaculous.REQUIRED_PROTOTYPE)))
            throw ("script.aculo.us requires the Prototype JavaScript framework >= " +
            Scriptaculous.REQUIRED_PROTOTYPE);
        $A(document.getElementsByTagName("script")).findAll(function(s) {
            return (s.src && s.src.match(/scriptaculous\.js(\?.*)?$/))
        }).each(function(s) {
            var path = s.src.replace(/scriptaculous\.js(\?.*)?$/, '');
            var includes = s.src.match(/\?.*load=([a-z,]*)/);
            (includes ? includes[1] : 'builder,effects,dragdrop,controls,slider,sound').split(',').each(function(include) {
                Scriptaculous.require(path + include + '.js')
            });
        });
    }}
Scriptaculous.load();
var undefined;
function isUndefined(property) {
    return (typeof property == 'undefined');
}
if (isUndefined(Array.prototype.concat) == true) {
    Array.prototype.concat = function(secondArray) {
        var firstArray = this.copy();
        for (var i = 0; i < secondArray.length; i++) {
            firstArray[firstArray.length] = secondArray[i];
        }
        return firstArray;
    };
}
if (isUndefined(Array.prototype.copy) == true) {
    Array.prototype.copy = function() {
        var copy = new Array();
        for (var i = 0; i < this.length; i++) {
            copy[i] = this[i];
        }
        return copy;
    };
}
if (isUndefined(Array.prototype.pop) == true) {
    Array.prototype.pop = function() {
        var lastItem = undefined;
        if (this.length > 0) {
            lastItem = this[this.length - 1];
            this.length--;
        }
        return lastItem;
    };
}
if (isUndefined(Array.prototype.push) == true) {
    Array.prototype.push = function() {
        var currentLength = this.length;
        for (var i = 0; i < arguments.length; i++) {
            this[currentLength + i] = arguments[i];
        }
        return this.length;
    };
}
if (isUndefined(Array.prototype.shift) == true) {
    Array.prototype.shift = function() {
        var firstItem = this[0];
        for (var i = 0; i < this.length - 1; i++) {
            this[i] = this[i + 1];
        }
        this.length--;
        return firstItem;
    };
}
if (isUndefined(Array.prototype.slice) == true) {
    Array.prototype.slice = function(start, end) {
        var temp;
        if (end == null || end == '')
            end = this.length;
        else if (end < 0)
            end = this.length + end;
        if (start < 0)
            start = this.length + start;
        if (end < start) {
            temp = end;
            end = start;
            start = temp;
        }
        var newArray = new Array();
        for (var i = 0; i < end - start; i++) {
            newArray[i] = this[start + i];
        }
        return newArray;
    };
}
if (isUndefined(Array.prototype.splice) == true) {
    Array.prototype.splice = function(start, deleteCount) {
        if (deleteCount == null || deleteCount == '')
            deleteCount = this.length - start;
        var tempArray = this.copy();
        for (var i = start; i < start + arguments.length - 2; i++) {
            this[i] = arguments[i - start + 2];
        }
        for (var i = start + arguments.length - 2; i < this.length - deleteCount + arguments.length - 2; i++) {
            this[i] = tempArray[i + deleteCount - arguments.length + 2];
        }
        this.length = this.length - deleteCount + (arguments.length - 2);
        return tempArray.slice(start, start + deleteCount);
    };
}
if (isUndefined(Array.prototype.unshift) == true) {
    Array.prototype.unshift = function(the_item) {
        for (loop = this.length - 1; loop >= 0; loop--) {
            this[loop + 1] = this[loop];
        }
        this[0] = the_item;
        return this.length;
    };
}
var FastInit = {done: false,onload: function() {
        if (FastInit.done)
            return;
        FastInit.done = true;
        FastInit.actions.each(function(func) {
            func();
        })
    },actions: $A([]),addOnLoad: function() {
        for (var x = 0; x < arguments.length; x++) {
            var func = arguments[x];
            if (!func || typeof func != 'function')
                continue;
            FastInit.actions.push(func);
        }
    }}
if (/WebKit|khtml/i.test(navigator.userAgent)) {
    var _timer = setInterval(function() {
        if (/loaded|complete/.test(document.readyState)) {
            clearInterval(_timer);
            delete _timer;
            FastInit.onload();
        }
    }, 10);
}
if (document.addEventListener) {
    document.addEventListener('DOMContentLoaded', FastInit.onload, false);
    FastInit.legacy = false;
}
Event.observe(window, 'load', FastInit.onload);
var SortableTable = {init: function(elm, o) {
        var table = $(elm);
        if (table.tagName != "TABLE")
            return;
        if (!table.id)
            table.id = "sortable-table-" + SortableTable._count++;
        Object.extend(SortableTable.options, o || {});
        var doscroll = (SortableTable.options.tableScroll == 'on' || (SortableTable.options.tableScroll == 'class' && table.hasClassName(SortableTable.options.tableScrollClass)));
        var sortFirst;
        var cells = SortableTable.getHeaderCells(table);
        cells.each(function(c) {
            c = $(c);
            if (!doscroll) {
                Event.observe(c, 'click', SortableTable._sort.bindAsEventListener(c));
                c.addClassName(SortableTable.options.columnClass);
            }
            if (c.hasClassName(SortableTable.options.sortFirstAscendingClass) || c.hasClassName(SortableTable.options.sortFirstDecendingClass))
                sortFirst = c;
        });
        if (sortFirst) {
            if (sortFirst.hasClassName(SortableTable.options.sortFirstAscendingClass)) {
                SortableTable.sort(table, sortFirst, 1);
            } else {
                SortableTable.sort(table, sortFirst, -1);
            }
        } else {
            var rows = SortableTable.getBodyRows(table);
            rows.each(function(r, i) {
                SortableTable.addRowClass(r, i);
            });
        }
        if (doscroll)
            SortableTable.initScroll(table);
    },initScroll: function(elm) {
        var table = $(elm);
        if (table.tagName != "TABLE")
            return;
        table.addClassName(SortableTable.options.tableScrollClass);
        var w = table.getDimensions().width;
        table.setStyle({'border-spacing': '0','table-layout': 'fixed',width: w + 'px'});
        var cells = SortableTable.getHeaderCells(table);
        cells.each(function(c, i) {
            c = $(c);
            var cw = c.getDimensions().width;
            c.setStyle({width: cw + 'px'});
            $A(table.tBodies[0].rows).each(function(r) {
                $(r.cells[i]).setStyle({width: cw + 'px'});
            })
        })
        var head = (table.tHead && table.tHead.rows.length > 0) ? table.tHead : table.rows[0];
        var hclone = head.cloneNode(true);
        var hdiv = $(document.createElement('div'));
        hdiv.id = table.id + '-head';
        table.parentNode.insertBefore(hdiv, table);
        hdiv.setStyle({overflow: 'hidden'});
        var htbl = $(document.createElement('table'));
        htbl.setStyle({'border-spacing': '0','table-layout': 'fixed',width: w + 'px'});
        hdiv.appendChild(htbl);
        hdiv.addClassName('scroll-table-head');
        table.removeChild(head);
        htbl.appendChild(hclone);
        cells = SortableTable.getHeaderCells(htbl);
        cells.each(function(c) {
            c = $(c);
            Event.observe(c, 'click', SortableTable._sortScroll.bindAsEventListener(c));
            c.addClassName(SortableTable.options.columnClass);
        });
        var cdiv = $(document.createElement('div'));
        cdiv.id = table.id + '-body';
        table.parentNode.insertBefore(cdiv, table);
        cdiv.setStyle({overflow: 'auto'});
        cdiv.appendChild(table);
        cdiv.addClassName('scroll-table-body');
        hdiv.scrollLeft = 0;
        cdiv.scrollLeft = 0;
        Event.observe(cdiv, 'scroll', SortableTable._scroll.bindAsEventListener(table), false);
        if (table.offsetHeight - cdiv.offsetHeight > 0) {
            cdiv.setStyle({width: (cdiv.getDimensions().width + 16) + 'px'})
        }
    },_scroll: function() {
        $(this.id + '-head').scrollLeft = $(this.id + '-body').scrollLeft;
    },_sort: function(e) {
        SortableTable.sort(null, this);
    },_sortScroll: function(e) {
        var hdiv = $(this).up('div.scroll-table-head');
        var id = hdiv.id.match(/^(.*)-head$/);
        SortableTable.sort($(id[1]), this);
    },sort: function(table, index, order) {
        var cell;
        if (typeof index == 'number') {
            if (!table || (table.tagName && table.tagName != "TABLE"))
                return;
            index = Math.min(table.rows[0].cells.length, index);
            index = Math.max(1, index);
            index -= 1;
            cell = (table.tHead && table.tHead.rows.length > 0) ? $(table.tHead.rows[table.tHead.rows.length - 1].cells[index]) : $(table.rows[0].cells[index]);
        } else {
            cell = $(index);
            table = table ? $(table) : table = cell.up('table');
            index = SortableTable.getCellIndex(cell)
        }
        var op = SortableTable.options;
        if (cell.hasClassName(op.nosortClass))
            return;
        order = order ? order : (cell.hasClassName(op.descendingClass) ? 1 : -1);
        var hcells = SortableTable.getHeaderCells(null, cell);
        $A(hcells).each(function(c, i) {
            c = $(c);
            if (i == index) {
                if (order == 1) {
                    c.removeClassName(op.descendingClass);
                    c.addClassName(op.ascendingClass);
                } else {
                    c.removeClassName(op.ascendingClass);
                    c.addClassName(op.descendingClass);
                }
            } else {
                c.removeClassName(op.ascendingClass);
                c.removeClassName(op.descendingClass);
            }
        });
        var rows = SortableTable.getBodyRows(table);
        var datatype = SortableTable.getDataType(cell, index, table);
        rows.sort(function(a, b) {
            return order * SortableTable.types[datatype](SortableTable.getCellText(a.cells[index]), SortableTable.getCellText(b.cells[index]));
        });
        rows.each(function(r, i) {
            table.tBodies[0].appendChild(r);
            SortableTable.addRowClass(r, i);
        });
    },types: {number: function(a, b) {
            var calc = function(v) {
                v = parseFloat(v.replace(/^.*?([-+]?[\d]*\.?[\d]+(?:[eE][-+]?[\d]+)?).*$/, "$1"));
                return isNaN(v) ? 0 : v;
            }
            return SortableTable.compare(calc(a), calc(b));
        },text: function(a, b) {
            return SortableTable.compare(a ? a.toLowerCase() : '', b ? b.toLowerCase() : '');
        },casesensitivetext: function(a, b) {
            return SortableTable.compare(a, b);
        },datasize: function(a, b) {
            var calc = function(v) {
                var r = v.match(/^([-+]?[\d]*\.?[\d]+([eE][-+]?[\d]+)?)\s?([k|m|g|t]?b)?/i);
                var b = r[1] ? Number(r[1]).valueOf() : 0;
                var m = r[3] ? r[3].substr(0, 1).toLowerCase() : '';
                switch (m) {
                    case 'k':
                        return b * 1024;
                        break;
                    case 'm':
                        return b * 1024 * 1024;
                        break;
                    case 'g':
                        return b * 1024 * 1024 * 1024;
                        break;
                    case 't':
                        return b * 1024 * 1024 * 1024 * 1024;
                        break;
                }
                return b;
            }
            return SortableTable.compare(calc(a), calc(b));
        },'date-au': function(a, b) {
            var calc = function(v) {
                var r = v.match(/^(\d{2})\/(\d{2})\/(\d{4})\s?(?:(\d{1,2})\:(\d{2})(?:\:(\d{2}))?\s?([a|p]?m?))?/i);
                var yr_num = r[3];
                var mo_num = parseInt(r[2]) - 1;
                var day_num = r[1];
                var hr_num = r[4] ? r[4] : 0;
                if (r[7] != null) {
                    var is_pm = r[7].search(/p/i) != -1
                    if (is_pm && r[4] != '12') {
                        hr_num = parseInt(r[4]) + 12;
                    } else if (!is_pm && r[4] == '12') {
                        hr_num = 0;
                    }
                }
                var min_num = r[5] ? r[5] : 0;
                var sec_num = r[6] ? r[6] : 0;
                return new Date(yr_num, mo_num, day_num, hr_num, min_num, sec_num, 0).valueOf();
            }
            return SortableTable.compare(a ? calc(a) : 0, b ? calc(b) : 0);
        },'date-us': function(a, b) {
            var calc = function(v) {
                var r = v.match(/^(\d{2})\/(\d{2})\/(\d{4})\s?(?:(\d{1,2})\:(\d{2})(?:\:(\d{2}))?\s?([a|p]?m?))?/i);
                var yr_num = r[3];
                var mo_num = parseInt(r[1]) - 1;
                var day_num = r[2];
                var hr_num = r[4] ? r[4] : 0;
                if (r[7] != null) {
                    var is_pm = r[7].search(/p/i) != -1
                    if (is_pm && r[4] != '12') {
                        hr_num = parseInt(r[4]) + 12;
                    } else if (!is_pm && r[4] == '12') {
                        hr_num = 0;
                    }
                }
                var min_num = r[5] ? r[5] : 0;
                var sec_num = r[6] ? r[6] : 0;
                return new Date(yr_num, mo_num, day_num, hr_num, min_num, sec_num, 0).valueOf();
            }
            return SortableTable.compare(a ? calc(a) : 0, b ? calc(b) : 0);
        },'date-eu': function(a, b) {
            var calc = function(v) {
                var r = v.match(/^(\d{2})-(\d{2})-(\d{4})/);
                var yr_num = r[3];
                var mo_num = parseInt(r[2]) - 1;
                var day_num = r[1];
                return new Date(yr_num, mo_num, day_num).valueOf();
            }
            return SortableTable.compare(a ? calc(a) : 0, b ? calc(b) : 0);
        },'date-iso': function(a, b) {
            var calc = function(v) {
                var d = v.match(/([\d]{4})(-([\d]{2})(-([\d]{2})(T([\d]{2}):([\d]{2})(:([\d]{2})(\.([\d]+))?)?(Z|(([-+])([\d]{2}):([\d]{2})))?)?)?)?/);
                var offset = 0;
                var date = new Date(d[1], 0, 1);
                if (d[3]) {
                    date.setMonth(d[3] - 1);
                }
                if (d[5]) {
                    date.setDate(d[5]);
                }
                if (d[7]) {
                    date.setHours(d[7]);
                }
                if (d[8]) {
                    date.setMinutes(d[8]);
                }
                if (d[10]) {
                    date.setSeconds(d[10]);
                }
                if (d[12]) {
                    date.setMilliseconds(Number("0." + d[12]) * 1000);
                }
                if (d[14]) {
                    offset = (Number(d[16]) * 60) + Number(d[17]);
                    offset *= ((d[15] == '-') ? 1 : -1);
                }
                offset -= date.getTimezoneOffset();
                if (offset != 0) {
                    var time = (Number(date) + (offset * 60 * 1000));
                    date.setTime(Number(time));
                }
                return date.valueOf();
            }
            return SortableTable.compare(a ? calc(a) : 0, b ? calc(b) : 0);
        },date: function(a, b) {
            if (a && b) {
                return SortableTable.compare(new Date(a), new Date(b));
            } else {
                return SortableTable.compare(a ? 1 : 0, b ? 1 : 0);
            }
            return SortableTable.compare(a ? new Date(a).valueOf() : 0, b ? new Date(b).valueOf() : 0);
        },time: function(a, b) {
            var d = new Date();
            var ds = d.getMonth() + "/" + d.getDate() + "/" + d.getFullYear() + " "
            return SortableTable.compare(new Date(ds + a), new Date(ds + b));
        },currency: function(a, b) {
            a = parseFloat(a.replace(/[^-\d\.]/g, ''));
            b = parseFloat(b.replace(/[^-\d\.]/g, ''));
            return SortableTable.compare(a, b);
        }},compare: function(a, b) {
        return a < b ? -1 : a == b ? 0 : 1;
    },detectors: $A([{re: /[\d]{4}-[\d]{2}-[\d]{2}(?:T[\d]{2}\:[\d]{2}(?:\:[\d]{2}(?:\.[\d]+)?)?(Z|([-+][\d]{2}:[\d]{2})?)?)?/,type: "date-iso"}, {re: /^sun|mon|tue|wed|thu|fri|sat\,\s\d{1,2}\sjan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec\s\d{4}(?:\s\d{2}\:\d{2}(?:\:\d{2})?(?:\sGMT(?:[+-]\d{4})?)?)?/i,type: "date"}, {re: /^\d{2}-\d{2}-\d{4}/i,type: "date-eu"}, {re: /^\d{2}\/\d{2}\/\d{4}\s?(?:\d{1,2}\:\d{2}(?:\:\d{2})?\s?[a|p]?m?)?/i,type: "date-au"}, {re: /^\d{1,2}\:\d{2}(?:\:\d{2})?(?:\s[a|p]m)?$/i,type: "time"}, {re: /^[$����]/,type: "currency"}, {re: /^[-+]?[\d]*\.?[\d]+(?:[eE][-+]?[\d]+)?\s?[k|m|g|t]b$/i,type: "datasize"}, {re: /^[-+]?[\d]*\.?[\d]+(?:[eE][-+]?[\d]+)?/,type: "number"}, {re: /^[A-Z]+$/,type: "casesensitivetext"}, {re: /.*/,type: "text"}]),addSortType: function(name, sortfunc) {
        SortableTable.types[name] = sortfunc;
    },addDetector: function(rexp, name) {
        SortableTable.detectors.unshift({re: rexp,type: name});
    },getBodyRows: function(table) {
        table = $(table);
        return (table.hasClassName(SortableTable.options.tableScrollClass) || table.tHead && table.tHead.rows.length > 0) ? $A(table.tBodies[0].rows) : $A(table.rows).without(table.rows[0]);
    },addRowClass: function(r, i) {
        r = $(r)
        r.removeClassName(SortableTable.options.rowEvenClass);
        r.removeClassName(SortableTable.options.rowOddClass);
        r.addClassName(((i + 1) % 2 == 0 ? SortableTable.options.rowEvenClass : SortableTable.options.rowOddClass));
    },getHeaderCells: function(table, cell) {
        if (!table)
            table = $(cell).up('table');
        return $A((table.tHead && table.tHead.rows.length > 0) ? table.tHead.rows[table.tHead.rows.length - 1].cells : table.rows[0].cells);
    },getCellIndex: function(cell) {
        return $A(cell.parentNode.cells).indexOf(cell);
    },getCellText: function(cell) {
        if (!cell)
            return "";
        return cell.textContent ? cell.textContent : cell.innerText;
    },getDataType: function(cell, index, table) {
        cell = $(cell);
        var t = cell.classNames().detect(function(n) {
            return (SortableTable.types[n]) ? true : false;
        });
        if (!t) {
            var i = index ? index : SortableTable.getCellIndex(cell);
            var tbl = table ? table : cell.up('table')
            cell = tbl.tBodies[0].rows[0].cells[i];
            t = SortableTable.detectors.detect(function(d) {
                return d.re.test(SortableTable.getCellText(cell));
            })['type'];
        }
        return t;
    },setup: function(o) {
        Object.extend(SortableTable.options, o || {})
        Object.extend(SortableTable.types, SortableTable.options.types || {})
        SortableTable.options.types = {};
        if (SortableTable.options.detectors) {
            SortableTable.detectors = $A(SortableTable.options.detectors).concat(SortableTable.detectors);
            SortableTable.options.detectors = [];
        }
    },options: {autoLoad: true,tableSelector: ['table.sortable'],columnClass: 'sortcol',descendingClass: 'sortdesc',ascendingClass: 'sortasc',nosortClass: 'nosort',sortFirstAscendingClass: 'sortfirstasc',sortFirstDecendingClass: 'sortfirstdesc',rowEvenClass: 'roweven',rowOddClass: 'rowodd',tableScroll: 'class',tableScrollClass: 'scroll'},_count: 0,load: function() {
        if (SortableTable.options.autoLoad) {
            $A(SortableTable.options.tableSelector).each(function(s) {
                $$(s).each(function(t) {
                    SortableTable.init(t, {tableScroll: SortableTable.options.tableScroll});
                });
            });
        }
    }}
if (FastInit) {
    FastInit.addOnLoad(SortableTable.load);
} else {
    Event.observe(window, 'load', SortableTable.load);
}
var LiquidMetal = function() {
    var SCORE_NO_MATCH = 0.0;
    var SCORE_MATCH = 1.0;
    var SCORE_TRAILING = 0.8;
    var SCORE_TRAILING_BUT_STARTED = 0.9;
    var SCORE_BUFFER = 0.85;
    return {score: function(string, abbreviation) {
            if (abbreviation.length == 0)
                return SCORE_TRAILING;
            if (abbreviation.length > string.length)
                return SCORE_NO_MATCH;
            var scores = this.buildScoreArray(string, abbreviation);
            var sum = 0.0;
            for (var i = 0; i < scores.length; i++) {
                sum += scores[i];
            }
            return (sum / scores.length);
        },buildScoreArray: function(string, abbreviation) {
            var scores = new Array(string.length);
            var lower = string.toLowerCase();
            var chars = abbreviation.toLowerCase().split("");
            var lastIndex = -1;
            var started = false;
            for (var i = 0; i < chars.length; i++) {
                var c = chars[i];
                var index = lower.indexOf(c, lastIndex + 1);
                if (index < 0)
                    return fillArray(scores, SCORE_NO_MATCH);
                if (index == 0)
                    started = true;
                if (isNewWord(string, index)) {
                    scores[index - 1] = 1;
                    fillArray(scores, SCORE_BUFFER, lastIndex + 1, index - 1);
                }
                else if (isUpperCase(string, index)) {
                    fillArray(scores, SCORE_BUFFER, lastIndex + 1, index);
                }
                else {
                    fillArray(scores, SCORE_NO_MATCH, lastIndex + 1, index);
                }
                scores[index] = SCORE_MATCH;
                lastIndex = index;
            }
            var trailingScore = started ? SCORE_TRAILING_BUT_STARTED : SCORE_TRAILING;
            fillArray(scores, trailingScore, lastIndex + 1);
            return scores;
        }};
    function isUpperCase(string, index) {
        var c = string.charAt(index);
        return ("A" <= c && c <= "Z");
    }
    function isNewWord(string, index) {
        var c = string.charAt(index - 1);
        return (c == " " || c == "\t");
    }
    function fillArray(array, value, from, to) {
        from = Math.max(from || 0, 0);
        to = Math.min(to || array.length, array.length);
        for (var i = from; i < to; i++) {
            array[i] = value;
        }
        return array;
    }
}();
var BrowserDetect = {init: function() {
        this.browser = this.searchString(this.dataBrowser) || "An unknown browser";
        this.version = this.searchVersion(navigator.userAgent) || this.searchVersion(navigator.appVersion) || "an unknown version";
        this.OS = this.searchString(this.dataOS) || "an unknown OS";
    },searchString: function(data) {
        for (var i = 0; i < data.length; i++) {
            var dataString = data[i].string;
            var dataProp = data[i].prop;
            this.versionSearchString = data[i].versionSearch || data[i].identity;
            if (dataString) {
                if (dataString.indexOf(data[i].subString) != -1)
                    return data[i].identity;
            }
            else if (dataProp)
                return data[i].identity;
        }
    },searchVersion: function(dataString) {
        var index = dataString.indexOf(this.versionSearchString);
        if (index == -1)
            return;
        return parseFloat(dataString.substring(index + this.versionSearchString.length + 1));
    },dataBrowser: [{string: navigator.userAgent,subString: "OmniWeb",versionSearch: "OmniWeb/",identity: "OmniWeb"}, {string: navigator.vendor,subString: "Apple",identity: "Safari"}, {prop: window.opera,identity: "Opera"}, {string: navigator.vendor,subString: "iCab",identity: "iCab"}, {string: navigator.vendor,subString: "KDE",identity: "Konqueror"}, {string: navigator.userAgent,subString: "Firefox",identity: "Firefox"}, {string: navigator.vendor,subString: "Camino",identity: "Camino"}, {string: navigator.userAgent,subString: "Netscape",identity: "Netscape"}, {string: navigator.userAgent,subString: "MSIE",identity: "Explorer",versionSearch: "MSIE"}, {string: navigator.userAgent,subString: "Gecko",identity: "Mozilla",versionSearch: "rv"}, {string: navigator.userAgent,subString: "Mozilla",identity: "Netscape",versionSearch: "Mozilla"}],dataOS: [{string: navigator.platform,subString: "Win",identity: "Windows"}, {string: navigator.platform,subString: "Mac",identity: "Mac"}, {string: navigator.platform,subString: "Linux",identity: "Linux"}]};
BrowserDetect.init();
Element.ELEMENT_NODE = 1;
Element.descendantsWithClassName = function(parentElement, className) {
    var children = parentElement.getElementsByTagName('*');
    return $A(children).inject([], function(elements, child) {
        if (Element.hasClassName(child, className)) {
            elements.push(child);
        }
        return elements;
    });
};
Element.conceal = function(element) {
    element.style.visibility = 'hidden';
};
Element.reveal = function(element) {
    element.style.visibility = 'visible';
};
Element.create = function(name) {
    return document.createElement(name);
};
Element.newTextNode = function(text) {
    return document.createTextNode(text);
};
Element.asHTML = function(el) {
    var bar = Element.create('bar');
    bar.appendChild(el);
    return bar.innerHTML;
};
Element.previousSiblingElement = function(el) {
    var sibling = el.previousSibling;
    while (sibling && sibling.nodeType != Element.ELEMENT_NODE) {
        sibling = sibling.previousSibling;
    }
    return sibling;
};
Element.nextSiblingElement = function(el) {
    var sibling = el.nextSibling;
    while (sibling && sibling.nodeType != Element.ELEMENT_NODE) {
        sibling = sibling.nextSibling;
    }
    return sibling;
};
Element.getPosY = function(element) {
    return j(element).offset().top;
};
Element.getPosX = function(element) {
    return j(element).offset().left;
};
Element.isElementOverVerticalScrollbar = function(element, scrollableElement) {
    if (scrollableElement.clientHeight >= scrollableElement.scrollHeight) {
        return false;
    }
    var elementPosition = {y: Element.getPosY(element),x: Element.getPosX(element)}
    var scrollableElementPosition = {y: Element.getPosY(scrollableElement),x: Element.getPosX(scrollableElement)}
    var elementRegion = new Region(elementPosition.y, elementPosition.x + element.clientWidth, elementPosition.y + element.clientHeight, elementPosition.x);
    var verticalScrollbarRegion = new Region(scrollableElementPosition.y, scrollableElementPosition.x + scrollableElement.clientWidth, scrollableElementPosition.y + scrollableElement.clientHeight, scrollableElementPosition.x + scrollableElement.clientWidth - 15);
    return elementRegion.intersects(verticalScrollbarRegion);
}
Element.hideScrollbarsUnderElement = function(element, scrollableElementIds) {
    if (BrowserDetect.OS != "Mac" || (BrowserDetect.browser == "Firefox" && BrowserDetect.version == 3) || (BrowserDetect.browser == "Safari")) {
        return;
    }
    for (var i = 0; i < scrollableElementIds.length; i++) {
        var scrollableElement = document.getElementById(scrollableElementIds[i]);
        if (scrollableElement) {
            if (Element.isElementOverHorizontalScrollbar(element, scrollableElement)) {
                Element.addClassName(scrollableElement, "no_xscroll");
            }
            ;
            if (Element.isElementOverVerticalScrollbar(element, scrollableElement)) {
                Element.addClassName(scrollableElement, "no_yscroll");
            }
            ;
        }
    }
}
Element.unhideScrollbars = function(scrollableElementIds) {
    for (var i = 0; i < scrollableElementIds.length; i++) {
        var element = document.getElementById(scrollableElementIds[i]);
        if (element) {
            Element.removeClassName(element, "no_xscroll");
            Element.removeClassName(element, "no_yscroll");
        }
        ;
    }
}
Element.isElementOverHorizontalScrollbar = function(element, scrollableElement) {
    if (scrollableElement.clientWidth >= scrollableElement.scrollWidth) {
        return false;
    }
    var elementPosition = {y: Element.getPosY(element),x: Element.getPosX(element)}
    var scrollableElementPosition = {y: Element.getPosY(scrollableElement),x: Element.getPosX(scrollableElement)}
    var elementRegion = new Region(elementPosition.y, elementPosition.x + element.clientWidth, elementPosition.y + element.clientHeight, elementPosition.x);
    var horizontalScrollbarRegion = new Region(scrollableElementPosition.y + scrollableElement.clientHeight - 15, scrollableElementPosition.x + scrollableElement.clientWidth, scrollableElementPosition.y + scrollableElement.clientHeight, scrollableElementPosition.x);
    return elementRegion.intersects(horizontalScrollbarRegion);
}
if (typeof String.prototype.trim == "undefined") {
    String.prototype.trim = function() {
        return this.replace(/^\s+|\s+$/g, "");
    };
}
if (typeof String.prototype.substrCount == "undefined") {
    String.prototype.substrCount = function(s) {
        return this.split(s).length - 1;
    };
}
String.prototype.isAlpha = function() {
    return (this >= 'a' && this <= 'z\uffff') || (this >= 'A' && this <= 'Z\uffff');
};
String.prototype.isDigit = function() {
    return (this >= '0' && this <= '9');
};
String.prototype.htmlEscape = function() {
    var s = this;
    s = s.replace(/&/g, '&amp;');
    s = s.replace(/>/g, '&gt;');
    s = s.replace(/</g, '&lt;');
    s = s.replace(/"/g, '&quot;');
    return s;
};
Array.prototype.contains = function(value) {
    return this.indexOf(value) != -1;
};
Array.prototype.last = function() {
    return this[this.length - 1];
};
Array.prototype.isEmpty = function() {
    return this.length === 0;
};
Array.prototype.collect = function(f) {
    var result = [];
    for (var i = 0; i < this.length; i++) {
        result.push(f(this[i]));
    }
    return result;
};
Array.prototype.detect = function(f) {
    var result = [];
    for (var i = 0; i < this.length; i++) {
        if (f(this[i])) {
            return this[i];
        }
    }
    return null;
};
var Utils = {centerInWindow: function(element) {
        this.alignInWindow(element, 0.5, 0.5);
    },alignInWindow: function(element, horizontalRatio, verticalRatio) {
        var windowDimensions = Utils.windowDimensions();
        var elementDimensions = Element.getDimensions(element);
        var new_left = (windowDimensions.width - elementDimensions.width) * horizontalRatio + "px";
        var new_top = (windowDimensions.height - elementDimensions.height) * verticalRatio + "px";
        element.style.position = 'absolute';
        element.style.left = new_left;
        element.style.top = new_top;
    },windowDimensions: function() {
        return {height: this.window().innerHeight || document.documentElement.clientHeight || document.body.clientHeight,width: this.window().innerWidth || document.documentElement.clientWidth || document.body.clientWidth};
    },useMockWindow: function(w) {
        this.mockedWindow = w;
    },window: function() {
        return this.mockedWindow || window;
    },redirectTo: function(url) {
        window.location.href = url;
    },heightWithBorders: function(elem) {
        return Element.getDimensions(elem).height;
    },widthWithBorders: function(elem) {
        return Element.getDimensions(elem).width;
    },widthWithBordersAndMargins: function(elem) {
        var width = Element.getDimensions(elem).width;
        width = width + this.styleAsNum(elem, "margin-left");
        width = width + this.styleAsNum(elem, "margin-right");
        return width;
    },height: function(elem) {
        return this.heightWithBorders(elem) - this.heightPaddingAndBorders(elem);
    },heightPaddingAndBorders: function(elem) {
        var padding = this.styleAsNum(elem, "padding-top");
        padding += this.styleAsNum(elem, "padding-bottom");
        padding += this.styleAsNum(elem, "border-top-width");
        padding += this.styleAsNum(elem, "border-bottom-width");
        return padding;
    },width: function(elem) {
        var width = this.widthWithBorders(elem);
        width = width - this.styleAsNum(elem, "padding-left");
        width = width - this.styleAsNum(elem, "padding-right");
        width = width - this.styleAsNum(elem, "border-left-width");
        width = width - this.styleAsNum(elem, "border-right-width");
        return width;
    },setWidth: function(elem, pixels) {
        elem.style.width = this._pixelsAsStyleUnit(pixels);
    },setHeight: function(elem, pixels) {
        elem.style.height = this._pixelsAsStyleUnit(pixels);
    },_pixelsAsStyleUnit: function(pixels) {
        if (pixels == NaN || ("" + pixels) == "NaN") {
            pixels = 0;
        }
        pixels = parseInt(pixels);
        if (pixels < 0) {
            pixels = 0;
        }
        return pixels.toString() + "px";
    },marginLeft: function(elem) {
        return this.styleAsNum(elem, "margin-left");
    },marginRight: function(elem) {
        return this.styleAsNum(elem, "margin-right");
    },borderLeft: function(elem) {
        return this.styleAsNum(elem, "border-left-width");
    },borderRight: function(elem) {
        return this.styleAsNum(elem, "border-right-width");
    },styleAsNum: function(elem, mozillaProp) {
        var computedStyle = Element.getStyle(elem, mozillaProp);
        if (!computedStyle) {
            return 0;
        }
        computedStyle = computedStyle.substr(0, computedStyle.length - 2);
        if (isNaN(computedStyle)) {
            return 0;
        }
        return parseInt(computedStyle);
    },asString: function(hash) {
        var str = "{";
        for (var key in hash) {
            str = str + key + ":" + hash[key] + ",";
        }
        return str + "}";
    },hashEquals: function(hash1, hash2) {
        if (hash1 == null && hash2 == null) {
            return true;
        }
        if (hash1 == null || hash2 == null) {
            return false;
        }
        for (var key1 in hash1) {
            if (hash2[key1] == null) {
                return false;
            }
            if (hash1[key1] != hash2[key1]) {
                return false;
            }
        }
        for (var key2 in hash2) {
            if (hash1[key2] == null) {
                return false;
            }
        }
        return true;
    },debug: function(obj) {
        var info = [];
        if (typeof obj in ["string", "number"]) {
            return obj;
        } else {
            for (property in obj) {
                if (typeof obj[property] == "function") {
                    info.push(property + ' => function');
                } else {
                    info.push(property + ' => ' +
                    (typeof obj[property] == "string" ? '"' + obj[property] + '"' : obj[property]));
                }
            }
        }
        return ("'" + obj + "' #" + typeof obj + ": {" + info.join(", ") + "}");
    },truncatedText: function(origText, maxLength) {
        if (origText == null) {
            return "&nbsp;";
        } else if (origText.length > maxLength) {
            return origText.substr(0, maxLength - 2) + "...";
        } else {
            return origText;
        }
    },stripAccents: function(s) {
        var stripped_string = "";
        for (var i = 0; i < s.length; i++) {
            ch = s.charAt(i);
            stripped = Utils.characterMap[ch];
            if (stripped != null) {
                ch = stripped;
            }
            stripped_string += ch;
        }
        return stripped_string;
    }};
Utils.isIE = (navigator.userAgent.toLowerCase().indexOf("msie") != -1);
Utils.isOpera = (navigator.userAgent.toLowerCase().indexOf("opera") != -1);
Utils.isSafari = (navigator.userAgent.toLowerCase().indexOf("safari") != -1);
Utils.isFirefox = (navigator.userAgent.toLowerCase().indexOf("firefox") != -1);
Utils.characterMap = {'\u00c0': 'A','\u00c1': 'A','\u00c2': 'A','\u00c3': 'A','\u00c4': 'A','\u00c5': 'A','\u00c6': "AE",'\u00c7': 'C','\u00c8': 'E','\u00c9': 'E','\u00ca': 'E','\u00cb': 'E','\u00cc': 'I','\u00cd': 'I','\u00ce': 'I','\u00cf': 'I','\u00d1': 'N','\u00d2': 'O','\u00d3': 'O','\u00d4': 'O','\u00d5': 'O','\u00d6': 'O','\u00d8': 'O','\u00d9': 'U','\u00da': 'U','\u00db': 'U','\u00dc': 'U','\u00dd': 'Y','\u00e0': 'a','\u00e1': 'a','\u00e2': 'a','\u00e3': 'a','\u00e4': 'a','\u00e5': 'a','\u00e6': "ae",'\u00e7': 'c','\u00e8': 'e','\u00e9': 'e','\u00ea': 'e','\u00eb': 'e','\u00ec': 'i','\u00ed': 'i','\u00ee': 'i','\u00ef': 'i','\u00f1': 'n','\u00f2': 'o','\u00f3': 'o','\u00f4': 'o','\u00f5': 'o','\u00f6': 'o','\u00f8': 'o','\u00f9': 'u','\u00fa': 'u','\u00fb': 'u','\u00fc': 'u','\u00fd': 'y','\u00ff': 'y'};
Object.overrides = function(descendant, base) {
    for (property in base.prototype) {
        if (undefined == descendant.prototype[property]) {
            descendant.prototype[property] = base.prototype[property];
        } else {
            descendant.prototype["super_" + property] = base.prototype[property];
        }
    }
};
CruftyPopup = Class.create();
CruftyPopup.prototype = {initialize: function(_popupElementName, _maskElementName) {
        if (_popupElementName == undefined) {
            _popupElementName = 'detailPane';
        }
        if (_maskElementName == undefined) {
            _maskElementName = 'mask';
        }
        this.popupElement = $(_popupElementName);
        if (this.popupElement == null) {
            this.popupElement = document.createElement('div');
            document.body.appendChild(this.popupElement);
            this.popupElement.id = _popupElementName;
            this.popupElement.style.display = "none";
            this.popupElement.style.zindex = "2000";
        }
        this.maskElement = $(_maskElementName);
        if (this.maskElement == null) {
            this.maskElement = document.createElement('div');
            document.body.appendChild(this.maskElement);
            this.maskElement.id = _maskElementName;
            this.maskElement.style.width = "100%";
            this.maskElement.style.height = "100%";
            this.maskElement.style.position = "absolute";
            this.maskElement.style.top = "0px";
            this.maskElement.style.left = "0px";
            this.maskElement.style.opacity = ".50";
            this.maskElement.style.zindex = "1000";
            this.maskElement.style.display = "none";
        }
        this.visible = false;
    },maskAndPopup: function() {
        this.mask();
        this.popup();
    },maskAndPopupAndCenter: function() {
        this.center();
        this.maskAndPopup();
    },mask: function() {
        Element.show(this.maskElement);
    },popup: function() {
        Element.show(this.popupElement);
        this.visible = true;
    },popupAndCenter: function() {
        this.popup();
        this.center();
    },center: function() {
        Utils.centerInWindow(this.popupElement);
    },hide: function() {
        Element.hide(this.popupElement);
        Element.hide(this.maskElement);
        this.visible = false;
    }};
Popup2 = Class.create();
Popup2.prototype = {initialize: function(popupElementId, options) {
        this.popupElementId = popupElementId;
        this.options = {placement: Placement.CENTER_IN_WINDOW,maskOpacity: 0.5,maskElementId: "mask",maskZindex: 1000,maskBackgroundColor: "#FFFFFF",popupZindex: 2000,popupCssClass: "popup",scrollableElementIds: []};
        Object.extend(this.options, options || {});
        this._initializePopupElement();
    },visible: function() {
        return this.popupElement.visible();
    },showPopup: function() {
        this.options.placement.placeElement(this.popupElement);
        Element.show(this.popupElement);
        Element.hideScrollbarsUnderElement(this.popupElement, this.options.scrollableElementIds);
        Element.reveal(this.popupElement);
    },showMask: function() {
        this._initializeMaskElement();
        Element.reveal(this.maskElement);
        Element.hideScrollbarsUnderElement(this.maskElement, this.options.scrollableElementIds);
    },showPopupWithMask: function() {
        this.showMask();
        this.showPopup();
    },hide: function() {
        Element.conceal(this.popupElement);
        Element.hide(this.popupElement);
        if (this.maskElement) {
            Element.conceal(this.maskElement);
        }
        Element.unhideScrollbars(this.options.scrollableElementIds);
    },_initializeMaskElement: function() {
        this.maskElement = $(this.options.maskElementId);
        if (this.maskElement == null) {
            this.maskElement = document.createElement('div');
            document.body.appendChild(this.maskElement);
            document.body.style.height = "100%";
            this.maskElement.id = this.options.maskElementId;
            this.maskElement.style.backgroundColor = this.options.maskBackgroundColor;
            this.maskElement.style.width = "100%";
            this.maskElement.style.height = document.documentElement.scrollHeight + "px";
            this.maskElement.style.position = "absolute";
            this.maskElement.style.top = "0px";
            this.maskElement.style.left = "0px";
            Element.setOpacity(this.maskElement, this.options.maskOpacity);
            this.maskElement.style.zIndex = this.options.maskZindex.toString();
            Element.conceal(this.maskElement);
        }
    },_initializePopupElement: function() {
        this.popupElement = $(this.popupElementId);
        if (this.popupElement == null) {
            this.popupElement = document.createElement('div');
            document.body.appendChild(this.popupElement);
            this.popupElement.id = this.popupElementId;
        }
        this.popupElement.className = this.options.popupCssClass;
        this.popupElement.style.zIndex = this.options.popupZindex.toString();
        Element.hide(this.popupElement);
        Element.conceal(this.popupElement);
    }};
Placement = Class.create();
Placement.prototype = {initialize: function(positionCode, options) {
        this.positionCode = positionCode;
        this.options = {spacingPixels: 5,align: Placement.ALIGN_LEFT_EDGE,offsetHorizontal: 0,offsetVertical: 0};
        Object.extend(this.options, options || {});
    },placeElement: function(element) {
        switch (this.positionCode) {
            case Placement.CENTER_CODE:
                Utils.centerInWindow(element);
                break;
            case Placement.DO_NOT_POSITION_CODE:
                break;
            case Placement.BELOW_CODE:
                var relatedElement = $(this.options.relatedElementId);
                var relatedOffset = this.getOffsetFor(relatedElement);
                var relatedHeight = Utils.heightWithBorders(relatedElement);
                element.style.position = "absolute";
                switch (this.options.align) {
                    case Placement.ALIGN_LEFT_EDGE:
                        element.style.left = (relatedOffset[0] + this.options.offsetHorizontal) + "px";
                        break;
                    case Placement.ALIGN_RIGHT_EDGE:
                        var relatedWidth = Utils.widthWithBorders(relatedElement);
                        var elementWidth = Utils.widthWithBorders(element);
                        element.style.left = (relatedOffset[0] + relatedWidth - elementWidth + this.options.offsetHorizontal) + "px";
                        break;
                    default:
                        throw new Error("Unknown alignment - " + this.options.align);
                }
                element.style.top = (relatedOffset[1] + relatedHeight + this.options.offsetVertical + this.options.spacingPixels) + "px";
                break;
            default:
                throw new Error("Unknown position code - " + this.positionCode);
        }
    },getOffsetFor: function(element) {
        return Position.cumulativeOffset(element);
    }};
Placement.CENTER_CODE = "center";
Placement.DO_NOT_POSITION_CODE = "noposition";
Placement.BELOW_CODE = "below";
Placement.ALIGN_LEFT_EDGE = "leftedge";
Placement.ALIGN_RIGHT_EDGE = "rightedge";
Placement.CENTER_IN_WINDOW = new Placement(Placement.CENTER_CODE);
Placement.DO_NOT_POSITION = new Placement(Placement.DO_NOT_POSITION_CODE);
Placement.belowElement = function(elementId, options) {
    options.relatedElementId = elementId;
    return new Placement(Placement.BELOW_CODE, options);
}
PopupWindow = Class.create();
PopupWindow.prototype = {initialize: function(url) {
        this.super_initialize();
        this.mask();
        new Ajax.Updater(this.popupElement, url, {asynchronous: true,evalScripts: true,method: 'get',onComplete: this.popupAndCenter.bind(this)});
    }};
Object.overrides(PopupWindow, CruftyPopup);
Confirm = Class.create();
Confirm.prototype = {initialize: function(text, onComplete) {
        this.onComplete = onComplete;
        this.super_initialize();
        this.mask();
        this.popupElement.innerHTML = "";
        var popupTemplate = $('popup_window_template').cloneNode(true);
        Element.show(popupTemplate);
        this.popupElement.appendChild(popupTemplate);
        this.setHeader('confirm');
        this.setContents(text);
        this.confirmButton = this.createButton("/images/b_delete.png", this.clickConfirm.bind(this));
        this.cancelButton = this.createButton("/images/b_cancel.png", this.hide.bind(this));
        this.addButton(this.confirmButton);
        this.addButton(this.cancelButton);
        this.popup();
        this.center();
    },setHeader: function(headerText) {
        this.popupHeaderElement = Element.descendantsWithClassName(this.popupElement, 'module_box_title')[0];
        this.popupHeaderElement.innerHTML = headerText;
    },setContents: function(contents) {
        this.popupContentsElement = Element.descendantsWithClassName(this.popupElement, 'module_box_contents')[0];
        this.popupContentsElement.innerHTML = contents;
    },addButton: function(button) {
        if (this.buttonAreaElement == null) {
            this.buttonAreaElement = document.createElement("div");
            this.buttonAreaElement.className = 'button_area';
            this.popupContentsElement.appendChild(this.buttonAreaElement);
        } else {
            this.buttonAreaElement.appendChild(document.createTextNode(' '));
        }
        this.buttonAreaElement.appendChild(button);
    },createButton: function(buttonSrc, buttonFunction) {
        var button = document.createElement("a");
        button.innerHTML = "<img src='" + buttonSrc + "' />";
        button.onclick = buttonFunction;
        return button;
    },clickConfirm: function() {
        this.hide();
        this.onComplete();
    }};
Object.overrides(Confirm, CruftyPopup);
Date.prototype.previousMonday = function() {
    return DateUtils.previousMonday(this);
};
Date.prototype.beginningOfWeekWithStartDay = function(weekStartDay) {
    var daysAgo;
    if (weekStartDay <= this.getDay()) {
        daysAgo = this.getDay() - weekStartDay;
    } else {
        daysAgo = 7 - (weekStartDay - this.getDay());
    }
    return this.plusDays(0 - daysAgo).atMidnight();
};
Date.prototype.atMidnight = function() {
    return new Date(this.getFullYear(), this.getMonth(), this.getDate());
}
Date.prototype.elapsedDaysFrom = function(anotherDate) {
    var timeDifference = this.getTime() - anotherDate.getTime();
    return Math.floor((timeDifference + 3600000) / DateUtils.days(1));
};
Date.prototype.isBetween = function(start, finish) {
    if (finish < start) {
        var x = start;
        start = finish;
        finish = x;
    }
    if (this < start) {
        return false;
    }
    if (start < finish && this >= finish) {
        return false;
    }
    return true;
};
Date.prototype.plusMsec = function(msec) {
    return new Date(this.getTime() + msec);
};
Date.prototype.minsMsec = function(msec) {
    return new Date(this.getTime() - msec);
};
Date.prototype.plusHours = function(hours) {
    return new Date(this.getTime() + (hours * 60 * 60 * 1000));
};
Date.prototype.plusDays = function(days) {
    var newDate = new Date(this.getTime());
    newDate.setDate(newDate.getDate() + days);
    return newDate;
};
Date.prototype.plusWeeks = function(numWeeks) {
    return this.plusDays(7 * numWeeks);
};
Date.prototype.minusWeeks = function(numWeeks) {
    return this.plusDays(-(7 * numWeeks));
};
Date.equals = function(a, b) {
    return ((a == null && b == null) || (a != null && b != null && a.getTime() == b.getTime()));
}
Date.equalsMDYYYY = function(a, b) {
    return ((a == null && b == null) || (a != null && b != null && a.toMDYYYY() == b.toMDYYYY()));
}
Date.prototype.toMDYYYY = function() {
    var date_str = this.getMonth() + 1;
    date_str += '/' + this.getDate();
    date_str += '/' + this.getFullYear();
    return date_str;
}
Date.prototype.toYYYYMD = function() {
    var date_str = this.getFullYear();
    date_str += '-' + (this.getMonth() + 1);
    date_str += '-' + this.getDate();
    return date_str;
}
Region = Class.create();
Region.prototype = {initialize: function(top, right, bottom, left) {
        this.top = top;
        this.right = right;
        this.bottom = bottom;
        this.left = left;
    }}
Region.prototype.intersects = function(anotherRectangle) {
    var verticalOverlap = false;
    var horizontalOverlap = false;
    if (this.top <= anotherRectangle.top && this.bottom >= anotherRectangle.bottom) {
        verticalOverlap = true;
    }
    if (this.top >= anotherRectangle.top && this.top <= anotherRectangle.bottom) {
        verticalOverlap = true;
    }
    if (this.bottom >= anotherRectangle.top && this.bottom <= anotherRectangle.bottom) {
        verticalOverlap = true;
    }
    if (this.left <= anotherRectangle.left && this.right >= anotherRectangle.right) {
        horizontalOverlap = true;
    }
    if (this.left >= anotherRectangle.left && this.left <= anotherRectangle.right) {
        horizontalOverlap = true;
    }
    if (this.right >= anotherRectangle.left && this.right <= anotherRectangle.right) {
        horizontalOverlap = true;
    }
    return verticalOverlap && horizontalOverlap;
}
function funcname(f) {
    var s = f.toString().match(/function (\w*)/)[1];
    if ((s == null) || (s.length == 0))
        return "anonymous";
    return s;
}
function stacktrace() {
    var s = "";
    for (var a = arguments.caller; a != null; a = a.caller) {
        s += funcname(a.callee) + "\n";
        if (a.caller == a)
            break;
    }
    return s;
}
function rand(max) {
    return Math.floor(Math.random() * (max));
}
function shuffle(myArray) {
    var i = myArray.length;
    if (i == 0) {
        return false;
    }
    while (--i) {
        var j = rand(i + 1);
        var tempi = myArray[i];
        var tempj = myArray[j];
        myArray[i] = tempj;
        myArray[j] = tempi;
    }
}
var Cookie = {set: function(name, value, daysToExpire) {
        var expire = '';
        if (!daysToExpire)
            daysToExpire = 365;
        var d = new Date();
        d.setTime(d.getTime() + (86400000 * parseFloat(daysToExpire)));
        expire = 'expires=' + d.toGMTString();
        var path = "path=/"
        var cookieValue = escape(name) + '=' + escape(value || '') + '; ' + path + '; ' + expire + ';';
        return document.cookie = cookieValue;
    },get: function(name) {
        var cookie = document.cookie.match(new RegExp('(^|;)\\s*' + escape(name) + '=([^;\\s]+)'));
        return (cookie ? unescape(cookie[2]) : null);
    },erase: function(name) {
        var cookie = Cookie.get(name) || true;
        Cookie.set(name, '', -1);
        return cookie;
    },eraseAll: function() {
        var cookieString = "" + document.cookie;
        var cookieArray = cookieString.split("; ");
        for (var i = 0; i < cookieArray.length; ++i)
        {
            var singleCookie = cookieArray[i].split("=");
            if (singleCookie.length != 2)
                continue;
            var name = unescape(singleCookie[0]);
            Cookie.erase(name);
        }
    },accept: function() {
        if (typeof navigator.cookieEnabled == 'boolean') {
            return navigator.cookieEnabled;
        }
        Cookie.set('_test', '1');
        return (Cookie.erase('_test') === '1');
    },exists: function(cookieName) {
        var cookieValue = Cookie.get(cookieName);
        if (!cookieValue)
            return false;
        return cookieValue.toString() != "";
    }};
function asCgiString(hash, model) {
    var pairs = [];
    for (var key in hash) {
        var name;
        if (model) {
            name = model + "[" + key + "]";
        } else {
            name = key;
        }
        pairs[pairs.length] = name + "=" + encodeURIComponent(hash[key]);
    }
    return pairs.join("&");
}
;
function fromCgiString(cgiString) {
    var hash = {};
    var pairs = cgiString.split("&");
    for (var i = 0; i < pairs.length; ++i) {
        var stuff = pairs[i].split("=");
        hash[stuff[0]] = decodeURIComponent(stuff[1]);
    }
    return hash;
}
function formToCgiHash(form) {
    var params = {};
    $A(form.elements).each(function(inputItem) {
        if (inputItem.type == "submit" || inputItem.type == "button") {
            return;
        }
        if (inputItem.type == 'checkbox' || inputItem.type == 'radio') {
            if (inputItem.checked) {
                if (params[inputItem.name]) {
                    throw 'Multiple checkboxes/radio buttons with the same name are not supported!';
                }
                params[inputItem.name] = inputItem.value;
            }
        }
        else {
            params[inputItem.name] = inputItem.value;
        }
    });
    return params;
}
function addJavaScriptToHead(src) {
    var e = document.createElement("script");
    e.type = "text/javascript";
    e.src = src;
    document.getElementsByTagName("head")[0].appendChild(e);
}
StringUtils = {trim: function(text) {
        return text.replace(/^\s+|\s+$/g, "");
    },stripWhitespace: function(text) {
        return text.replace(/\s+/g, "");
    },isWhitespace: function(text) {
        return this.trim(text).length == 0;
    },capitalize: function(string) {
        if (!string) {
            return string;
        }
        return string.charAt(0).toUpperCase() + string.substring(1);
    },underscored: function(str) {
        return str.gsub(/ /, '_');
    },commaDelimitedStringToArray: function(str) {
        resultArray = $A(str.split(","));
        return StringUtils.trimStringsInArray(resultArray);
    },trimStringsInArray: function(arr) {
        if (arr == null)
            return [];
        trimmedArray = arr.collect(function(foo) {
            return foo.strip();
        });
        return trimmedArray.reject(function(foo) {
            return foo == ""
        });
    },sortIgnoreCase: function(array) {
        return array.sort(function(string1, string2) {
            var aName = string1.toLowerCase();
            var bName = string2.toLowerCase();
            if (aName < bName) {
                return -1;
            } else if (aName > bName) {
                return 1;
            } else {
                return 0;
            }
        }.bind(this));
    }};
var StringSorter = Class.create();
StringSorter.prototype = {initialize: function(stringsInOrder) {
        this.order = {};
        for (var i = 0; i < stringsInOrder.length; ++i) {
            this.order[stringsInOrder[i]] = i;
        }
    },sort: function(array) {
        return array.sort(function(a, b) {
            return this.orderOf(a) - this.orderOf(b);
        }.bind(this));
    },orderOf: function(string) {
        if (this.order[string] == undefined) {
            return 99999;
        } else {
            return this.order[string];
        }
    }};
var Pivotal = {};
Pivotal.Popup = Class.create();
Pivotal.Popup.prototype = {initialize: function(popupElementId, options) {
        this.popupElementId = popupElementId;
        this.options = {placement: Pivotal.Placement.CENTER_IN_WINDOW,maskOpacity: 0.5,maskElementId: "mask",maskZindex: 1000,maskBackgroundColor: "#FFFFFF",popupZindex: 2000,popupCssClass: "popup",scrollableElementIds: []};
        Object.extend(this.options, options || {});
        this._initializePopupElement();
    },visible: function() {
        return this.popupElement.visible();
    },showPopup: function() {
        this.options.placement.placeElement(this.popupElement);
        Element.show(this.popupElement);
        Element.hideScrollbarsUnderElement(this.popupElement, this.options.scrollableElementIds);
        Element.reveal(this.popupElement);
    },showMask: function() {
        this._initializeMaskElement();
        Element.reveal(this.maskElement);
        Element.hideScrollbarsUnderElement(this.maskElement, this.options.scrollableElementIds);
    },showPopupWithMask: function() {
        this.showMask();
        this.showPopup();
    },hide: function() {
        Element.conceal(this.popupElement);
        Element.hide(this.popupElement);
        if (this.maskElement) {
            Element.conceal(this.maskElement);
        }
        Element.unhideScrollbars(this.options.scrollableElementIds);
    },_initializeMaskElement: function() {
        this.maskElement = $(this.options.maskElementId);
        if (this.maskElement == null) {
            this.maskElement = document.createElement('div');
            document.body.appendChild(this.maskElement);
            document.body.style.height = "100%";
            this.maskElement.id = this.options.maskElementId;
            this.maskElement.style.backgroundColor = this.options.maskBackgroundColor;
            this.maskElement.style.width = "100%";
            this.maskElement.style.height = document.documentElement.scrollHeight + "px";
            this.maskElement.style.position = "absolute";
            this.maskElement.style.top = "0px";
            this.maskElement.style.left = "0px";
            Element.setOpacity(this.maskElement, this.options.maskOpacity);
            this.maskElement.style.zIndex = this.options.maskZindex.toString();
            Element.conceal(this.maskElement);
        }
    },_initializePopupElement: function() {
        this.popupElement = $(this.popupElementId);
        if (this.popupElement == null) {
            this.popupElement = document.createElement('div');
            document.body.appendChild(this.popupElement);
            this.popupElement.id = this.popupElementId;
        }
        this.popupElement.className = this.options.popupCssClass;
        this.popupElement.style.zIndex = this.options.popupZindex.toString();
        Element.hide(this.popupElement);
        Element.conceal(this.popupElement);
    }};
Pivotal.Placement = Class.create();
Pivotal.Placement.prototype = {initialize: function(positionCode, options) {
        this.positionCode = positionCode;
        this.options = {spacingPixels: 5,align: Pivotal.Placement.ALIGN_LEFT_EDGE,offsetHorizontal: 0,offsetVertical: 0};
        Object.extend(this.options, options || {});
    },placeElement: function(element) {
        switch (this.positionCode) {
            case Pivotal.Placement.CENTER_CODE:
                Utils.centerInWindow(element);
                break;
            case Pivotal.Placement.DO_NOT_POSITION_CODE:
                break;
            case Pivotal.Placement.BELOW_CODE:
                var relatedElement = $(this.options.relatedElementId);
                var relatedOffset = this.getOffsetFor(relatedElement);
                var relatedHeight = Utils.heightWithBorders(relatedElement);
                var relatedWidth = Utils.widthWithBorders(relatedElement);
                var elementWidth = Utils.widthWithBorders(element);
                element.style.position = "absolute";
                var leftAlignX = (relatedOffset[0] + this.options.offsetHorizontal);
                var rightAlignX = (relatedOffset[0] + relatedWidth - elementWidth + this.options.offsetHorizontal);
                switch (this.options.align) {
                    case Pivotal.Placement.ALIGN_LEFT_EDGE:
                        element.style.left = leftAlignX + "px";
                        break;
                    case Pivotal.Placement.ALIGN_RIGHT_EDGE:
                        element.style.left = (rightAlignX < 0 ? leftAlignX : rightAlignX) + "px";
                        break;
                    default:
                        throw new Error("Unknown alignment - " + this.options.align);
                }
                element.style.top = (relatedOffset[1] + relatedHeight + this.options.offsetVertical + this.options.spacingPixels) + "px";
                break;
            case Pivotal.Placement.TO_RIGHT_OF_CODE:
                var relatedElement = $(this.options.relatedElementId);
                var relatedOffset = this.getOffsetFor(relatedElement);
                var relatedHeight = Utils.heightWithBorders(relatedElement);
                var relatedWidth = Utils.widthWithBorders(relatedElement);
                var elementWidth = Utils.widthWithBorders(element);
                element.style.position = "absolute";
                var leftAlignX = (relatedOffset[0] + relatedWidth + this.options.offsetHorizontal);
                var rightAlignX = (relatedOffset[0] + relatedWidth - elementWidth + this.options.offsetHorizontal);
                switch (this.options.align) {
                    case Pivotal.Placement.ALIGN_LEFT_EDGE:
                        element.style.left = leftAlignX + "px";
                        break;
                    case Pivotal.Placement.ALIGN_RIGHT_EDGE:
                        element.style.left = (rightAlignX < 0 ? leftAlignX : rightAlignX) + "px";
                        break;
                    default:
                        throw new Error("Unknown alignment - " + this.options.align);
                }
                element.style.top = (relatedOffset[1] + this.options.offsetVertical + this.options.spacingPixels) + "px";
                break;
            default:
                throw new Error("Unknown position code - " + this.positionCode);
        }
    },getOffsetFor: function(element) {
        return Position.cumulativeOffset(element);
    }};
Pivotal.Placement.CENTER_CODE = "center";
Pivotal.Placement.DO_NOT_POSITION_CODE = "noposition";
Pivotal.Placement.BELOW_CODE = "below";
Pivotal.Placement.ALIGN_LEFT_EDGE = "leftedge";
Pivotal.Placement.ALIGN_RIGHT_EDGE = "rightedge";
Pivotal.Placement.CENTER_IN_WINDOW = new Pivotal.Placement(Pivotal.Placement.CENTER_CODE);
Pivotal.Placement.DO_NOT_POSITION = new Pivotal.Placement(Pivotal.Placement.DO_NOT_POSITION_CODE);
Pivotal.Placement.belowElement = function(elementId, options) {
    options.relatedElementId = elementId;
    return new Pivotal.Placement(Pivotal.Placement.BELOW_CODE, options);
}
Pivotal.Placement.toRightOfElement = function(elementId, options) {
    options.relatedElementId = elementId;
    return new Pivotal.Placement(Pivotal.Placement.TO_RIGHT_OF_CODE, options);
}
var Tracker = {};
Tracker.Analytics = {trackEvent: function(category, action, options) {
        options = options || {};
        window._gaq = window._gaq || [];
        var c = ["_trackEvent", category, action];
        if (options.label || options.value) {
            c.push(options.label);
            c.push(options.value);
        }
        window._gaq.push(c);
    },trackTimedEvent: function(category, action, start, finish) {
        Tracker.Analytics.trackEvent(category, action, {label: this.labelForProjectSize(app.project),value: finish.getTime() - start.getTime()});
    },labelForProjectSize: function labelForProjectSize(project) {
        if (!project) {
            return "";
        }
        var size = project.getStoryCount();
        var thresholds = [250, 500, 750, 1000, 1500];
        var labels = ["0-250", "250-500", "500-750", "750-1000", "1000-1500"];
        for (var i = 0; i < thresholds.length; i++) {
            if (size <= thresholds[i]) {
                return labels[i];
            }
        }
        return "1500+";
    },benchMark: function(func, name) {
        var callCount = 0;
        var totalTime = 0;
        return function() {
            var t = new Date().getTime();
            var returnVal = func.apply(this, arguments);
            callCount++;
            var deltaTime = new Date().getTime() - t;
            totalTime += deltaTime;
            console.log(name, ' totalCalls/unitTime/totalTime: ', [callCount, deltaTime + 'ms', totalTime + 'ms'].join('/'));
            return returnVal;
        };
    },install: function() {
        var bm = Tracker.Analytics.benchMark;
    }};
Tracker.Template = {cache: {},settings: {evaluate: /\<\%([\s\S]+?)\%\>/g,interpolate: /\<\%\=([\s\S]+?)\%\>/g},exists: function(name) {
        return !!j('#' + name).length;
    },inline: function(name, string, data) {
        if (!Tracker.Template.cache[name]) {
            Tracker.Template.cache[name] = Tracker.Template.compile(string);
        }
        var template = Tracker.Template.cache[name];
        return template(data);
    },render: function(name, data) {
        if (!this.exists(name)) {
            throw new Error("no template found for template '" + name + "'");
        }
        var string = j.trim(j.trim(j('#' + name).html()).replace(/^<!\[CDATA\[/, "").replace(/\]\]>$/, ""));
        var inline = this.inline(name, string, data);
        return inline;
    },compile: function(str) {
        var c = Tracker.Template.settings;
        var tmpl = 'var __p=[],print=function(){__p.push.apply(__p,arguments);};' + 'Object.extend(obj, Tracker.TemplateHelpers);' + 'with(obj||{}){__p.push(\'' +
        str.replace(/\\/g, '\\\\').replace(/'/g, "\\'").replace(c.interpolate, function(match, code) {
            if (code.match(/^\s*h\s+/)) {
                return "',Element.cleanupText(" +
                code.replace(/^\s*h/, "").replace(/\\'/g, "'") + "),'";
            } else {
                return "'," + code.replace(/\\'/g, "'") + ",'";
            }
        }).replace(c.evaluate || null, function(match, code) {
            return "');" + code.replace(/\\'/g, "'").replace(/[\r\n\t]/g, ' ') + "__p.push('";
        }).replace(/\r/g, '\\r').replace(/\n/g, '\\n').replace(/\t/g, '\\t')
        + "');}return __p.join('');";
        var func = new Function('obj', tmpl);
        return func;
    }};
Tracker.TemplateHelpers = {optionsForImageSelect: function(name, options, selected) {
        return $A(options).map(function(value) {
            return Tracker.Template.inline('Tracker.TemplateHelpers.optionsForImageSelect', '<li><a href="#" data-<%= name %>="<%= value %>" class="<%= name %>_option <%= selected %> <%= name %>_<%= value %>" >\
           <img src="<%= icon_path %>" title="<%= value %> Points">\
           </a></li>', {name: name,value: value,icon: icon_path = story_icon_path(name + "_" + value + ".png"),selected: (selected == value ? 'selected' : '')});
        }).join('');
    },optionsForSelect: function(options, selected) {
        return $A(options).map(function(option) {
            option.selected = (selected == option.value ? ' selected="selected"' : '');
            return Tracker.Template.inline('Tracker.TemplateHelpers.optionsForSelect', '<option value="<%= value %>"<%= selected %>><%=h name %></option>', option);
        }).join('');
    }};
Tracker.AutoResizer = {MINIMUM_HEIGHT: 17,HEIGHT_CLASS: "expand17-99999",init: function init() {
        j(document).on("panel:didResize", "td.panel", function(e) {
            var panel = j(e.target).closest("td.panel");
            Tracker.AutoResizer._triggerResize(panel);
        });
        var attachBehavior = function(e) {
            Tracker.AutoResizer.makeContainedTextareasResizeable(e.target);
        };
        j(document).on("epic:description:didBecomeEditable", "div.storyItem", attachBehavior);
        j(document).on("details:didExpand", "div.storyItem", attachBehavior);
        j(document).on("story:task:didBecomeEditable", "div.storyItem", attachBehavior);
        j(document).on("story:description:didBecomeEditable", "div.storyItem", attachBehavior);
        j(document).on("story:reject_reason:didBecomeVisible", "div.balloonContents .reject_reason", attachBehavior);
    },makeContainedTextareasResizeable: function(element) {
        var $element = j(element);
        Tracker.AutoResizer._attachGrowthBehavior($element);
        if (j.browser.msie) {
            Tracker.AutoResizer._triggerResize($element);
        }
    },_triggerResize: function _triggerResize($element) {
        setTimeout(function() {
            j("textarea.autoresize", $element).trigger("keyup");
        }, Tracker.AutoResizer._resizeTimeout());
    },_resizeTimeout: function _resizeTimeout() {
        return j.browser.msie ? 50 : 0;
    },_attachGrowthBehavior: function _attachGrowthBehavior($element) {
        j("textarea.autoresize", $element).each(function() {
            var $textArea = j(this);
            $textArea.heightBefore = parseInt($textArea.height());
            $textArea.on('mousedown', Tracker.AutoResizer._onManualResizeMouseDown);
            $textArea.on('mouseup', Tracker.AutoResizer._onManualResizeMouseUp);
            $textArea.TextAreaExpander(j($textArea.closest('.inner')));
        });
    },_onManualResizeMouseDown: function() {
        var $textArea = j(this);
        $textArea.heightBefore = parseInt($textArea.height());
    },_onManualResizeMouseUp: function() {
        var $textArea = j(this);
        var heightAfter = parseInt($textArea.height());
        if (heightAfter != $textArea.heightBefore) {
            this.expandMin = heightAfter;
            $textArea.heightBefore = heightAfter;
        }
    },bindToIsReady: function() {
        j(document).on('tracker:isReady', function() {
            Tracker.AutoResizer.init();
        });
    }};
Tracker.AutoResizer.bindToIsReady();
String.prototype.htmlEscape = function() {
    var s = this;
    s = s.replace(/&/g, '&amp;');
    s = s.replace(/>/g, '&gt;');
    s = s.replace(/</g, '&lt;');
    s = s.replace(/"/g, '&quot;');
    return s;
};
function formToCgiHash(form) {
    var params = {};
    $A(form.elements).each(function(inputItem) {
        if (inputItem.type == "submit" || inputItem.type == "button") {
            return;
        }
        if (inputItem.type == 'checkbox' || inputItem.type == 'radio') {
            if (inputItem.checked) {
                if (params[inputItem.name]) {
                    throw 'Multiple checkboxes/radio buttons with the same name are not supported!';
                }
                params[inputItem.name] = inputItem.value;
            }
        }
        if (inputItem.tagName.toLowerCase() == 'select' && inputItem.multiple && j(inputItem).hasClass('chzn-select')) {
            var value = j(inputItem).val();
            params[inputItem.name] = (value || []).join(',');
        }
        else {
            params[inputItem.name] = inputItem.value;
        }
    });
    return params;
}
;
function isChrome() {
    return (navigator.userAgent.toLowerCase().indexOf("chrome") != -1);
}
;
Tracker.newLinkToFunction = function newLinkToFunction(onclickFunction, options, innerText) {
    var renderedElement = j('<a href="javascript:void(0)">' + innerText + '</a>').get(0);
    for (var optionName in options) {
        renderedElement[optionName] = options[optionName];
    }
    j(renderedElement).click(onclickFunction);
    return $(renderedElement);
};
Object.extend(String.prototype, {parseJSON: function parseJSON() {
        try {
            return this.evalJSON(true);
        } catch (e) {
            return this.nonNativeEvalJSON(true);
        }
    },nonNativeEvalJSON: function nonNativeEvalJSON(sanitize) {
        var json = this.unfilterJSON(), cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
        if (cx.test(json)) {
            json = json.replace(cx, function(a) {
                return '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
            });
        }
        try {
            if (!sanitize || json.isJSON())
                return eval('(' + json + ')');
        } catch (e) {
        }
        throw new SyntaxError('Badly formed JSON string: ' + this.inspect());
    },pluralize: function pluralize(size, pluralValue) {
        var plural = pluralValue || (this + 's');
        return Number(size) == 1 ? this + "" : plural;
    },capitalize: function capitalize() {
        return StringUtils.capitalize(this);
    },ellipsify: function ellipsify(length) {
        return this.length > length ? this.substring(0, (length - 3)) + "..." : this + "";
    },hash: function hash() {
        var key = 0;
        for (var c = 0; c < this.length; c++) {
            key *= 65599;
            key += this.charCodeAt(c);
            key &= 0xffffffff;
        }
        key += key >> 5;
        key &= 0xffffffff;
        return key;
    },squashSplit: function squashSplit(delimiter, limit) {
        var naive = this.split(delimiter);
        var squashed = jQuery.grep(naive, function(string) {
            return string && string.length;
        });
        if (limit) {
            return squashed.slice(0, limit);
        }
        return squashed;
    }});
Ajax.Response.prototype._getResponseJSON = function() {
    var options = this.request.options;
    if (!options.evalJSON || (options.evalJSON != 'force' && !(this.getHeader('Content-type') || '').include('application/json')) || this.responseText.blank())
        return null;
    try {
        return this.responseText.parseJSON(options.sanitizeJSON || !this.request.isSameOrigin());
    } catch (e) {
        this.request.dispatchException(e);
    }
};
var app;
function initApp(options) {
    options.should_delay_render = true;
    app = new App(options);
    app.renderLoading();
}
function unloadApp() {
    if (app) {
        app.stopPinger();
        app = null;
    }
}
function startPinger() {
    app.startPinger();
}
function stopPinger() {
    if (app) {
        app.stopPinger();
    }
}
j(function() {
    eval("onPageLoad();");
});
j(window).unload(unloadApp);
DateWithZone = Class.create();
DateWithZone.setOffset = function(offsetInSecs) {
    DateWithZone.offsetInSecs = offsetInSecs;
};
DateWithZone.newDateFromString = function(dateString, timeZoneName) {
    var unadjustedDate = new Date(dateString);
    var timeZoneInfo = TimeZoneInfo.forNameOrDefault(timeZoneName);
    if (timeZoneInfo == undefined) {
        return unadjustedDate;
    }
    var timeZonePeriod = timeZoneInfo.timeZonePeriodFor(unadjustedDate);
    var utcOffsetInSecs = unadjustedDate.getTimezoneOffset() * 60;
    if (timeZonePeriod == undefined || timeZonePeriod.utc_offset == -utcOffsetInSecs) {
        return unadjustedDate;
    } else {
        var utc = unadjustedDate.getTime() - (utcOffsetInSecs * 1000);
        return new Date(utc - (timeZonePeriod.utc_offset * 1000));
    }
};
DateWithZone.newDateWithZoneFromAdjustedDate = function(adjustedDate, timeZoneName) {
    var timeZoneInfo = TimeZoneInfo.forNameOrDefault(timeZoneName);
    if (timeZoneInfo == undefined) {
        return adjustedDate.asDateWithZone();
    }
    var timeZonePeriod = timeZoneInfo.timeZonePeriodFor(adjustedDate);
    var utcOffsetInSecs = adjustedDate.getTimezoneOffset() * 60;
    if (timeZonePeriod == undefined || timeZonePeriod.utc_offset == -utcOffsetInSecs) {
        return adjustedDate.asDateWithZone();
    } else {
        var utc = adjustedDate.getTime() - (utcOffsetInSecs * 1000);
        return new Date(utc - (timeZonePeriod.utc_offset * 1000)).asDateWithZone();
    }
};
DateWithZone.prototype = {initialize: function(date, timeZoneName) {
        this.date = date || new Date();
        this.timeZoneInfo = TimeZoneInfo.forNameOrDefault(timeZoneName);
        this.timeZonePeriod = this.timeZoneInfo == null ? null : this.timeZoneInfo.timeZonePeriodFor(this.date);
        this.adjustedDate = this._getAdjustedDate(this.date);
    },asDate: function() {
        return this.date;
    },_getAdjustedDate: function(date) {
        var adjustedDate = null;
        var utcOffsetInSecs = date.getTimezoneOffset() * 60;
        if (this.timeZonePeriod == undefined || this.timeZonePeriod.utc_offset == -utcOffsetInSecs) {
            adjustedDate = date;
        } else {
            var utc = date.getTime() + (utcOffsetInSecs * 1000);
            adjustedDate = new Date(utc + (this.timeZonePeriod.utc_offset * 1000));
        }
        return adjustedDate;
    },asDateBeginningOfWeekWithStartDay: function(weekStartDay) {
        return DateWithZone.newDateFromString(this.adjustedDate.beginningOfWeekWithStartDay(weekStartDay).toDateString(), this.getTimeZoneName());
    },asDisplayStringWithTimezone: function() {
        if (this.timeZonePeriod == null) {
            return this.adjustedDate.asDisplayString();
        } else {
            return this.adjustedDate.asDisplayString() + " " + this.timeZonePeriod.abbreviation;
        }
    },getTimeZoneName: function() {
        return this.timeZoneInfo ? this.timeZoneInfo.name : null;
    },getTimezoneOffset: function() {
        return this.timeZonePeriod ? -(this.timeZonePeriod.utc_offset / 60) : this.date.getTimezoneOffset();
    },getTime: function() {
        return this.date.getTime();
    },atNoon: function() {
        return DateWithZone.newDateWithZoneFromAdjustedDate(this.adjustedDate.atNoon()).date;
    }};
var adjustedDateMethods = ["getMilliseconds", "getMinutes", "getMonth", "getSeconds", "getHours", "getYear", "getShortMonthString", "getMonthString", "getShortDowString", "getAmpmString", "getMinutesString", "getMinutesString", "asDisplayStringWithTime", "asDisplayString", "asDisplayStringNoYear", "asShortDisplayString", "toMDYYYY", "atMidnight"];
for (var i = 0; i < adjustedDateMethods.length; i++) {
    var methodName = adjustedDateMethods[i];
    function setFunction() {
        var theMethodName = methodName;
        DateWithZone.prototype[methodName] = function() {
            return this.adjustedDate[theMethodName].apply(this.adjustedDate, arguments);
        }
    }
    ;
    setFunction();
}
TimeZoneInfo = Class.create();
TimeZoneInfo.registeredTimeZoneInfos = {};
TimeZoneInfo.register = function(timezoneInfo) {
    TimeZoneInfo.registeredTimeZoneInfos[timezoneInfo.name] = timezoneInfo;
};
TimeZoneInfo.forName = function(name) {
    return TimeZoneInfo.registeredTimeZoneInfos[name];
};
TimeZoneInfo.forNameOrDefault = function(name) {
    return TimeZoneInfo.forName(name) || TimeZoneInfo.userTimeZoneInfo;
};
TimeZoneInfo.setUserTimezone = function(timeZoneName) {
    TimeZoneInfo.userTimeZoneInfo = TimeZoneInfo.forName(timeZoneName);
};
TimeZoneInfo.prototype = {initialize: function(json) {
        this.name = json.name;
        this.periods = json.periods;
    },timeZonePeriodFor: function(date) {
        var date_milliseconds = date.getTime();
        var period;
        for (var i = 0; i < this.periods.length; i++) {
            period = this.periods[i];
            if ((period.start == null && period.finish == null) || date_milliseconds >= period.start && (period.finish == null || date_milliseconds <= period.finish)) {
                return period;
            }
        }
        return null;
    }};
function compute_image_path(relative_image_path) {
    var asset_path = "";
    if (relative_image_path.match('^http')) {
        return relative_image_path;
    }
    if (window.app != undefined && app.cdnDomain) {
        var cdnDomain = app.cdnDomain;
        if (app.isSecure()) {
            cdnDomain = app.cdnSslDomain;
        }
        var cdnDomainWithHostNumber;
        if (cdnDomain.match('%d')) {
            cdnDomainWithHostNumber = cdnDomain.gsub('%d', (Math.abs(relative_image_path.hash()) % app.numberOfCdnHosts));
        } else {
            cdnDomainWithHostNumber = cdnDomain;
        }
        asset_path = document.location.protocol + "//" + cdnDomainWithHostNumber;
    }
    return asset_path + relative_image_path;
}
function images_root_path(image_relative_path) {
    return compute_image_path("/images/v7/" + image_relative_path);
}
function story_view_path(image_relative_path) {
    return images_root_path("application/stories_view/" + image_relative_path);
}
function story_icon_path(image_name) {
    return story_view_path("icons/" + image_name);
}
function story_button_path(image_name) {
    return story_view_path("buttons/" + image_name);
}
Element.newImageLink = function(options, eventHash) {
    options.src = compute_image_path(options.src);
    var renderedElement = Element.create("img", options);
    for (var eventName in eventHash) {
        j(renderedElement).on(eventName, eventHash[eventName]);
    }
    if (options.hover_src != undefined) {
        options.hover_src = compute_image_path(options.hover_src);
        renderedElement.setAttribute('onmouseover', "this.src='" + options.hover_src + "'");
        renderedElement.setAttribute('onmouseout', "this.src='" + options.src + "'");
    }
    return renderedElement;
};
Element.newImage = function(src, options) {
    var _options = options || {};
    _options.src = compute_image_path(src);
    return Element.create("img", _options);
};
DateUtils = {SUNDAY: 0,MONDAY: 1,TUESDAY: 2,WEDNESDAY: 3,THURSDAY: 4,FRIDAY: 5,SATURDAY: 6,systemTime: null,now: function() {
        if (this.systemTime != null) {
            return this.systemTime;
        } else {
            return new Date();
        }
    },setTime: function(date) {
        this.systemTime = date;
    },previousMonday: function(fromDate) {
        var date = fromDate ? new Date(fromDate) : DateUtils.now();
        var dayOfWeek = date.getDay();
        if (dayOfWeek == DateUtils.SUNDAY) {
            dayOfWeek = 7;
        }
        var rightDayWrongTime = new Date(date - DateUtils.days(dayOfWeek - 1));
        var monday = rightDayWrongTime.atMidnight();
        if (monday.getDay() != 1) {
            throw "Monday isn't Monday";
        }
        return monday;
    },weeks: function(numberOfWeeks) {
        return numberOfWeeks * DateUtils.days(7);
    },days: function(numberOfDays) {
        return numberOfDays * 60 * 60 * 24 * 1000;
    },earliestDate: function(date1, date2) {
        if (!date1) {
            return date2
        }
        ;
        if (!date2) {
            return date1
        }
        ;
        return date1 < date2 ? date1 : date2;
    }};
Date.SHORT_MONTH_NAMES = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
Date.MONTH_NAMES = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
Date.SHORT_DOW_NAMES = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
Date.prototype.getShortMonthString = function() {
    return Date.SHORT_MONTH_NAMES[this.getMonth()];
};
Date.prototype.getMonthString = function() {
    return Date.MONTH_NAMES[this.getMonth()];
};
Date.prototype.getShortDowString = function() {
    return Date.SHORT_DOW_NAMES[this.getDay()];
};
Date.prototype.getAmpmString = function() {
    var hours = this.getHours();
    if (hours == 0) {
        return "12:" + this.getMinutesString() + "am";
    } else if (hours < 12) {
        return hours + ":" + this.getMinutesString() + "am";
    } else if (hours == 12) {
        return "12:" + this.getMinutesString() + "pm";
    } else {
        return (hours - 12) + ":" + this.getMinutesString() + "pm";
    }
};
Date.prototype.asFriendlyDateString = function() {
    return this.getMonthString() + " " + this.getDate();
};
Date.prototype.getMinutesString = function() {
    var minutes = this.getMinutes();
    if (minutes == 0) {
        return "00";
    } else if (minutes < 10) {
        return "0" + minutes;
    } else {
        return minutes.toString();
    }
};
Date.prototype.getTimezoneName = function() {
    try {
        var timeZonePattern = /(\([\w\s]+\))$/;
        return this.toTimeString().match(timeZonePattern)[0];
    } catch (e) {
        return "";
    }
};
Date.prototype.asDisplayStringWithTime = function() {
    return this.asDisplayString() + ", " + this.getAmpmString();
};
Date.prototype.asDisplayString = function() {
    return this.asDisplayStringNoYear() + " " + this.getFullYear();
};
Date.prototype.asDisplayStringWithTimezone = function() {
    return this.asDisplayString() + " " + this.getTimezoneName();
};
Date.prototype.asDisplayStringNoYear = function() {
    return this.getDate() + " " + this.getShortMonthString();
};
Date.prototype.asShortDisplayString = function() {
    return this.asDisplayStringNoYear() + " " + this.getAmpmString();
};
Date.prototype.asShortDisplayStringWithTimezone = function() {
    return this.asShortDisplayString() + " " + this.getTimezoneName();
};
Date.prototype.asDisplayMonthDay = function() {
    return this.getShortMonthString() + " " + this.getDate();
};
Date.prototype.atNoon = function() {
    return new Date(this.getFullYear(), this.getMonth(), this.getDate(), 12);
};
Date.prototype.asDateWithZone = function(timeZoneName) {
    return new DateWithZone(this, timeZoneName);
};
Date.prototype.minusSeconds = function(seconds) {
    return new Date(this.getTime() - (seconds * 1000));
};
Date.prototype.timeAgo = function() {
    var seconds_diff = (((new Date()).getTime() - this.getTime()) / 1000);
    var minutes_diff = Math.round(seconds_diff / 60);
    var dateText;
    if (seconds_diff < 30) {
        dateText = "less than a minute ago";
    } else if (seconds_diff < 90) {
        dateText = "1 minute ago"
    } else if (minutes_diff < 45) {
        dateText = minutes_diff + " minutes ago";
    } else if (minutes_diff < 90) {
        dateText = "about 1 hour ago";
    } else if (minutes_diff < 1440) {
        dateText = "about " + Math.round(minutes_diff / 60) + " hours ago";
    } else if (minutes_diff < 2880) {
        dateText = "1 day ago";
    } else if (minutes_diff < 43200) {
        dateText = Math.floor(minutes_diff / 1440) + " days ago"
    } else if (minutes_diff < 86400) {
        dateText = "about 1 month ago"
    } else if (minutes_diff < 525600) {
        dateText = Math.floor(minutes_diff / 43200) + " months ago";
    } else if (minutes_diff < 1051200) {
        dateText = "about 1 year ago";
    } else {
        dateText = "over " + Math.floor(minutes_diff / 525600) + " years ago";
    }
    return dateText;
};
Date.naturalNameForRange = function(start, end) {
    if (end >= new Date().plusHours(-2)) {
        var seconds_diff = ((new Date()).getTime() - start.getTime()) / 1000;
        var minutes_diff = Math.ceil(seconds_diff / 60);
        var dateText;
        if (seconds_diff < 90) {
            dateText = "minute";
        } else if (minutes_diff <= 45) {
            dateText = minutes_diff + " minutes";
        } else if (minutes_diff < 90) {
            dateText = "hour";
        } else if (minutes_diff < 1440) {
            dateText = Math.round(minutes_diff / 60) + " hours";
        } else if (minutes_diff < 2880) {
            dateText = "day";
        } else {
            dateText = Math.floor(minutes_diff / 1440) + " days"
        }
        return "in the last " + dateText;
    } else {
        return end.timeAgo();
    }
};
Date.prototype.isBefore = function(otherDate) {
    return this.getTime() < otherDate.getTime();
};
Date.prototype.isAfter = function(otherDate) {
    return this.getTime() > otherDate.getTime();
};
var attachmentPeriodicUpdaters = {};
function doAlert(msg) {
    alert(msg);
}
prompt_for_new_project_name = function(url) {
    var name = prompt("Please enter a name for your new project", "");
    if (name != null) {
        document.location = url + "&name=" + escape(name);
    }
    return false;
}
function benchmark(operation, func) {
    if (console && console.debug) {
        console.debug(operation + " starting");
        var start = DateUtils.now().getTime();
        func();
        var end = DateUtils.now().getTime();
        console.debug(operation + " took " + (end - start) + " msec");
    }
}
var ObjectHelper = {areEquivalent: function(originalValue, incomingValue) {
        var origType = this.getTypeOf(originalValue);
        var incomingType = this.getTypeOf(incomingValue);
        if (origType == incomingType) {
            if (origType == 'Array') {
                return Object.toJSON(originalValue) == Object.toJSON(incomingValue);
            }
            return originalValue == incomingValue;
        } else if (origType == 'Number' && incomingType == 'String') {
            return (originalValue == new Number(incomingValue));
        } else if (origType == 'String' && incomingType == 'Number') {
            return (new Number(originalValue) == incomingValue);
        }
        return false;
    },isCollectionEmpty: function(object) {
        var x = 0;
        for (var prop in object) {
            x++;
        }
        return x == 0;
    },getTypeOf: function(something) {
        if (something == null) {
            return StringUtils.capitalize(typeof something);
        }
        var result = typeof something;
        try {
            switch (result) {
                case 'string':
                case 'boolean':
                case 'number':
                    break;
                case 'object':
                case 'function':
                    switch (something.constructor) {
                        case new String().constructor:
                            result = 'String';
                            break;
                        case new Boolean().constructor:
                            result = 'Boolean';
                            break;
                        case new Number().constructor:
                            result = 'Number';
                            break;
                        case new Array().constructor:
                            result = 'Array';
                            break;
                        case new RegExp().constructor:
                            result = 'RegExp';
                            break;
                        case new Date().constructor:
                            result = 'Date';
                            break;
                        case Function:
                            result = 'Function';
                            break;
                        default:
                            var m = something.constructor.toString().match(/function\s*([^( ]+)\(/);
                            if (m)
                                result = m[1];
                            else
                                break;
                    }
                    break;
            }
        }
        finally {
            return StringUtils.capitalize(result);
        }
    }};
if (typeof console == 'undefined') {
    console = {debug: function() {
        },warn: function() {
        },error: function() {
        },log: function() {
        },trace: function() {
        }}
}
Math.roundNumber = function(number, decimalPlaces) {
    return Math.round(number * Math.pow(10, decimalPlaces)) / Math.pow(10, decimalPlaces);
};
function contains(container, item) {
    switch (ObjectHelper.getTypeOf(container)) {
        case "Array":
            return (container.indexOf(item) != -1);
        case "Hash":
            return (typeof (container.get(item)) != 'undefined');
        case "Object":
            return (typeof (container[item]) != 'undefined');
        default:
            return false
    }
}
time = function(description, n, fn) {
    var start = (new Date).getTime();
    for (var i = 0; i < n; i++) {
        fn.call();
    }
    var diff = (new Date).getTime() - start;
    console.log(description + ": " + diff + "ms");
    return diff;
};
function attachDataNewWindowOpener() {
    j(document).on('tracker:isReady', function() {
        j(document).on("click", "a[data-new-window]", function() {
            var a = j(this).closest('a[data-new-window]');
            window.open(a.attr('href'));
            return false;
        });
    });
}
attachDataNewWindowOpener();
Array.prototype.diff = function(a) {
    return this.filter(function(i) {
        return !(a.indexOf(i) > -1);
    });
};
Tutorial = {addClickLink: function(css_element, css_element_to_show) {
        $$(css_element).invoke("observe", "click", function(event) {
            event.preventDefault();
            $(this).up(".tooltip").hide();
            if (css_element_to_show)
                $$(css_element_to_show).invoke("show");
            return false;
        });
    },iceboxStoryIds: function() {
        return $$("#icebox .item.item:not(#icebox_itemList_storynewStory)").collect(function(e) {
            return e.id;
        });
    },runTutorial: function() {
        var offset = $('addstory_control_button').cumulativeOffset();
        $("add_story").setStyle({left: offset[0] + "px",top: offset[1] + "px"});
        offset = $('velocity').cumulativeOffset();
        $("velocity_new_project").setStyle({left: offset[0] + "px",top: offset[1] + "px"});
        var interval = setInterval(function() {
            if ($("current")) {
                clearInterval(interval);
                var icebox_interval = setInterval(function() {
                    var icebox_itemList = $("icebox_itemList");
                    if (icebox_itemList) {
                        clearInterval(icebox_interval);
                        icebox_itemList.insert($("this_is_your_icebox"));
                    }
                }, 100);
                var current_interval = setInterval(function() {
                    var current_itemList = $("current_itemList");
                    if (current_itemList) {
                        clearInterval(current_interval);
                        current_itemList.insert($("current_and_backlog"));
                    }
                }, 100);
                $$("a#icebox_control_button:not(.selected)").each(function(e) {
                    eval($(e).onclick());
                    $$(".modal.tooltip").each(function(self) {
                        self.setStyle({'marginLeft': self.getWidth() / -2 + 'px'});
                    });
                });
                Tutorial.addClickLink(".tooltip#intro a.help_me_get_started", ".tooltip#this_is_your_icebox");
                Tutorial.addClickLink(".tooltip#intro a.no_thanks");
                Tutorial.addClickLink(".tooltip#this_is_your_icebox a.forward", ".tooltip#current_and_backlog");
                Tutorial.addClickLink(".tooltip#current_and_backlog a.forward", ".tooltip#add_story");
                Tutorial.addClickLink(".tooltip#current_and_backlog_reiterated a.forward", ".tooltip#velocity_new_project");
                Tutorial.addClickLink(".tooltip#velocity_new_project a.forward", ".tooltip#story_states");
                Tutorial.addClickLink(".tooltip#story_states a.forward", ".tooltip#next_steps");
                Tutorial.addClickLink(".tooltip#next_steps a.restart_guide", ".tooltip#intro");
                Tutorial.addClickLink(".tooltip#next_steps a.hide");
                $("intro").show();
                $("addstory_control_button").observe("click", function() {
                    var original_icebox_item_ids = Tutorial.iceboxStoryIds();
                    var tooltip = $("add_story").visible() ? $("add_story") : null;
                    if (tooltip) {
                        tooltip.hide();
                        $("icebox_itemList").insert($("describe_story"));
                        setTimeout(function() {
                            $("describe_story").show();
                        }, 0);
                        var estimate_points_interval = setInterval(function() {
                            var story_newStory_details = $("story_newStory_details");
                            if (!story_newStory_details) {
                                $('describe_story').hide();
                                Tutorial.iceboxStoryIds().reject(function(e) {
                                    return original_icebox_item_ids.include(e);
                                }).each(function(item_id) {
                                    clearInterval(estimate_points_interval);
                                    $('describe_story').hide();
                                    $(item_id).insert($("estimate_points"));
                                    setTimeout(function() {
                                        $('estimate_points').show();
                                    }, 0);
                                    var additional_stories_interval = setInterval(function() {
                                        $(item_id).select('.storyPreviewButtons').invoke("observe", "click", function() {
                                            clearInterval(additional_stories_interval);
                                            $('estimate_points').hide();
                                            $(item_id).insert($("additional_stories"));
                                            setTimeout(function() {
                                                $('additional_stories').show();
                                            }, 0);
                                            var story_number = item_id.gsub(/.*_story(\d+)$/, "#{1}");
                                            var current_and_backlog_reiterated_interval = setInterval(function() {
                                                $$("#current .item[id$='_story" + story_number + "'], #backlog .item[id$='_story" + story_number + "']").each(function(story_div) {
                                                    clearInterval(current_and_backlog_reiterated_interval);
                                                    story_div.insert($('current_and_backlog_reiterated'));
                                                    story_div.insert($('story_states'));
                                                    setTimeout(function() {
                                                        $('current_and_backlog_reiterated').show();
                                                    }, 0);
                                                });
                                            }, 100);
                                        });
                                    }, 100);
                                });
                            }
                        }, 100);
                    }
                });
                setInterval(function() {
                    var visible_tooltip = $$(".tooltip.modal, .tooltip.relative").find(function(el) {
                        return el.visible();
                    });
                    if (visible_tooltip) {
                        $(document.body).writeAttribute("rel", ['glass', visible_tooltip.id].join(" "));
                    } else {
                        $(document.body).writeAttribute("rel", "");
                    }
                }, 100);
            }
        }, 100);
    }}
Element.ZERO_WIDTH_SPACE = "\uFEFF";
Element.findMatchingChildren = function(element, selector) {
    var matches = $A([]);
    var childMatches;
    var childCount = element.childNodes.length;
    for (var i = 0; i < childCount; i++) {
        var child = element.childNodes[i];
        if (selector(child)) {
            matches.push(child);
        } else {
            childMatches = Element.findMatchingChildren(child, selector);
            matches.push(childMatches);
        }
    }
    return matches.flatten();
};
ELEMENT_NODE_TYPE = 1;
Element.findFirstMatchingChild = function(element, selector) {
    var childCount = element.childNodes.length;
    var result;
    for (var i = 0; i < childCount; i++) {
        var child = element.childNodes[i];
        if (child.nodeType == ELEMENT_NODE_TYPE) {
            if (selector(child)) {
                return child;
            }
            result = Element.findFirstMatchingChild(child, selector);
            if (result) {
                return result;
            }
        }
    }
    return null;
};
Element.applyRecursively = function(element, func) {
    func.call(null, element);
    var children = element.childNodes;
    for (var i = 0; i < children.length; i++) {
        Element.applyRecursively(children[i], func);
    }
};
Element.findFirstMatchingParent = function(element, selector) {
    var current = element.parentNode;
    while (current != null) {
        if (selector(current)) {
            break;
        }
        current = current.parentNode;
    }
    return current;
};
Element.findMatchingChildById = function(parentElement, id) {
    return Element.findFirstMatchingChild(parentElement, function(childElement) {
        return childElement.id == id;
    });
};
Element.fromString = function(html) {
    return $(DomUtils.createElementFromString(html));
};
Element.toHTML = function(elem) {
    var wrapper = Element.create("div");
    wrapper.appendChild(elem);
    return wrapper.innerHTML;
};
Element.fixRelativePaths = function(elem) {
    var wrapper = Element.create("div");
    wrapper.appendChild(elem);
};
Element.newTag = function(tagName, content, attributes) {
    var cleanupText;
    var breakUpLongWords;
    if (attributes != null) {
        cleanupText = attributes['cleanupText'];
        breakUpLongWords = attributes['breakUpLongWords'];
        delete attributes.cleanupText;
        delete attributes.breakUpLongWords;
    }
    var elem = Element.create(tagName, attributes);
    if (content != null) {
        attributes = attributes || {};
        var elementText = cleanupText ? Element.cleanupText(content) : content;
        elem.innerHTML = breakUpLongWords ? Element.breakUpLongWords(elementText) : elementText;
    }
    return elem;
};
Element.newDiv = function(content, attributes) {
    return Element.newTag("div", content, attributes);
};
Element.newSpan = function(content, attributes, eventHash) {
    var renderedElement = Element.newTag("span", content, attributes);
    for (var eventName in eventHash) {
        j(renderedElement).on(eventName, eventHash[eventName]);
    }
    return renderedElement;
};
Element.newLink = function(content, options) {
    return Element.newTag("a", content, options);
};
Element.newLinkToFunction = function(onclickFunction, options, innerText) {
    var renderedElement = Element.create("a");
    renderedElement.href = "javascript:void(0);";
    renderedElement.innerHTML = innerText;
    for (var optionName in options) {
        renderedElement[optionName] = options[optionName];
    }
    j(renderedElement).click(onclickFunction);
    return renderedElement;
};
Element.newJLinkToFunction = function(onclickFunction, options, innerText) {
    var renderedElement = Element.create("a");
    renderedElement.href = "javascript:void(0);";
    renderedElement.innerHTML = innerText;
    for (var optionName in options) {
        renderedElement[optionName] = options[optionName];
    }
    j(renderedElement).click(onclickFunction);
    return renderedElement;
};
Element.newDropDownBox = function(paramName, optionsArray, selectedValue, optionalAttributes) {
    var attributes = {name: paramName};
    for (var opt in optionalAttributes) {
        attributes[opt] = optionalAttributes[opt];
    }
    var selectElement = Element.create("select", attributes);
    for (var i = 0; i < optionsArray.length; ++i) {
        var option = optionsArray[i];
        Element.addOptionToSelectElement(option, selectElement, option[0] == selectedValue);
    }
    return selectElement;
};
Element.addOptionToSelectElement = function(optionSpec, selectElement, isSelected) {
    var disabled = false;
    if (optionSpec.length >= 3) {
        disabled = optionSpec[2];
    }
    var htmlAttributes = {value: optionSpec[0],selected: (isSelected)};
    if (disabled) {
        htmlAttributes.disabled = disabled;
        htmlAttributes.className = "disabledOption";
    }
    if (optionSpec.length >= 4) {
        htmlAttributes.className = optionSpec[3];
    }
    var optionElement = Element.create("option", htmlAttributes);
    optionElement.innerHTML = optionSpec[1];
    selectElement.appendChild(optionElement);
}
Element.newButton = function(buttonText, onclickFunction, options) {
    var attributes = {value: buttonText,type: 'button'};
    for (var opt in options) {
        attributes[opt] = options[opt];
    }
    var inputElement = Element.create("input", attributes);
    j(inputElement).click(onclickFunction);
    return inputElement;
};
Element.newLabel = function(forHtmlId, title) {
    var label = Element.create("label", {"id": forHtmlId + "_label","for": forHtmlId});
    if (typeof title == "string") {
        label.appendChild(Element.newTextNode(title));
    } else {
        label.appendChild(title);
    }
    return label;
};
Element.newTextField = function(name, value, options, events) {
    var attributes = {type: "text",value: value,name: name};
    for (var optionName in options) {
        attributes[optionName] = options[optionName];
    }
    return Element.create("input", attributes, events);
};
Element.newCheckbox = function(name, value, checked, onClickHandler) {
    var attributes = {type: "checkbox",name: name,value: value};
    if (checked) {
        attributes.checked = true;
    }
    if (onClickHandler) {
        attributes.onclick = onClickHandler;
    }
    return Element.create("input", attributes);
};
Element.hideAllSelect = function() {
    $$("select").each(function(value, index) {
        value.style.visibility = "hidden";
    })
};
Element.showAllSelect = function() {
    $$("select").each(function(value, index) {
        value.style.visibility = "";
    })
};
Element.newHiddenField = function(name, value, options) {
    var attributes = {type: "hidden",value: value,name: name};
    for (var optionName in options) {
        attributes[optionName] = options[optionName];
    }
    return Element.create("input", attributes);
};
Element.newTextArea = function(textAreaName, text, columnCount, rowCount, options) {
    var attributes = {name: textAreaName,cols: columnCount,rows: rowCount};
    for (var optionName in options) {
        attributes[optionName] = options[optionName];
    }
    var result = Element.create("textarea", attributes);
    if (Utils.isIE || Utils.isSafari) {
        result.value = text;
    } else {
        result.innerHTML = text;
    }
    return result;
};
Element.newTable = function(numRows, numColumns, options) {
    var tableElement = Element.create("table", options);
    var tableBodyElement = Element.create("tbody");
    tableElement.appendChild(tableBodyElement);
    for (var i = 0; i < numRows; ++i) {
        Element.addRowToTable(tableElement, numColumns);
    }
    return tableElement;
};
Element.addRowToTable = function(table, numColumns, rowPosition) {
    if (rowPosition == undefined) {
        rowPosition = table.rows.length;
    }
    table.insertRow(rowPosition);
    var newRow = table.rows[rowPosition];
    for (var i = 0; i < numColumns; ++i) {
        newRow.insertCell(i);
    }
    return newRow;
};
Element.addCellToRow = function(row, colSpan, options) {
    var currentCellCount = row.cells.length;
    row.insertCell(currentCellCount);
    var cell = row.cells[currentCellCount];
    if (colSpan) {
        cell.colSpan = colSpan;
    }
    if (options && options.className != null) {
        cell.className = options.className;
    }
    return cell;
};
Element.formatText = function(text) {
    text = Element.cleanupText(text);
    return Element.breakUpLongWords(text);
};
Element.sanitizeText = function(text) {
    if (text == null) {
        return "";
    }
    return ("" + text).htmlEscape();
};
Element.cleanupText = function(text) {
    if (text == null) {
        return "";
    }
    text = Element.sanitizeText(text);
    text = Element.linkify(text);
    text = text.replace(/(^|\W)\*([^\n*]+)\*($|\W)/g, "$1<b>$2</b>$3");
    text = text.replace(/(^|\W)_([^_]+)_($|\W)/g, "$1<i>$2</i>$3");
    text = text.replace(/\n/g, "<br/>");
    return text;
};
Element.linkify = function(text) {
    text = text.replace(/\w+:\/\/\S+\b;?/g, function(url) {
        var storyId = null;
        storyPathPrefixes = [app.showStoryPathPrefix(), "/projects/" + app.project.id + "\\?story_id=", "/story/show/", "/projects/" + app.project.id + "/stories/"];
        _.find(storyPathPrefixes, function(storyPathPrefix) {
            var regexp = new RegExp(storyPathPrefix + "(\\d+)$");
            var matches = url.match(regexp);
            if (matches) {
                storyId = matches[1];
                return true;
            }
        });
        if (storyId) {
            return "<a href='#' onclick='app.showStoryById(" + storyId + ")'>" + url + "</a>";
        }
        var epicId = null;
        epicPathPrefixes = [app.showEpicPathPrefix(), "/projects/" + app.project.id + "\\?epic_id=", "/epic/show/", "/projects/" + app.project.id + "/epics/"];
        _.find(epicPathPrefixes, function(epicPathPrefix) {
            var regexp = new RegExp(epicPathPrefix + "(\\d+)$");
            var matches = url.match(regexp);
            if (matches) {
                epicId = matches[1];
                return true;
            }
        });
        if (epicId) {
            return "<a href='#' onclick='app.showEpicById(" + epicId + ")'>" + url + "</a>";
        }
        url = url.replace(/'/g, "%27");
        var postfix = "", entityRe = /(&quot;|")$/, matchResults = null;
        if (matchResults = url.match(entityRe)) {
            url = url.replace(entityRe, "");
            postfix += matchResults[0];
        }
        return "<a href=\"" + url + "\" target='_blank'>" + url + "</a>" + postfix;
    });
    return text;
};
Element.breakUpLongWords = function(text) {
    text = (typeof text == 'undefined' || text == null) ? '' : text;
    var wordsBroken = "";
    var wordPosition = 0;
    var entityOrTagNestingLevel = 0;
    for (var i = 0; i < text.length; i++) {
        if ((wordPosition % 10 == 0) && wordPosition > 0) {
            wordsBroken += "<wbr/>";
        }
        var character = text.charAt(i);
        wordsBroken += character;
        if (character == '&' || character == '<') {
            entityOrTagNestingLevel++;
            wordPosition = 0;
        }
        if (entityOrTagNestingLevel == 0) {
            wordPosition++;
        }
        if (entityOrTagNestingLevel > 0 && (character == ';' || character == '>')) {
            entityOrTagNestingLevel--;
        }
        if (character == ' ') {
            wordPosition = 0;
        }
    }
    return wordsBroken;
};
Element.getDisplayLabel = function(label, options) {
    options = options || {};
    var ellipsifiedLabel = options.ellipsify ? label.ellipsify(options.ellipsify) : label;
    return Element.breakUpLongWords(ellipsifiedLabel.escapeHTML());
};
Element.create = function(tagName, attributes, events) {
    var e = new Element(tagName);
    Element.setAttributes(e, attributes);
    if (events) {
        for (var eventName in events) {
            j(e).on(eventName, events[eventName]);
        }
    }
    return e;
};
Element.setAttributes = function(e, attributes) {
    for (var optionName in attributes) {
        var loweredName = optionName.toLowerCase();
        if (typeof (attributes[optionName]) != 'undefined') {
            if (loweredName == 'for' || loweredName == 'value') {
                e.setAttribute(optionName, attributes[optionName]);
            } else if (loweredName == 'selected') {
                if (attributes[optionName]) {
                    e.setAttribute(optionName, attributes[optionName]);
                }
            } else {
                e[optionName] = attributes[optionName];
            }
        }
    }
};
Element.collectAndSortAttributes = function(element) {
    element = $(element);
    var attributes = [];
    if (element.attributes) {
        for (var i = 0; i < element.attributes.length; i++) {
            var a = element.attributes.item(i)
            if (a.name.indexOf("jQuery") == -1) {
                attributes.push(a);
            }
        }
        attributes.sort(DomUtils.compareAttributeByName);
    }
    return attributes;
};
Element.allTextContent = function(element) {
    for (var i = 0; i < element.childNodes.length; i++) {
        if (element.childNodes[i].nodeType == DOMUTILS_TEXT_NODE) {
            return element.childNodes[i].nodeValue;
        }
    }
    return "";
};
Element._wrapInDiv = function(element, classNameForDiv) {
    var options = {};
    if (classNameForDiv) {
        options = {className: classNameForDiv};
    }
    var surroundingDiv = Element.newDiv("", options);
    surroundingDiv.appendChild(element);
    return surroundingDiv;
};
Element.putCursorAtEnd = function(element) {
    element.focus();
    var length = element.value.length;
    if (element.setSelectionRange) {
        try {
            element.setSelectionRange(length, length);
        } catch (e) {
        }
    } else if (element.createTextRange) {
        var range = element.createTextRange();
        range.moveStart('character', length);
        range.collapse();
        try {
            range.select();
        } catch (e) {
        }
    }
};
var DOMUTILS_ELEMENT_NODE = 1;
var DOMUTILS_ATTRIBUTE_NODE = 2;
var DOMUTILS_TEXT_NODE = 3;
DomUtils = {extractText: function(elem) {
        var childCount = elem.childNodes ? elem.childNodes.length : 0;
        if (childCount == 0 && elem.tagName.toLowerCase() == 'textarea') {
            return elem.value;
        }
        for (var i = 0; i < childCount; i++) {
            if (elem.childNodes[i].nodeType == DOMUTILS_TEXT_NODE) {
                return elem.childNodes[i].nodeValue;
            }
        }
        return "";
    },compareAttributeByName: function(attribA, attribB) {
        if (attribA.nodeName < attribB.nodeName) {
            return -1;
        }
        else if (attribA.nodeName > attribB.nodeName) {
            return 1;
        } else {
            return 0;
        }
    },createElementFromString: function(html) {
        var wrapperElem = new Element("div");
        wrapperElem.innerHTML = html;
        return wrapperElem.childNodes[0];
    },areElementsEqual: function(elemA, elemB) {
        if (DomUtils.areEitherNull(elemA, elemB)) {
            return false;
        }
        if (elemA.tagName != elemB.tagName) {
            return false;
        }
        if (!DomUtils._areTrimmedTextsEqual(elemA, elemB)) {
            return false;
        }
        if (!DomUtils._areAttributesOfElementsEqual(elemA, elemB)) {
            return false;
        }
        return DomUtils.areArraysEqual(elemA.childNodes, elemB.childNodes);
    },areEitherNull: function(a, b) {
        return a == null || b == null;
    },areAttributesEqual: function(attribA, attribB) {
        if (DomUtils.areEitherNull(attribA, attribB)) {
            return false;
        }
        if (attribA.nodeName != attribB.nodeName) {
            return false;
        }
        return attribA.nodeValue == attribB.nodeValue;
    },cleanupText: function(array) {
        var returnArray = new Array();
        for (var i = 0; i < array.length; i++) {
            if (array[i].nodeName != "#text") {
                returnArray.push(array[i]);
            }
        }
        return returnArray;
    },areArraysEqual: function(arrayA, arrayB) {
        if (DomUtils.areEitherNull(arrayA, arrayB)) {
            return false;
        }
        arrayA = this.cleanupText(arrayA);
        arrayB = this.cleanupText(arrayB);
        if (arrayA.length != arrayB.length) {
            return false;
        }
        for (var i = 0; i < arrayA.length; i++) {
            var childA = arrayA[i];
            var childB = arrayB[i];
            if (childA.nodeType != childB.nodeType) {
                return false;
            }
            if (childA.nodeType == DOMUTILS_ATTRIBUTE_NODE) {
                if (!DomUtils._areAttributeNodesEqual(childA, childB)) {
                    return false;
                }
            }
            else if (childA.nodeType == DOMUTILS_ELEMENT_NODE) {
                if (!DomUtils.areElementsEqual(childA, childB)) {
                    return false;
                }
            }
            else if (childA.nodeType == DOMUTILS_TEXT_NODE) {
            }
            else {
                throw new Error("Unexpected node type: " + childA.nodeType);
            }
        }
        return true;
    },_areAttributesOfElementsEqual: function(childA, childB) {
        var attributesForA = Element.collectAndSortAttributes(childA);
        var attributesForB = Element.collectAndSortAttributes(childB);
        return DomUtils.areArraysEqual(attributesForA, attributesForB);
    },_areTrimmedTextsEqual: function(childA, childB) {
        var textForA = DomUtils.extractText(childA);
        var textForB = DomUtils.extractText(childB);
        return textForA.trim() == textForB.trim();
    },_areAttributeNodesEqual: function(nodeA, nodeB) {
        var n1 = nodeA.name, n2 = nodeB.name;
        if (j.browser.msie) {
            if (n1 == "propdescname") {
                n1 = "name";
            }
            if (n2 == "propdescname") {
                n2 = "name";
            }
        }
        return n1 == n2 && nodeA.value == nodeB.value;
    },selected_option_label: function(select_element) {
        return select_element.options[select_element.selectedIndex].innerHTML;
    }};
EventChannel = Class.create();
EventChannel.ASYNCHRONOUS_THREAD_STAGGER_DELAY_MILLIS = 10;
EventChannel.prototype = {initialize: function(eventType, source) {
        this.functionName = "on" + StringUtils.capitalize(eventType);
        this.source = source;
        this.synchronousSubscribers = [];
        this.asynchronousSubscribers = [];
    },subscribe: function(subscriber) {
        this._checkSubscriber(subscriber);
        if (!this.synchronousSubscribers.contains(subscriber)) {
            this.synchronousSubscribers.push(subscriber);
        }
    },subscribeAsync: function(subscriber) {
        this._checkSubscriber(subscriber);
        if (!this.asynchronousSubscribers.contains(subscriber)) {
            this.asynchronousSubscribers.push(subscriber);
        }
    },_checkSubscriber: function(proposedSubscriber) {
        if (typeof (proposedSubscriber) != "object") {
            throw "Cannot subscribe a " + typeof (proposedSubscriber) + ": " + proposedSubscriber;
        }
        if (!proposedSubscriber[this.functionName]) {
            throw new Error("Subscriber does not have event function " + this.functionName);
        }
    },unsubscribe: function(subscriber) {
        var found = false;
        for (var i = 0; i < this.synchronousSubscribers.length; ++i) {
            var s = this.synchronousSubscribers[i];
            if (s && s == subscriber) {
                delete this.synchronousSubscribers[i];
                found = true;
            }
        }
        if (!found) {
            for (var i = 0; i < this.asynchronousSubscribers.length; ++i) {
                var s = this.asynchronousSubscribers[i];
                if (s && s == subscriber) {
                    delete this.asynchronousSubscribers[i];
                    found = true;
                }
            }
        }
        return found;
    },fire: function(arg) {
        this.firing = true;
        this.synchronousSubscribers.each(function(subscriber) {
            if (subscriber) {
                subscriber[this.functionName](this.source, arg);
            }
        }.bind(this));
        var counter = 1;
        this.asynchronousSubscribers.each(function(subscriber) {
            if (subscriber) {
                var threadName = this.functionName;
                var functionPointer = subscriber[this.functionName];
                var boundFunction = functionPointer.bind(subscriber, this.source, arg);
                var delay = EventChannel.ASYNCHRONOUS_THREAD_STAGGER_DELAY_MILLIS * counter++;
                ThreadManager.startThread(threadName, boundFunction, delay);
            }
        }.bind(this));
        this.firing = false;
    },unsubscribeAll: function() {
        this.synchronousSubscribers = [];
        this.asynchronousSubscribers = [];
    }};
EventChannelRegistry = Class.create({initialize: function() {
        this.model = arguments[0];
        this._handlers = {};
        for (var i = 1; i < arguments.length; ++i) {
            var eventName = arguments[i];
            this._handlers[eventName] = new EventChannel(eventName, this.model);
        }
    },isSubscribed: function(potentialSubscriber, eventName) {
        var eventHandler = this._getHandler(eventName);
        return (eventHandler.synchronousSubscribers.include(potentialSubscriber) || eventHandler.asynchronousSubscribers.include(potentialSubscriber));
    },isAsyncSubscribed: function(potentialSubscriber, eventName) {
        var eventHandler = this._getHandler(eventName);
        return eventHandler.asynchronousSubscribers.include(potentialSubscriber);
    },subscribe: function() {
        var subscriber = arguments[0];
        for (var i = 1; i < arguments.length; ++i) {
            var eventName = arguments[i];
            this._getHandler(eventName).subscribe(subscriber);
        }
    },subscribeAsync: function() {
        var subscriber = arguments[0];
        for (var i = 1; i < arguments.length; ++i) {
            var eventName = arguments[i];
            this._getHandler(eventName).subscribeAsync(subscriber);
        }
    },unsubscribe: function() {
        var subscriber = arguments[0];
        for (var i = 1; i < arguments.length; ++i) {
            var eventName = arguments[i];
            this._getHandler(eventName).unsubscribe(subscriber);
        }
    },unsubscribeAll: function(eventName) {
        this._getHandler(eventName).unsubscribeAll();
    },fire: function(eventName, options) {
        this._getHandler(eventName).fire(options);
    },_getHandler: function(eventName) {
        if (this._handlers[eventName] == undefined) {
            throw new Error("Unknown event channel handler '" + eventName + "'");
        }
        return this._handlers[eventName];
    }});
(function(Tracker, $) {
    var deferred = null;
    var invocationIds = [];
    Tracker.eventUnitOfWork = {run: function(callback) {
            invocationIds = [];
            deferred = $.Deferred();
            try {
                callback();
            }finally {
                deferred.resolve();
            }
        },isTransactionInProgress: function() {
            return !!(deferred && !deferred.isResolved());
        }};
    var fireWithoutTransaction = EventChannel.prototype.fire;
    EventChannel.prototype.fire = function() {
        var self = this;
        var args = Array.prototype.slice.call(arguments, 0);
        var invocationId = _([self.functionName, self.source, args]);
        if (Tracker.eventUnitOfWork.isTransactionInProgress()) {
            var isDuplicateEvent = _(invocationIds).any(function(i) {
                return invocationId.isEqual(i);
            });
            if (!isDuplicateEvent) {
                invocationIds.push(invocationId.value());
                deferred.then(function() {
                    fireWithoutTransaction.apply(self, args);
                });
            }
        } else {
            fireWithoutTransaction.apply(self, args);
        }
    };
})(Tracker, jQuery);
var Weaver = Class.create({initialize: function(loom, options) {
        var defaults = {verbose: false,asynchronous: false,chunkSize: 25};
        this._options = Object.extend(defaults, options || {});
        if (this._options.verbose) {
            this.loom = new Weaver.VerboseLoom(loom);
        } else {
            this.loom = loom;
        }
        if (!this._options.asynchronous) {
            this._options.chunkSize = Number.MAX_VALUE;
        }
    },weave: function(originalArraySource, incomingArraySource) {
        try {
            this._originalArray = originalArraySource.copy();
            this._incomingArray = incomingArraySource.copy();
            this._steps = [this._weaveCommonItems, this._removeLeftoverItemsFromOriginal, this._addLeftoverItemsFromIncoming];
            this._currentStep = 0;
            this._positionInCurrentChunk = 0;
            this._doNextChunk();
        } catch (e) {
            var params = "project_id=" + app.project.id;
            params += "&authenticity_token=" + encodeURIComponent(AUTH_TOKEN);
            params += "&original_chunk_size=" + this._options.chunkSize;
            var message_string = "original array (length " + this.originalArraySource.length + "):\n";
            originalArraySource.each(function(widget) {
                message_string += "    " + widget;
                message_string += "\n";
            });
            message_string += "incoming array (length " + this.incomingArraySource.length + "):\n";
            incomingArraySource.each(function(widget) {
                message_string += "    " + widget;
                message_string += "\n";
            });
            message_string += "unprocessed original array length: " + this._originalArray.length + "\n";
            message_string += "unprocessed incoming array length: " + this._incomingArray.length;
            params += "&client_error_message=" + message_string;
            app._serverProxy.sendAjaxRequest('/api/client_error/log_generic', params, 'post', {});
            throw e;
        }
    },_doNextChunk: function() {
        if (this._currentStep >= this._steps.length) {
            return;
        }
        this._steps[this._currentStep].call(this);
        if (this._positionInCurrentChunk != this._options.chunkSize) {
            this._doNextChunk();
        } else {
            this._positionInCurrentChunk = 0;
            ThreadManager.startThread("Weaver._doNextChunk", this._doNextChunk.bind(this), Weaver.ASYNC_DELAY_MILLIS);
        }
    },_stepFinished: function() {
        this._currentStep++;
    },_weaveCommonItems: function() {
        while (this._positionInCurrentChunk < this._options.chunkSize && this._originalArray.length > 0 && this._incomingArray.length > 0) {
            var original = this._originalArray.shift();
            var incoming = this._incomingArray.shift();
            if (original != incoming) {
                var originalFoundAt = this.find(original, this._incomingArray);
                if (originalFoundAt == -1) {
                    this.loom.remove(original);
                    this._positionInCurrentChunk++;
                    this._incomingArray.unshift(incoming);
                } else {
                    var incomingFoundAt = this.find(incoming, this._originalArray);
                    if (incomingFoundAt == -1) {
                        this.loom.add(incoming, original);
                        this._positionInCurrentChunk++;
                        this._originalArray.unshift(original);
                    } else {
                        this.loom.move(incoming, original);
                        this._positionInCurrentChunk++;
                        this._originalArray.splice(incomingFoundAt, 1);
                        this._originalArray.unshift(original);
                    }
                }
            }
        }
        if (this._originalArray.length == 0 || this._incomingArray.length == 0) {
            this._stepFinished();
        }
    },_removeLeftoverItemsFromOriginal: function() {
        while (this._positionInCurrentChunk < this._options.chunkSize && this._originalArray.length > 0) {
            var original = this._originalArray.shift();
            this.loom.remove(original);
            this._positionInCurrentChunk++;
        }
        if (this._originalArray.length == 0) {
            this._stepFinished();
        }
    },_addLeftoverItemsFromIncoming: function() {
        while (this._positionInCurrentChunk < this._options.chunkSize && this._incomingArray.length > 0) {
            var incoming = this._incomingArray.shift();
            this.loom.add(incoming, null);
            this._positionInCurrentChunk++;
        }
        if (this._incomingArray.length == 0) {
            this._stepFinished();
        }
    },find: function(item, array) {
        return array.indexOf(item);
    }});
Weaver.ASYNC_DELAY_MILLIS = 1;
Weaver.VerboseLoom = Class.create();
Weaver.VerboseLoom.prototype = {initialize: function(wrappedLoom) {
        this._wrappedLoom = wrappedLoom;
    },move: function(item, before) {
        this._wrappedLoom.move(item, before);
    },remove: function(item) {
        this._wrappedLoom.remove(item);
    },add: function(item, before) {
        this._wrappedLoom.add(item, before);
    },stringify: function(item) {
        var stringify = this._wrappedLoom.stringify || Object.toJSON;
        return stringify(item);
    }}
Element.toggleClass = function(element, className) {
    if (Element.hasClassName(element, className)) {
        Element.removeClassName(element, className);
    } else {
        Element.addClassName(element, className);
    }
};
App = Class.create();
App.PERIODIC_UPDATE_FREQUENCY_MILLIS = 30 * 1000;
App.isLoaded = function() {
    return app != undefined && app.isLoaded;
};
App.idFor = function(model) {
    if (typeof (model.getId) == 'function') {
        return model.getId()
    }
    if (typeof (model.id) == 'function') {
        return model.id();
    }
    return model.id || model._id
};
ZeroClipboard.setMoviePath('/javascripts/third-party/zeroclipboard/ZeroClipboard10.swf');
App.prototype = {initialize: function(init_options) {
        if (ENVIRONMENT == 'development') {
            Tracker.Analytics.install();
        }
        var pingerCallback = this.ping.bind(this);
        this.pinger = new Pinger(pingerCallback, Pinger.DEFAULT_PING_INTERVAL);
        this.createServerConnectivityMonitor();
        this.member = init_options.member;
        this.memberId = this.member ? this.member.id : null;
        this.memberHasGoogleIdentity = init_options.member_has_google_identity;
        this.savedLayout = init_options.saved_layout;
        this.showHints = init_options.show_hints;
        this.savedSearchesArray = init_options.saved_searches;
        this.showDonePanel = init_options.open_done_panel;
        this.shouldDelayRender = init_options.should_delay_render;
        this.contentElement = $('content');
        this._serverProxy = new ServerProxy();
        this.loadProject(init_options.project_json_url);
        this._lastRevealedStory = null;
        this._storyId = this._extractStoryId();
        this._epicId = this._extractEpicId();
        this._label = init_options.label ? decodeURI(init_options.label) : init_options.label;
        this._id = init_options.id;
        this._tracker_version = init_options.tracker_version;
        this._session_expires_at = new Date(init_options.session_expires_at);
        this.isLoaded = false;
        this.events = new EventChannelRegistry(this, "periodicUpdate");
        this.cdnDomain = init_options.cdn_domain;
        this.cdnSslDomain = init_options.cdn_ssl_domain;
        this.save_on_enter = init_options.save_on_enter;
        this.useFlashClickToCopy = init_options.use_flash_click_to_copy;
        this.numberOfCdnHosts = init_options.number_of_cdn_hosts;
        this.inlineHtmlAttachments = init_options.inline_html_attachments != null ? init_options.inline_html_attachments : true;
        this.maintenanceNotifier = null;
        if (init_options.time_zone_infos) {
            init_options.time_zone_infos.each(function(json) {
                TimeZoneInfo.register(new TimeZoneInfo(json));
            })
        }
        TimeZoneInfo.setUserTimezone(init_options.user_time_zone);
        setInterval(function() {
            this.events.fire("periodicUpdate")
        }.bind(this), App.PERIODIC_UPDATE_FREQUENCY_MILLIS);
        this.hasFlash = swfobject.hasFlashPlayerVersion("1.0.0");
    },showStoryPathPrefix: function() {
        return "/projects/" + this.project.id + "#!/stories/"
    },projectIndependentShowStoryPath: function(storyId) {
        return "/story/show/" + storyId;
    },showEpicPathPrefix: function() {
        return "/projects/" + this.project.id + "#!/epics/"
    },projectIndependentShowEpicPath: function(epicId) {
        return "/epic/show/" + epicId;
    },createServerConnectivityMonitor: function() {
        this.serverConnectivityWidget = new ServerConnectivityWidget(this.pinger);
    },confirmAndDelete: function confirmAndDelete() {
        var confirmMessage = "You're about to DELETE " +
        this.project.getNumberOfSelectedModels() + " selected " + "story".pluralize(this.project.getNumberOfSelectedModels(), "stories") + ". \n\nWARNING - this is a permanent operation, and cannot be undone. Are you sure you'd like to proceed?";
        if (confirm(confirmMessage)) {
            MultiSelectActions.deleteStories(this.project);
        }
    },renderLoading: function() {
        this.setLoadingStatus("<img src='" + story_icon_path('spinners/unstarted.gif') + "'> Loading project...");
    },setLoadingStatus: function(loadingStatusMsg) {
        j(this.contentElement).empty().removeData().off();
        this.contentElement.appendChild(Element.newDiv(loadingStatusMsg, {id: 'appLoading'}));
    },setSessionExpiresAt: function(date) {
        this._session_expires_at = date;
    },maybeSendNewrelicBeacon: function maybeSendNewrelicBeacon() {
        if (window.NREUMQ && window.loaded && this.isLoaded) {
            NREUMQ.f();
        }
    },loadProject: function(projectJsonUrl) {
        this._serverProxy.sendAjaxRequest(projectJsonUrl, '', 'get', {onSuccess: this.onRawProjectLoad.bind(this),onFailure: function(message) {
                this.setLoadingStatus("Unable to load project from the server: failure: " + message)
            }.bind(this),onConnectivityFailure: function() {
                this.setLoadingStatus("Unable to load project from the server: connectivity")
            }.bind(this),onException: this.onLoadProjectException.bind(this)});
    },ping: function() {
        if (this._session_expires_at.getTime() <= new Date().plusMsec(1000)) {
            this.alertReload("session timeout");
        }
        this.project.initiateVersionCheck();
    },onRawProjectLoad: function(projectAndCommandJson) {
        return this.onProjectLoad(projectAndCommandJson["project"], projectAndCommandJson["stale_commands"]);
    },onProjectLoad: function(projectJson, staleCommandHashes) {
        staleCommandHashes = staleCommandHashes || [];
        var project = new Project(projectJson)
        if (!project.members.findById(this.memberId)) {
            project.members.add(new Member(this.member));
        }
        project.setSigninMemberId(this.memberId);
        this.project = project;
        var commandObjects = [];
        var staleCommands = this.project.commandQueue.executeStaleCommands(_(staleCommandHashes).reject(function(commandJson) {
            var command = Command.build(project, commandJson);
            commandObjects.push(command);
            return command.getVersion() <= project.getVersion();
        }));
        var commandHashesThatProduceHistory = [];
        for (var c = 0; c < commandObjects.length; c++) {
            if (commandObjects[c].showInHistory()) {
                commandHashesThatProduceHistory.push(staleCommandHashes[c]);
            }
        }
        if (staleCommands.length > 0) {
            this.project.setVersion(staleCommands.last().getVersion());
            projectJson.history = commandHashesThatProduceHistory.reverse().concat(projectJson.history || []);
        }
        this.savedSearches = new SavedSearches(this.project, this.savedSearchesArray);
        this.layout = new Layout(this.project, {delayRender: this.shouldDelayRender,defaultRevealer: this,savedLayout: this.savedLayout,showDonePanel: this.showDonePanel});
        this._registerPanels(projectJson);
        j(this.contentElement).empty().removeData().off();
        this.project._calculateIterations();
        new VelocityWidget(this.project).appendToElement($('velocity'));
        this.contentElement.appendChild(this.layout.containerElement);
        var itemShown = this.showSelectedItem();
        if (!itemShown) {
            this.layout.restore();
        }
        this.hotkeys = new HotKeys(document);
        this._attachSearchField();
        if (this._label) {
            this.showPanelForLabel(this._label);
        }
        if (this.showHints) {
            this.hintsWidget = new HintsWidget(this.project, new HintSuggester(project));
            this.hintsWidget.appendToElement($('content'));
            this.hintsWidget.showHint();
        }
        project.onStorySelectionUpdateEvent.subscribe(this);
        if (this.useFlashClickToCopy && this.hasFlash) {
            this.clipboard = new ZeroClipboard.Client();
            this.clipboard.setCSSEffects(false);
            this.clipboard.glue('clipboard_button', 'clipboard_container', {"height": "20px","width": "20px"});
        }
        this.startPinger();
        j(document).trigger('layout:ready');
        if (project.historicalReportingEnabled()) {
            setTimeout(function() {
                var widget;
                if (location.search.match("report=1")) {
                    widget = new HistoricalBurnDownChartWidget(this.project);
                }
                if (location.search.match("report=2")) {
                    widget = new HistoricalReleaseBurnDownChartWidget(this.project);
                }
                if (location.search.match("report=3")) {
                    widget = new HistoricalLabelBurnDownChartWidget(this.project);
                }
                if (location.search.match("report=4")) {
                    widget = new HistoricalIterationBurnDownChartWidget(this.project);
                }
                if (widget) {
                    j('body').append(widget.render());
                    widget.afterAddedToDom();
                }
            }.bind(this), 3000);
        }
        this.isLoaded = true;
        if (window.pageStartTime) {
            Tracker.Analytics.trackTimedEvent('uiActions', 'loadProject', window.pageStartTime, new Date());
        }
        this.maybeSendNewrelicBeacon();
    },onLoadProjectException: function(request, exception) {
        var errorMessage = "Unable to load project from the server";
        if (ENVIRONMENT == 'development') {
            errorMessage += " - received exception " + exception.toString();
        }
        this.setLoadingStatus(errorMessage);
    },isSecure: function() {
        return document.location.protocol == "https:";
    },_attachSearchField: function() {
        var searchStringField = SearchWidget.getSearchStringField();
        if (searchStringField) {
            searchStringField.show();
            searchStringField.setAttribute("autocomplete", "off");
            j(searchStringField).keyup(function(event) {
                if (event.keyCode == Event.KEY_RETURN) {
                    app.layout.openSearchPanel(SearchWidget.getSearchStringField().value);
                }
            });
        }
    },_showItem: function(panelType, item) {
        if (item) {
            var options = {};
            options[item.getType()] = item;
            this.layout.openPanel(panelType, {viewWidgetOptions: options});
            return true;
        }
        j(location).attr('hash', "#");
        return false;
    },showSelectedItem: function() {
        if (this._storyId != null) {
            return this._showItem(Panel.FULL_STORY, this.project.getStoryById(this._storyId));
        } else if (this._epicId != null) {
            return this._showItem(Panel.FULL_EPIC, this.project.getEpicById(this._epicId));
        }
        return false;
    },showPanelForLabel: function(label) {
        if (this.project.labelRepository.isEpicLabel(label)) {
            this.layout.showEpicStoriesPanel(this.project.getEpicByLabel(label).id());
        } else {
            this.layout.openSearchPanel(SearchWidget.getLabelSearchString(label));
        }
    },showSearchFor: function(searchTerm) {
        this.layout.openSearchPanel(searchTerm);
    },onStorySelectionUpdate: function() {
        MultiSelectActions.updateSelectedStoryMenu(this.project);
    },_registerPanels: function(projectJson) {
        this.layout.registerPanel(Panel.DONE, this._createDoneViewWidget.bind(this), {storyHomeFunctor: this._doneStoryHomeFunctor.bind(this),openPanelFunctor: this._doneOpenPanelFunctor.bind(this),isExpandable: true,minWidth: Panel.DEFAULT_MIN_WIDTH,startSortNumber: 1000});
        this.layout.registerPanel(Panel.CURRENT, this._createCurrentViewWidget.bind(this), {storyHomeFunctor: this._currentStoryHomeFunctor.bind(this),filterFunctor: function(layout) {
                return layout.isCurrentInBacklog;
            },isDroppable: true,minWidth: Panel.DEFAULT_MIN_WIDTH,startSortNumber: 2000});
        this.layout.registerPanel(Panel.BACKLOG, this._createBacklogViewWidget.bind(this), {storyHomeFunctor: this._backlogStoryHomeFunctor.bind(this),isExpandable: true,isDroppable: true,minWidth: Panel.DEFAULT_MIN_WIDTH,startSortNumber: 3000});
        this.layout.registerPanel(Panel.ICEBOX, this._createIceboxViewWidget.bind(this), {storyHomeFunctor: this._iceboxStoryHomeFunctor.bind(this),isDroppable: true,startSortNumber: 4000,minWidth: Panel.DEFAULT_MIN_WIDTH,canSelectAll: true});
        this.layout.registerPanel(Panel.EPICS, this._createEpicsViewWidget.bind(this), {storyHomeFunctor: this._epicsStoryHomeFunctor.bind(this),isDroppable: true,filterFunctor: function(layout) {
                return !layout.project.epicsEnabled();
            },minWidth: Panel.DEFAULT_MIN_WIDTH,startSortNumber: 6000});
        this.layout.registerPanel(Panel.EPIC_STORIES, this._createEpicStoriesWidget.bind(this), {filterFunctor: function(layout) {
                return !layout.project.epicsEnabled();
            },isDroppable: true,minWidth: Panel.DEFAULT_MIN_WIDTH,startSortNumber: 7000,canSelectAll: true,destroyOnClose: true});
        this.layout.registerPanel(Panel.FULL_STORY, this._createFullStoryWidget.bind(this), {isDroppable: false,minWidth: Panel.DEFAULT_MIN_WIDTH,startSortNumber: 7000,canSelectAll: false,destroyOnClose: true,fullScreen: true});
        this.layout.registerPanel(Panel.FULL_EPIC, this._createFullEpicWidget.bind(this), {isDroppable: false,minWidth: Panel.DEFAULT_MIN_WIDTH,startSortNumber: 7001,canSelectAll: false,destroyOnClose: true,fullScreen: true});
        this.layout.registerPanel(Panel.RELEASES, this._createReleasesViewWidget.bind(this), {storyHomeFunctor: this._falseStoryHomeFunctor,isDroppable: true,minWidth: Panel.DEFAULT_MIN_WIDTH,startSortNumber: 5000});
        this.layout.registerPanel(Panel.MY_WORK, this._createMyWorkViewWidget.bind(this), {storyHomeFunctor: this._falseStoryHomeFunctor.bind(this),minWidth: Panel.DEFAULT_MIN_WIDTH,startSortNumber: 9000});
        this.layout.registerPanel(Panel.HISTORY, function() {
            return this._createHistoryViewWidget(projectJson);
        }.bind(this), {storyHomeFunctor: this._falseStoryHomeFunctor.bind(this),minWidth: Panel.DEFAULT_MIN_WIDTH,startSortNumber: 12000});
        this.layout.registerPanel(Panel.STORY_HISTORY, null, {});
        this.layout.registerPanel(Panel.SEARCH, this._createSearchViewWidget.bind(this), {storyHomeFunctor: this._falseStoryHomeFunctor.bind(this),minWidth: Panel.DEFAULT_MIN_WIDTH,startSortNumber: 10000,destroyOnClose: true,closePanelFunctor: this._closeSearchPanelFunctor.bind(this),canSelectAll: true});
        this.layout.registerPanel(Panel.CHARTS, this._createChartViewWidget.bind(this), {storyHomeFunctor: this._falseStoryHomeFunctor.bind(this),minWidth: Panel.DEFAULT_MIN_WIDTH,destroyOnClose: true,startSortNumber: 13000});
        this.layout.registerPanel(Panel.SIDEBAR, this._createSidebarViewWidget.bind(this), {startSortNumber: 8000,htmlClasses: "fixed_width_panel",fixedWidth: 220});
        this._registerIntegrationPanels();
    },_registerIntegrationPanels: function() {
        var startSortNumber = 11000;
        this.project.getIntegrations().each(function(integration) {
            var panelHtmlId = integration.getHtmlId();
            Panel.UNCLONEABLE_PANELS.push(panelHtmlId);
            Panel.UNSAVEABLE_PANELS.push(panelHtmlId);
            this.layout.registerPanel(panelHtmlId, null, {storyHomeFunctor: this._falseStoryHomeFunctor.bind(this),startSortNumber: startSortNumber,minWidth: Panel.DEFAULT_MIN_WIDTH,htmlClasses: 'integration'});
            startSortNumber += 10;
        }.bind(this));
    },startPinger: function() {
        this.pinger.start();
    },stopPinger: function() {
        if (this.pinger) {
            this.pinger.stop();
        }
    },revealItem: function(model) {
        this.layout.revealItem(model);
    },getViewPort: function getViewPortWidth() {
        var dim = {}
        dim['width'] = j(this.contentElement).width();
        dim['height'] = j(this.contentElement).height();
        return dim;
    },setScrollLeft: function setScrollLeft(left) {
        j(this.contentElement).scrollLeft(left);
    },getScrollLeft: function getScrollLeft() {
        return j(this.contentElement).scrollLeft();
    },showStory: function(story, modelDetails) {
        this.layout.showStory(story, modelDetails);
    },showEpic: function(epic) {
        this.layout.showEpic(epic);
    },showStoryById: function(id) {
        var story = this.project.getStoryById(id);
        if (story) {
            this.showStory(story);
            flash([story]);
        } else {
            window.open(this.projectIndependentShowStoryPath(id), "story_" + id);
        }
    },showEpicById: function(id) {
        var epic = this.project.getEpicById(id);
        if (epic) {
            this.showEpic(epic);
            flash([epic]);
        } else {
            window.open(this.projectIndependentShowEpicPath(id), "epic_" + id);
        }
    },getTrackerVersion: function() {
        return this._tracker_version
    },getId: function() {
        return this._id;
    },alertReload: function(message) {
        this.stopPinger();
        var popup = new ReloadPopupWidget(this, message);
        popup.render();
        popup.showPopup();
    },alertReloadUnhandledException: function(message, exception) {
        if (exception.errorType == null) {
            exception.errorType = "ForcedReload";
        }
        if (exception instanceof Tracker.UnknownCommandError) {
            this.alertReload(exception.toString());
            this.alertReload(exception.toString());
        } else {
            this.sendClientErrorToServer("Forced Reload: " + message, exception);
            this.alertReload(message);
        }
    },alertExceptionOccured: function(message, exception) {
        this.sendClientErrorToServer(message, exception);
        doAlert(message);
    },isInAutomatedTesting: function() {
        return typeof (ENVIRONMENT) !== "undefined" && (ENVIRONMENT == "cucumber" || ENVIRONMENT == "test");
    },isInDevelopment: function() {
        return typeof (ENVIRONMENT) !== "undefined" && ENVIRONMENT == "development";
    },isInTesting: function() {
        return typeof (ENVIRONMENT) !== "undefined" && ENVIRONMENT != "prod";
    },_logClientErrorToConsole: function(errorMessage, exception) {
        if (console && console.error) {
            if (exception) {
                console.error(errorMessage, this.exceptionAsString(exception), exception);
            } else {
                console.error(errorMessage);
            }
        }
    },_makeJsErrorFlash: function() {
        if (j('.clientErrorLogAlertContainer').get(0) == null) {
            j('#content').append('<div class="clientErrorLogAlertContainer"></div>');
        }
        var alert = j('<div class="clientErrorLogAlert"></div>');
        j('.clientErrorLogAlertContainer').append(alert);
        for (var i = 0; i < 10; i++) {
            alert.fadeOut(250);
            alert.fadeIn(250);
        }
        alert.fadeOut(1000);
    },_sendClientErrorToServer: function(errorMessage, exception) {
        var params = "project_id=" + this.project.id;
        params += "&client_error_message=" + encodeURIComponent(errorMessage + "\n" + this.exceptionAsString(exception));
        params += "&authenticity_token=" + encodeURIComponent(AUTH_TOKEN);
        var action = 'log_generic';
        if (exception) {
            switch (exception.errorType) {
                case "ForcedReload":
                    action = "log_forced_reload";
                    break;
                case "Rollback":
                    action = "log_rollback";
                    break;
                case "ExecutedFailed":
                    action = "log_execute_failed";
                    break;
                case "ForcedSignout":
                    action = "log_forced_signout";
                    break;
            }
        }
        this._serverProxy.sendAjaxRequest('/api/client_error/' + action, params, 'post', {});
    },sendClientErrorToServer: function(errorMessage, exception) {
        try {
            if (this.isInAutomatedTesting()) {
                this._sendClientErrorToServer(errorMessage + "\n" + this.exceptionAsString(exception));
                window.alert(errorMessage, exception);
            } else if (this.isInDevelopment()) {
                this._logClientErrorToConsole(errorMessage, exception);
                this._makeJsErrorFlash();
                this._sendClientErrorToServer(errorMessage, exception);
            } else if (this.isInTesting()) {
                this._logClientErrorToConsole(errorMessage, exception);
                this._makeJsErrorFlash();
                this._sendClientErrorToServer(errorMessage, exception);
            } else {
                this._sendClientErrorToServer(errorMessage, exception);
            }
        } catch (e) {
            var message = "Exception trying to Send Client error to Server - " + e.toString();
            if (this.isInTesting()) {
                status(message);
                window.alert(message);
            }
        }
    },browserName: function() {
        if (Prototype.Browser.IE) {
            return "IE"
        }
    },exceptionAsString: function(e) {
        var parts = [];
        if (navigator && navigator.userAgent)
            parts.push("userAgent: " + navigator.userAgent);
        if (e) {
            if (e.name)
                parts.push("name: " + e.name);
            if (e.model)
                parts.push("model: " + e.model);
            if (e.message)
                parts.push("message: " + e.message);
            if (e.fileName)
                parts.push("fileName: " + e.fileName);
            if (e.lineNumber)
                parts.push("lineNumber: " + e.lineNumber);
            if (e.stack)
                parts.push("stack: " + e.stack);
        } else {
            parts.push("message: null exception")
        }
        return parts.length == 0 ? "" : parts.join("\n");
    },reload: function() {
        var newLocation = window.location.toString();
        if (newLocation.indexOf("expire=true") === -1) {
            var separationChar = newLocation.indexOf('?') > 0 ? "&" : "?";
            newLocation = newLocation.substring(0, newLocation.indexOf('#'));
            newLocation = newLocation + separationChar + "expire=true";
        }
        this._replace(newLocation);
    },_replace: function(path) {
        window.location.replace(path);
    }};
Object.extend(App.prototype, {_createDoneViewWidget: function() {
        var count = this.project.getDoneIterations().size() - this.project.getVisibleDoneIterations().size();
        var options = {};
        if (count != 0) {
            var showAllLink = Element.newLink("show all", {href: "?include_all_iterations=true",className: 'showDoneStoriesLink'});
            options["subtitle"] = "displaying last " +
            this.project.getVisibleDoneIterations().size() + " iterations (" + Element.toHTML(showAllLink) + ")";
        }
        return new ItemListWidget("Done", "The Done panel shows the iterations that occurred in the past.  Done iterations contain stories that have been accepted, in the order in which they were accepted.", new DoneWidgetSource(this.project), options);
    },_createCurrentViewWidget: function() {
        return new ItemListWidget("Current", "The Current panel shows the iteration currently in progress.  The Current iteration contains stories, in priority order, whose point total matches the team's current Velocity.", new CurrentWidgetSource(this.project));
    },_createBacklogViewWidget: function() {
        return new ItemListWidget("Backlog", "The Backlog panel shows iterations that will occur in the future.  Each iteration is made up of stories, in priority order, whose point total matches the team's current Velocity.", new BacklogWidgetSource(this.project));
    },_createIceboxViewWidget: function() {
        return new ItemListWidget("Icebox", "The Icebox panel shows stories that are yet to be prioritized.  Stories can stay in the Icebox indefinitely, while they are 'on ice'.  When ready, a story in the Icebox can be proritized by dragging it into the Current or Backlog panel.", new IceboxWidgetSource(this.project));
    },_createEpicsViewWidget: function() {
        return new EpicsWidget(this.project);
    },_createEpicStoriesWidget: function(options) {
        var epic = this.project.epics.findById(options.epicId);
        return new EpicStoriesWidget(epic, options);
    },_createFullStoryWidget: function(options) {
        return new FullStoryWidget(this.project, options.story, options.modelDetails);
    },_createFullEpicWidget: function(options) {
        return new FullEpicWidget(this.project, options.epic, options.modelDetails);
    },_createReleasesViewWidget: function() {
        return new ItemListWidget("Releases", "The Releases panel shows the project's Release Markers.  A story can be dragged into the Releases panel to move it between releases.", new ReleaseWidgetSource(this.project));
    },_createMyWorkViewWidget: function() {
        return new ItemListWidget("My Work", "The My Work panel shows stories that are either owned by you or are requested by you and are ready to be accepted or rejected.  Accepted stories are excluded.", new MyWorkWidgetSource(this.project, this));
    },_createIntegrationViewWidget: function(integrationId) {
        var integration = this.project.getIntegration(integrationId);
        return new IntegrationWidget(this.project, integration, IntegrationWidgetSource.widgetSourceClassForIntegrationType(integration.getIntegrationType()), null);
    },_createHistoryViewWidget: function(projectJson) {
        return new ItemListWidget("Project History", "The History panel shows, in reverse order, each action that has been taken by all project members.", new HistoryItemWidgetSource(this.project, projectJson.history, this));
    },_createChartViewWidget: function(projectJson) {
        return new ChartsWidget(this.project);
    },_createSearchViewWidget: function(newPanelId) {
        return new SearchWidget(this.project, this, {newPanelId: newPanelId});
    },_createSidebarViewWidget: function() {
        return new SidebarWidget(this.project);
    },_doneStoryHomeFunctor: function(story, iteration) {
        return story.getType() == 'story' && this.project.getDoneIterations().contains(iteration);
    },_doneOpenPanelFunctor: function(donePanel) {
        donePanel.viewWidget.scrollToBottom();
    },_currentStoryHomeFunctor: function(story, iteration) {
        return story.getType() == 'story' && iteration && iteration == this.project.getCurrentIteration();
    },_backlogStoryHomeFunctor: function(story, iteration) {
        return story.getType() == 'story' && (this.layout.isCurrentInBacklog && this._currentStoryHomeFunctor(story, iteration)) || this.project.getBacklogIterations().contains(iteration);
    },_closeSearchPanelFunctor: function() {
    },_iceboxStoryHomeFunctor: function(story, iteration) {
        return story.getType() == 'story' && !iteration;
    },_epicsStoryHomeFunctor: function(model, iteration) {
        return model.getType() == 'epic'
    },_falseStoryHomeFunctor: function(story, iteration) {
        return false;
    },_extractStoryId: function _extractStoryId() {
        return this._extractModelId('stories');
    },_extractEpicId: function _extractEpicId() {
        return this._extractModelId('epics');
    },_extractModelId: function _extractModelId(modelTypePlural) {
        regex = "\#\!\/(" + modelTypePlural + ")\/(\\d*)$"
        var matches = j(location).attr('hash').match(regex);
        if (matches) {
            return parseInt(matches[2]);
        }
        return null;
    }});
MemoryUtils = {};
MemoryUtils.globallyExceptedHandlers = [];
try {
    MemoryUtils.globallyExceptedHandlers.push(j.datepicker._checkExternalClick);
} catch (e) {
}
MemoryUtils.getAllJqueryListeners = function(element) {
    var elements = [document];
    if (element) {
        elements.push(j(element).get(0));
        j.each(j(element).find('*'), function() {
            elements.push(this)
        });
    }
    var listeners = $A(elements).map(function(el) {
        if (j(el).length == 0) {
            return [];
        }
        return $H(j.data(j(el).get(0), 'events')).values();
    });
    listeners = j.makeArray(j(listeners)).flatten().uniq().compact();
    return listeners.reject(function(x) {
        return MemoryUtils.globallyExceptedHandlers.indexOf(x.handler) > -1
    });
};
MemoryUtils.getJqueryCacheEntryInfo = function() {
    var entries = $H(j.cache).keys().select(function(k) {
        return ($H(j.cache[k]).keys().length > 0)
    }).map(function(key) {
        return {jqueryCacheKey: key,jqueryCacheEntry: j.cache[key]};
    });
    var dataStores = entries.map(function(entry) {
        var entryAsHash = $H(entry.jqueryCacheEntry);
        var values = entryAsHash.keys().map(function(key) {
            return ((key == 'olddisplay') ? null : entry.jqueryCacheEntry[key]);
        }).compact();
        return {jqueryCacheKey: entry.jqueryCacheKey,jqueryCacheEntryValues: values};
    });
    return j.makeArray(j(dataStores)).map(function(dataStore) {
        var comparables = MemoryUtils.computeComparables(dataStore.jqueryCacheEntryValues);
        if (comparables && comparables.length > 0) {
            var entries = [];
            for (var i = 0; i < comparables.length; i++) {
                entries.push({jqueryCacheKey: dataStore.jqueryCacheKey,jqueryCacheEntryComparable: comparables[i],jqueryOriginalEntry: j.cache[dataStore.jqueryCacheKey]});
            }
            return entries;
        }
        return null;
    }).flatten().compact();
};
MemoryUtils.computeComparables = function(jqueryCacheEntryValues) {
    return j.makeArray(jqueryCacheEntryValues).map(function(value) {
        if (typeof value != 'object') {
            return value;
        }
        return $H(value).keys().map(function(key) {
            var h = {};
            h[key] = value[key];
            return h;
        });
    }).flatten().map(function(value) {
        if (value == null) {
            return null;
        }
        return (typeof value.events == "undefined") ? value : null;
    });
};
MemoryUtils.globallyExceptedElementSelectors = ['.ui-datepicker'];
MemoryUtils.getAllExistingDomElements = function() {
    allExceptedElements = MemoryUtils.globallyExceptedElementSelectors.map(function(selector) {
        return $$(selector).map(function(element) {
            return $(element).descendants().concat([element]);
        });
    }).uniq().flatten();
    return $(document.body).descendants().reject(function(x) {
        return allExceptedElements.indexOf(x) > -1
    });
};
MemoryUtils.skippedItemCounter = 1000;
MemoryUtils.memoryUsageInfo = function() {
    var usageInfo = {};
    usageInfo.jqueryListenerCount = MemoryUtils.getAllJqueryListeners().length;
    var deepArrayCopy = function(inArray, guidOrSeq, limit, count) {
        var outArray = [];
        j.each(inArray, function(index, value) {
            if (!value) {
                outArray.push(value);
            } else if (j.isFunction(value)) {
                outArray.push("function " + funcname(value) + " " + value.toString().length + " FUNCTION_TEXT_START " + value.toString() + " FUNCTION_TEXT_END");
            } else if (j.isPlainObject(value)) {
                if (count < limit) {
                    outArray.push(recursiveHashCopy(value, guidOrSeq, limit, count + 1));
                } else {
                    outArray.push("hash " + guidOrSeq);
                }
            } else if (j.isArray(value)) {
                outArray.push(deepArrayCopy(value, guidOrSeq, limit, count + 1));
            } else if (j.type(value) != 'object') {
                outArray.push(value);
            } else {
                outArray.push("dom " + value.toString() + ' ' + value.id + ' ' + value.className);
            }
        });
        return outArray;
    };
    var recursiveHashCopy = function(inHash, guidOrSeq, limit, count) {
        if (!guidOrSeq) {
            if (inHash['guid']) {
                guidOrSeq = inHash['guid'];
            } else {
                guidOrSeq = MemoryUtils.skippedItemCounter++;
            }
        }
        var outHash = {};
        j.each(inHash, function(key, value) {
            if (!value) {
                outHash[key] = value;
            } else if (j.isFunction(value)) {
                outHash[key] = "function " + funcname(value) + " " + value.toString().length + " FUNCTION_TEXT_START " + value.toString() + " FUNCTION_TEXT_END";
                if (typeof value.elem != "undefined") {
                    outHash[key] += " FUNCTION.elem: " + value.elem + value.elem.id;
                }
            } else if (j.isPlainObject(value)) {
                if (count < limit) {
                    outHash[key] = recursiveHashCopy(value, guidOrSeq, limit, count + 1);
                } else {
                    outHash[key] = "hash " + guidOrSeq;
                }
            } else if (j.isArray(value)) {
                outHash[key] = deepArrayCopy(value, guidOrSeq, limit, count + 1);
            } else if (j.type(value) != 'object') {
                outHash[key] = value;
            } else {
                outHash[key] = "dom " + value.toString() + ' ' + value.id + ' ' + value.className;
            }
        });
        return outHash;
    };
    var jqueryCacheEntryInfo = MemoryUtils.getJqueryCacheEntryInfo();
    usageInfo.jqueryCacheEntryCount = jqueryCacheEntryInfo.length;
    usageInfo.jqueryCacheEntryInfo = jqueryCacheEntryInfo.map(function(cacheEntry) {
        return recursiveHashCopy(cacheEntry, null, 4, 0);
    });
    return usageInfo;
};
MemoryUtils.memoryUsageInfoAsJSON = function() {
    return Object.toJSON(MemoryUtils.memoryUsageInfo());
};
MemoryUtils.memoryUsageInfoWithPopulatedDomInfo = function() {
    var info = MemoryUtils.memoryUsageInfo();
    MemoryUtils.populateDomInfoIntoJqueryCacheEntries(info.jqueryCacheEntryObjects);
    return info;
};
MemoryUtils.populateDomInfoIntoJqueryCacheEntries = function(jqueryCacheEntries) {
    j('*').each(function(index, element) {
        if (element[j.expando]) {
            j(jqueryCacheEntries).each(function(index2, entry) {
                if (entry.guid && entry.guid == element[j.expando]) {
                    entry.htmlId = element.id;
                    entry.htmlClass = element.className;
                }
            });
        }
    });
    return jqueryCacheEntries;
};
MemoryUtils.logArrayDiffs = function(a1, a2) {
    console.log("first length: " + a1.length);
    console.log("second length: " + a2.length);
    for (var i = 0; i < a1.length; i++) {
        if (a2.indexOf(a1[i]) == -1) {
            console.log("only first:", a1[i]);
        }
    }
    for (var j = 0; j < a2.length; j++) {
        if (a1.indexOf(a2[j]) == -1) {
            console.log("only second:", a2[j]);
        }
    }
};
MemoryUtils.populateDomInfoIntoJqueryCacheEntriesAsJSON = function(jqueryCacheEntries) {
    return Object.toJSON(MemoryUtils.populateDomInfoIntoJqueryCacheEntries(jqueryCacheEntries));
};
CommandQueue = Class.create();
CommandQueue.END_OF_QUEUE = "End of Queue";
CommandQueue.SERVER_TIMEOUT = 60000;
CommandQueue.prototype = {initialize: function(server, versionSource, updateHistory, project) {
        this.server = server;
        this.versionSource = versionSource;
        this.updateHistory = updateHistory;
        this.project = project;
        this.clear();
        this._rollingback = false;
        this._isWaitingForResponse = false;
        this._executingStaleCommands = false;
        this._rolledBackCommands = [];
    },processHead: function() {
        if (this._contents.length == 0) {
            return;
        }
        if (!this._isWaitingForResponse) {
            this.sendAndWaitForResponse();
        }
    },sendToServer: function(command) {
        command.setCurrentClientVersion(this.versionSource());
        var parameters = {};
        parameters.tracker_version = app.getTrackerVersion();
        parameters.project_id = this.project.getId();
        if (command.isMutator()) {
            parameters.authenticity_token = AUTH_TOKEN;
            parameters.client_version = '' + this.versionSource();
            parameters.client_uuid = command.clientUuid();
        }
        var method, url, postBody;
        if (command.isNewWorld()) {
            method = 'post';
            url = '/commands/create';
            var postData = {tracker_version: app.getTrackerVersion(),authenticity_token: AUTH_TOKEN,command: [command.className, {project_id: this.project.getId(),person_id: this.project.getSigninMemberId(),parameters: command.commandPayload(),client_uuid: command.clientUuid(),version: '' + this.versionSource()}]};
            postBody = Object.toJSON(postData);
        }
        else {
            var ajaxPayload = command.asAjaxPayload();
            var standardParams = asCgiString(parameters, null);
            var params = !!ajaxPayload.parameters ? ajaxPayload.parameters + "&" + standardParams : standardParams;
            method = command.isMutator() ? 'post' : 'get';
            url = ajaxPayload.url;
        }
        setTimeout(function() {
            if (this.pendingCommand() == command) {
                this.server.abort();
                this.sendToServer(command);
            }
        }.bind(this), CommandQueue.SERVER_TIMEOUT);
        this.server.sendAjaxRequest(url, params, method, {onSuccess: this.onAjaxSuccess.bind(this),onFailure: this.onServerFailure.bind(this),onConnectivityFailure: this.onConnectivityFailure.bind(this),onException: this.onException.bind(this),onRedirect: this.onRedirect.bind(this)}, postBody);
    },handleResponseWithProjectIdCheck: function(responseJson, handlerFunction) {
        var self = this;
        if (responseJson.project_id != app.project.getId()) {
            j('#signout').click();
            app.sendClientErrorToServer("CheckVersionProjectIdMismatch: Client project id was: " + app.project.getId() + ", json project id was: " + responseJson.project_id + ", responseJson: " + Object.toJSON(responseJson), {errorType: "ForcedSignout"});
        } else {
            Tracker.eventUnitOfWork.run(function() {
                handlerFunction.call(self, responseJson);
            });
        }
    },onAjaxSuccess: function(responseJson) {
        if (responseJson.session_expires_at) {
            app.setSessionExpiresAt(new Date(responseJson.session_expires_at));
        }
        app.pinger.registerServerSuccess();
        if (responseJson.status == "OK") {
            this.handleResponseWithProjectIdCheck(responseJson, this.onOkSuccess);
        } else if (responseJson.status == "STALE") {
            this.handleResponseWithProjectIdCheck(responseJson, this.onServerStale);
        } else if (responseJson.status == "ERROR") {
            this.handleResponseWithProjectIdCheck(responseJson, this.errorHappened);
        } else if (responseJson.status == "TIMEOUT") {
            this.reload();
        } else if (responseJson.status == "SIGNOUT") {
            this.alertReload(responseJson.message);
        } else if (responseJson.status == "SETTING_CHANGE") {
            this.alertReload(responseJson.message);
        } else if (responseJson.status == "FORCE_RELOAD") {
            this.alertReload(responseJson.message);
        } else {
            app.sendClientErrorToServer("onAjaxSuccess: unknown response status " + responseJson.status);
        }
    },onOkSuccess: function(responseJson) {
        this._updateMaintenance(responseJson);
        if (responseJson.client_uuid != this._pendingCommand.clientUuid() && this._pendingCommand.isMutator()) {
            return;
        }
        this._processCommand(responseJson);
    },_updateMaintenance: function _updateMaintenance(responseJson) {
        if (responseJson.maintenance && app.maintenanceNotifier == null) {
            app.maintenanceNotifier = new Maintenance(responseJson.maintenance, responseJson.tracker_version);
            if (!app.maintenanceNotifier.valid) {
                app.maintenanceNotifier = null;
            }
        }
    },_processCommand: function _processCommand(responseJson) {
        this.onServerStale(responseJson);
        if (responseJson.data) {
            this._pendingCommand.onReceivedResponseFromServer(responseJson.data);
        }
        if (this._pendingCommand) {
            this._pendingCommand.signalSuccessFromServer();
        }
        if (responseJson.command) {
            this.updateHistory(Command.build(this.project, responseJson.command));
        }
        this.acknowledgeResponse();
        this.processHead();
    },_executeCommandJson: function(commandJson) {
        var command = Command.build(this.project, commandJson);
        command.execute();
        if (command.onReceivedResponseFromServer) {
            var serverResponse = Object.isArray(commandJson) ? commandJson[1].server_response : commandJson.server_response;
            command.onReceivedResponseFromServer(serverResponse);
        }
        command.signalSuccessFromServer();
        this.project.updateHistory(command);
        return command;
    },onServerStale: function(responseJson) {
        var otherMembersCommandsJsons = responseJson.commands;
        if (otherMembersCommandsJsons) {
            this.rollback(responseJson.status != 'OK');
            this._executingStaleCommands = true;
            var affectedElements = [];
            var commandMembers = [];
            this.executeStaleCommands(otherMembersCommandsJsons, affectedElements, commandMembers);
            if (affectedElements.length > 0) {
                var message = "Update by " + commandMembers.join(", ");
                status(message, affectedElements, {});
            }
            this.rollForward();
        }
        this.project.setVersion(responseJson.version);
        this._executingStaleCommands = false;
        this.processHead();
    },executeStaleCommands: function(otherMembersCommandsJsons, affectedElements, commandMembers) {
        var commands = [];
        for (var i = 0; i < otherMembersCommandsJsons.length; ++i) {
            var command = this._executeCommandJson(otherMembersCommandsJsons[i]);
            commands.push(command);
            if (affectedElements && commandMembers && command.getMember() != null) {
                if (this.project.getSigninMemberId() != command.getMember().getId() && command.showInHistory()) {
                    Array.prototype.push.apply(affectedElements, command.getAffectedTopLevelElements());
                    var memberName = command.getMember().getName();
                    if (!commandMembers.contains(memberName)) {
                        commandMembers.push(memberName);
                    }
                }
            }
        }
        return commands;
    },rollForward: function() {
        var affectedElements = [];
        var conflicts = [];
        while (this._rolledBackCommands.length > 0) {
            var command = this._rolledBackCommands.pop();
            affectedElements = affectedElements.concat(command.getAffectedTopLevelElements());
            try {
                command.execute(true);
                this._contents.push(command);
            } catch (e) {
                conflicts.push(command);
            }
        }
        if (conflicts.length > 0) {
            this.alertRollFowardConflict();
        }
    },alertRollFowardConflict: function() {
        doAlert("Some of your changes were overridden by an update from another user.");
    },alertReload: function(message) {
        this.acknowledgeResponse();
        app.alertReload(message);
    },alertReloadUnhandledException: function(message, e) {
        app.alertReloadUnhandledException(message, e);
    },reload: function() {
        app.reload();
    },errorHappened: function(responseJson) {
        var message = responseJson.message;
        var affectedElements = this.rollback(true, false);
        if (affectedElements && affectedElements.length > 0) {
            message += "\n Some of your changes have been rolled back.";
            flash(affectedElements);
        }
        doAlert(message);
    },somethingFailed: function(message, exception, additional_log_data) {
        var affectedElements = this.rollback(true);
        if (affectedElements.length > 0) {
            message += " Some of your changes have been rolled back.";
            status(message, affectedElements);
        }
    },onConnectivityFailure: function(response) {
        app.pinger.registerServerFailure();
        if (this.containsMutatorCommand()) {
            status("Connectivity failure. Your request will be resent momentarily.", []);
        }
    },onServerFailure: function(response, e) {
        app.pinger.registerServerFailure();
        var responseText = (response && response.responseText) ? response.responseText : "";
        if (responseText.toLowerCase().indexOf('maintenance') > -1) {
            this.alertReload('System down for maintenance');
        } else {
            this.somethingFailed("A server error has occurred.", e, responseText);
        }
    },onException: function(request, e) {
        this.somethingFailed("Exception occurred (" + e.toString() + ").", e);
    },onRedirect: function(response) {
        this.alertReload('Your session has expired and you are being signed out.');
    },enqueue: function(command) {
        this.failIfRollingBack("enqueue");
        try {
            Tracker.eventUnitOfWork.run(function() {
                command.execute(true);
            });
            if (this._executingStaleCommands) {
                command.signalSuccessFromServer();
            } else {
                this._contents.push(command);
                this.processHead();
            }
        } catch (e) {
            if (!(e instanceof ValidationError)) {
                e.errorType = 'ExecuteFailed';
                this.alertReloadUnhandledException("Command Failed. Error: " + e + ". Command: " + command.getType() + " Version: " + command.getVersion(), e);
            }
        }
    },rollback: function(shouldRollbackPendingCommand, shouldRollForward) {
        shouldRollForward = (shouldRollForward == undefined) ? true : shouldRollForward;
        this.failIfRollingBack("another rollback");
        this._rollingback = true;
        var rolledbackElements = [];
        try {
            if (this._contents.length > 0 && !shouldRollForward) {
                app.sendClientErrorToServer("Rollback without rollforward.", {errorType: "Rollback"});
            }
            if (shouldRollbackPendingCommand && this._pendingCommand) {
                this._contents.unshift(this._pendingCommand);
                this.acknowledgeResponse();
            }
            while (this._contents.length > 0) {
                var cmd = this._contents.pop();
                if (cmd) {
                    rolledbackElements = rolledbackElements.concat(cmd.getAffectedTopLevelElements());
                    cmd.undo();
                    if (shouldRollForward) {
                        this._rolledBackCommands.push(cmd);
                    }
                }
            }
        } catch (e) {
            this.alertReloadUnhandledException("error during rollback", e);
        }finally {
            this._rollingback = false;
        }
        return rolledbackElements;
    },clear: function() {
        this._contents = [];
        this.acknowledgeResponse();
    },acknowledgeResponse: function() {
        this._isWaitingForResponse = false;
        this._pendingCommand = null;
    },sendAndWaitForResponse: function() {
        this._pendingCommand = this._contents.shift();
        this._isWaitingForResponse = true;
        this.sendToServer(this._pendingCommand);
    },_hasPendingCommand: function() {
        return this._pendingCommand != null;
    },isProcessing: function() {
        return !!(this._hasPendingCommand() || this._rollingback || this._executingStaleCommands || this._isWaitingForResponse);
    },containsMutatorCommand: function() {
        if (this.pendingCommand() && this.pendingCommand().isMutator()) {
            return true;
        }
        var found = false;
        this._contents.each(function(command) {
            if (command.isMutator()) {
                found = true;
            }
        });
        return found;
    },pendingCommand: function() {
        return this._pendingCommand;
    },queuedCommandCount: function() {
        return this._contents.length;
    },failIfRollingBack: function(operation) {
        if (this._rollingback) {
            var msg = "queue is rolling back, " + operation + " not allowed.";
            throw msg;
        }
    }};
var Overlay = Class.create();
Overlay.prototype = {SCROLLBAR_WIDTH: 20,MARGIN: 15,DEFAULT_WIDTH: 450,SHADOW_IMAGE_WIDTH: 9,AUTOHIDE_DELAY: 100,super_initialize: function(title, contentDivFactory, container, scrollableElementIds, additionalClassnames, widthInPixels, showStem, stemImageName, stemImageOffset) {
        this._title = title;
        this._contentDivFactory = contentDivFactory;
        this._container = container || document.body;
        this._scrollableElementIds = scrollableElementIds || [];
        this._showStem = showStem;
        this._stemImageName = stemImageName || "box_call_out_pointer.png";
        this._stemImageOffset = stemImageOffset || 5;
        if (undefined == widthInPixels) {
            this._width = this.DEFAULT_WIDTH;
        } else {
            this._width = widthInPixels;
        }
        this._additionalClassnames = additionalClassnames || [];
        this._hasRendered = false;
        this.overlayDiv = $(j("<div class='overlay' style='display:none'></div>").get(0));
        this._eventNamespace = "overlay";
        this.scrollBarEnabled = true;
    },getWidth: function() {
        return this._width;
    },getActualWidth: function() {
        return j(this.overlayDiv).width();
    },toElement: function() {
        return this.overlayDiv;
    },_render: function() {
        var contentWrapper = Element.newDiv('', {className: "overlayContentWrapper"});
        contentWrapper.style.width = this._width + "px";
        if (this._title) {
            var titleDiv = Element.newDiv(this._title, {className: "storyTitle",cleanupText: true,breakUpLongWords: true});
            var separatorDiv = Element.newDiv('', {className: "sectionDivider"});
            contentWrapper.appendChild(titleDiv);
            contentWrapper.appendChild(separatorDiv);
        }
        var widgetOrElement = this._contentDivFactory();
        if (!!widgetOrElement.render) {
            this._contentWidget = widgetOrElement;
            this._contentDiv = this._contentWidget.render();
        } else {
            this._contentDiv = widgetOrElement;
        }
        contentWrapper.appendChild(this._contentDiv);
        for (var i = 0; i < this._additionalClassnames.length; i++) {
            contentWrapper.addClassName(this._additionalClassnames[i]);
            if (this._additionalClassnames[i] != 'balloon' && this._additionalClassnames[i] != 'flyover') {
                this.overlayDiv.addClassName(this._additionalClassnames[i]);
            }
        }
        var stemWrapper = $(Element.newDiv("")).setStyle({margin: "0",border: "0"});
        if (this._showStem) {
            this.stem = $(Element.newImage(images_root_path("application/icons/" + this._stemImageName), {width: "14",height: "10"})).setStyle({position: "relative",bottom: "-1px",display: "block",width: "14px",height: "10px"});
            this._setStemPosition();
            stemWrapper.appendChild(this.stem);
        }
        stemWrapper.appendChild(contentWrapper);
        this.overlayDiv.appendChild(stemWrapper);
        this.overlayDiv.style.position = "absolute";
        this.overlayDiv.style.top = "0px";
        this.overlayDiv.style.left = "0px";
        j(this.overlayDiv).hide();
        this._container.appendChild(this.overlayDiv);
        if (this._contentWidget) {
            this._contentWidget.afterAddedToDom();
        }
    },_detachEventsFromOverlayDiv: function() {
        if (this.isVisible()) {
            j(document).off('.overlay');
        }
        j(this.overlayDiv).off();
    },attachTo: function(targetElement) {
        this.targetElement = targetElement;
        this.addListenersToTargetElement();
    },detach: function() {
        if (this.isVisible()) {
            this.close();
        }
        this._onMouseoutFunction();
        this._detachEventsFromOverlayDiv();
        j(document).off("AboutToShow", this._cachedCloseHandler);
        j(this.targetElement).off();
        if (this._contentWidget) {
            this._contentWidget.destroy();
        }
        j(this.overlayDiv).remove();
    },addListenersToTargetElement: function() {
    },eventTargetIsOutsideOverlayOrTargetElement: function(event) {
        var eventTarget = event.target;
        return !(eventTarget == this.overlayDiv || eventTarget == this.targetElement || Element.descendantOf(eventTarget, this.targetElement) || Element.descendantOf(eventTarget, this.overlayDiv));
    },isVisible: function() {
        return this._isVisible
    },assureRendered: function() {
        if (!this._hasRendered) {
            this._render();
            this._hasRendered = true;
        }
    },show: function() {
        j(document).trigger("AboutToShow");
        this.assureRendered();
        if (this.resetContentIfNecessary)
            this.resetContentIfNecessary();
        this._adjustFlyoverPosition();
        this.setVisible(true);
        this.addListenersToOverlayElement();
        this._cachedCloseHandler = j.proxy(this.close, this);
        j(document).off("AboutToShow", this._cachedCloseHandler).on('AboutToShow', this._cachedCloseHandler);
        this._postShow();
    },_postShow: function() {
    },_onMouseoverFunction: function() {
        this.show();
        this._mouseIsInFlyoverDiv = true;
    },_adjustFlyoverPosition: function() {
        this._contentDiv.style.position = 'absolute';
        this._contentDiv.style.height = 'auto';
        var heightWithoutContent = Utils.height(this.overlayDiv);
        this._contentDiv.style.position = '';
        var overlayHeightWithContent = Utils.height(this.overlayDiv);
        var overlayWidth = this._calculateOverlayWidth();
        var targetElementLeft = this._calculateTargetElementLeft();
        var targetElementTop = this._calculateTargetElementTop();
        var windowDimensions = Utils.windowDimensions();
        var maxHeight = windowDimensions.height - this.MARGIN * 2;
        if (this.scrollBarEnabled && overlayHeightWithContent > maxHeight) {
            this._contentDiv.style.height = (maxHeight - heightWithoutContent) + 'px';
            this._contentDiv.style.width = (overlayWidth - this.SCROLLBAR_WIDTH) + 'px';
            this._contentDiv.style.overflowX = 'hidden';
            this._contentDiv.style.overflowY = 'scroll';
            overlayHeightWithContent = maxHeight;
        } else if (!this.scrolBarEnabled) {
            this._contentDiv.style.overflowX = 'hidden';
            this._contentDiv.style.overflowY = 'hidden';
        }
        var targetElementWidth = this._calculateTargetElementWidth();
        var targetElementHeight = this._calculateTargetElementHeight();
        this.overlayDiv.style.left = this._getOverlayLeft(targetElementLeft, targetElementWidth, overlayWidth) + 'px';
        this.overlayDiv.style.top = this._getOverlayTop(targetElementTop, targetElementHeight, overlayHeightWithContent) + 'px';
    },_calculateTargetElementLeft: function() {
        return j(this.targetElement).offset().left;
    },_calculateTargetElementTop: function() {
        return j(this.targetElement).offset().top;
    },_calculateTargetElementWidth: function() {
        return j(this.targetElement).width();
    },_calculateTargetElementHeight: function() {
        return j(this.targetElement).height();
    },_calculateOverlayWidth: function() {
        return Utils.width(this.overlayDiv);
    },_onMouseoutFunction: function() {
        if (!this._hasRendered)
            return;
        this._mouseIsInFlyoverDiv = false;
        setTimeout(this._maybeHide.bind(this), this.AUTOHIDE_DELAY);
    },_onFlyoverDivMouseoverFunction: function() {
        this._mouseIsInFlyoverDiv = true;
    },_onFlyoverDivMouseoutFunction: function() {
        this._mouseIsInFlyoverDiv = false;
        setTimeout(this._maybeHide.bind(this), this.AUTOHIDE_DELAY);
    },_maybeHide: function() {
        if (!this._mouseIsInFlyoverDiv) {
            this.close();
        }
    },addListenersToOverlayElement: function() {
    },setVisible: function setVisible(isVisible) {
        if (this._isVisible != isVisible) {
            j(this.overlayDiv).toggle(isVisible);
        }
        this._isVisible = isVisible;
    },close: function() {
        this._detachEventsFromOverlayDiv();
        this.setVisible(false);
    },_getOverlayLeft: function(targetElementLeft, targetElementWidth, overlayWidth) {
        throw "Must be implemented by child class";
    },_getOverlayTop: function(preferredPosition, height) {
        throw "Must be implemented by child class";
    },_setStemPosition: function(leftAlign) {
        if (this.stem) {
            this.stem.style.left = leftAlign ? "5px" : (this._width + this._stemImageOffset) + "px";
        }
    }};
j(function() {
    window.SimpleOverlay = Class.create({initialize: function(fn, options) {
            this.fn = fn;
            this.options = options || {showCloseButton: false};
            this.bindify(this);
            this.overlay = new Element('div').setOpacity(0.0).addClassName('simple-overlay');
            this.setupElements();
            this.setupBehaviors(this);
        },bindify: function() {
            this.cancel = this.cancel.bind(this);
            this.keyCancel = this.keyCancel.bind(this);
            this.fixPosition = this.fixPosition.bind(this);
        },cancel: function(event) {
            j(document).off("keydown", this.keyCancel);
            j(this.overlay).off().find("*").off();
            j(this.message).off().find("*").off();
            if (this.onCancel) {
                this.onCancel();
            }
            this.message.hide();
            this.overlay.hide();
            $$('.simple-overlay').invoke('remove');
            if (this.afterCancel) {
                this.afterCancel();
            }
            if (this.options.removeOnCancel) {
                this.message.remove();
            }
            return false;
        },appendElement: function(element) {
            $(document.body).insert(element);
            this.fixPosition();
        },fixPosition: function() {
            var topOffset = document.viewport.getScrollOffsets().top;
            this.overlay.setStyle({width: '100%',height: '100%',position: 'absolute',left: '0px',top: (topOffset + 'px')});
            if (this.options.anchor) {
                this.message.clonePosition($(this.options.anchor), {setWidth: false,setHeight: false,offsetLeft: this.options.offsetLeft,offsetTop: this.options.offsetTop});
            } else {
                this.message.setStyle({top: ((this.overlay.getHeight() - this.message.getHeight()) / 2 + topOffset) + 'px',left: ((this.overlay.getWidth() - this.message.getWidth()) / 2) + 'px',position: 'absolute'});
            }
        },setupElements: function() {
            this.message = this.fn(this);
            var image_id = this.message.id + "_close_image";
            if (this.options.showCloseButton && $(image_id) == null) {
                var img_src = images_root_path('application/icons/close_button_overlay.png');
                if (this.options.closeButtonImage)
                    img_src = this.options.closeButtonImage;
                var img = new Element('img', {src: img_src,'class': 'close_button',"id": image_id});
                img.setAttribute('onmouseout', "this.src='" + img_src + "'");
                img.setAttribute('onmouseover', "this.src='" + img_src + "'");
                j(img).click(this.cancel.bind(this));
                this.message.appendChild(img);
            }
            this.appendElement(this.overlay);
            this.appendElement(this.message);
        },setupBehaviors: function(overlay) {
            j(window).scroll(this.fixPosition);
            j(window).resize(this.fixPosition);
            j(document).keydown(this.keyCancel);
            j(this.overlay).click(this.cancel);
        },keyCancel: function(event) {
            if ((event.keyCode || event.charCode) == Event.KEY_ESC) {
                this.cancel(event);
            }
        }});
    Object.extend(SimpleOverlay, {create: function(contentFn, options) {
            return new SimpleOverlay(contentFn, options);
        }});
});
DropdownMenu = {register: function(name) {
        var buttonId = '#' + name + '_button', dropdownId = '#' + name + '_dropdown';
        j(buttonId).click(function(event) {
            var el = event.currentTarget;
            var already_open = el.hasClassName('active');
            DropdownMenu.deactivateAll();
            if (!already_open) {
                el.toggleClassName('active');
                j(dropdownId).toggle();
                j(dropdownId).toggleClass('open');
                document.observe('click', DropdownMenu.deactivateAll);
            }
            event.stopImmediatePropagation();
        });
    },deactivateAll: function() {
        $$('.dropdown .active').invoke('removeClassName', 'active');
        $$('.dropdown .open').invoke('hide');
        $$('.dropdown .open').invoke('removeClassName', 'open');
        $$('.dropdown_menu .active').invoke('removeClassName', 'active');
        $$('.dropdown_menu .open').invoke('hide');
        $$('.dropdown_menu .open').invoke('removeClassName', 'open');
        document.stopObserving('click', DropdownMenu.deactivateAll);
    }};
var SavedSearches = Class.create();
SavedSearches.prototype = {initialize: function(project, savedSearches) {
        this.project = project;
        this.searches = this._unescapeSearches(savedSearches);
        this.events = new EventChannelRegistry(this, "update");
    },add: function(savedSearchParams) {
        this.searches.push(savedSearchParams);
        this.events.fire("update");
        this._saveSearch(savedSearchParams);
    },remove: function(id) {
        this.searches = this.searches.reject(function(search) {
            return search.id == id;
        });
        this.events.fire("update");
        this._deleteSearch(id);
    },size: function() {
        return this.searches.length;
    },each: function(func) {
        this.searches.each(func);
    },_unescapeSearches: function(savedSearches) {
        var unescapedSearches = savedSearches || [];
        unescapedSearches.each(function(savedSearch) {
            savedSearch.name = unescape(savedSearch.name);
            savedSearch.search_term = unescape(savedSearch.search_term);
        });
        return unescapedSearches;
    },_saveSearch: function(savedSearch) {
        var params = "saved_search[project_id]=" + this.project.id + "&saved_search[name]=" + encodeURIComponent(savedSearch.name) + "&saved_search[search_term]=" + encodeURIComponent(savedSearch.search_term) + "&authenticity_token=" + encodeURIComponent(AUTH_TOKEN);
        app._serverProxy.sendAjaxRequest("/saved_searches", params, "POST", {onSuccess: function(response) {
                savedSearch.id = response.id;
                this.events.fire("update");
            }.bind(this)});
    },_deleteSearch: function(id) {
        app._serverProxy.sendAjaxRequest("/saved_searches/" + id, "authenticity_token=" + encodeURIComponent(AUTH_TOKEN), "DELETE", {});
    }};
var FormBalloon = Class.create();
var FormBalloonLayout = Class.create({initialize: function(options) {
        Object.extend(this, options);
    }});
FormBalloon.SINGLE_TEXT_FIELD_LAYOUT = new FormBalloonLayout({fieldTextAlign: "right",createField: function(id, value) {
        return new Element("input", {id: id,value: value,size: "3",type: "text"});
    }});
FormBalloon.SINGLE_TEXT_AREA_LAYOUT = new FormBalloonLayout({fieldTextAlign: "left",createField: function(id, value) {
        return new Element("textarea", {id: id,value: value,rows: "4",columns: "20"}).setStyle({width: "100%"});
    }});
FormBalloon = Class.create(Overlay, {initialize: function(options) {
        this._options = {description: "",width: 275,builder: function() {
            },eventTrigger: function() {
            },onApply: function() {
            },onPostShow: function() {
            },onClose: function() {
            },onReset: null,onRevert: null,validator: null,applyButtonLabel: "Apply",revertButtonLabel: "Revert",disabled: false,excludeCloseButton: false,excludeActionButtons: false,stemImageName: null,stemImageOffset: null,showStem: true,additionalClassNames: [],closeOnUpdate: false,enableVerticalFlip: false,positionAdjustment: {horizontal: 0,vertical: 0}};
        Object.extend(this._options, options || {});
        this.contents = null;
        this.super_initialize(null, this._contentDivFactory.bind(this), null, Layout.SCROLLABLE_ELEMENT_IDS, ["balloon"].concat(this._options.additionalClassNames), this._options.width, this._options.showStem, this._options.stemImageName, this._options.stemImageOffset);
    },_contentDivFactory: function() {
        this.contents = new Element("div", {className: "balloonContents"});
        var builderElement = this._options.builder();
        if (this._options.disabled) {
            builderElement.select('input').invoke("disable");
        }
        this.contents.insert(builderElement);
        this._options.eventTrigger();
        if (this._options.htmlClasses) {
            this.contents.addClassName(this._options.htmlClasses);
        }
        if (this._options.validator) {
            this.contents.insert(this._createErrorDiv());
        }
        if (!(this._options.excludeActionButtons || this._options.disabled)) {
            var buttonDiv = this._createButtonDiv();
            this.contents.insert(buttonDiv);
        }
        if (this._options.description) {
            this.contents.insert(this._createDescriptionDiv());
        }
        if (!this._options.excludeCloseButton) {
            this.contents.insert(this._createCloseButton());
        }
        return this.contents;
    },_createCloseButton: function() {
        this._closeButton = new Element("span").addClassName("close_popup");
        var img = new Element("img", {src: images_root_path("application/icons/close_panel_x.gif"),width: "12",height: "12"});
        this._closeButton.insert(img);
        this._closeButton.insert("Close");
        j(this._closeButton).on('click', j.proxy(this._handleCloseButton, this));
        return this._closeButton;
    },_createInputDiv: function() {
        this._field = this._options.layout.createField("form_balloon_field", this._options.initialValueProvider());
        var element = new Element("div", {className: "balloonField balloonComponent"}).insert(this._options.title + ": ").insert(this._field).insert(this._options.fieldSuffix);
        element.setStyle({textAlign: this._options.layout.fieldTextAlign});
        return element;
    },_createErrorDiv: function() {
        this._errorDiv = new Element("div", {className: "balloonErrorMessage error_message"});
        this._errorDiv.hide();
        return this._errorDiv;
    },_createButtonDiv: function() {
        var buttonDiv = new Element("div", {className: "balloonButtons balloonComponent"});
        if (this._options.onRevert) {
            this._revertButton = new Element("button", {id: "form_balloon_revert_button"}).insert(this._options.revertButtonLabel);
            j(this._revertButton).on('click', j.proxy(this._handleRevertButton, this));
            buttonDiv.insert(this._revertButton);
            buttonDiv.insert("&nbsp;");
        }
        this._applyButton = new Element("button", {id: "form_balloon_apply_button"}).insert(this._options.applyButtonLabel);
        j(this._applyButton).on('click', j.proxy(this._handleApplyButton, this));
        buttonDiv.insert(this._applyButton);
        return buttonDiv;
    },_createDescriptionDiv: function() {
        return new Element("div", {className: "balloonDescription balloonComponent"}).insert(this._options.description);
    },_postShow: function() {
        var firstElement = this.contents.select("input, textarea")[0];
        if (firstElement) {
            firstElement.activate();
        }
        this._setStemPosition(this._shouldFlipDirection());
        this._options.onPostShow();
    },addListenersToTargetElement: function() {
        j(this.targetElement).on('click', j.proxy(this._handleTargetElementClick, this));
    },addListenersToOverlayElement: function() {
        j(document).on('click.' + this._eventNamespace, j.proxy(this._handleDocumentClick, this));
        j(document).on('keydown.' + this._eventNamespace, j.proxy(this._handleKeypress, this));
        j(document).on('keyup.' + this._eventNamespace, j.proxy(this._handleKeypress, this));
        j(document).on('list:didScroll.' + this._eventNamespace, "td.panel div.scrolling_item_list", j.proxy(this.close, this));
        j(document).on('list:draggingItem.' + this._eventNamespace, "td.panel div.scrolling_item_list", j.proxy(this.close, this));
        if (this._options.closeOnUpdate) {
            j(document).on('list:onUpdate.' + this._eventNamespace, "td.panel div.scrolling_item_list", j.proxy(this.close, this));
            j(document).on('details:didExpand.' + this._eventNamespace, "td.panel div.scrolling_item_list", j.proxy(this.close, this));
        }
    },_handleTargetElementClick: function(event) {
        if (this.isVisible()) {
            this.close();
        } else {
            this.show();
        }
    },_handleCloseButton: function() {
        if (this.isVisible()) {
            this.close();
        }
    },_handleDocumentClick: function(event) {
        if (this.isVisible() && this.eventTargetIsOutsideOverlayOrTargetElement(event)) {
            this.close();
        }
    },_handleKeypress: function(event) {
        if (this.isVisible() && event.keyCode == Event.KEY_ESC) {
            event.stopPropagation();
            event.preventDefault();
            this.close();
        }
        if (this.isVisible() && event.keyCode == Event.KEY_RETURN && event.shiftKey && j(".chzn-container-active", this.contents).length == 0) {
            event.stopPropagation();
            event.preventDefault();
            this._handleApplyButton();
        }
    },_handleApplyButton: function() {
        var serializedForm = Form.serialize(this.contents, true);
        var validationErrors = this._options.validator ? this._options.validator(serializedForm) : null;
        if (validationErrors) {
            this._showErrors(validationErrors);
        } else {
            this._hideError();
            var apply_incomplete = this._options.onApply(serializedForm);
            if (!apply_incomplete) {
                this.close();
            }
        }
    },_handleRevertButton: function() {
        this._options.onRevert();
        this._hideError();
        this.close();
    },_hideError: function() {
        if (this._errorDiv)
            this._errorDiv.hide();
    },_showErrors: function(errors) {
        this._errorDiv.innerHTML = $A(errors).map(function(e) {
            return e.message;
        }).join("<br />");
        this._errorDiv.show();
        var elem;
        elem = this.contents.select("input[name=" + errors[0].name + "]")[0] || this.contents.select("textarea[name=" + errors[0].name + "]")[0];
        if (elem) {
            elem.activate();
        }
    },resetContentIfNecessary: function() {
        if (this._options.onReset) {
            this._options.onReset(this);
        }
        this._hideError();
    },set: function(selector, value) {
        this.contents.select(selector)[0].value = value;
    },get: function(selector) {
        return this.contents.select(selector)[0].value;
    },setValue: function(newValue) {
        this._field.value = newValue;
    },getApplyButton: function() {
        return this._applyButton;
    },apply: function() {
        this._handleApplyButton();
    },close: function($super) {
        $super();
        if (typeof (this._options.onClose) == 'function') {
            this._options.onClose();
        }
    },revert: function() {
        this._handleRevertButton();
    },getErrorElement: function() {
        return this._errorDiv;
    },_getOverlayLeft: function(targetElementLeft, targetElementWidth, overlayWidth) {
        if (this._shouldFlipDirection()) {
            return targetElementLeft
            + (targetElementWidth / 2)
            + this._options.positionAdjustment.horizontal
            - 8;
        } else {
            return targetElementLeft
            - this.getActualWidth()
            + (targetElementWidth / 2)
            - this._options.positionAdjustment.horizontal
            + 8;
        }
    },_shouldFlipVertical: function(targetElementTop, targetElementHeight, overlayHeight) {
        if (!this._options.enableVerticalFlip) {
            return false;
        }
        return Utils.windowDimensions().height < (targetElementTop + overlayHeight + targetElementHeight + this._options.positionAdjustment.vertical);
    },_getOverlayTop: function(targetElementTop, targetElementHeight, overlayHeight) {
        if (this._shouldFlipVertical(targetElementTop, targetElementHeight, overlayHeight)) {
            return targetElementTop - overlayHeight - this._options.positionAdjustment.vertical;
        }
        return targetElementTop + targetElementHeight + this._options.positionAdjustment.vertical;
    },_shouldFlipDirection: function() {
        return (this._calculateOverlayWidth() - (this._calculateTargetElementWidth() / 2)) > this._calculateTargetElementLeft();
    }});
Flyover = Class.create(Overlay, {initialize: function(title, contentDivFactory, container, scrollableElementIds, additionalClassnames, widthInPixels, leftOffset, topOffset) {
        additionalClassnames = additionalClassnames || [];
        additionalClassnames.push("flyover");
        this.leftOffset = leftOffset || 20;
        this.topOffset = topOffset || 0;
        this.super_initialize(title, contentDivFactory, container, scrollableElementIds, additionalClassnames, widthInPixels);
    },addListenersToTargetElement: function() {
        j(this.targetElement).on('mouseenter', j.proxy(this._handleMouseOver, this));
        j(this.targetElement).on('mouseleave', j.proxy(this._handleMouseOut, this));
    },addListenersToOverlayElement: function() {
        j(this.overlayDiv).on('mouseenter', j.proxy(this._onFlyoverDivMouseoverFunction, this));
        j(this.overlayDiv).on('mouseleave', j.proxy(this._onFlyoverDivMouseoutFunction, this));
    },_handleMouseOver: function() {
        this._showTimer = window.setTimeout(this._onMouseoverFunction.bind(this), Flyover.SHOW_DELAY_MSEC);
    },_handleMouseOut: function() {
        window.clearTimeout(this._showTimer);
        this._onMouseoutFunction();
    },_getOverlayLeft: function(targetElementLeft, targetElementWidth, overlayWidth) {
        if ((targetElementLeft + overlayWidth + 35) > Utils.windowDimensions().width) {
            return (targetElementLeft - overlayWidth - 20);
        } else {
            return (targetElementLeft + this.leftOffset);
        }
    },_getOverlayTop: function(targetElementTop, targetElementHeight, overlayHeight) {
        var windowHeight = Utils.windowDimensions().height - this.MARGIN;
        if (targetElementTop + overlayHeight > windowHeight) {
            var x = windowHeight - overlayHeight;
            if (x < 0) {
                x = Flyover.HEADER_HEIGHT;
            }
            return x;
        } else {
            return targetElementTop + this.topOffset;
        }
    }});
Flyover.HEADER_HEIGHT = 50;
Flyover.SHOW_DELAY_MSEC = 350;
EpicProgressFlyover = Class.create(Flyover, {initialize: function($super, epic, options) {
        this.options = j.extend({templateName: 'epic_progress_flyover_template',classNames: ['epic_progress_flyover']}, options || {});
        this.epic = epic;
        $super(null, this.build.bind(this), document.body, null, this.options.classNames, 187, 0, 10);
    },_getOverlayLeft: function(targetElementLeft, targetElementWidth, overlayWidth) {
        return (targetElementLeft + targetElementWidth - overlayWidth);
    },build: function() {
        var points = this.epic.getStoryPoints();
        var completionDate = this.epic.getCompletionDate();
        if (completionDate) {
            completionDate = completionDate.asDisplayMonthDay();
        } else {
            completionDate = '&infin;';
        }
        var templateVars = {finish: completionDate,epicId: this.epic.id()};
        ['accepted', 'active', 'unstarted', 'unscheduled'].each(function(bucket) {
            templateVars[bucket] = this._displayStringForBucket(points, bucket);
        }.bind(this));
        var html = Tracker.Template.render(this.options.templateName, templateVars);
        return j(html).get(0);
    },_postShow: function() {
        j(this.overlayDiv).click(function() {
            app.layout.showEpicStoriesPanel(this.epic.id());
            this.close();
        }.bind(this));
    },_displayStringForBucket: function(points, bucket) {
        return '<em>' + points['storyCount'][bucket] +
        ('</em> story'.pluralize(points['storyCount'][bucket], '</em> stories')) + ', <em>' + points[bucket] + '</em> pts';
    },rebuild: function() {
        j(this._contentDiv).html(this.build());
    }});
(function() {
    Layout = Class.create();
    Layout.RENDER_DELAY = 10;
    Layout.SET_VIEW_DELAY = 10000;
    Layout.MANIFEST_VERSION = 1;
    Layout.SCROLLABLE_ELEMENT_IDS = ['done_itemList_items', 'current_itemList_items', 'backlog_itemList_items', 'icebox_itemList_items', 'search_itemList_items', 'mywork_itemList_items', 'history_itemList_items', 'charts_charts', 'epics_itemList_items', 'epic_stories_itemList_items'];
    PanelSorter = Class.create();
    PanelSorter.sort = function(array) {
        return array.sort(function(a, b) {
            return a.sortNumber - b.sortNumber;
        }.bind(this));
    };
    Layout.prototype = {initialize: function(project, options) {
            this.panelSorter = PanelSorter;
            this.project = project;
            this.shouldDelayRender = options.delayRender;
            this.showDonePanel = options.showDonePanel;
            this.savedLayout = options.savedLayout;
            this.panels = [];
            this.hiddenPanels = {};
            this.numberOpenForType = {};
            this.panelRegistry = {};
            this.containerElement = Element.newTable(1, 0, {id: "layout",className: "layout",cellSpacing: '16px'});
            this.rowElement = this.containerElement.rows[0];
            this.isCurrentInBacklog = false;
            this.initListeners();
        },initListeners: function() {
            var self = this;
            j(window).resize(function(e) {
                self._resizePanels();
            });
            var dragScroller = new PanelDragScroller(this);
            j(document).mousemove(dragScroller.handleMouseMove.bind(dragScroller)).on('tracker:reveal_epic', function(event, epic) {
                this.revealItem(epic);
            }.bind(this));
        },htmlId: function() {
            return null;
        },restore: function() {
            this.suppressSaveLayout = true;
            if (this.isLayoutSaved()) {
                this._restoreSavedLayout();
            } else {
                this._restoreDefaultLayout();
            }
            if (this.showDonePanel && !this.containsPanelOfType(Panel.DONE)) {
                this.openPanel(Panel.DONE);
            }
            if (!this.getFirstPanelForType(Panel.HISTORY)) {
                this._addHiddenPanel(Panel.HISTORY);
            }
            this.suppressSaveLayout = false;
        },registerPanel: function(type, widgetCreationFunctor, options) {
            var defaultOptions = $H({fillInWidgets: true});
            this.panelRegistry[type] = {widgetCreationFunctor: widgetCreationFunctor,options: defaultOptions.merge(options).toObject()};
        },saveLayout: function() {
            if (this.isLayoutSaved() && !this.suppressSaveLayout) {
                this.setSavedLayout();
            }
        },findOrOpenPanel: function findOrOpenPanel(panelType, options) {
            var panel = this.getFirstPanelForType(panelType);
            if (panel == null) {
                panel = this.openPanel(panelType, options)
            }
            return panel;
        },openPanel: function(panelType, options) {
            if (fullStoryViewActive(this)) {
                return;
            }
            var panel = this._createPanel(panelType, options);
            if (panel) {
                if (panel.isFullScreen()) {
                    this.prepareForFullScreenPanel();
                }
                this._showPanel(panel);
            }
            return panel;
        },closePanel: function(panel) {
            if (panel.isCloned() || panel.isDestroyOnClose()) {
                this._destroyPanel(panel);
            } else {
                this.hidePanels(panel.type, [panel]);
            }
        },_destroyPanel: function(panel) {
            this._hidePanel(panel);
            if (panel._closePanelFunctor) {
                panel._closePanelFunctor();
            }
            panel.destroy();
        },_destroyAllPanels: function() {
            var panels = this.panels.copy();
            for (var i = 0; i < panels.length; i++) {
                this._destroyPanel(panels[i]);
            }
        },_closeAllPanels: function() {
            var panels = this.panels.copy();
            for (var i = 0; i < panels.length; i++) {
                this.closePanel(panels[i]);
            }
        },_hideAllPanels: function() {
            var panels = this.panels.copy();
            for (var i = 0; i < panels.length; i++) {
                this._hidePanel(panels[i]);
            }
        },_showPanels: function(panelType, options) {
            var hiddenPanelsForType = this.hiddenPanels[panelType];
            if (hiddenPanelsForType) {
                hiddenPanelsForType.each(this._showPanel.bind(this));
                this.hiddenPanels[panelType] = null;
            } else {
                this.openPanel(panelType, options);
            }
            j(this.containerElement).trigger('layout:showPanels', panelType);
        },hidePanels: function(panelType, panels) {
            var panelsToHide = panels || this.getPanelsForType(panelType);
            this.hiddenPanels[panelType] = panelsToHide;
            panelsToHide.each(this._hidePanel.bind(this));
            j(this.containerElement).trigger('layout:hidePanels', panelType);
        },togglePanel: function(panelType, options) {
            if (!this.containsPanelOfType(panelType)) {
                this._showPanels(panelType, options);
            } else {
                this.hidePanels(panelType);
            }
        },findEpicStoriesPanel: function findEpicStoriesPanel(epicId) {
            var panels = this.getPanelsForType(Panel.EPIC_STORIES);
            for (var i = 0; i < panels.length; i++) {
                if (panels[i].viewWidget.epic.id() == epicId) {
                    return panels[i];
                }
            }
        },showEpicStoriesPanel: function showEpicStoriesPanel(epicId) {
            this.attemptToCloseFullScreenPanel();
            var panel;
            if (panel = this.findEpicStoriesPanel(epicId)) {
                this._scrollPanelIntoView(panel);
            } else {
                this.openPanel(Panel.EPIC_STORIES, {newPanelId: epicId,viewWidgetOptions: {epicId: epicId}});
            }
        },_toggleControlButton: function(panelType) {
            var controlButton = $(panelType + "_control_button");
            if (controlButton) {
                if (this.containsPanelOfType(panelType)) {
                    if (!controlButton.hasClassName("selected")) {
                        controlButton.addClassName("selected");
                    }
                } else {
                    controlButton.removeClassName("selected");
                }
            }
        },_updatePanelCloneLink: function(panelType) {
            if (!Panel.UNCLONEABLE_PANELS.include(panelType)) {
                var panels = this.getPanelsForType(panelType);
                if (panels.length > 1) {
                    panels.each(function(panel) {
                        panel.disableCloneLink();
                    });
                } else {
                    panels.each(function(panel) {
                        panel.enableCloneLink();
                    });
                }
            }
        },openStoryHistoryPanel: function(nextToPanel, story) {
            var options = {nextToId: nextToPanel.id,widget: new ItemListWidget("History of <strong>'" + Element.breakUpLongWords(Element.cleanupText(story.getName())) + "'</strong>", "This panel shows you, in reverse order, each action that has been taken on the '" + story.getName() + "' story since its creation.", new StoryHistoryWidgetSource(this.project, story))};
            return this.openPanel(Panel.STORY_HISTORY, options);
        },openEpicHistoryPanel: function(nextToPanel, epic) {
            var options = {nextToId: nextToPanel.id,widget: new ItemListWidget("History of <strong>'" + Element.breakUpLongWords(Element.cleanupText(epic.getName())) + "'</strong>", "This panel shows you, in reverse order, each action that has been taken on the '" + epic.getName() + "' epic since its creation.", new EpicHistoryWidgetSource(this.project, epic))};
            return this.openPanel(Panel.STORY_HISTORY, options);
        },openSearchPanel: function(searchString) {
            this.attemptToCloseFullScreenPanel();
            var searchPanel = this.panels.find(function(panel) {
                return panel.type == Panel.SEARCH && !panel.viewWidget.isPinned;
            });
            if (searchPanel) {
                searchPanel.close();
            }
            searchPanel = this.openPanel(Panel.SEARCH);
            searchPanel.viewWidget.search(searchString);
            return searchPanel;
        },onClickCreateNewStory: function() {
            this.attemptToCloseFullScreenPanel();
            var iceboxPanel = this.findOrOpenPanel(Panel.ICEBOX);
            iceboxPanel.viewWidget.addNewItem(Story.NEW_STORY_ID);
        },revealItem: function(model) {
            if (model.getType() == 'story') {
                var story = model;
                var containingIteration = this.project.getIterationContainingStory(story);
                var panels = this._getPanelsContainingStory(story);
                panels.each(function(panel) {
                    if (containingIteration) {
                        panel.viewWidget.itemWidgetSource.showIteration(containingIteration.getNumber());
                    }
                    panel.revealItem(story);
                });
            } else {
                var panel = this.findOrOpenPanel(Panel.EPICS);
                panel.revealItem(model);
            }
        },showStory: function(story, modelDetails) {
            var containingIteration = this.project.getIterationContainingStory(story);
            this._getPanelsContainingStory(story).each(function(panel) {
                if (containingIteration) {
                    panel.viewWidget.itemWidgetSource.showIteration(containingIteration.getNumber());
                }
                panel.showStory(story, modelDetails);
            });
        },addEpic: function() {
            if (!this.project.isReadOnly()) {
                var panel = this.findOrOpenPanel(Panel.EPICS);
                if (panel) {
                    panel.viewWidget.addNewEpic();
                }
            }
        },showEpic: function(epic) {
            var epicPanel = this.findOrOpenPanel(Panel.EPICS);
            epicPanel.revealItem(epic);
        },isPanelActive: function(panel) {
            return this.panels.include(panel);
        },containsPanelOfType: function(type) {
            return this.panels.any(function(panel) {
                return panel.type == type;
            });
        },getPanels: function() {
            return this.panels;
        },refreshAllOpenPanels: function() {
            var self = this;
            this.getPanels().each(function(panel) {
                self.closePanel(panel);
                self.openPanel(panel.type);
            });
        },getPanelsForType: function(type) {
            return this.getPanels().findAll(function(panel) {
                return panel.type == type;
            });
        },getFirstPanelForType: function(type) {
            return this.getPanels().find(function(panel) {
                return panel.type == type;
            });
        },_getPanelById: function(panelId) {
            return this.getPanels().find(function(panel) {
                return panel.id == panelId
            });
        },_createPanel: function(type, options) {
            var options = options || {};
            var panelMetadata = this.panelRegistry[type];
            if (panelMetadata == null || (panelMetadata.options.filterFunctor && panelMetadata.options.filterFunctor(this))) {
                return null;
            }
            var newPanelId = this._nextIdForType(type, options.newPanelId);
            var widget = options.widget || panelMetadata.widgetCreationFunctor(options.viewWidgetOptions);
            var panelOptions = panelMetadata.options;
            panelOptions.shouldDelayRender = this.shouldDelayRender && widget.needsRenderDelay();
            panelOptions.panelType = type;
            if (options.nextToId) {
                var nextToPanel = this._getPanelById(options.nextToId);
                panelOptions.sortNumber = this._nextSortNumberForType(nextToPanel.type);
            } else {
                panelOptions.sortNumber = this._nextSortNumberForType(type);
            }
            var panel = new Panel(newPanelId, this, Object.extend({cloned: options.cloned}, panelOptions));
            panel.setParent(this);
            panel.setViewWidget(widget, panelOptions.fillInWidgets);
            return panel;
        },_nextIdForType: function(type, id) {
            var registry = this.panelRegistry[type];
            if (id) {
                return type + id;
            } else if (registry.nextIdNumber) {
                return type + registry.nextIdNumber++;
            } else {
                registry.nextIdNumber = 2;
                return type;
            }
        },_nextSortNumberForType: function(type) {
            var registry = this.panelRegistry[type];
            if (registry.currentSortNumber) {
                registry.currentSortNumber++;
            } else {
                registry.currentSortNumber = registry.options.startSortNumber;
            }
            return registry.currentSortNumber;
        },_showPanel: function(panel) {
            this.panels.push(panel);
            this.panelSorter.sort(this.panels);
            this._weavePanel(panel);
            this._resizePanels();
            if (app.isLoaded) {
                this._scrollPanelIntoView(panel);
            }
            if (panel.isSaveable()) {
                this.saveLayout();
            }
            this._toggleControlButton(panel.type);
        },_scrollPanelIntoView: function _scrollPanelIntoView(panel) {
            var left = panel.getOffset().left;
            if (left + Utils.widthWithBorders(panel.renderedElement) >= app.getViewPort().width) {
                app.setScrollLeft(left);
            } else if (left < 0) {
                app.setScrollLeft(app.getScrollLeft() + left);
            }
        },_hidePanel: function(panel) {
            this.panels = this.panels.without(panel);
            j(panel.renderedElement).detach();
            this._resizePanels();
            if (panel.isSaveable()) {
                this.saveLayout();
            }
            this._toggleControlButton(panel.type);
            this._updatePanelCloneLink(panel.type);
        },_addHiddenPanel: function(panelType) {
            var newPanel = this._createPanel(panelType);
            if (newPanel) {
                this.hiddenPanels[panelType] = [newPanel];
            }
        },_weavePanel: function(panel) {
            var nextPanel = this.panels.find(function(p) {
                return p.sortNumber > panel.sortNumber;
            });
            if (!panel.renderedElement) {
                panel.render();
                panel.j().bind('panel:focus', function(e) {
                    this._scrollPanelIntoView(panel);
                }.bind(this));
            }
            if (nextPanel) {
                j(nextPanel.renderedElement).before(panel.renderedElement);
            } else {
                this.rowElement.appendChild(panel.renderedElement);
            }
            panel.postShow();
        },_percentOfResizeablePanels: function() {
            var containerWidth = Utils.width(this.containerElement);
            return (containerWidth - this._totalFixedWidth()) * 100 / containerWidth;
        },_totalFixedWidth: function() {
            return this._getFixedWidthPanels().inject(0, function(sum, panel) {
                return sum + panel.fixedWidth;
            });
        },_numResizeablePanels: function() {
            return this.getPanels().length - this._getFixedWidthPanels().length;
        },_getFixedWidthPanels: function() {
            return this.panels.select(function(panel) {
                return panel.isFixedWidth();
            });
        },_resizePanels: function() {
            var count = this.getPanels().length;
            var panelY = 143;
            if ($('no_panels_open')) {
                this._removeNoPanelsDiv();
            }
            if (count > 0) {
                var firstPanel = this.getPanels()[0];
                panelY = $(firstPanel.renderedElement).cumulativeOffset().top;
            } else {
                this._insertNoPanelsDiv();
            }
            var heightSlop = panelY + Panel.TITLE_HEIGHT + 15 + (Utils.isIE ? 3 : 0);
            var windowHeight = Utils.windowDimensions().height;
            var panelHeightPixels = windowHeight - heightSlop;
            var panelWidthPercent = this._percentOfResizeablePanels() / this._numResizeablePanels();
            var containerWidth = Utils.width(this.containerElement);
            this.getPanels().each(function(panel) {
                var panelPercentage = panel.isFixedWidth() ? ((panel.fixedWidth / containerWidth) * 100) : panelWidthPercent;
                panel.resize(panelPercentage, panelHeightPixels);
            }.bind(this));
        },prepareForFullScreenPanel: function() {
            j(".controlPanel").addClass("full_screen_view");
            j(this.rowElement).hide();
            var newRowElement = j('<tr>');
            j(this.rowElement).before(newRowElement);
            this.rowElement = newRowElement[0];
            this.memorizedPanels = this.panels;
            this.panels = [];
        },restoreFromFullScreenPanel: function() {
            var $rowElement = j(this.rowElement).next('tr');
            j(".controlPanel").removeClass("full_screen_view");
            j(this.rowElement).remove();
            $rowElement.show();
            this.rowElement = $rowElement[0];
            this.panels = this.memorizedPanels || [];
            delete this.memorizedPanels;
            if (this.panels.length == 0) {
                this.restore();
            }
            this._resizePanels();
        },attemptToCloseFullScreenPanel: function() {
            if (fullStoryViewActive(this)) {
                this.getPanels()[0].viewWidget.minimize();
            }
        },_getPanelsContainingStory: function(story) {
            var panelsContainingStory = [];
            var iteration = this.project.getIterationContainingStory(story);
            for (var panelType in this.panelRegistry) {
                var panelMedaData = this.panelRegistry[panelType];
                if (panelMedaData.options.storyHomeFunctor && panelMedaData.options.storyHomeFunctor(story, iteration)) {
                    var panelsOfType = this.getPanelsForType(panelType);
                    if (panelsOfType.length > 0) {
                        panelsContainingStory.push(panelsOfType);
                    } else {
                        if (!this.isCurrentInBacklog || panelType != 'current') {
                            panelsContainingStory.push(this.openPanel(panelType));
                        }
                    }
                }
            }
            return panelsContainingStory.flatten();
        }};
    Object.extend(Layout.prototype, {isLayoutSaved: function() {
            return this.savedLayout != null;
        },toggleSavedLayout: function() {
            if (this.isLayoutSaved()) {
                this.unsetSavedLayout();
            } else {
                this.setSavedLayout();
            }
        },setSavedLayout: function() {
            this.savedLayout = this._layoutManifest();
            var params = "authenticity_token=" + encodeURIComponent(AUTH_TOKEN);
            params += "&person[saved_layout]=" + Object.toJSON($H(this.savedLayout));
            new ServerProxy().sendAjaxRequest("/profile/update_non_secured", params, "PUT", {});
        },unsetSavedLayout: function() {
            this.savedLayout = null;
            var params = "authenticity_token=" + encodeURIComponent(AUTH_TOKEN);
            params += "&person[saved_layout]=''"
            new ServerProxy().sendAjaxRequest("/profile/update_non_secured", params, "PUT", {});
        },_restoreSavedLayout: function() {
            if (this.savedLayout) {
                try {
                    if (this.savedLayout.version != Layout.MANIFEST_VERSION) {
                        this._restoreDefaultLayout();
                        return;
                    }
                    if (this.savedLayout.includeCurrentInBacklog) {
                        BacklogWidgetSource.includeCurrent(true);
                        this.isCurrentInBacklog = true;
                    }
                    _(this.savedLayout.panels).each(function(savedPanel) {
                        if (!this.containsPanelOfType(savedPanel.type)) {
                            this.openPanel(savedPanel.type, {viewWidgetOptions: savedPanel.viewWidgetOptions});
                        }
                    }.bind(this));
                } catch (e) {
                    app.sendClientErrorToServer("Problem loading saved layout", e);
                    this.savedLayout = {};
                    this._closeAllPanels();
                    this._resetRegistry();
                    this._restoreDefaultLayout();
                }
            }
            if (this.getPanels().length == 0) {
                this._insertNoPanelsDiv();
            }
        },_resetRegistry: function() {
            for (var panelType in this.panelRegistry) {
                this.panelRegistry[panelType].nextIdNumber = undefined;
            }
        },_insertNoPanelsDiv: function() {
            var cell = Element.addCellToRow($$('table#layout tr')[0], 1, {className: "td_no_panels_open"});
            $(cell).insert({bottom: Element.newDiv("There are no panels open currently.", {id: "no_panels_open",className: "no_panels_open"})});
        },_removeNoPanelsDiv: function() {
            if ($$('.td_no_panels_open')[0]) {
                $$('.td_no_panels_open')[0].remove();
            }
        },_restoreDefaultLayout: function() {
            this.openPanel(Panel.CURRENT);
            this.openPanel(Panel.BACKLOG);
        },_layoutManifest: function() {
            var layoutManifest = {version: Layout.MANIFEST_VERSION,includeCurrentInBacklog: this.isCurrentInBacklog,panels: []};
            this.panels.each(function(panel) {
                if (panel.isSaveable()) {
                    layoutManifest.panels.push(panel.manifestInfo());
                }
            }.bind(this));
            return layoutManifest;
        }});
    function fullStoryViewActive(self) {
        return self.getPanels().length === 1 && (self.getPanels()[0].type === Panel.FULL_STORY || self.getPanels()[0].type === Panel.FULL_EPIC);
    }
})();
(function() {
    PanelDragScroller = Class.create();
    PanelDragScroller.SCROLL_DELAY = 10;
    PanelDragScroller.SCROLL_AMOUNT = Utils.isIE ? 20 : 3;
    var isDragInProgress = false;
    function scrollHandler(e) {
        var itemWidget = j('.drag-highlight').parent().data('widget');
        if (itemWidget) {
            itemWidget.refreshPositionsOnce();
        } else {
            isDragInProgress = false;
        }
    }
    PanelDragScroller.prototype = {initialize: function(layout) {
            this.layout = layout;
            this.scrollDelta = 0;
            this.panelToScroll = null;
            j(this.layout.containerElement).on('dragstart', function() {
                isDragInProgress = true;
                j(document).on('list:onUpdate panel:resize panel:didResize', scrollHandler);
            }).on('dragstop', function() {
                isDragInProgress = false;
                j(document).off('list:onUpdate panel:resize panel:didResize', scrollHandler);
            }).on('drop', function() {
                isDragInProgress = false;
                j(document).off('list:onUpdate panel:resize panel:didResize', scrollHandler);
            });
        },handleMouseMove: function(event) {
            this.scrollDelta = 0;
            this.panelToScroll = null;
            if (isDragInProgress) {
                var panels = this.layout.getPanels();
                for (var i = 0; i < panels.length; i++) {
                    var panel = panels[i];
                    if (panel.hasItems()) {
                        var offset = panel.getCumulativeOffset();
                        var panelTopLeftX = offset[0];
                        var panelTopRightX = panelTopLeftX + panel.getWidth();
                        var panelTopY = offset[1];
                        var panelBottomY = panelTopY + panel.getHeight();
                        if (event.clientX > panelTopLeftX && event.clientX < panelTopRightX) {
                            if (event.clientY > panelTopY && event.clientY < panelBottomY) {
                                scrollHandler(event);
                            }
                            if (panelTopY + Panel.TITLE_HEIGHT > event.clientY || event.clientY > panelBottomY) {
                                this.panelToScroll = panel;
                                if (panelTopY + Panel.TITLE_HEIGHT > event.clientY) {
                                    this.scrollDelta = -PanelDragScroller.SCROLL_AMOUNT;
                                } else if (event.clientY > panelBottomY) {
                                    this.scrollDelta = PanelDragScroller.SCROLL_AMOUNT;
                                }
                                this.scrollPanel();
                                break;
                            }
                        }
                    }
                }
            }
        },scrollPanel: function() {
            var self = this;
            if (self.panelToScroll != null) {
                self.panelToScroll.scrollBy(self.scrollDelta);
                setTimeout(function() {
                    self.scrollPanel();
                }, PanelDragScroller.SCROLL_DELAY);
            }
        }};
})();
Pinger = Class.create();
Pinger.DEFAULT_PING_INTERVAL = 5000;
Pinger.DEGRADED_FAILURE_THRESHOLD = 2;
Pinger.DEGRADED_INTERVAL_COUNT = 3;
Pinger.OFFLINE_INTERVAL_COUNT = 6;
Pinger.TIMEOUT_INTERVAL_COUNT_THRESHOLD = 25;
Pinger.prototype = {initialize: function(onPing, pingInterval) {
        this._onPing = onPing;
        this._pingInterval = pingInterval || Pinger.DEFAULT_PING_INTERVAL;
        this._boundPingIfItsTime = this._pingIfItsTime.bind(this);
        this._consecutiveFailures = 0;
        this._intervalCountSinceLastPing = 1;
        this._intervalCountSinceLastSuccessfullResponse = 0;
        this._intervalId = null;
        this.events = new EventChannelRegistry(this, "update");
    },_pingIfItsTime: function() {
        if (this.happy() || (this.degraded() && this._intervalCountSinceLastPing >= Pinger.DEGRADED_INTERVAL_COUNT) || (this.offline() && this._intervalCountSinceLastPing >= Pinger.OFFLINE_INTERVAL_COUNT)) {
            this._onPing();
            this._intervalCountSinceLastPing = 0;
        }
        this._intervalCountSinceLastSuccessfullResponse++;
        this._intervalCountSinceLastPing++;
        if (this.offline()) {
            this.events.fire("update");
        }
    },start: function() {
        this._intervalId = setInterval(this._boundPingIfItsTime, this._pingInterval);
        this._pingIfItsTime();
    },stop: function() {
        clearInterval(this._intervalId);
        this._intervalId = null;
    },registerServerSuccess: function() {
        var shouldFireEvent = !this.happy();
        this._consecutiveFailures = 0;
        this._intervalCountSinceLastSuccessfullResponse = 0;
        if (shouldFireEvent) {
            this.events.fire("update");
        }
    },registerServerFailure: function() {
        this._consecutiveFailures++;
        this.events.fire("update");
    },happy: function() {
        return !this.offline() && this._consecutiveFailures <= Pinger.DEGRADED_FAILURE_THRESHOLD;
    },degraded: function() {
        return !this.offline() && this._consecutiveFailures >= Pinger.DEGRADED_FAILURE_THRESHOLD;
    },offline: function() {
        return this._intervalCountSinceLastSuccessfullResponse >= Pinger.TIMEOUT_INTERVAL_COUNT_THRESHOLD;
    }};
ServerProxy = Class.create();
ServerProxy.prototype = {initialize: function() {
    },isConnectionFailure: function(exception) {
        return (exception && exception.name == "NS_ERROR_NOT_AVAILABLE");
    },sendAjaxRequest: function(url, parameters, method, callbacks, postBody) {
        this.onSuccessCallback = callbacks.onSuccess || function(responseJson) {
        };
        this.onFailureCallback = callbacks.onFailure || function(message) {
        };
        this.onConnectivityFailureCallback = callbacks.onConnectivityFailure || function() {
        };
        this.onExceptionCallback = callbacks.onException || function(request, exception) {
        };
        this.onRedirectCallback = callbacks.onRedirect || function(response) {
        };
        var ajaxParams = {parameters: parameters,postBody: postBody,method: method,onException: function(request, exception) {
                if (this.isConnectionFailure(exception)) {
                    this.onConnectivityFailureCallback();
                } else {
                    this.onExceptionCallback(request, exception);
                }
            }.bind(this),onSuccess: function(response) {
                var responseJson;
                try {
                    if (response.responseText && !response.responseText.blank()) {
                        responseJson = response.responseText.parseJSON();
                    }
                } catch (e) {
                    this.onFailureCallback(response, e);
                    return;
                }
                try {
                    if (responseJson) {
                        this.onSuccessCallback(responseJson);
                    } else {
                        this.onConnectivityFailureCallback();
                    }
                } catch (e) {
                    if (e instanceof ValidationError) {
                        app.sendClientErrorToServer("ValidationError", e);
                    } else {
                        app.alertReloadUnhandledException("Unexpected exception occurred", e);
                    }
                }
            }.bind(this),onFailure: function(response) {
                this.onFailureCallback(response);
            }.bind(this),onConnectivityFailure: function(response) {
                this.onConnectivityFailureCallback();
            }.bind(this),on12029: function(response) {
                this.onConnectivityFailureCallback();
            }.bind(this),on12002: function(response) {
                this.onConnectivityFailureCallback();
            }.bind(this),on12163: function(response) {
                this.onConnectivityFailureCallback();
            }.bind(this),on12007: function(response) {
                this.onConnectivityFailureCallback();
            }.bind(this),on301: function(response) {
                this.onRedirectCallback(response);
            }.bind(this),on304: function(response) {
                this.onSuccessCallback(response);
            }.bind(this),on302: function(response) {
                this.onRedirectCallback(response);
            }.bind(this)};
        if (postBody) {
            ajaxParams.contentType = "application/json";
        }
        this.currentAjaxRequest = new Ajax.Request(url, ajaxParams);
    },abort: function() {
        ["Success", "Failure", "Exception", "ConnectivityFailure"].each(function(event) {
            this.currentAjaxRequest.options["on" + event] = null;
        }.bind(this));
        this.currentAjaxRequest.transport.abort();
    }};
ThreadManager = {initialize: function() {
        this.reset();
        this.runningThreadsChangedEvent = new EventChannel("runningThreadsChanged", this);
    },reset: function() {
        this.numberOfThreads = 0;
        this._runningThreadSummary = {};
    },startThread: function(name, functor, delay) {
        this.threadStarted(name);
        return setTimeout(this.makeFunkyWrapper(name, functor).bind(this), delay);
    },makeFunkyWrapper: function(name, functor) {
        return function() {
            try {
                functor();
            } catch (e) {
                app.sendClientErrorToServer("ThreadManager caught exception in thread " + name + ": " + e, e);
            }
            this.threadFinished(name);
        }
    },numberOfRunningThreads: function() {
        return this.numberOfThreads;
    },runningThreadSummary: function() {
        return this._runningThreadSummary;
    },threadStarted: function(name) {
        this.numberOfThreads++;
        this._runningThreadSummary[name] = this._runningThreadSummary[name] ? this._runningThreadSummary[name] + 1 : 1;
        this.runningThreadsChangedEvent.fire()
    },threadFinished: function(name) {
        this.numberOfThreads--;
        this._runningThreadSummary[name]--;
        if (this._runningThreadSummary[name] == 0) {
            delete (this._runningThreadSummary[name]);
        }
        this.runningThreadsChangedEvent.fire()
    },threadSummaryString: function() {
        return Object.toJSON(this.runningThreadSummary());
    }}
ThreadManager.initialize();
MultiSelectActions = {MAX_MOVE_FROM_PROJECT_STORIES: 100,showProjectSelectPrompt: function() {
        if (!app.project.hasSelectedModels()) {
            return status('Please select some stories first.');
        }
        var dialog = $("destination_project_selection");
        var button = $("stories_button");
        SimpleOverlay.create(function(overlay) {
            j(dialog.select(".close_popup")).click(overlay.cancel);
            return dialog;
        });
        MultiSelectActions.show(button, dialog);
        setTimeout(function() {
            $("destination_project_selection").select("select")[0].focus();
        }, 25);
    },moveToProject: function(sourceProject, destinationProjectId, destinationProjectName) {
        if ($("destination_project_selection")) {
            $("destination_project_selection").hide();
        }
        var storiesToBeMoved = [];
        var allSelectedStories = sourceProject.getSelectedModels();
        var i = allSelectedStories.length;
        while (i--) {
            var story = allSelectedStories[i];
            if (!story.isExternallyLinked()) {
                storiesToBeMoved.push(story);
            }
        }
        if (storiesToBeMoved.length == 0) {
            status(this._generateStatus_MoveToProject(allSelectedStories, storiesToBeMoved, destinationProjectName));
            return;
        } else if (storiesToBeMoved.length > MultiSelectActions.MAX_MOVE_FROM_PROJECT_STORIES) {
            status("You can only move up to " + MultiSelectActions.MAX_MOVE_FROM_PROJECT_STORIES + " stories to another project at once.");
            return;
        }
        var moveFromProjectCommand = new MoveFromProject(sourceProject, destinationProjectId, storiesToBeMoved);
        sourceProject.removeSelectedModels(storiesToBeMoved);
        sourceProject.commandQueue.enqueue(moveFromProjectCommand);
        status(this._generateStatus_MoveToProject(allSelectedStories, storiesToBeMoved, destinationProjectName));
    },_generateStatus_MoveToProject: function(allSelectedStories, storiesToBeMoved, destinationProjectName) {
        var statusMessage = this._storyCountText(storiesToBeMoved.length);
        statusMessage += " was".pluralize(storiesToBeMoved.length, " were");
        statusMessage += " moved to project '" + destinationProjectName + "'.";
        var storiesNotMoved = allSelectedStories.length - storiesToBeMoved.length;
        if (storiesNotMoved) {
            statusMessage += " " + this._storyCountText(storiesNotMoved);
            statusMessage += " was not moved (externally linked stories cannot be moved).";
        }
        return statusMessage;
    },showLabelPrompt: function() {
        if (!app.project.hasSelectedModels()) {
            return status('Please select some stories first.');
        }
        var dialog = $("label_actions");
        var button = $("stories_button");
        SimpleOverlay.create(function(overlay) {
            j(dialog.select(".close_popup")).click(overlay.cancel);
            overlay.onCancel = function() {
                MultiSelectActions.labelsWidget = null;
                j('#multi_story_labels').empty();
            };
            return dialog;
        });
        this.labelsWidget = new StoryLabelsEditWidget({initialLabels: app.project.getLabelsForSelectedModels(),availableLabels: j.proxy(function() {
                return this.labelRepository.getLabels();
            }, app.project),addLabelCallback: j.proxy(function(label) {
                this.applyLabelToSelectedStories(label);
            }, app.project),removeLabelCallback: j.proxy(function(label) {
                this.removeLabelFromSelectedStories(label);
            }, app.project)});
        j('#multi_story_labels').append(this.labelsWidget.render());
        MultiSelectActions.show(button, dialog);
        this.labelsWidget.wrapper.find('input.create').focus();
    },applyLabel: function(label) {
        if (!label) {
            return status('You cannot apply a blank label.');
        }
        var stories = app.project.applyLabelToSelectedStories(label);
        if (stories) {
            var size = stories.length;
            status('Applied "' + label.toLowerCase() + '" to ' + size + ' story'.pluralize(size, ' stories') + '.');
        } else {
            status("No changes.");
        }
    },createLabel: function(label) {
        this.applyLabel(label);
        $("new_label").clear().focus();
    },removeLabel: function(label) {
        var stories = app.project.removeLabelFromSelectedStories(label);
        if (stories) {
            var size = stories.length;
            status('Removed "' + label + '" from ' + size + ' story'.pluralize(size, ' stories') + '.');
        } else {
            status("No changes.");
        }
    },exportSelectedStories: function(project, controllerPath, doc) {
        var selectedStories = project.getSelectedModels();
        if (!selectedStories.length) {
            return status("Please select stories to export");
        }
        $('export_story_ids').value = selectedStories.invoke('getId');
        $('export_selected_stories_form').submit();
    },deleteStories: function(project) {
        var numberOfSelectedStories = project.getSelectedModels().length;
        if (numberOfSelectedStories > 0) {
            project.deleteSelectedStories();
            status("Deleted " + this._storyCountText(numberOfSelectedStories));
        } else {
            status("Please select stories to delete");
        }
    },deselectAllStories: function(project) {
        project.removeAllSelectedModels();
    },_moveStories: function(project, where, move_method) {
        var numberOfSelectedStories = project.getSelectedModels().length;
        if (numberOfSelectedStories > 0) {
            move_method();
            var numberNotMoved = project.getSelectedModels().length;
            if (numberNotMoved == 0) {
                status("Moved " + this._storyCountText(numberOfSelectedStories) + " to " + where);
            } else {
                var numberMoved = numberOfSelectedStories - numberNotMoved;
                status(this._storyCountText(numberMoved) + " moved to the " + where + ", " + this._storyCountText(numberNotMoved) + " could not be moved");
            }
        } else {
            status("Please select stories to move to the " + where);
        }
    },_storyCountText: function(selectedCount) {
        if (selectedCount == 0) {
            return "No stories";
        }
        return selectedCount == 1 ? "1 story" : selectedCount + " stories";
    },updateSelectedStoryMenu: function(project) {
        var count = project.getNumberOfSelectedModels();
        var stories_button = j('#stories_button').get(0);
        if (count > 0) {
            j(stories_button).html("Stories <span>" + project.getNumberOfSelectedModels() + "</span>");
            j(".selected_stories_action").removeClass("disabled_menu_item");
        } else {
            j(stories_button).html("Stories");
            j(".selected_stories_action").addClass("disabled_menu_item");
        }
        var STYLING_FUDGE_FACTOR = 15;
        var width = j(stories_button).outerWidth() - STYLING_FUDGE_FACTOR;
        j(stories_button).css("backgroundPosition", width + "px 8px");
    },show: function(target, menu) {
        var left = (Position.cumulativeOffset(target)[0] - Position.realOffset(target)[0]);
        var top = (Position.cumulativeOffset(target)[1] - Position.realOffset(target)[1]) +
        Utils.height(target) + 5;
        menu.style.position = "absolute";
        menu.style.left = left + 'px';
        menu.style.top = top + 'px';
        Element.show(menu);
    }};
EpicController = Class.create();
EpicController.prototype = {initialize: function(project) {
        this.project = project;
    },handleDragDrop: function(epicWidget, prevWidget, nextWidget) {
        var epic = epicWidget.model;
        var nextWidgetModel = nextWidget.containedWidget.model;
        var after_epic_id = getAfterEpicId(prevWidget);
        var before_epic_id = nextWidget && nextWidgetModel ? nextWidgetModel.id() : null;
        if (epic && after_epic_id && epic.id() == after_epic_id || epic.id() == before_epic_id) {
            return;
        }
        if (before_epic_id == after_epic_id) {
            before_epic_id = null;
        }
        this.project.commandQueue.enqueue(new Tracker.MoveEpic({id: epic.id(),before_epic_id: before_epic_id,after_epic_id: after_epic_id}, this.project));
        function getAfterEpicId(prevWidget) {
            var prevWidgetModel = prevWidget && prevWidget.containedWidget.model;
            return prevWidgetModel && !prevWidgetModel.isDone() && !prevWidgetModel.isAccepted() ? prevWidgetModel.id() : null;
        }
    },handleStoryDrop: function(storyWidget, epicWidget) {
        var label = epicWidget.model.label();
        var story = storyWidget.model;
        var selectedStories;
        if (this.project.isSelectedModel(story) && this.project.getNumberOfSelectedModels() > 1) {
            selectedStories = this.project.getNonAcceptedSelectedStories();
        } else {
            selectedStories = [story]
        }
        this.project.commandQueue.enqueue(new ApplyLabel(this.project, label, selectedStories));
    }};
StoryController = Class.create({initialize: function(project) {
        this.project = project;
    },handleDragDrop: function(storyWidget, prevWidget, nextWidget, options) {
        var selectedStories = [];
        if (storyWidget.nextWidget && storyWidget.nextWidget() == nextWidget) {
            return false;
        }
        if (this._isDroppingIntoEmptyReleasesPanel(nextWidget)) {
            return false;
        }
        var story = storyWidget.getStory();
        if (this.project.isSelectedModel(story) && this.project.getNumberOfSelectedModels() > 1) {
            selectedStories = this.project.getNonAcceptedSelectedStories();
        }
        var surroundingStories = this._deriveSurroundingStoriesFromWidgets(story, prevWidget, nextWidget);
        var plannedIterationNumber = null;
        if (this.project.isCurrentIterationPlanned()) {
            var currentIterationNumber = this.project.getCurrentIterationNumber();
            if (this._isDraggingIntoAPlannedIteration(prevWidget, nextWidget, currentIterationNumber, surroundingStories)) {
                plannedIterationNumber = currentIterationNumber;
            }
        }
        options = options || {};
        if (story.isUnsaved()) {
            this._addNewStory(story, surroundingStories.before, plannedIterationNumber, nextWidget, options);
        } else {
            options.panel = nextWidget.getEffectivePanel();
            this.moveStoryBetween(story, surroundingStories.after, surroundingStories.before, plannedIterationNumber, selectedStories, options);
        }
    },moveStoryBetween: function(story, after, before, plannedIterationNumber, selectedStories, options) {
        var isMultiStoryMove = selectedStories && selectedStories.length > 0;
        var storiesToMove = isMultiStoryMove ? selectedStories : [story];
        var jsonHash = {story_ids: storiesToMove.invoke('id')};
        if (options.panel) {
            jsonHash.panel = options.panel;
        }
        if (after) {
            jsonHash.after_story_id = after.getId();
        }
        if (before) {
            jsonHash.before_story_id = before.getId();
        }
        if (options.label) {
            if (j.isFunction(options.label)) {
                jsonHash.label = options.label();
            } else {
                jsonHash.label = options.label;
            }
        }
        this.project.commandQueue.enqueue(new Tracker.MoveStory(jsonHash, this.project));
    },_addNewStory: function(story, before, plannedIterationNumber, targetWidget, options) {
        story._currentState = StoryState.UNSCHEDULED;
        if (targetWidget != null) {
            var effectivePanel = targetWidget.containedWidget.getEffectivePanel();
            if (effectivePanel == null) {
                story._currentState = before._currentState;
            } else {
                if (effectivePanel != "Icebox") {
                    story._currentState = StoryState.UNSTARTED;
                }
            }
        }
        story.setPlannedIterationNumber(plannedIterationNumber);
        if (story.getRequestedById() == Member.UNKNOWN) {
            story.setRequestedById(this.project.getSigninMemberId());
        }
        var storyJson = story.toJSONHash();
        if (options.label) {
            if (j.isFunction(options.label)) {
                storyJson.labels.push(options.label());
            } else {
                storyJson.labels.push(options.label);
            }
        }
        if (before != null) {
            storyJson['before_story_id'] = before.id();
        } else {
            storyJson['before_story_id'] = Project.PAST_FINAL_STORY.id();
        }
        this.project.commandQueue.enqueue(new Tracker.AddStory(storyJson, this.project));
    },_convertToJSONHashToStoryParams: function(storyHash) {
        var params = {};
        Object.keys(storyHash).each(function(key) {
            params["story[" + key + "]"] = storyHash[key];
        });
        return params;
    },_isDraggingIntoAPlannedIteration: function(prevWidget, nextWidget, currentIterationNumber, surroundingStories) {
        var prevContainedWidget = prevWidget.containedWidget;
        var nextContainedWidget = nextWidget.containedWidget;
        var beforeStoryIsPlanned = (surroundingStories.before && surroundingStories.before.getPlannedIterationNumber() == currentIterationNumber);
        var prevWidgetIsPlannedIterationHeader = (prevContainedWidget && prevContainedWidget.widgetType == "IterationHeader" && prevContainedWidget.iteration.getNumber() == currentIterationNumber);
        var droppingOnBottomOfCurrentPanel = (nextWidget.widgetType == "EndOfList" && nextWidget.parent.title == "Current");
        var droppingOnTopOfNextIterationHeader = (nextContainedWidget && nextContainedWidget.widgetType == "IterationHeader" && nextContainedWidget.iteration.getNumber() == currentIterationNumber + 1);
        return (beforeStoryIsPlanned || prevWidgetIsPlannedIterationHeader || droppingOnBottomOfCurrentPanel || droppingOnTopOfNextIterationHeader);
    },_isDroppingIntoEmptyCurrentPlannedIteration: function(prevWidget, nextWidget) {
        return (nextWidget.parent.title == "Current" && nextWidget.widgetType == "EndOfList" && (prevWidget.widgetType == "EndOfList" || prevWidget.containedWidget.widgetType == "IterationHeader"));
    },_isDroppingBetweenCollapsedIterationHeaderAndEndOfList: function(prevWidget, nextWidget) {
        return (prevWidget.containedWidget && prevWidget.containedWidget.widgetType == "IterationHeader" && nextWidget.widgetType == "EndOfList");
    },_deriveSurroundingStoriesFromWidgets: function(story, prevWidget, nextWidget) {
        var prevStory = null;
        var nextStory = null;
        if (this._isDroppingIntoEmptyCurrentPlannedIteration(prevWidget, nextWidget)) {
            var firstBacklogIteration = this.project.getBacklogIterations()[0];
            nextStory = firstBacklogIteration ? firstBacklogIteration.getFirstStory() : this.project.getUnscheduledStories()[0];
        } else if (this._isDroppingBetweenCollapsedIterationHeaderAndEndOfList(prevWidget, nextWidget)) {
            prevStory = prevWidget.containedWidget.iteration.getLastStory();
        } else {
            prevStory = nextWidget.getMoveAfterStory(this.project, story);
            nextStory = nextWidget.getMoveBeforeStory(this.project, story);
        }
        if (prevStory == story || (prevStory && !prevStory.hasBeenSaved())) {
            prevStory = null;
        }
        if (nextStory == story || (nextStory && !nextStory.hasBeenSaved())) {
            nextStory = null;
        }
        return {after: prevStory,before: nextStory};
    },_isDroppingIntoEmptyReleasesPanel: function(nextWidget) {
        var itemListWidget = nextWidget.parent;
        return itemListWidget.hasNoStories() && itemListWidget.title == "Releases";
    },_isDroppingIntoEmptyBacklogFromCurrentPanel: function(storyWidget, nextWidget) {
        if (this.project.isCurrentIterationPlanned()) {
            return false;
        }
        var dragItemListWidget = storyWidget.itemListWidget;
        var dropItemListWidget = nextWidget.parent;
        return dropItemListWidget.hasNoStories() && dropItemListWidget.title == "Backlog" && dragItemListWidget.title == "Current";
    }});
Command = Class.create();
Command._commandMap = {'project/move_story': function(project, params, commandJson) {
        return new MoveStory(project, params.move, {before: params.before,after: params.after,plannedIterationNumber: params.planned_iteration_number});
    },'project/multi_move_story': function(project, params, commandJson) {
        return new MultiMoveStory(project, project.getStoryById(params.story_ids), {endState: StoryState.valueOf(params.end_state),position: params.position,before: params.before,after: params.after});
    },'story/edit': function(project, params, commandJson) {
        return new EditStory(project, Command._storyJsonToRequestParams(params.story), params.story.id, project.getSigninMember());
    },'story/do_action': function(project, params, commandJson) {
        return new PerformStoryAction(project, project.getStoryById(params.story.id), StoryAction.valueOf(params.performed_action), project.getSigninMember(), params.note, params.story.owned_by_id);
    },'project/update_iteration_mode': function(project, params, commandJson) {
        return new UpdateIterationMode(project, params.mode, params.stories, parseInt(params.iteration));
    },'story/estimate': function(project, params, commandJson) {
        return new ChangeStoryEstimate(project.getStoryById(params.story.id), params.story.estimate, project.getSigninMember());
    },'story/add': function(project, params, commandJson) {
        return new AddStory(Command._storyJsonToRequestParams(params.story, params.note), project, project.getStoryById(params.before_story_id), commandJson.server_response);
    },'story/add_note': function(project, params, commandJson) {
        return new AddNote(params.note.text, project.getStoryById(params.note.story_id), project, {noteTakerId: params.note.note_taker_id,notedAt: parseInt(commandJson.server_response.noted_at_millis),id: parseInt(commandJson.server_response.note_id)});
    },'story/delete_note': function(project, params, commandJson) {
        var story = project.getStoryById(params.note.story_id);
        return new DeleteNote(story, null, project.getSigninMember());
    },'story/add_task': function(project, params, commandJson) {
        return new AddTask(params.task.description, parseInt(params.task.position), project.getStoryById(params.task.story_id), project, {personId: params.task.person_id,createdAt: parseInt(params.task.created_at_millis),id: commandJson.server_response.task_id});
    },'story/edit_task': function(project, params, commandJson) {
        var story2 = project.getStoryById(params.task.story_id);
        return new EditTask(story2, story2 ? story2.getTaskById(params.task.id) : null, params.task, project.getSigninMember());
    },'story/delete_task': function(project, params, commandJson) {
        var story3 = project.getStoryById(params.task.story_id);
        return new DeleteTask(story3, story3 ? story3.getTaskById(params.task.id) : null, project.getSigninMember());
    },'story/delete': function(project, params, commandJson) {
        return new DeleteStory(project, project.getStoryById(params.story.id));
    },'story/multi_delete': function(project, params, commandJson) {
        return new MultiDeleteStory(project, project.getStoryById(params.story_ids));
    },'story/apply_label': function(project, params, commandJson) {
        return new ApplyLabel(project, params.label, project.getStoryById(params.story_ids));
    },'story/remove_label': function(project, params, commandJson) {
        return new RemoveLabel(project, params.label, project.getStoryById(params.story_ids));
    },'story/move_from_project': function(project, params, commandJson) {
        return new MoveFromProject(project, params.destination_project_id, project.getStoryById(params.story_ids));
    },'story/move_into_project': function(project, params, commandJson) {
        return new MoveIntoProject(project, commandJson.server_response.stories, commandJson.server_response.resources);
    },'project/reload': function(project, params, commandJson) {
        return new ReloadProject(project, params.message, app);
    },'project/update_team_strength': function(project, params, commandJson) {
        return new UpdateTeamStrength(project, params.team_strength.iteration_number, params.team_strength.percentage);
    },'project/update_iteration_length': function(project, params, commandJson) {
        return new UpdateIterationLength(project, params.iteration_number, params.iteration_length);
    },'project/delete_label': function(project, params, commandJson) {
        return new DeleteLabel(project, params.label);
    },'project/rename_label': function(project, params, commandJson) {
        return new RenameLabel(project, params.from, params.to);
    },'story/attach_resource': function(project, params, commandJson) {
        return new AttachResource(commandJson.server_response.resource, project.getStoryById(params.story.id), project);
    },'story/detach_resource': function(project, params, commandJson) {
        return new DetachResource(commandJson.server_response.resource, project.getStoryById(params.story.id), project);
    },'resource/processed_resource': function(project, params, commandJson) {
        return new ProcessedResource(commandJson.server_response.resource, commandJson.server_response.story_ids, project);
    },'resource/change_description': function(project, params, commandJson) {
        return new ChangeResourceDescription(params.resource.description, project.getResourceById(params.resource.id), project.getStoryById(params.story.id), project);
    }};
Command._createCommand = function _createCommand(commandJson, project, params) {
    var command;
    var commandAction = commandJson.controller + '/' + commandJson.action;
    if (commandAction in Command._commandMap) {
        command = Command._commandMap[commandAction](project, params, commandJson);
    } else {
        var commandClassName = commandJson[0];
        var commandClass = Tracker[commandClassName];
        if (commandClass === undefined) {
            throw new Tracker.UnknownCommandError(commandClassName);
        }
        commandJson = commandJson[1];
        command = new commandClass(commandJson.parameters, project);
    }
    return [command, commandJson];
};
Command.build = function(project, commandJson) {
    var params = commandJson.parameters;
    var commandArray = Command._createCommand(commandJson, project, params);
    var command = commandArray[0], commandJson = commandArray[1];
    command.setJson(commandJson);
    command.setMember(project.getMember(commandJson.member_id));
    if (commandJson.occurred_at) {
        command.setOccurredAt(new Date(commandJson.occurred_at));
    }
    command.setDescriptionDetails(commandJson.description);
    command.setChanges(commandJson.changes);
    command.setTitle(commandJson.title);
    command.setAction(commandJson.action);
    command.setVersion(commandJson.version);
    command.setAffectedTopLevelElementType(commandJson.affected_top_level_element_type);
    if (commandJson.server_response && commandJson.server_response.affected_top_level_element_ids) {
        command.affectedTopLevelElementIds = commandJson.server_response.affected_top_level_element_ids;
    } else {
        command.affectedTopLevelElementIds = [];
    }
    command.setParams(params);
    return command;
};
Command.nextId = new Date().getTime();
Command._storyJsonToRequestParams = function(storyJson, noteJson) {
    return {"story[name]": storyJson.name,"story[description]": storyJson.description,"story[current_state]": storyJson.current_state,"story[story_type]": storyJson.story_type,"story[estimate]": storyJson.estimate,"story[accepted_at]": storyJson.accepted_at ? new Date(storyJson.accepted_at).getTime() : null,"story[deadline]": storyJson.deadline ? new Date(storyJson.deadline).getTime() : null,"story[requested_by_id]": storyJson.requested_by_id,"story[owned_by_id]": storyJson.owned_by_id,"story[external_id]": storyJson.external_id,"story[integration_id]": storyJson.integration_id,"story[cl_numbers]": storyJson.cl_numbers,"story[labels]": storyJson.labels,"story[planned_iteration_number]": storyJson.planned_iteration_number,"note[text]": noteJson ? noteJson.text : null,"note[note_taker_id]": noteJson ? noteJson.note_taker_id : null};
};
Command.acquireClientUuid = function() {
    return new UUID().toString();
};
Command.prototype = {initialize: function(member) {
        this.super_init(member)
    },super_init: function(member) {
        this._member = member;
        this._initiatingClient = false;
    },setMember: function(member) {
        this._member = member;
    },setDescriptionDetails: function(descriptionDetails) {
        this._descriptionDetails = descriptionDetails;
    },setAction: function(action) {
        this._action = action;
    },setAffectedTopLevelElementType: function(affectedTopLevelElementType) {
        this._affectedTopLevelElementType = affectedTopLevelElementType;
    },setTitle: function(title) {
        this._title = title;
    },setVersion: function(version) {
        this._version = version;
    },setParams: function(params) {
        this._params = params;
    },setJson: function(json) {
        this._json = json;
    },setChanges: function(changes) {
        this._changes = changes;
    },getParams: function() {
        return this._params;
    },getMember: function() {
        return this._member;
    },getVersion: function() {
        return this._version;
    },getAction: function() {
        return this._action;
    },getAffectedTopLevelElementType: function() {
        return this._affectedTopLevelElementType;
    },getAffectedStoryIdsFromStoryIdsParam: function() {
        var ids = [];
        if (this.getParams().story_ids) {
            for (var i = 0; i < this.getParams().story_ids.length; i++) {
                ids.push(parseInt(this.getParams().story_ids[i]));
            }
        }
        return ids;
    },shouldHaveMember: function() {
        return true;
    },getDescriptionDetails: function() {
        return this._descriptionDetails;
    },getChanges: function() {
        return this._changes;
    },hasChanges: function() {
        return $H(this._changes).values().length != 0;
    },setOccurredAt: function(occurredAt) {
        this._occurredAt = occurredAt;
    },getOccurredAt: function() {
        return this._occurredAt;
    },timeAgo: function() {
        return this.getOccurredAt().timeAgo();
    },getTitle: function() {
        return this._title;
    },getJson: function() {
        return this._json;
    },getMemberAndOccurredAtDisplay: function() {
        var text = "";
        if (this._member)
            text += " by " + this._member.name;
        if (this._occurredAt)
            text += " on " + this._occurredAt.asDisplayStringWithTime();
        return text;
    },execute: function(initiatingClient) {
        this._initiatingClient = initiatingClient || false;
        var occurredAt = DateUtils.now();
        if (this._initiatingClient || this.getOccurredAt() == null) {
            this.setOccurredAt(occurredAt);
        }
        this.myExecute();
        if (this.isNewWorld()) {
            this._commandPayload = this.generateCommandPayload();
        } else if (this.generateAjaxPayload) {
            this._ajaxPayload = this.generateAjaxPayload();
        }
        if (this.getType() != 'checkVersion') {
            Tracker.Analytics.trackTimedEvent('uiActions', 'execute:' + this.getType(), occurredAt, new Date());
        }
    },isNewWorld: function() {
        return !!this.generateCommandPayload;
    },asAjaxPayload: function() {
        return this._ajaxPayload;
    },commandPayload: function() {
        return this._commandPayload;
    },isInitiatingClient: function() {
        return this._initiatingClient;
    },isMutator: function() {
        return true;
    },isApiChange: function() {
        return this.getParams().app_id == 'api';
    },showInHistory: function() {
        return this.isMutator();
    },onReceivedResponseFromServer: function(dataJson) {
    },signalSuccessFromServer: function() {
    },toString: function() {
        return "Command" + this.getJson();
    },project: function() {
        return this.project;
    },_abbreviateStoryName: function(name) {
        var maxLength = 50;
        if (name.length > maxLength) {
            return name.substring(0, maxLength) + "...";
        } else {
            return name;
        }
    },affectsModel: function(story) {
        var affectedElements = this.getAffectedTopLevelElements();
        for (var i = 0; i < affectedElements.length; i++) {
            if (affectedElements[i].getType() == story.getType() && affectedElements[i].id() == story.id()) {
                return true;
            }
        }
        return false;
    },hasSameAffectedElementsAs: function(anotherCommand) {
        if (this.getAffectedTopLevelElementType() != anotherCommand.getAffectedTopLevelElementType()) {
            return false;
        }
        var affectedElementIds = this.getAffectedTopLevelElementIds();
        var anotherCommandAffectedElementIds = anotherCommand.getAffectedTopLevelElementIds();
        if (affectedElementIds.length != anotherCommandAffectedElementIds.length) {
            return false;
        }
        for (var i = 0; i < anotherCommandAffectedElementIds.length; i++) {
            if (affectedElementIds.indexOf(anotherCommandAffectedElementIds[i]) == -1) {
                return false;
            }
        }
        return true;
    },canRevealTopLevelElements: function() {
        return false;
    },clientUuid: function() {
        if (this._uuid == null) {
            this._uuid = Command.acquireClientUuid();
        }
        return this._uuid;
    },setCurrentClientVersion: function(clientVersion) {
        this._clientVersion = clientVersion;
    },historyTemplate: function() {
        return null;
    },historyTemplateInfo: function() {
        return {};
    }};
ModifyStory = Class.create();
ModifyStory.prototype = {_parametersForStoryAjax: function() {
        return asCgiString(this.storyChangesHash, "story");
    },_bigFatUglyParametersForStoryAjax: function(story, include_accepted_at) {
        var params = "story[current_state]=" + story.getCurrentState().getName() + "&story[story_type]=" + story.getStoryType().getName() + "&story[name]=" + encodeURIComponent(story.getName()) + "&story[estimate]=" + story.getEstimate() + "&story[requested_by_id]=" + story.getRequestedById() + "&story[owned_by_id]=" + story.getOwnedById() + "&story[external_id]=" + story.getExternalId() + "&story[integration_id]=" + story.getIntegrationId() + "&story[cl_numbers]=" + encodeURIComponent(story.getCLNumbers()) + "&story[deadline]=" + (story.hasDeadline() ? story.getDeadline().toMDYYYY() : "") + "&story[labels]=" + encodeURIComponent(story.getLabelsString());
        if (include_accepted_at && story.getAcceptedAt() != null) {
            params = params + "&story[accepted_at]=" + story.getAcceptedAt().toMDYYYY();
        }
        if (story.getDescription()) {
            params = params + "&story[description]=" + encodeURIComponent(story.getDescription());
        }
        params += "&story[planned_iteration_number]=" + (story.getPlannedIterationNumber() ? story.getPlannedIterationNumber() : "");
        return params;
    }};
Object.overrides(ModifyStory, Command);
ProjectCommand = Class.create({}, {getAffectedTopLevelElementType: function() {
        return "project";
    },getAffectedTopLevelElements: function() {
        return [this.project];
    },getAffectedTopLevelElementIds: function() {
        return [this.project.getId()];
    }});
SingleStoryCommand = Class.create({}, {signalSuccessFromServer: function() {
        if (this.story) {
            this.story.stopPendingUpdate();
        }
    },getAffectedTopLevelElements: function() {
        if (this.story) {
            return [this.story];
        }
        return [];
    },getAffectedTopLevelElementIds: function() {
        return [parseInt(this.getParams().story.id)];
    },canRevealTopLevelElements: function() {
        return (this.story && !this.story.isDeleted()) ? true : false;
    }});
MultiStoryCommand = Class.create(Command, {signalSuccessFromServer: function signalSuccessFromServer() {
        this.stories.invoke('stopPendingUpdate');
    },getAffectedTopLevelElements: function getAffectedTopLevelElements() {
        return this.stories;
    },getAffectedTopLevelElementIds: function getAffectedTopLevelElementIds() {
        return this.getAffectedStoryIdsFromStoryIdsParam();
    },canRevealTopLevelElements: function canRevealTopLevelElements() {
        for (var i = 0; i < this.stories.length; i++) {
            var story = this.stories[i];
            if (story && !story.isDeleted()) {
                return true;
            }
        }
        return false;
    }});
AddNote = Class.create();
AddNote.prototype = {initialize: function(noteText, story, project, noteOptions) {
        this.super_init(project.getSigninMember());
        this._noteText = noteText;
        this.story = story;
        this.project = project;
        this._noteOptions = noteOptions || {};
    },myExecute: function() {
        throw "myExecute:deprecated";
    },generateAjaxPayload: function() {
        return {};
    },undo: function() {
        throw "undo:deprecated";
    },onReceivedResponseFromServer: function(dataJson) {
        throw "onReceivedResponseFromServer:deprecated";
    },toString: function() {
        return "AddNote - deprecated";
    },getAffectedTopLevelElementIds: function() {
        return [parseInt(this.getParams().note.story_id)];
    },getTypeName: function() {
        return "Add Note";
    },getType: function() {
        return "addNote";
    }};
Object.overrides(AddNote, SingleStoryCommand);
Object.overrides(AddNote, Command);
AddStory = Class.create({initialize: function(storyParams, project, beforeStory, serverResponse, tasks) {
        this.super_init(project.getSigninMember());
        this.tasks = tasks;
        this.project = project;
        this.beforeStoryId = beforeStory ? beforeStory.getId() : null;
        this.beforeStoryState = beforeStory ? beforeStory.getCurrentState() : null;
        this.serverResponse = serverResponse;
    },myExecute: function() {
        throw "myExecute:deprecated";
    },undo: function() {
        throw "undo:deprecated";
    },generateAjaxPayload: function() {
        return {};
    },onReceivedResponseFromServer: function(dataJson) {
        throw "onReceivedResponseFromServer:deprecated";
    },getAffectedTopLevelElements: function() {
        var result = this.project.getStoryById(this.serverResponse.id);
        return (result) ? [result] : [];
    },getAffectedTopLevelElementIds: function() {
        if (this.serverResponse) {
            return [parseInt(this.serverResponse.id)];
        } else {
            return [];
        }
    },canRevealTopLevelElements: function() {
        if (this.serverResponse) {
            var story = this.project.getStoryById(this.serverResponse.id);
            return (story && !story.isDeleted()) ? true : false;
        }
        return false;
    },getTypeName: function() {
        return "Add Story";
    },getType: function() {
        return "addStory";
    }});
Object.overrides(AddStory, ModifyStory);
AddTask = Class.create();
AddTask.prototype = {initialize: function(taskDescription, position, story, project, taskOptions) {
        this.super_init(project.getSigninMember());
        this.className = 'AddTask';
        this._taskDescription = taskDescription;
        this._position = position;
        this.story = story;
        this.project = project;
        if (this.story) {
            if (taskOptions == null) {
                this._createNewTask(DateUtils.now().getTime());
            } else {
                this._createNewTask(taskOptions.createdAt, taskOptions.id);
            }
        }
    },_createNewTask: function(createdAt, id) {
        this._newTask = new Task({id: id ? id : this.story.nextTempId(),story_id: this.story.id(),created_at: createdAt,description: this._taskDescription});
    },myExecute: function() {
        this.story.addNewTask(this._newTask);
        this.story.notifyTaskChange();
        this.story.startPendingUpdate();
    },generateAjaxPayload: function() {
        var params = '';
        if (this.story) {
            params = "project_id=" + this.project.id + "&task[description]=" + encodeURIComponent(this._newTask.description()) + "&task[position]=" + this.story.getTaskPosition(this._newTask) + "&task[story_id]=" + this._newTask.storyId() + "&task[created_at_millis]=" + this._newTask.createdAtDate().getTime() + "&temp_id=" + this._newTask.id();
        }
        return {url: "/story/add_task",parameters: params};
    },undo: function() {
        this.story.removeTask(this._newTask);
        this.story.notifyTaskChange();
        this.story.stopPendingUpdate();
    },onReceivedResponseFromServer: function(dataJson) {
        this.story.assignIdToNewTask(dataJson.task_id, dataJson.temp_id);
    },toString: function() {
        return "AddTask - added task " + this._newTask.description() + " to story " + this.story.getName() + ' at ' + this._newTask.createdAtDate().getTime() + this.getMemberAndOccurredAtDisplay();
    },getAffectedTopLevelElementIds: function() {
        return [parseInt(this.getParams().task.story_id)];
    },getTypeName: function() {
        return "Add Task";
    },getType: function() {
        return "addTask";
    }};
Object.overrides(AddTask, SingleStoryCommand);
Object.overrides(AddTask, Command);
ApplyLabel = Class.create();
ApplyLabel.prototype = {URL: '/story/apply_label',initialize: function(project, label, stories) {
        this._label = label;
        this.project = project;
        this.stories = stories;
        this.className = "ApplyLabel"
    },myExecute: function() {
        var i = this.stories.length;
        this.project.addLabel(this._label);
        while (i--) {
            var story = this.stories[i];
            story.addLabel(this._label);
            story.events.fire('update');
            story.startPendingUpdate();
        }
        this.project.events.fire("update");
        this.project.events.fire("updateAffectingEpicSize");
    },undo: function() {
        var i = this.stories.length;
        while (i--) {
            var story = this.stories[i];
            story.removeLabel(this._label);
            story.stopPendingUpdate();
        }
        this.project.events.fire("update");
        this.project.events.fire("updateAffectingEpicSize");
    },generateAjaxPayload: function() {
        var pars = {'story_ids[]': this.stories.invoke('getId'),project_id: this.project.getId(),label: this._label};
        return {url: this.URL,parameters: Object.toQueryString(pars)}
    },toString: function() {
        return "Added label: " + this._label + " to " + this.stories.length + " story".pluralize(this.stories.length, " stories");
    },getTypeName: function() {
        return "Apply Label";
    },getType: function() {
        return "applyLabel";
    }};
Object.overrides(ApplyLabel, MultiStoryCommand);
Object.overrides(ApplyLabel, Command);
DeleteLabel = Class.create();
DeleteLabel.prototype = {URL: '/project/delete_label',initialize: function(project, label) {
        this._label = label;
        this.project = project;
        this.stories = this.project.getStoriesWithLabel(this._label);
    },myExecute: function() {
        this.project.removeLabel(this._label);
        var i = this.stories.length;
        while (i--) {
            var story = this.stories[i];
            story.removeLabel(this._label);
            story.events.fire('update');
            story.startPendingUpdate();
        }
        this.project.notify();
    },undo: function() {
        this.project.addLabel(this._label);
        var i = this.stories.length;
        while (i--) {
            var story = this.stories[i];
            story.addLabel(this._label);
            story.events.fire('update');
            story.stopPendingUpdate();
        }
        this.project.notify();
    },signalSuccessFromServer: function() {
        this.stories.invoke('stopPendingUpdate');
    },generateAjaxPayload: function() {
        var pars = {project: this.project.getId(),label: this._label};
        return {url: this.URL,parameters: Object.toQueryString(pars)};
    },toString: function() {
        return "Deleted label: " + this._label;
    },getTypeName: function() {
        return "Delete Label";
    },getType: function() {
        return "deleteLabel";
    },getAffectedTopLevelElements: function() {
        return [this.project];
    },getAffectedTopLevelElementIds: function() {
        return [this.project.id];
    }};
Object.overrides(DeleteLabel, Command);
RemoveLabel = Class.create();
RemoveLabel.prototype = {URL: '/story/remove_label',initialize: function(project, label, stories) {
        this._label = label;
        this.project = project;
        this.stories = stories;
    },myExecute: function() {
        var i = this.stories.length;
        while (i--) {
            var story = this.stories[i];
            story.removeLabel(this._label);
            story.events.fire('update');
            story.startPendingUpdate();
        }
        this.project.events.fire("update");
        this.project.events.fire("updateAffectingEpicSize");
    },undo: function() {
        var i = this.stories.length;
        while (i--) {
            var story = this.stories[i];
            story.addLabel(this._label);
            story.stopPendingUpdate();
        }
        this.project.events.fire("update");
        this.project.events.fire("updateAffectingEpicSize");
    },generateAjaxPayload: function() {
        var pars = {'story_ids[]': this.stories.invoke('getId'),project_id: this.project.getId(),label: this._label};
        return {url: this.URL,parameters: Object.toQueryString(pars)}
    },toString: function() {
        return "Removed label: " + this._label + " from " + this.stories.length + " story".pluralize(this.stories.length, " stories");
    },getTypeName: function() {
        return "Remove Label";
    },getType: function() {
        return "removeLabel";
    }};
Object.overrides(RemoveLabel, MultiStoryCommand);
Object.overrides(RemoveLabel, Command);
RenameLabel = Class.create(MultiStoryCommand, {URL: '/project/rename_label',initialize: function(project, from, to) {
        this._from = from;
        this._to = to;
        this.project = project;
        this.stories = this.project.getStoriesWithLabel(this._from);
        this.epics = this.project.getEpicsWithLabel(this._from);
    },myExecute: function() {
        this._renameLabel(this._from, this._to, "start");
    },undo: function() {
        this._renameLabel(this._to, this._from, "stop");
    },generateAjaxPayload: function() {
        var pars = {project: this.project.getId(),from: this._from,to: this._to};
        return {url: this.URL,parameters: Object.toQueryString(pars)};
    },toString: function() {
        return "Renamed label: " + this._from + " to " + this._to;
    },getAffectedTopLevelElementIds: function() {
        var ids = [];
        for (var i = 0; i < this.stories; i++) {
            ids.push(this.stories[i].getId());
        }
        return ids;
    },getTypeName: function() {
        return "Rename Label";
    },getType: function() {
        return "renameLabel";
    },_renameLabel: function(from, to, startStopPendingUpdate) {
        this.project.removeLabel(from);
        this.project.addLabel(to);
        var j = this.epics.length;
        while (j--) {
            var epic = this.epics[j];
            epic.setLabel(to);
            epic.events.fire('update');
            if (startStopPendingUpdate == "start") {
                epic.startPendingUpdate();
            } else {
                epic.stopPendingUpdate();
            }
        }
        var i = this.stories.length;
        while (i--) {
            var story = this.stories[i];
            story.removeLabel(from);
            story.addLabel(to);
            story.events.fire('update');
            if (startStopPendingUpdate == "start") {
                story.startPendingUpdate();
            } else {
                story.stopPendingUpdate();
            }
        }
        this.project.notify();
    },signalSuccessFromServer: function signalSuccessFromServer() {
        var i = this.stories.length;
        while (i--) {
            this.stories[i].stopPendingUpdate();
        }
        i = this.epics.length;
        while (i--) {
            this.epics[i].stopPendingUpdate();
        }
        this.project.notify();
    }});
ChangeResourceDescription = Class.create();
ChangeResourceDescription.prototype = {initialize: function(description, resource, story, project) {
        this.super_init(project.getSigninMember());
        this.story = story;
        this.project = project;
        this.resource = resource;
        this.newDescription = description;
        this.originalDescription = this.resource ? this.resource.getDescription() : "";
    },myExecute: function() {
        throw "myExecute:deprecated";
    },undo: function() {
        throw "undo:deprecated";
    },generateAjaxPayload: function() {
        return {};
    },getTypeName: function() {
        return "Change Resource Description";
    },getType: function() {
        return "ChangeResourceDescription";
    }};
Object.overrides(ChangeResourceDescription, SingleStoryCommand);
Object.overrides(ChangeResourceDescription, Command);
ChangeStoryEstimate = Class.create();
ChangeStoryEstimate.prototype = {initialize: function(story, newEstimate) {
        this.super_init(story ? story.getSigninMember() : null);
        this.story = story;
        this.newEstimate = newEstimate;
        this.originalEstimate = (story ? story.getEstimate() : null)
    },myExecute: function() {
        if (this.story) {
            this.story.setEstimate(this.newEstimate);
            this.story.startPendingUpdate();
        }
    },undo: function() {
        this.story.setEstimate(this.originalEstimate);
        this.story.stopPendingUpdate();
    },generateAjaxPayload: function() {
        return {url: "/story/estimate",parameters: "story[id]=" + this.story.id() + "&" + this._bigFatUglyParametersForStoryAjax(this.story, true)};
    },toString: function() {
        return "ChangeStoryEstimate story=" + this.story.id() + " from " + this.originalEstimate + " to " + this.newEstimate;
    },getTypeName: function() {
        return "Change story estimate";
    },getType: function() {
        return "changeStoryEstimate";
    }};
Object.overrides(ChangeStoryEstimate, SingleStoryCommand);
Object.overrides(ChangeStoryEstimate, ModifyStory);
CheckProjectVersion = Class.create();
CheckProjectVersion.prototype = {initialize: function(projectId) {
        this.super_init(null);
        this.projectId = projectId;
    },myExecute: function() {
    },undo: function() {
    },asAjaxPayload: function() {
        return {url: "/project/check_version/" + this.projectId + "/" + this._clientVersion,parameters: null};
    },toString: function() {
        return "CheckProjectVersion project=" + this.projectId;
    },getAffectedTopLevelElements: function() {
        return [];
    },getAffectedTopLevelElementIds: function() {
        return [];
    },isMutator: function() {
        return false;
    },getTypeName: function() {
        return "Check version";
    },getType: function() {
        return "checkVersion";
    }};
Object.overrides(CheckProjectVersion, Command);
AttachResource = Class.create();
AttachResource.prototype = {initialize: function(resourceJson, story, project) {
        this.super_init(project.getSigninMember());
        this.story = story;
        this.project = project;
        this.resourceJson = resourceJson;
        this.resource = null;
    },myExecute: function() {
        throw "myExecute:deprecated";
    },undo: function() {
        throw "undo:deprecated";
    },generateAjaxPayload: function() {
        return {};
    },getTypeName: function() {
        return "Attach Resource";
    },getType: function() {
        return "AttachResource";
    }};
Object.overrides(AttachResource, SingleStoryCommand);
Object.overrides(AttachResource, Command);
DeleteNote = Class.create();
DeleteNote.prototype = {initialize: function(story, note, author) {
        this.super_init(author);
        this.story = story;
    },myExecute: function() {
        throw "myExecute:deprecated";
    },undo: function() {
        throw "myExecute:deprecated";
    },signalSuccessFromServer: function() {
        throw "myExecute:deprecated";
    },generateAjaxPayload: function() {
        return {};
    },showInHistory: function() {
        return true;
    },toString: function() {
        return "DeleteNote - deprecated";
    },getAffectedTopLevelElementIds: function() {
        return [parseInt(this.getParams()['note']['story_id'])];
    },getTypeName: function() {
        return "Delete note";
    },getType: function() {
        return "DeleteNote";
    }};
Object.overrides(DeleteNote, SingleStoryCommand);
Object.overrides(DeleteNote, ModifyStory);
DeleteStory = Class.create();
DeleteStory.prototype = {initialize: function(project, story) {
        this.super_init(project.getSigninMember());
        this.project = project;
        this.story = story;
        if (this.story) {
            this.wasBeforeStory = project.findStoryAfter(this.story);
        }
    },myExecute: function() {
        if (this.story && this.project.getStoryById(this.story.getId())) {
            this.story.markDeleted();
            this.story.notifyNotAffectingProject();
            this.project.removeStory(this.story);
        }
    },generateAjaxPayload: function() {
        var params = "story[project_id]=" + this.project.id + "&story[id]=" + this.story.id();
        return {url: "/story/delete",parameters: params};
    },undo: function() {
        if (this.story) {
            this.story.markNotDeleted();
            this.project.addStoryBefore(this.story, this.wasBeforeStory);
        }
    },toString: function() {
        if (this.story) {
            return "DeleteStory story " + this.story.id() + this.getMemberAndOccurredAtDisplay();
        } else {
            return "DeleteStory story";
        }
    },affectsModel: function(story) {
        return story.id() == this.getParams().story.id;
    },getTypeName: function() {
        return "Delete story";
    },getType: function() {
        return "deleteStory";
    },canRevealTopLevelElements: function() {
        return false;
    }};
Object.overrides(DeleteStory, SingleStoryCommand);
Object.overrides(DeleteStory, Command);
DeleteTask = Class.create();
DeleteTask.prototype = {initialize: function(story, task, commandAuthor) {
        this.super_init(commandAuthor);
        this.story = story;
        this.task = task;
        if (story && task) {
            this.originalPosition = story.getTaskPosition(task);
        }
    },myExecute: function() {
        this.story.removeTask(this.task);
        this.story.notifyTaskChange();
        this.story.startPendingUpdate();
    },undo: function() {
        this.story.moveTaskToPosition(this.task, this.originalPosition);
        this.story.notifyTaskChange();
        this.story.stopPendingUpdate();
    },generateAjaxPayload: function() {
        var params = '&project_id=' + this.story.project.id + '&task[story_id]=' + this.story.id();
        return {url: "/story/delete_task",parameters: "task[id]=" + this.task.id() + params};
    },onReceivedResponseFromServer: function(dataJson) {
    },toString: function() {
        return "DeleteTask - deleted task " + this.task.description() + " on " + this.story._name + this.getMemberAndOccurredAtDisplay();
    },getAffectedTopLevelElementIds: function() {
        return [parseInt(this.getParams().task.story_id)];
    },getTypeName: function() {
        return "Delete task";
    },getType: function() {
        return "DeleteTask";
    }};
Object.overrides(DeleteTask, SingleStoryCommand);
Object.overrides(DeleteTask, ModifyStory);
MultiDeleteStory = Class.create();
MultiDeleteStory.prototype = {URL: '/story/multi_delete',initialize: function(project, stories) {
        this.project = project;
        this.stories = stories;
        this._afterStories = [];
        for (var c = 0; c < this.stories.length; c++) {
            var story = this.stories[c];
            this._afterStories[c] = this.project.findStoryAfter(story);
        }
    },myExecute: function() {
        var i = this.stories.length;
        while (i--) {
            var story = this.stories[i];
            if (story && this.project.getStoryById(story.getId())) {
                story.markDeleted();
                story.notifyNotAffectingProject();
                this.project.removeStory(story);
            }
        }
    },undo: function() {
        var i = this.stories.length;
        while (i--) {
            var story = this.stories[i];
            story.markNotDeleted();
            this.project.addStoryBefore(story, this._afterStories[i]);
        }
    },generateAjaxPayload: function() {
        var pars = {'story_ids[]': this.stories.invoke('getId'),project_id: this.project.getId()};
        return {url: this.URL,parameters: Object.toQueryString(pars)};
    },toString: function() {
        return "MultiDeleteStory " + this.stories.invoke("getId").toString() + "";
    },getTypeName: function() {
        return "Multi Delete Story";
    },getType: function() {
        return "multiDeleteStory";
    }};
Object.overrides(MultiDeleteStory, MultiStoryCommand);
Object.overrides(MultiDeleteStory, Command);
DetachResource = Class.create();
DetachResource.prototype = {initialize: function(resourceJson, story, project) {
        this.super_init(project.getSigninMember());
        this.story = story;
        this.project = project;
        this.resourceJson = resourceJson;
    },myExecute: function() {
        throw "myExecute:deprecated";
    },undo: function() {
        throw "undo:deprecated";
    },generateAjaxPayload: function() {
        return {};
    },getTypeName: function() {
        return "Detach Resource";
    },getType: function() {
        return "DetachResource";
    }};
Object.overrides(DetachResource, SingleStoryCommand);
Object.overrides(DetachResource, Command);
EditStory = Class.create();
EditStory.prototype = {initialize: function(project, storyParams, storyId, commandAuthor) {
        this.storyId = storyId;
        this.project = project;
        var story = this.getStory();
        this.super_init(story ? commandAuthor : null);
        if (story) {
            this.originalData = story.toJSONHash();
            this.undoStory = this.project.findStoryAfter(story);
        }
        this.params = storyParams;
        this.commandAuthor = commandAuthor;
    },getStory: function() {
        return this.project.getStoryById(this.storyId);
    },myExecute: function() {
        throw "myExecute:deprecated";
    },undo: function() {
        throw "undo:deprecated";
    },generateAjaxPayload: function() {
        return {};
    },onReceivedResponseFromServer: function(dataJson) {
        throw "onReceivedResponseFromServer:deprecated";
    },getTypeName: function() {
        return "Edit story";
    },getType: function() {
        return "editStory";
    },getAffectedTopLevelElements: function() {
        var story = this.getStory();
        if (story) {
            return [story];
        }
        return [];
    },getAffectedTopLevelElementIds: function() {
        return [parseInt(this.getParams().story.id)];
    },canRevealTopLevelElements: function() {
        var story = this.getStory();
        return (story && !story.isDeleted()) ? true : false;
    }};
Object.overrides(EditStory, ModifyStory);
EditTask = Class.create();
EditTask.prototype = {initialize: function(story, task, taskParams, commandAuthor) {
        this.super_init(commandAuthor);
        this.className = 'EditTask';
        this.story = story;
        this.task = task;
        this.newDescription = taskParams.description;
        this.newPosition = taskParams.position;
        this.newState = this._getNewStateFromParams(taskParams);
        if (story && task) {
            this.oldDescription = task.description();
            this.oldPosition = story.getTaskPosition(task);
            this.oldState = task.complete();
        }
    },myExecute: function() {
        if (this.newDescription) {
            this.task.setDescription(this.newDescription);
        }
        if (this.newPosition) {
            this.story.moveTaskToPosition(this.task, this.newPosition);
        }
        if (this.newState != undefined) {
            this.task.setComplete(this.newState);
        }
        this.story.startPendingUpdate();
        this.story.notifyTaskChange();
    },undo: function() {
        if (this.newDescription) {
            this.task.setDescription(this.oldDescription);
        }
        if (this.newPosition) {
            this.story.moveTaskToPosition(this.task, this.oldPosition);
        }
        if (this.newState != undefined) {
            this.task.setComplete(this.oldState);
        }
        this.story.notifyTaskChange();
    },generateAjaxPayload: function() {
        var params = 'project_id=' + this.story.project.id + '&task[story_id]=' + this.story.id() + '&task[id]=' + this.task.id() + '&task[description]=' + encodeURIComponent(this.task.description()) + '&task[complete]=' + this.task.complete();
        if (this.newPosition) {
            params += '&task[position]=' + this.newPosition;
        }
        return {url: "/story/edit_task",parameters: params};
    },toString: function() {
        return "EditTask - edited task " + this.task.description() + " on " + this.story._name + this.getMemberAndOccurredAtDisplay();
    },getTypeName: function() {
        return "Edit task";
    },getType: function() {
        return "EditTask";
    },getAffectedTopLevelElementIds: function() {
        return [parseInt(this.getParams().task.story_id)];
    },_getNewStateFromParams: function(taskParams) {
        if (taskParams.complete == undefined) {
            return undefined;
        }
        return (taskParams.complete == true || taskParams.complete == "true");
    }};
Object.overrides(EditTask, SingleStoryCommand);
Object.overrides(EditTask, ModifyStory);
GetHistoryForStory = Class.create();
GetHistoryForStory.prototype = {initialize: function(project, storyId, onServerResponseCallback) {
        this.project = project;
        this.storyId = storyId;
        this.onServerResponseCallback = onServerResponseCallback;
    },myExecute: function() {
    },undo: function() {
    },asAjaxPayload: function() {
        var params = "project=" + this.project.id + "&story=" + this.storyId + "&client_version=" + this._clientVersion;
        return {url: "/story/history",parameters: params};
    },toString: function() {
        return "GetHistoryForStory project=" + this.project.id;
    },onReceivedResponseFromServer: function(dataJson) {
        var commands = [];
        for (var i = 0; i < dataJson.history.length; i++) {
            commands.push(Command.build(this.project, dataJson.history[i]));
        }
        this.onServerResponseCallback(commands);
    },getAffectedTopLevelElements: function() {
        return [];
    },isMutator: function() {
        return false;
    },getTypeName: function() {
        return "Get History For Story";
    },getType: function() {
        return "getHistoryForStory";
    }};
Object.overrides(GetHistoryForStory, Command);
MoveStory = Class.create();
MoveStory.prototype = {initialize: function(project, moveId, moveOptions) {
        this.super_init(project.getSigninMember());
        this.project = project;
        this.story = project.getStoryById(moveId);
        if (this.story == null) {
            this.story = Story.DELETED_STORY;
        }
        this.before = moveOptions.before ? project.getStoryById(moveOptions.before) : null;
        this.after = moveOptions.after ? project.getStoryById(moveOptions.after) : null;
        this.plannedIterationNumber = moveOptions.plannedIterationNumber;
        this.oldPlannedIterationNumber = this.story.getPlannedIterationNumber();
        this.storyOptions = {before: this.before,after: this.after,plannedIterationNumber: this.plannedIterationNumber};
        this.undoStory = project.findStoryAfter(this.story);
    },myExecute: function() {
        this.story.setPlannedIterationNumber(this.plannedIterationNumber);
        this.project.moveStoryBetween(this.story, this.after, this.before);
        this.story.startPendingUpdate();
    },undo: function() {
        this.story.setPlannedIterationNumber(this.oldPlannedIterationNumber);
        this.project.moveStoryBefore(this.story, this.undoStory);
        this.project.invalidateCachesAndNotify();
        this.story.stopPendingUpdate();
    },generateAjaxPayload: function() {
        var params = "project=" + this.project.getId() + "&move=" + this.story.id();
        if (this.before) {
            params = params + "&before=" + this.before.id();
        }
        if (this.after) {
            params = params + "&after=" + this.after.id();
        }
        params += "&planned_iteration_number=" + (this.plannedIterationNumber ? this.plannedIterationNumber : "");
        return {url: "/project/move_story",parameters: params};
    },toString: function() {
        var moveName = (typeof (this.story) == 'undefined') ? 'undefined' : this.story.getName();
        var displayString = "MoveStory Command: " + moveName;
        if (typeof (this.before) == 'undefined' && typeof (this.after) == 'undefined') {
            return displayString + " invalid (needs before or after param)" + this.getMemberAndOccurredAtDisplay();
        }
        if (this.before) {
            displayString += " before " + this.before.getName();
        }
        if (this.after) {
            displayString += " after " + this.after.getName();
        }
        return displayString + this.getMemberAndOccurredAtDisplay();
    },getAffectedTopLevelElementIds: function() {
        return [parseInt(this.getParams().move)];
    },getTypeName: function() {
        return "Move story";
    },getType: function() {
        return "moveStoryBefore";
    }};
Object.overrides(MoveStory, SingleStoryCommand);
Object.overrides(MoveStory, Command);
MoveFromProject = Class.create();
MoveFromProject.prototype = {URL: '/story/move_from_project',initialize: function(sourceProject, destinationProjectId, stories) {
        this._destinationProjectId = destinationProjectId;
        this.project = sourceProject;
        this.stories = stories || [];
        this._afterStories = [];
        for (var c = 0; c < this.stories.length; c++) {
            var story = this.stories[c];
            this._afterStories[c] = this.project.findStoryAfter(story);
        }
    },myExecute: function() {
        var i = this.stories.length;
        while (i--) {
            var story = this.stories[i];
            story._isDeleted = true;
            story.events.fire("moveFromProject");
            this.project.removeStory(story);
        }
    },signalSuccessFromServer: function() {
    },canRevealTopLevelElements: function() {
        return false;
    },undo: function() {
        for (var i = 0; i < this.stories.length; i++) {
            this.restoreStory(this.stories[i], i);
        }
    },restoreStory: function(story, index) {
        if (this.project.getStoryById(story.getId())) {
            return;
        }
        story._isDeleted = false;
        var afterStory = this._afterStories[index];
        if (this.stories.indexOf(afterStory) > -1) {
            this.restoreStory(afterStory, this.stories.indexOf(afterStory));
        }
        this.project.addStoryBefore(story, afterStory);
    },generateAjaxPayload: function() {
        var params = {'story_ids[]': this.stories.invoke('getId'),project_id: this.project.getId(),destination_project_id: this._destinationProjectId};
        return {url: this.URL,parameters: Object.toQueryString(params)}
    },showInHistory: function() {
        return this.getAffectedStoryIdsFromStoryIdsParam().length > 0;
    },toString: function() {
        return "Moved " + this.stories.length + " story".pluralize(this.stories.length, " stories") + " from project " + this.project.getId() + " to project " + this._destinationProjectId;
    },getTypeName: function() {
        return "Move From Project";
    },getType: function() {
        return "moveFromProject";
    }};
Object.overrides(MoveFromProject, MultiStoryCommand);
Object.overrides(MoveFromProject, Command);
MoveIntoProject = Class.create();
MoveIntoProject = Class.create();
MoveIntoProject.prototype = {URL: '/story/move_into_project',initialize: function(project, storiesJson, resourcesJson) {
        this.project = project;
        this.storiesJson = storiesJson;
        this._resourcesJson = resourcesJson || [];
    },myExecute: function() {
        var i = this._resourcesJson.length;
        while (i--) {
            var resourceJson = this._resourcesJson[i];
            var resource = new Resource(resourceJson, this.project);
            this.project.resources.addResource(resource);
        }
        var j = this.storiesJson.length;
        while (j--) {
            var storyJson = this.storiesJson[j];
            var story = new Story(storyJson, this.project);
            this.project.addStoryBefore(story, this.project.getStoryById(storyJson.before_story_id));
        }
    },undo: function() {
        var i = this.storiesJson.length;
        while (i--) {
            var story = this.project.getStoryById(this.storiesJson[i].id);
            if (story != null) {
                this.project.removeStory(story);
            }
        }
        var i = this._resourcesJson.length;
        while (i--) {
            this.project.resources.removeResourceById(this._resourcesJson[i].id);
        }
    },toString: function() {
        return "Moved " + this.storiesJson.length + " story".pluralize(this.storiesJson.length, " stories") + " into this project.";
    },getAffectedTopLevelElements: function() {
        return this.project.getStoryById(this.getAffectedTopLevelElementIds());
    },getAffectedTopLevelElementIds: function() {
        var i = 0;
        var storyIds = [];
        while (i < this.storiesJson.length) {
            var storyJson = this.storiesJson[i++];
            storyIds.push(storyJson.id);
        }
        return storyIds;
    },canRevealTopLevelElements: function() {
        for (var i = 0; i < this.storiesJson.length; i++) {
            var story = this.project.getStoryById(this.storiesJson[i].id);
            if (story && !story.isDeleted()) {
                return true;
            }
        }
        return false;
    },getTypeName: function() {
        return "Move Into Project";
    },getType: function() {
        return "moveIntoProject";
    }};
Object.overrides(MoveIntoProject, Command);
MultiMoveStory = Class.create();
MultiMoveStory.TOP = 'top';
MultiMoveStory.BOTTOM = 'bottom';
MultiMoveStory.MIDDLE = 'middle';
MultiMoveStory.prototype = {URL: '/project/multi_move_story',initialize: function(project, stories, options) {
        this.project = project;
        this.stories = $A(stories || []);
        this._afterStories = [];
        this._originalStates = [];
        this._originalPlannedIterationNumbers = [];
        this._position = options.position ? options.position : MultiMoveStory.TOP;
        this._firstStory = options.firstStory;
        this._endState = options.endState;
        this._plannedIterationNumber = options.plannedIterationNumber || null;
        this.before = options.before ? project.getStoryById(options.before) : null;
        this.after = options.after ? project.getStoryById(options.after) : null;
        this._endState = options.endState;
        for (var c = 0; c < this.stories.length; c++) {
            var story = this.stories[c];
            if (story == null) {
                continue;
            }
            this._afterStories[c] = this.project.findStoryAfter(story);
            this._originalStates[c] = story.getCurrentState();
            this._originalPlannedIterationNumbers[c] = story.getPlannedIterationNumber();
        }
    },generateAjaxPayload: function() {
        var pars = {'story_ids[]': this.stories.invoke('getId'),project: this.project.getId()};
        if (this._position) {
            pars.position = this._position;
            if (this._position == MultiMoveStory.MIDDLE) {
                if (this.after) {
                    pars.after = this.after.id();
                }
                if (this.before) {
                    pars.before = this.before.id();
                }
            }
        }
        return {url: this.URL,parameters: Object.toQueryString(pars)};
    },toString: function() {
        var str = "MultiMoveStory " + this.stories.invoke("getId").toString() + " end_state: " +
        (this._endState ? this._endState.getName() : "Unchanged");
        if (this._position) {
            return str + " position: " + this._position;
        } else {
            return str;
        }
    },getTypeName: function() {
        return "Multi Move Story";
    },getType: function() {
        return "multiMoveStory";
    }};
Object.overrides(MultiMoveStory, MultiStoryCommand);
Object.overrides(MultiMoveStory, Command);
PerformStoryAction = Class.create();
PerformStoryAction.prototype = {initialize: function(project, story, action, commandAuthor, noteParams, ownedById) {
        this.super_init(commandAuthor);
        this.story = story;
        this.project = project;
        this.undoStory = this.project.findStoryAfter(this.story);
        this.action = action;
        this.originalState = story ? story._currentState : "";
        if (noteParams && this.story) {
            this._createNewComment(noteParams);
        }
        this.ownedById = parseInt(ownedById);
        if (this.story) {
            this.previousOwnedById = this.story.getOwnedById();
        }
    },myExecute: function() {
        this.story.performAction(this.action, true);
        if (this.ownedById) {
            this.story.setOwnedById(parseInt(this.ownedById));
        } else if (this.story.isStarted()) {
            this.story.setOwnedById(this.project.getSigninMemberId());
        }
        if (this.newComment) {
            this.story.comments().add(this.newComment);
        }
        this.story.notifyAffectingProject();
        this.story.startPendingUpdate();
    },undo: function() {
        if (this.previousOwnedById) {
            this.story.setOwnedById(this.previousOwnedById);
        }
        this.story.setCurrentState(this.originalState, false);
        if (this.newComment) {
            this.story.comments().removeById(this.newComment.id);
        }
        this.story.stopPendingUpdate();
        this.project.moveStoryBefore(this.story, this.undoStory);
    },generateAjaxPayload: function() {
        var storyParams = this._bigFatUglyParametersForStoryAjax(this.story, false);
        storyParams += "&performed_action=" + this.action.getPastTenseDisplayName();
        if (this.newComment) {
            storyParams += "&note[text]=" + encodeURIComponent(this.newComment.text);
            storyParams += "&note[note_taker_id]=" + this.newComment.authorId;
            storyParams += "&note[story_id]=" + this.newComment.commentableId;
            storyParams += "&temp_id=" + this.newComment.id;
        }
        return {url: "/story/do_action",parameters: "story[id]=" + this.story.id() + "&" + storyParams};
    },onReceivedResponseFromServer: function(dataJson) {
        if (dataJson && dataJson.accepted_at) {
            this.story.setAcceptedAt(new Date(dataJson.accepted_at));
        }
        if (dataJson.note_id) {
            this.newComment.id = dataJson.note_id;
            this.newComment.createdAt = new Date(parseInt(dataJson.noted_at_millis));
        }
    },toString: function() {
        return "PerformStoryAction story " + this.story.id() + " action " + this.action.getPastTenseDisplayName().toLowerCase() + this.getMemberAndOccurredAtDisplay();
    },getTypeName: function() {
        return "Perform story action";
    },getType: function() {
        return "performStoryAction";
    },_createNewComment: function(noteParams) {
        this.newComment = new Tracker.Comment({id: this.story.nextTempId(),commentable_id: this.story.id(),commentable_type: this.story.getType(),person_id: noteParams.note_taker_id || (this._member.getId ? this._member.getId() : this._member),created_at: noteParams.noted_at_millis ? noteParams.noted_at_millis : DateUtils.now().getTime(),text: noteParams.text}, this.project);
    }};
Object.overrides(PerformStoryAction, SingleStoryCommand);
Object.overrides(PerformStoryAction, ModifyStory);
ProcessedResource = Class.create(Command, {initialize: function(updatedResourceJson, story_ids, project) {
        this.super_init(project.getSigninMember());
        this.project = project;
        this._updatedResourceJson = updatedResourceJson;
        this._resource = this.project.getResourceById(this._updatedResourceJson.id);
        if (this._resource) {
            this._originalResourceJson = this._resource.toJSONHash();
        }
    },myExecute: function() {
        this._updateResource(this._updatedResourceJson);
    },undo: function() {
        if (!this._resource) {
            this.project.resources.removeResourceById(this._updatedResourceJson.id);
        }
        this._updateResource(this._originalResourceJson);
    },_updateResource: function(json) {
        if (this._resource && json) {
            this._resource.updateFromJson(json, this.project);
        }
    },toString: function() {
        return "ProcessedResource - " +
        this._updatedResourceJson.filename +
        this.getMemberAndOccurredAtDisplay();
    },getAffectedTopLevelElements: function() {
        return this._resource ? [this._resource] : [];
    },getAffectedTopLevelElementIds: function() {
        return [this._updatedResourceJson.id];
    },getTypeName: function() {
        return "Processed Resource";
    },getType: function() {
        return "ProcessedResource";
    },showInHistory: function() {
        return false;
    },canRevealTopLevelElements: function() {
        return false;
    },shouldHaveMember: function() {
        return false;
    }});
ReloadProject = Class.create();
ReloadProject.prototype = {initialize: function(project, message, alerter) {
        this.super_init(project.getSigninMember());
        this.project = project;
        this.message = message;
        this.alerter = alerter;
    },myExecute: function() {
        this.alerter.alertReload(this.message);
    },undo: function() {
    },generateAjaxPayload: function() {
        return null;
    },toString: function() {
        return "ReloadProject project=" + this.project.id;
    },getAffectedTopLevelElements: function() {
        return [this.project];
    },getAffectedTopLevelElementIds: function() {
        return [this.project.getId()];
    },getTypeName: function() {
        return "Reload project";
    },getType: function() {
        return "reloadProject";
    },showInHistory: function() {
        return false;
    },shouldHaveMember: function() {
        return false;
    }};
Object.overrides(ReloadProject, Command);
UpdateIterationLength = Class.create();
UpdateIterationLength.prototype = {initialize: function(project, iterationNumber, iterationLength) {
        this.super_init(project.getSigninMember());
        this.project = project;
        this.iterationNumber = iterationNumber;
        this.iterationLength = iterationLength;
        this.iteration = this.project.getIterationByNumber(this.iterationNumber);
        if (this.iteration) {
            this.orginalIterationLength = this.iteration.getIterationLength();
        }
    },myExecute: function() {
        this.iteration.setIterationLength(this.iterationLength);
    },undo: function() {
        this.iteration.setIterationLength(this.orginalIterationLength);
    },generateAjaxPayload: function() {
        var params = "id=" + this.project.getId() + "&iteration_number=" + this.iterationNumber + "&iteration_length=" + this.iterationLength;
        return {url: "/project/update_iteration_length",parameters: params};
    },toString: function() {
        return "UpdateIterationLength - Updated iteration length of iteration " +
        this.iterationNumber + " to " + this.iterationLength + " week".pluralize(this.iterationLength) +
        this.getMemberAndOccurredAtDisplay();
    },getTypeName: function() {
        return "Update Iteration Length";
    },getType: function() {
        return "UpdateIterationLength";
    }};
Object.overrides(UpdateIterationLength, ProjectCommand);
Object.overrides(UpdateIterationLength, Command);
UpdateIterationMode = Class.create();
UpdateIterationMode.AUTO = 'auto';
UpdateIterationMode.PLANNED = 'planned';
UpdateIterationMode.prototype = {initialize: function(project, mode, storyIds, iterationNumber) {
        this.super_init(project.getSigninMember());
        this.project = project;
        this.mode = mode;
        this.storyIds = storyIds;
        this.iterationNumber = iterationNumber;
        this.originalCurrentStories = this.project.getCurrentIteration() ? this.project.getCurrentIteration().getStories() : [];
    },myExecute: function() {
        this._setIterationMode(this.mode);
    },undo: function() {
        this._setIterationMode(!this.mode);
    },generateAjaxPayload: function() {
        var currentIteration = this.project.getCurrentIteration();
        var params = "project=" + this.project.getId() + "&mode=" + (this.mode);
        params += "&iteration=" + currentIteration.getNumber();
        var stories = (this.mode == UpdateIterationMode.PLANNED) ? this.project.getCurrentIteration().getStories() : this.originalCurrentStories;
        stories.each(function(story) {
            params += ("&stories[]=" + story.id());
        });
        return {url: "/project/update_iteration_mode",parameters: params};
    },toString: function() {
        return "UpdateIterationMode - Mode: " + this.mode + " - Iteration: " + this._getIterationNumber();
    },getTypeName: function() {
        return "Update Iteration Mode";
    },getType: function() {
        return "UpdateIterationMode";
    },_getIterationNumber: function() {
        return this.iterationNumber ? this.iterationNumber : this.project.getCurrentIterationNumber();
    },_setIterationMode: function(mode) {
        var stories = this._getStoriesToUpdate();
        var iterationNumber = this._getIterationNumber();
        if (mode == UpdateIterationMode.PLANNED) {
            stories.each(function(story) {
                story.setPlannedIterationNumber(iterationNumber);
            });
            this.project.addPlannedIterationNumber(iterationNumber);
        } else {
            stories.each(function(story) {
                story.setPlannedIterationNumber(null);
            });
            this.project.removePlannedIterationNumber(iterationNumber);
        }
        this.project._invalidateIterations();
        this.project.notify();
    },_getStoriesToUpdate: function() {
        var result = [];
        if (this.storyIds) {
            for (var i = 0; i < this.storyIds.length; i++) {
                var story = this.project.getStoryById(this.storyIds[i]);
                if (story) {
                    result.push(story);
                }
            }
        } else {
            result = this.project.getCurrentIteration().getStories();
        }
        return result;
    }};
Object.overrides(UpdateIterationMode, ProjectCommand);
Object.overrides(UpdateIterationMode, Command);
UpdateTeamStrength = Class.create();
UpdateTeamStrength.prototype = {initialize: function(project, iterationNumber, percentage) {
        this.super_init(project.getSigninMember());
        this.project = project;
        this.iterationNumber = iterationNumber;
        this.percentage = percentage;
        this.iteration = this.project.getIterationByNumber(this.iterationNumber);
        if (this.iteration) {
            this.orginalPercentage = this.iteration.getTeamStrength();
        }
    },myExecute: function() {
        this.iteration.setTeamStrength(this.percentage);
    },undo: function() {
        this.iteration.setTeamStrength(this.orginalPercentage);
    },generateAjaxPayload: function() {
        var params = "id=" + this.project.getId() + "&team_strength[iteration_number]=" + this.iterationNumber + "&team_strength[percentage]=" + this.percentage;
        return {url: "/project/update_team_strength",parameters: params};
    },toString: function() {
        return "UpdateTeamStrength - Team Strength updated to " +
        this.percentage + "% in iteration " + this.iterationNumber +
        this.getMemberAndOccurredAtDisplay();
    },getTypeName: function() {
        return "Update Team Strength";
    },getType: function() {
        return "UpdateTeamStrength";
    }};
Object.overrides(UpdateTeamStrength, ProjectCommand);
Object.overrides(UpdateTeamStrength, Command);
Tracker.UnknownCommandError = Class.create({initialize: function(unknownCommandName) {
        this.message = "Unknown Command Reloading";
        this.unkownCommandName = unknownCommandName;
    },toString: function() {
        return this.message + " : " + this.unkownCommandName;
    }});
Tracker.BaseCommand = Class.create(Command, {initialize: function($super, className, action, type, jsonHash, project) {
        $super(project.getSigninMember());
        this.jsonHash = jsonHash;
        this.className = className;
        this.project = project;
        this.action = action;
        this.type = type;
    },onReceivedResponseFromServer: function(dataJson) {
    },signalSuccessFromServer: function() {
        if (this.topLevelModel) {
            this.topLevelModel.stopPendingUpdate();
        }
    },getAffectedTopLevelElementIds: function getAffectedTopLevelElementIds() {
        var ids = this.affectedTopLevelElementIds;
        return (ids ? ids : []);
    },myExecute: function myExecute() {
        if (this.model) {
            this.doModelChanges();
            this.validateModelChanges();
            this.afterModelChanges();
        }
    },afterModelChanges: function() {
        this.model.startPendingUpdate();
    },undo: function undo() {
        throw "Tracker.BaseCommand subclass should implement undo()";
    },getAction: function getAction() {
        return this.action;
    },generateCommandPayload: function generateCommandPayload() {
        if (this.model) {
            return this.model.toJSONHash();
        }
    },getAffectedTopLevelElements: function getAffectedTopLevelElements() {
        return (this.topLevelModel ? [this.topLevelModel] : []);
    },getType: function getType() {
        return this.type;
    },toString: function toString() {
        return this.className;
    },canRevealTopLevelElements: function canRevealTopLevelElements() {
        var topLevelElements = this.getAffectedTopLevelElements();
        for (var i = 0; i < topLevelElements.length; i++) {
            var topLevelElement = topLevelElements[i];
            if (topLevelElement && !topLevelElement.isDeleted()) {
                return true;
            }
        }
        return false;
    },validateModelChanges: function validateModelChanges() {
        if (!this.model.isValid()) {
            this.model.showErrorMessage = this.model.getValidationErrors().join('\n');
            this.revertModelChanges();
            throw new ValidationError(this.model, this.model.showErrorMessage);
        }
    },revertModelChanges: function revertModelChanges() {
    }});
Tracker.TransientBaseCommand = Class.create(Command, {myExecute: function myExecute() {
        throw "Tracker.BaseCommand subclass should implement myExecute()";
    }});
Tracker.AddComment = Class.create(Tracker.BaseCommand, {initialize: function($super, jsonHash, project) {
        $super("AddComment", "add_comment", "addComment", jsonHash, project);
        this.model = new Tracker.Comment(this.jsonHash, this.project);
        this.topLevelModel = this.jsonHash['commentable'] || this.model.getCommentable();
    },myExecute: function myExecute() {
        if (this.topLevelModel) {
            this.validateModelChanges();
            this.topLevelModel.comments().add(this.model);
            this.topLevelModel.startPendingUpdate();
            if (!this.topLevelModel.isNew()) {
                this.topLevelModel.events.fire("update");
            }
            this.topLevelModel.events.fire("commentChange");
        }
    },undo: function undo() {
        this.topLevelModel.comments().remove(this.model);
        this.topLevelModel.events.fire("update");
        this.topLevelModel.events.fire("commentChange");
        this.topLevelModel.stopPendingUpdate();
    },onReceivedResponseFromServer: function(dataJson) {
        this.model.id = dataJson.id;
        this.model.createdAt = new Date(parseInt(dataJson.created_at));
        var k;
        if (dataJson.google_doc_resources) {
            for (k = 0; k < dataJson.google_doc_resources.length; k++) {
                var existingResources = this.model.googleDocResources.select(function(googleDocResource) {
                    if (googleDocResource.googleId == dataJson.google_doc_resources[k].google_id) {
                        googleDocResource.id = dataJson.google_doc_resources[k].id;
                        return googleDocResource;
                    }
                });
                if (existingResources.length == 0) {
                    var gdr = new Tracker.GoogleDocResource(dataJson.google_doc_resources[k], this.project);
                    this.model.addGoogleDocResource(gdr);
                }
            }
        }
        this.topLevelModel.events.fire('update');
        this.topLevelModel.events.fire('commentChange');
    },historyTemplate: function() {
        return "add_comment_history_template";
    },historyTemplateInfo: function() {
        return {shouldShowComment: !!this.model.text.length || !(this.getChanges()['resources'] || []).length};
    }});
Tracker.AddEpic = Class.create(Tracker.BaseCommand, {initialize: function($super, jsonHash, project) {
        $super("AddEpic", "add_epic", "addEpic", jsonHash, project);
        this.topLevelModel = this.model = new Epic(this.jsonHash, this.project);
    },undo: function undo() {
        this.revertModelChanges();
    },onReceivedResponseFromServer: function(dataJson) {
        this.project.epics.remove(this.model);
        this.project.events.fire("epicUpdate", this.model);
        this.model.setId(dataJson.id);
        if (dataJson.comments) {
            this.model.comments(dataJson.comments);
        }
        this.model.markAsNotBeingCreated();
        this.project.epics.add(this.model, null, this.project.epics.first());
        this.project.events.fire("epicUpdate", this.model);
        this.project.events.fire("updateAffectingEpicSize");
        this.project.notify();
    },getAffectedTopLevelElements: function getAffectedTopLevelElements() {
        var ids = this.getAffectedTopLevelElementIds();
        return this.project.epics.findByIds(ids);
    },doModelChanges: function doModelChanges() {
        this.model.markAsBeingCreated();
        this.model.setId(this.project.getNextTempId());
        this.project.epics.add(this.model, null, this.project.epics.first());
    },afterModelChanges: function afterModelChanges() {
        this.project.events.fire("epicUpdate", this.model);
        this.project.events.fire("updateAffectingEpicSize");
        this.project.notify();
        this.model.startPendingUpdate();
        this.project.updateStoriesWithLabel(this.model.label());
    },revertModelChanges: function revertModelChanges() {
        this.model.markAsNotBeingCreated();
        this.model.stopPendingUpdate();
        this.project.epics.remove(this.model);
    },generateCommandPayload: function generateCommandPayload() {
        return this.jsonHash;
    }});
Tracker.AddGoogleDocResources = Class.create(Tracker.BaseCommand, {initialize: function($super, jsonHash, project) {
        $super("AddGoogleDocResources", "attach_resource", "addGoogleDocResources", jsonHash, project);
        this.resources = [];
        for (var i = 0; i < this.jsonHash['google_doc_resources'].length; i++) {
            var resourceJsonHash = this.jsonHash['google_doc_resources'][i];
            this.resources.push(new Tracker.GoogleDocResource(resourceJsonHash, project));
        }
    },myExecute: function myExecute() {
        this.resources.each(function(resource) {
            resource.getHitchable().addGoogleDocResource(resource);
        });
        var hitchable = this.resources[0].getHitchable();
        hitchable.startPendingUpdate && hitchable.startPendingUpdate();
        hitchable.fireAttachmentUpdateEvent && hitchable.fireAttachmentUpdateEvent();
    },undo: function undo() {
        this.resources.each(function(resource) {
            resource.getHitchable().removeGoogleDocResource(resource);
        });
        var hitchable = this.resources[0].getHitchable();
        hitchable.fireAttachmentUpdateEvent && hitchable.fireAttachmentUpdateEvent();
    },generateCommandPayload: function generateCommandPayload() {
        var resourcesJson = [];
        for (var i = 0; i < this.resources.length; i++) {
            var resource = this.resources[i];
            resourcesJson.push(resource.toJSONHash());
        }
        return {google_doc_resources: resourcesJson};
    },onReceivedResponseFromServer: function onReceivedResponseFromServer(dataJson) {
        var ids = dataJson['ids'];
        for (var i = 0; i < this.resources.length; i++) {
            var resource = this.resources[i];
            resource.getHitchable().removeGoogleDocResource(resource);
            resource.id = ids[i];
            resource.getHitchable().addGoogleDocResource(resource);
        }
        var hitchable = this.resources[0].getHitchable();
        hitchable.stopPendingUpdate && hitchable.stopPendingUpdate();
        hitchable.fireAttachmentUpdateEvent && hitchable.fireAttachmentUpdateEvent();
    },getAffectedTopLevelElements: function getAffectedTopLevelElements() {
        if (this.resources[0] != null) {
            return [this.resources[0].getHitchable()];
        }
        return [];
    },signalSuccessFromServer: function() {
    }});
Tracker.AddResource = Class.create(Tracker.BaseCommand, {initialize: function($super, jsonHash, project) {
        $super("AddResource", "add_resource", "AddResource", jsonHash, project);
    },myExecute: function myExecute() {
        this.resource = new Resource(this.jsonHash, this.project);
        this.project.resources.addResource(this.resource);
    },undo: function undo() {
        this.project.resources.removeResourceById(this.resource.getId());
    },signalSuccessFromServer: function signalSuccessFromServer() {
    },onReceivedResponseFromServer: function(dataJson) {
    },getAffectedTopLevelElements: function getAffectedTopLevelElements() {
        return [];
    },generateCommandPayload: function generateCommandPayload() {
        return this.jsonHash;
    },showInHistory: function() {
        return false;
    }});
Tracker.AddStory = Class.create(Tracker.BaseCommand, {initialize: function($super, jsonHash, project) {
        $super("AddStory", "add_story", "addStory", jsonHash, project);
        this.topLevelModel = this.model = new Story(this.jsonHash, this.project);
    },myExecute: function myExecute() {
        this.model.setId(this.project.getNextTempStoryId());
        this.model.markAsBeingCreated();
        if (!this.model.isValid()) {
            this.model.showErrorMessage = this.model.getValidationErrors().join('\n');
            throw new ValidationError(this.model, this.model.showErrorMessage);
        }
        if (this.jsonHash.before_story_id == Project.PAST_FINAL_STORY.id()) {
            this.beforeStory = Project.PAST_FINAL_STORY;
        } else if (this.jsonHash.before_story_id) {
            this.beforeStory = this.project.getStoryById(this.jsonHash.before_story_id);
        } else if (this.model.isUnscheduled()) {
            this.beforeStory = this.project.insertNewStoriesBefore();
        }
        if (!this.model.isUnscheduled() && (!this.beforeStory || !this.project.canMoveStoryBefore(this.model, this.beforeStory))) {
            throw "Adjacent stories have been moved.";
        }
        this.project.addStoryBefore(this.model, this.beforeStory);
        this.model.events.fire('update');
        this.conditionallyUpdateEpics();
        this.model.startPendingUpdate();
    },conditionallyUpdateEpics: function conditionallyUpdateEpics() {
        var self = this;
        var epicLabels = _.filter(this.jsonHash.labels, function(label) {
            return self.project.labelRepository.isEpicLabel(label)
        });
        if (!_.isEmpty(epicLabels)) {
            this.project.events.fire("updateAffectingEpicSize");
        }
    },undo: function undo() {
        this.model.markAsNotBeingCreated();
        this.model.stopPendingUpdate();
        this.project.removeStory(this.model);
        this.conditionallyUpdateEpics();
    },onReceivedResponseFromServer: function(dataJson) {
        this.project.removeStory(this.model);
        this.model.setId(dataJson.id);
        this.affectedTopLevelElementIds = [dataJson.id];
        this.model.markAsNotBeingCreated();
        this.model.setCreatedAt(new Date(dataJson.created_at), true);
        if (dataJson.tasks) {
            this.model.updateTasksFromJson(dataJson.tasks);
        }
        if (dataJson.comments) {
            this.model.comments(dataJson.comments);
        }
        if (dataJson.before_story_id) {
            this.beforeStory = this.project.getStoryById(dataJson.before_story_id);
        }
        this.project.addStoryBefore(this.model, this.beforeStory);
        this.model.events.fire('update');
        this.conditionallyUpdateEpics();
    },generateCommandPayload: function generateCommandPayload() {
        return this.jsonHash;
    },getAffectedTopLevelElements: function getAffectedTopLevelElements() {
        return this.project.getStoryById(this.getAffectedTopLevelElementIds());
    }});
Tracker.AddTask = Class.create(Tracker.BaseCommand, {initialize: function($super, jsonHash, project) {
        $super("AddTask", "add_task", "addTask", jsonHash, project);
        if (this.jsonHash['story']) {
            this.topLevelModel = this.jsonHash['story'];
            jsonHash['story_id'] = this.topLevelModel.id();
        } else {
            this.topLevelModel = this.project.getStoryById(jsonHash['story_id']);
        }
        this.model = new Task(this.jsonHash);
    },myExecute: function myExecute() {
        this.topLevelModel.startPendingUpdate();
        this.topLevelModel.addNewTask(this.model);
        this.topLevelModel.notifyTaskChange();
    },undo: function undo() {
        this.topLevelModel.removeTask(this.model);
        this.topLevelModel.notifyTaskChange();
        this.topLevelModel.stopPendingUpdate();
    },onReceivedResponseFromServer: function onReceivedResponseFromServer(dataJson) {
        this.topLevelModel.assignIdToNewTask(dataJson.id, this.model.id());
    }});
AttachCommentResource = Class.create(Tracker.TransientBaseCommand, {initialize: function(resourceJson, comment, project) {
        this.super_init(project.getSigninMember());
        this.comment = comment;
        this.project = project;
        this.resource = project.resources.findById(resourceJson.id);
        this.resourceJson = resourceJson;
    },myExecute: function() {
        if (this.comment) {
            this.comment.addResource(this.resource);
            this.comment.fireAttachmentUpdateEvent();
        }
    },getType: function getType() {
        return "attachCommentResource";
    }});
Tracker.DeleteComment = Class.create(Tracker.BaseCommand, {initialize: function initialize($super, jsonHash, project) {
        $super("DeleteComment", "delete_comment", "deleteComment", jsonHash, project);
        this.topLevelModel = jsonHash.commentable || this.project.findByTypeAndId(jsonHash.commentable_type, jsonHash.commentable_id);
        if (this.topLevelModel) {
            this.model = this.topLevelModel.comments().findById(this.jsonHash['id']);
        }
    },myExecute: function myExecute() {
        if (this.topLevelModel && this.model) {
            this.topLevelModel.comments().remove(this.model);
            this.topLevelModel.startPendingUpdate();
            this.topLevelModel.events.fire("update");
            this.topLevelModel.events.fire("commentChange");
        }
    },undo: function undo() {
        this.topLevelModel.comments().add(this.model);
        this.topLevelModel.events.fire("update");
        this.topLevelModel.events.fire("commentChange");
        this.topLevelModel.stopPendingUpdate();
    },generateCommandPayload: function generateCommandPayload() {
        return this.jsonHash;
    }});
Tracker.DeleteEpic = Class.create(Tracker.BaseCommand, {initialize: function initialize($super, jsonHash, project) {
        $super("DeleteEpic", "delete_epic", "deleteEpic", jsonHash, project);
        this.topLevelModel = this.model = this.project.epics.findById(this.jsonHash['id']);
    },myExecute: function myExecute() {
        this.surroundingEpics = this.project.epics.findSurroundingItems(this.model);
        this.model.destroy();
        this.afterModelChanges();
    },undo: function undo() {
        this.project.epics.add(this.model, this.surroundingEpics[0], this.surroundingEpics[1]);
        this.afterModelChanges();
    },afterModelChanges: function afterModelChanges() {
        this.model.events.fire("beforeRemove");
        this.project.events.fire("epicUpdate", this.model);
        this.project.events.fire("updateAffectingEpicSize");
        this.project.notify();
    },generateCommandPayload: function generateCommandPayload() {
        return this.jsonHash;
    }});
Tracker.DeleteStory = Class.create(Tracker.BaseCommand, {initialize: function initialize($super, jsonHash, project) {
        $super("DeleteStory", "delete_story", "deleteStory", jsonHash, project);
        this.topLevelModel = this.model = this.project.getStoryById(this.jsonHash['id']);
        if (this.model) {
            this.wasBeforeStory = project.findStoryAfter(this.story);
        }
    },myExecute: function myExecute() {
        if (this.model) {
            this.model.markDeleted();
            this.project.removeStory(this.model);
            this.model.notifyNotAffectingProject();
        }
    },undo: function undo() {
        if (this.model) {
            this.model.markNotDeleted();
            this.project.addStoryBefore(this.model, this.wasBeforeStory);
        }
    },generateCommandPayload: function generateCommandPayload() {
        return this.jsonHash;
    }});
Tracker.DeleteTask = Class.create(Tracker.BaseCommand, {initialize: function($super, jsonHash, project) {
        $super("DeleteTask", "delete_task", "deleteTask", jsonHash, project);
        this.topLevelModel = jsonHash.story || this.project.getStoryById(jsonHash.story_id);
        if (this.topLevelModel) {
            this.model = this.topLevelModel.getTaskById(jsonHash['id']);
        }
    },myExecute: function myExecute() {
        if (this.model) {
            this.topLevelModel.startPendingUpdate();
            this.originalPosition = this.topLevelModel.getTaskPosition(this.model);
            this.topLevelModel.removeTask(this.model);
            this.topLevelModel.notifyTaskChange();
        }
    },undo: function undo() {
        this.topLevelModel.moveTaskToPosition(this.model, this.originalPosition);
        this.topLevelModel.notifyTaskChange();
        this.topLevelModel.stopPendingUpdate();
    },generateCommandPayload: function generateCommandPayload() {
        return this.jsonHash;
    }});
Tracker.DetachCommentResource = Class.create(Tracker.BaseCommand, {initialize: function($super, jsonHash, project) {
        $super("DetachCommentResource", "detach_comment_resource", "detachCommentResources", jsonHash, project);
        this.topLevelModel = jsonHash['comment']['commentable'] || project.findByTypeAndId(jsonHash['comment']['commentable_type'], jsonHash['comment']['commentable_id']);
        if (this.topLevelModel) {
            this.model = this.topLevelModel.comments().findById(jsonHash['comment']['id']);
        }
        this.resourceId = this.jsonHash['resource']['id'];
    },myExecute: function myExecute() {
        if (this.model) {
            if (this.jsonHash['resource']['google_id']) {
                this.model.removeGoogleDocResourceById(this.resourceId);
            } else {
                this.model.removeResourceById(this.resourceId);
                this.project.resources.removeResourceById(this.resourceId);
            }
            this.model.fireAttachmentUpdateEvent();
            this.topLevelModel.events.fire("update");
            this.topLevelModel.events.fire("commentChange");
        }
    },undo: function undo() {
        if (this.model) {
            if (this.jsonHash['resource']['google_id']) {
                var googleDocResource = new Tracker.GoogleDocResource(this.jsonHash);
                this.model.addGoogleDocResource(googleDocResource);
            } else {
                var resource = new Resource(this.jsonHash['resource'], this.project);
                this.project.resources.addResource(resource);
                this.model.addResource(resource);
            }
            this.model.fireAttachmentUpdateEvent();
            this.topLevelModel.events.fire("update");
            this.topLevelModel.events.fire("commentChange");
        }
    },generateCommandPayload: function generateCommandPayload() {
        var resourceParams = {id: this.resourceId,title: this.jsonHash['resource']['title']};
        if (this.jsonHash['resource']['google_id']) {
            resourceParams['google_id'] = this.jsonHash['resource']['google_id'];
        }
        return {resource: resourceParams,comment: this.jsonHash['comment']};
    }});
Tracker.EditEpic = Class.create(Tracker.BaseCommand, {initialize: function($super, jsonHash, project, options) {
        $super("EditEpic", "edit_epic", "editEpic", jsonHash, project);
        this.topLevelModel = this.model = this.project.epics.findById(this.jsonHash['id']);
        this.options = options || {};
    },myExecute: function myExecute() {
        if (this.model) {
            this.originalJsonHash = this.model.toJSONHash();
            this.model.applyChangesFromJson(this.jsonHash);
            if (!this.model.isValid()) {
                this.model.showErrorMessage = this.model.getValidationErrors().join(',');
                this.model.applyChangesFromJson(this.originalJsonHash);
                throw new ValidationError(this.model, this.model.showErrorMessage);
            }
            this.model.startPendingUpdate();
            this.project.events.fire("epicUpdate", this.model);
            this._notifyLabelChangeOrFireUpdateEpic();
        }
    },undo: function undo() {
        this.model.applyChangesFromJson(this.originalJsonHash);
        this._notifyLabelChangeOrFireUpdateEpic();
        this.project.events.fire("epicUpdate", this.model);
        this.model.stopPendingUpdate();
    },_notifyLabelChangeOrFireUpdateEpic: function() {
        if (this.jsonHash.label && (this.originalJsonHash.label != this.jsonHash.label)) {
            this.project.updateStoriesWithLabel(this.jsonHash.label);
            this.project.updateStoriesWithLabel(this.originalJsonHash.label);
            this.project.events.fire("update");
            this.project.events.fire("updateAffectingEpicSize");
        }
        this.model.events.fire('update');
    },onReceivedResponseFromServer: function(json) {
        if (this.options.onSuccess) {
            this.options.onSuccess(json);
        }
    },generateCommandPayload: function() {
        return this.jsonHash;
    }});
Tracker.EditStory = Class.create(Tracker.BaseCommand, {initialize: function($super, jsonHash, project) {
        $super("EditStory", "edit_story", "editStory", jsonHash, project);
        this.topLevelModel = this.model = this.project.getStoryById(this.jsonHash['id']);
    },afterModelChanges: function($super) {
        this.model.notifyAffectingProject();
        $super();
    },undo: function undo() {
        this.revertModelChanges();
        this.model.events.fire('update');
        this.model.stopPendingUpdate();
    },generateCommandPayload: function generateCommandPayload() {
        return this.jsonHash;
    },doModelChanges: function doModelChanges() {
        this.originalJsonHash = this.model.toJSONHash();
        this.model.applyChangesFromJson(this.jsonHash);
        if (this.jsonHash.labels) {
            var project = this.project;
            this.jsonHash.labels.each(function(label) {
                project.addLabel(label);
            });
        }
    },onReceivedResponseFromServer: function(dataJson) {
        if (dataJson && dataJson.force_reload) {
            this.project.commandQueue.alertReload("A particular story change has forced a project reload.");
        }
    },revertModelChanges: function _revertModelChanges() {
        this.model.updateAttributesFromJSON(this.originalJsonHash);
        if (this.jsonHash.labels) {
            var project = this.project;
            this.jsonHash.labels.each(function(label) {
                if (project.getStoriesWithLabel(label).length == 0) {
                    project.removeLabelIfUnused(label);
                }
            });
        }
    }});
Tracker.EditTask = Class.create(Tracker.BaseCommand, {initialize: function($super, jsonHash, project) {
        $super("EditTask", "edit_task", "editTask", jsonHash, project);
        if (this.jsonHash['story']) {
            this.topLevelModel = this.jsonHash['story'];
            jsonHash['story_id'] = this.topLevelModel.id();
        } else {
            this.topLevelModel = this.project.getStoryById(jsonHash['story_id']);
        }
        if (this.topLevelModel) {
            this.model = this.topLevelModel.getTaskById(jsonHash['id']);
        }
    },myExecute: function myExecute() {
        if (this.model) {
            this.originalJsonHash = this.model.toJSONHash();
            this.topLevelModel.startPendingUpdate();
            this.model.applyChangesFromJson(this.jsonHash);
            if (this.jsonHash['position']) {
                this.topLevelModel.moveTaskToPosition(this.model, this.jsonHash['position']);
            }
            this.topLevelModel.notifyTaskChange();
        }
    },undo: function undo() {
        this.model.applyChangesFromJson(this.originalJsonHash);
        if (this.jsonHash['position']) {
            this.topLevelModel.moveTaskToPosition(this.model, this.originalJsonHash['position']);
        }
        this.topLevelModel.notifyTaskChange();
        this.topLevelModel.stopPendingUpdate();
    },generateCommandPayload: function generateCommandPayload() {
        return this.jsonHash;
    }});
Tracker.MoveStory = Class.create(Tracker.BaseCommand, {initialize: function initialize($super, jsonHash, project) {
        $super("MoveStory", "move_story", "moveStoryBefore", jsonHash, project);
        if (this.jsonHash.position == "top" || this.jsonHash.position == "bottom") {
            throw ("dont do no position " + this.jsonHash.position + " no mo");
        }
        this._afterStories = [];
        this.originalStates = [];
        this.originalPlannedIterationNumbers = [];
        this.jsonHash.project_id = project.id;
    },myExecute: function myExecute() {
        this.stories = this.project.getStoryById(this.jsonHash.story_ids);
        this.panel = this._getPanel();
        this._after = this.project.getStoryById(this.jsonHash.after_story_id) || (this.project.getStoryById(this.jsonHash.before_story_id) ? this.project.getStoryById(this.jsonHash.before_story_id).getPreviousStory() : null);
        this._before = this.project.getStoryById(this.jsonHash.before_story_id) || (this._after ? this._after.getNextStory() : null);
        this._validateOriginalBeforeAndAfterStates();
        this._saveStateForRollback();
        var storiesToNotify = [];
        this._affectedStories = [];
        for (var i = 0; i < this.stories.length; i++) {
            var story = this.stories[i];
            var storyWasUpdated = false;
            if (!story.isDeleted() && !story.isAccepted()) {
                var newEndState = this._calculateEndStateForStory(story);
                if (newEndState && story.getCurrentState() != newEndState) {
                    story._currentState = newEndState;
                    storyWasUpdated = true;
                }
                story.setPlannedIterationNumber(this._getPlannedIterationNumber(this.panel));
                if (this.jsonHash.label) {
                    story.addLabel(this.jsonHash.label);
                    storyWasUpdated = true;
                }
                this._affectedStories.push(story);
                if (storyWasUpdated) {
                    storiesToNotify.push(story)
                }
            }
        }
        this._after = this._affectedStories.indexOf(this._after) > -1 ? null : this._after;
        this._before = this._affectedStories.indexOf(this._before) > -1 ? null : this._before;
        if ((this._after || this._before) && this._affectedStories.length > 0) {
            this.project.quietlyRemoveStories(this._affectedStories);
            if (this._after) {
                this.project.quietlyAddStories(this._affectedStories, this._after, "after");
            } else {
                this.project.quietlyAddStories(this._affectedStories, this._before);
            }
        }
        for (var k = 0; k < this._affectedStories.length; k++) {
            var affectedStory = this._affectedStories[k];
            if (storiesToNotify.indexOf(affectedStory) != -1) {
                affectedStory.notifyNotAffectingProject();
            }
            affectedStory.startPendingUpdate();
        }
        this.project.invalidateCachesAndNotify();
    },undo: function() {
        var i = this._affectedStories.length;
        while (i--) {
            var story = this._affectedStories[i];
            story._currentState = this.originalStates[i];
            story._plannedIterationNumber = this.originalPlannedIterationNumbers[i];
            if (this.jsonHash.label) {
                story.removeLabel(this.jsonHash.label);
            }
            story.stopPendingUpdate();
            story.notifyNotAffectingProject();
            this.project.moveStoryBefore(story, this._afterStories[i]);
        }
        this.project.invalidateCachesAndNotify();
    },generateCommandPayload: function generateCommandPayload() {
        return this._commandPayloadShim(this.jsonHash);
    },getType: function() {
        return this.isSingleStoryMove() ? 'moveStoryBefore' : 'multiMoveStory';
    },isSingleStoryMove: function() {
        return this.jsonHash.story_ids.length == 1;
    },getAffectedTopLevelElements: function getAffectedTopLevelElements() {
        return this.project.getStoryById(this.getAffectedTopLevelElementIds());
    },signalSuccessFromServer: function signalSuccessFromServer() {
        var i = this.stories.length;
        while (i--) {
            this.stories[i].stopPendingUpdate();
        }
    },_commandPayloadShim: function commandPayloadShim(hash) {
        var newJsonHash = {project_id: this.project.getId(),story_ids: this._affectedStories.invoke('id')};
        newJsonHash['panel'] = this._getPanel();
        if (this._after) {
            newJsonHash['after_story_id'] = this._after.id();
        }
        if (this._before) {
            newJsonHash['before_story_id'] = this._before.id();
        }
        if (this.jsonHash.label) {
            newJsonHash['label'] = this.jsonHash.label;
        }
        return newJsonHash;
    },_calculateEndStateForStory: function _calculateEndStateForStory(story) {
        var panel = this._getPanel();
        var state;
        if (state = this._fixedStateForPanel(panel)) {
            return state;
        } else if (this._before && this._before.getBucket() < story.getBucket()) {
            return this._defaultStateForBucket(story, this._before.getBucket())
        } else if (this._after && this._after.getBucket() > story.getBucket()) {
            return this._defaultStateForBucket(story, this._after.getBucket())
        } else if (panel == 'Current' && story.getCurrentState().getName() == 'unscheduled') {
            return StoryState.valueOf("unstarted");
        } else {
            return story.getCurrentState();
        }
    },_fixedStateForPanel: function _fixedStateForPanel(panel) {
        switch (panel) {
            case 'Icebox':
                return StoryState.valueOf('unscheduled');
            case 'Backlog':
                return StoryState.valueOf('unstarted');
            default:
                return null;
        }
    },_defaultStateForBucket: function _defaultStateForBucket(story, bucket) {
        switch (bucket) {
            case 3:
                return StoryState.valueOf('unscheduled');
            case 2:
                return StoryState.valueOf('unstarted');
            case 1:
                return (story.isReleaseMarker ? StoryState.UNSTARTED : story.getCurrentState());
            default:
                throw "Can only move into unscheduled, unstarted, or active bucket."
        }
    },_getPanel: function() {
        return this.jsonHash.panel;
    },_saveStateForRollback: function() {
        for (var c = 0; c < this.stories.length; c++) {
            var story = this.stories[c];
            if (story == null) {
                continue;
            }
            this._afterStories[c] = this.project.findStoryAfter(story);
            this.originalStates[c] = story.getCurrentState();
            this.originalPlannedIterationNumbers[c] = story.getPlannedIterationNumber();
        }
    },_getPlannedIterationNumber: function(panel) {
        if (!this.project.isCurrentIterationPlanned()) {
            return null;
        }
        if (panel) {
            return panel == "Current" ? this.project.getCurrentIterationNumber() : null;
        } else {
            return this._before ? this._before.getPlannedIterationNumber() : null;
        }
    },_validateOriginalBeforeAndAfterStates: function() {
        if (this.isInitiatingClient()) {
            if (this._originalBeforeState || this._originalAfterStoryState) {
                var beforeStateChanged = this._before && this._originalBeforeState != this._before.getCurrentState();
                var afterStateChanged = this._after && this._originalAfterState != this._after.getCurrentState();
                if (beforeStateChanged && afterStateChanged) {
                    throw "Story can no longer be moved to that position";
                } else if (beforeStateChanged) {
                    this._before = this._after ? this._after.getNextStory() : null;
                } else if (afterStateChanged) {
                    this._after = this._before ? this._before.getPreviousStory() : null;
                }
            } else {
                this._originalBeforeState = this._before ? this._before.getCurrentState() : null;
                this._originalAfterState = this._after ? this._after.getCurrentState() : null;
            }
        }
    }});
Tracker.MoveStory.TOP = 'top';
Tracker.MoveStory.BOTTOM = 'bottom';
Tracker.MoveStory.MIDDLE = 'middle';
Tracker.MoveEpic = Class.create(Tracker.BaseCommand, {initialize: function($super, jsonHash, project) {
        $super("MoveEpic", "move_epic", "moveEpic", jsonHash, project);
        this.topLevelModel = this.model = this.project.epics.findById(this.jsonHash['id']);
    },myExecute: function myExecute() {
        this.undoEpic = this.project.epics.findItemAfter(this.model);
        this.project.epics.moveByIds(this.jsonHash['id'], this.jsonHash['after_epic_id'], this.jsonHash['before_epic_id']);
        this.afterModelChanges();
    },afterModelChanges: function afterModelChanges() {
        this.model.startPendingUpdate();
        this.project.events.fire("epicUpdate", this.model);
    },undo: function undo() {
        this.project.epics.move(this.model, null, this.undoEpic);
        this.model.stopPendingUpdate();
        this.project.events.fire("epicUpdate", this.model);
    },generateCommandPayload: function generateCommandPayload() {
        return this.jsonHash;
    }});
Tracker.DetachGoogleDocResource = Class.create(Tracker.BaseCommand, {initialize: function($super, jsonHash, project) {
        $super("DetachGoogleDocResource", "detach_resource", "detachGoogleDocResources", jsonHash, project);
        this.topLevelModel = this.model = this.project.getStoryById(this.jsonHash['hitchable_id']);
    },myExecute: function myExecute() {
        throw "myExecute:deprecated";
    },undo: function undo() {
        throw "undo:deprecated";
    },generateCommandPayload: function generateCommandPayload() {
        return {};
    }});
var Clock = {now: function() {
        return DateUtils.now();
    }}
ValidationError = Class.create({initialize: function initialize(model, message) {
        this.type = "ValidationError";
        this.model = model;
        this.message = message;
    }});
Collection = Class.create({initialize: function initialize(options) {
        var json = options.json;
        this.itemClass = options.itemClass;
        this._items = [];
        this.project = options.project;
        this._onAddCallback = options.onAdd;
        this._onMoveCallback = options.onMove;
        this._onRemoveCallback = options.onRemove;
        if (json) {
            for (var i = 0; i < json.length; i++) {
                this._items.push(new (this.itemClass)(json[i], this.project));
            }
        }
    },toJSONHash: function toJSONHash() {
        return this.map(function(item) {
            return item.toJSONHash ? item.toJSONHash() : null;
        }).compact();
    },items: function items() {
        return this._items;
    },findById: function findById(id) {
        for (var i = 0; i < this._items.length; i++) {
            var itemId = (typeof this._items[i].id == 'function') ? this._items[i].id() : this._items[i].id;
            if (itemId == id) {
                return this._items[i];
            }
        }
        return null;
    },findByIds: function findById(ids) {
        var items = [];
        var item;
        for (var i = 0; i < ids.length; i++) {
            item = this.findById(ids[i]);
            if (item) {
                items.push(item);
            }
        }
        return items;
    },add: function add(item, previousItem, nextItem) {
        this._add(item, previousItem, nextItem);
        if (this._onAddCallback) {
            this._onAddCallback(item);
        }
    },_add: function _add(item, previousItem, nextItem) {
        var desiredIndex;
        if (!previousItem && !nextItem) {
            this._items.push(item);
        } else {
            if (previousItem) {
                desiredIndex = this._items.indexOf(previousItem) + 1;
            } else {
                desiredIndex = this._items.indexOf(nextItem);
            }
            this._items.splice(desiredIndex, 0, item);
        }
    },move: function move(item, previous, next) {
        this._remove(item);
        this._add(item, previous, next);
        if (this._onMoveCallback) {
            this._onMoveCallback(item, previous, next);
        }
    },moveByIds: function moveByIds(itemId, previousId, nextId) {
        var item = this.findById(itemId);
        var previous = this.findById(previousId);
        var next = this.findById(nextId);
        this._remove(item);
        this._add(item, previous, next);
        if (this._onMoveCallback) {
            this._onMoveCallback(item, previous, next);
        }
    },remove: function remove(item) {
        this._remove(item);
        if (this._onRemoveCallback) {
            this._onRemoveCallback(item);
        }
    },removeById: function removeById(id) {
        var item = this.findById(id);
        return (item && this.remove(item));
    },removeAll: function removeAll() {
        while (this._items.length) {
            this.remove(this._items[0]);
        }
    },_remove: function _remove(item) {
        var index = this._items.indexOf(item);
        if (index > -1) {
            this._items.splice(index, 1);
        }
    },findSurroundingItems: function findSurroundingItems(item) {
        return [this.findItemBefore(item), this.findItemAfter(item)];
    },findItemAfter: function findItemAfter(item) {
        if (item == null) {
            return null;
        }
        var idx = this._items.indexOf(item);
        if (idx == -1 || idx == this._items.length) {
            return null;
        } else {
            return this._items[idx + 1];
        }
    },findItemBefore: function findItemBefore(item) {
        if (item == null) {
            return null;
        }
        var idx = this._items.indexOf(item);
        if (idx == -1 || idx == this._items.length) {
            return null;
        } else {
            return this._items[idx - 1];
        }
    },length: function length() {
        return this._items.length;
    },isEmpty: function isEmpty() {
        return this._items.length == 0;
    },hasItems: function hasItems() {
        return this._items.length > 0;
    },first: function first() {
        return this._items.first();
    },last: function last() {
        return this._items.last();
    },each: function each(iterator_function) {
        this._items.each(iterator_function);
    },select: function select(select_function) {
        return this._items.select(select_function);
    },any: function any(any_function) {
        return this._items.any(any_function);
    },map: function map(map_function) {
        return this._items.map(map_function);
    }});
Config = Class.create();
Config.prototype = {initialize: function(json) {
        this.allowStorySelection = json.allow_story_selection || false;
        this.allowSourceControlTracking = json.allow_source_control_tracking || false;
        this.sourceControlBaseUrl = json.source_control_base_url || "";
    }};
BaseDomain = Class.create({getErrorMessage: function getErrorMessage() {
        var errors = this.getValidationErrors();
        return errors.length == 0 ? null : errors[0];
    },isValid: function() {
        return this.getValidationErrors().length == 0;
    },getValidationErrors: function() {
        return [];
    },validatePresenceOf: function validatePresenceOf(value, fieldName, validationErrors, msg) {
        var isValid = true;
        switch (typeof value) {
            case "string":
                isValid = !value.blank();
                break;
            case "number":
                isValid = value > -1;
                break;
            default:
                isValid = value != null;
                break;
        }
        if (!isValid) {
            validationErrors[validationErrors.length] = msg || fieldName + " is missing";
        }
    },validateLength: function validateLength(value, fieldName, maxLength, validationErrors) {
        if (value && value.length > maxLength) {
            validationErrors[validationErrors.length] = "Please enter a " + fieldName
            + " " + maxLength + " characters or less."
            + " The " + fieldName + " currently contains "
            + value.length + " characters."
        }
    },getOrDefault: function(val, defaultVal) {
        return (val != null) ? val : defaultVal;
    },getOrNull: function(val) {
        return this.getOrDefault(val, null);
    },getPluralType: function() {
        var t = this.getType();
        if (t == "epic") {
            return "epics";
        }
        if (t == "story") {
            return "stories";
        }
        throw "unpluralized domain object type";
    },getDateOrNull: function(date) {
        return date ? new Date(date) : null;
    },getOrNullString: function(val) {
        return this.getOrDefault(val, "");
    }});
Tracker.Comment = Class.create(BaseDomain, {initialize: function(jsonHash, project) {
        this.events = new EventChannelRegistry(this, "attachmentUpdate", "startPendingUpdate", "stopPendingUpdate");
        this.project = project;
        this.id = jsonHash.id || Tracker.Comment.nextTempId();
        this.commentableId = jsonHash.commentable_id || null;
        this.commentableType = jsonHash.commentable_type || null;
        this._commentable = this.commentableId ? null : jsonHash.commentable;
        this.createdAt = new Date(parseInt(jsonHash.created_at)) || null;
        this.text = jsonHash.text || "";
        this.authorId = jsonHash.person_id;
        this.commitId = jsonHash.commit_id;
        this.commitType = jsonHash.commit_type;
        this.resourceIds = (jsonHash.resource_ids || []).slice(0);
        this.googleDocResources = new Collection({json: jsonHash.google_doc_resources,itemClass: Tracker.GoogleDocResource});
    },isNew: function() {
        return !parseInt(this.id);
    },clearUserEnteredValues: function clearUserEnteredValues() {
        this.createdAt = null;
        this.text = null;
        this.authorId = null;
        this.commitId = null;
        this.resourceIds = [];
        this.googleDocResources = new Collection({json: {},itemClass: Tracker.GoogleDocResource});
    },getCommentable: function getCommentable() {
        if (!this._commentable) {
            this._commentable = this.project.findByTypeAndId(this.commentableType, this.commentableId);
        }
        return this._commentable;
    },getAuthor: function() {
        if (!this._author) {
            this._author = this.project.getMember(this.authorId);
            if (!this._author) {
                this._author = Member.UNKNOWN_MEMBER;
            }
        }
        return this._author;
    },getType: function() {
        return "comment";
    },getValidationErrors: function() {
        var validationErrors = [];
        this.validateLength(this.text, "comment", Tracker.Comment.TEXT_MAX_LENGTH, validationErrors);
        this.validatePresenceOf(this.authorId, "author Id", validationErrors, "Please choose a comment author.");
        return validationErrors;
    },toJSONHash: function() {
        return {id: this.id,commentable_id: this.commentableId,commentable_type: this.commentableType,person_id: this.authorId,created_at: this.createdAt.getTime(),text: this.text,commit_id: this.commitId,commit_type: this.commitType,resource_ids: this.resourceIds,google_doc_resources: this.googleDocResources.toJSONHash()}
    },addResource: function(resource) {
        this.resourceIds.push(resource.id);
    },fireAttachmentUpdateEvent: function() {
        this.events.fire("attachmentUpdate");
    },getResources: function() {
        var result = [];
        for (var i = 0; i <= this.resourceIds.length - 1; ++i) {
            var resource = this.project.getResourceById(this.resourceIds[i]);
            if (resource) {
                result.push(resource);
            }
        }
        return result;
    },getAllResources: function() {
        return this.getResources().concat(this.getGoogleDocResources()).sort(function(resource1, resource2) {
            return resource1.createdAt - resource2.createdAt;
        });
    },getResourceCount: function() {
        return this.googleDocResources.length() + this.resourceIds.length;
    },hasResources: function hasResources() {
        return this.getResourceCount() > 0;
    },hasImages: function hasImages() {
        return this.getResources().any(function(r) {
            return r.isThumbnailable();
        });
    },addGoogleDocResource: function(resource) {
        this.googleDocResources.add(resource);
    },getGoogleDocResources: function() {
        return this.googleDocResources.items();
    },removeResourceById: function(resourceId) {
        var index = this.resourceIds.indexOf(resourceId);
        if (index == -1) {
            return;
        }
        this.resourceIds.splice(index, 1);
    },removeGoogleDocResourceById: function(resourceId) {
        this.googleDocResources.removeById(resourceId);
    },removeGoogleDocResource: function(resource) {
        this.googleDocResources.remove(resource);
    },removeAllResources: function() {
        this.resourceIds = [];
        this.googleDocResources.removeAll();
        this.fireAttachmentUpdateEvent();
    },canBeDeletedBy: function(member) {
        if (member.readOnly || member.guest || member.inactive) {
            return false;
        } else if (member.owner) {
            return true;
        } else {
            return member.id == this.authorId;
        }
    },isCommit: function isCommit() {
        return this.commitType == 'github' || this.commitId != null
    }});
Tracker.Comment.TEXT_MAX_LENGTH = 20000;
Tracker.Comment.nextTempId = function() {
    if (this.currentTempId == undefined) {
        this.currentTempId = 0;
    }
    this.currentTempId++;
    return 'temp' + this.currentTempId;
};
Deadline = Class.create();
Deadline.prototype = {initialize: function(releaseMarker, project) {
        this._releaseMarker = releaseMarker;
        this._project = project;
    },id: function() {
        return "deadline" + this._releaseMarker.id();
    },getDate: function() {
        return this._releaseMarker.getDeadline();
    },getName: function() {
        return this._releaseMarker.getName();
    },toString: function() {
        return this.id();
    },addUpdateSubscriber: function(subscriber) {
        this._releaseMarker.events.subscribe(subscriber, "update");
    },removeUpdateSubscriber: function(subscriber) {
        this._releaseMarker.events.unsubscribe(subscriber, "update");
    },getIteration: function() {
        return this._project.getIterationContainingDeadline(this);
    },getReleaseMarker: function() {
        return this._releaseMarker;
    }};
Epic = Class.create(BaseDomain, {initialize: function(json, project) {
        this.events = new EventChannelRegistry(this, "update", "updateAffectingProject", "statusChange", "updatePointCounts", "commentChange", "startPendingUpdate", "stopPendingUpdate", "beforeRemove");
        this._id = json.id || Epic.NEW_EPIC_ID;
        this.project = project;
        this.setName(json.name || null);
        this._label = LabelRepository.normalizedLabel(json.label || this.name());
        this.setDescription(json.description || null);
        this.comments(json.comments);
        this._pastDoneStoriesCount = json.past_done_stories_count || 0;
        this._pastDoneStoryEstimates = json.past_done_story_estimates || 0;
        this._pastDoneStoriesNoPointCount = json.past_done_stories_no_point_count || 0;
        this._destroyed = false;
        this._isBeingCreated = false;
    },isNew: function isNew() {
        return this._id == Epic.NEW_EPIC_ID;
    },comments: function comments(commentHashes) {
        var self = this;
        if (!this._comments || commentHashes) {
            this._comments = new Collection({json: commentHashes,itemClass: Tracker.Comment,project: this.project});
        } else {
            return this._comments;
        }
    },hasComments: function hasComments() {
        return this._comments.hasItems();
    },hasDescription: function hasDescription() {
        if (!this._description) {
            return false;
        }
        return !StringUtils.isWhitespace(this._description);
    },hasCommits: function() {
        return false;
    },hasResources: function hasResources() {
        return this._comments.any(function(comment) {
            return comment.hasResources()
        });
    },hasImages: function hasImages() {
        return this._comments.any(function(comment) {
            return comment.hasImages();
        });
    },getType: function() {
        return "epic";
    },isDeleted: function() {
        return this._destroyed;
    },markAsBeingCreated: function() {
        this._isBeingCreated = true;
    },markAsNotBeingCreated: function() {
        this._isBeingCreated = false;
    },isBeingCreated: function() {
        return this._isBeingCreated;
    },destroy: function() {
        this._destroyed = true;
        this.project.epics.removeById(this.id());
        this.events.fire("update");
    },toJSONHash: function() {
        return {id: this._id,name: this._name,label: this._label,description: this._description};
    },commentsJSONHash: function commentsJSONHash() {
        var result = [];
        this._comments.each(function(comment) {
            result.push(comment.toJSONHash());
        });
        return result;
    },updateAttributesFromJSON: function(json) {
        this.setName(json.name);
        this.setLabel(json.label);
        this.setDescription(json.description);
        this._pastDoneStoriesCount = json.past_done_stories_count || 0;
    },applyChangesFromJson: function applyChangesFromJson(changesJson) {
        var updatedHash = this.toJSONHash();
        for (var key in changesJson) {
            updatedHash[key] = changesJson[key];
        }
        this.updateAttributesFromJSON(updatedHash);
    },id: function() {
        return this._id;
    },setId: function(newId) {
        this._id = newId;
    },name: function() {
        return this._name || '';
    },pastDoneStoriesCount: function() {
        return this._pastDoneStoriesCount;
    },pastDoneStoriesEstimates: function() {
        return this._pastDoneStoryEstimates;
    },getName: function() {
        return this._name;
    },setName: function(newName) {
        this._name = newName;
    },setLabel: function(newLabel) {
        this._label = LabelRepository.normalizedLabel(newLabel);
        this.project.addLabel(newLabel);
    },label: function() {
        return this._label;
    },hasLabel: function(label) {
        return this._label == LabelRepository.normalizedLabel(label);
    },setDescription: function(newDescription) {
        this._description = newDescription;
    },description: function() {
        return this._description;
    },getLabels: function() {
        return this._label ? [this._label] : [];
    },invalidateStoriesCache: function invalidateStoriesCache() {
        this._stories = null;
        this._isDone = null;
        this._isAccepted = null;
    },setStoriesCache: function setStoriesCache(stories) {
        this.invalidateStoriesCache();
        this._stories = stories;
    },_calculateDoneAndAcceptedState: function() {
        var hasDoneStory = this._pastDoneStoriesCount > 0;
        var hasAcceptedStory = this._pastDoneStoriesCount > 0;
        var iteration = this.project.getCurrentIteration();
        _(this.getStories()).all(function(s) {
            var bucket = s.getBucket();
            switch (bucket) {
                case 0:
                    if (!iteration || !iteration.contains(s)) {
                        hasDoneStory = true;
                        hasAcceptedStory = true;
                    } else {
                        hasDoneStory = false;
                        hasAcceptedStory = true;
                    }
                    break;
                case 1:
                case 2:
                    hasDoneStory = false;
                    hasAcceptedStory = false;
                    return false;
                case 3:
                    return false;
            }
            return true;
        });
        this._isDone = hasDoneStory;
        this._isAccepted = hasAcceptedStory;
    },isDone: function() {
        if (_.isBoolean(this._isDone)) {
            return this._isDone;
        }
        this._calculateDoneAndAcceptedState();
        return this._isDone;
    },isAccepted: function() {
        if (_.isBoolean(this._isAccepted)) {
            return this._isAccepted;
        }
        this._calculateDoneAndAcceptedState();
        return this._isAccepted;
    },getStories: function() {
        if (!this._stories) {
            this._stories = this.project.getStoriesWithLabel(this.label());
        }
        return this._stories;
    },hasStories: function() {
        return this.getStories().length > 0;
    },startPendingUpdate: function() {
        this.events.fire("startPendingUpdate");
    },stopPendingUpdate: function() {
        this.events.fire("stopPendingUpdate");
    },getCurrentState: function() {
        return 'unscheduled';
    },getValidationErrors: function() {
        var validationErrors = [];
        this.validatePresenceOf(this.name(), "epic name", validationErrors, "Please enter an epic name");
        this.validatePresenceOf(this.label(), "epic label", validationErrors, "Please enter a label name");
        this.validateLength(this.description(), "description", Epic.DESCRIPTION_MAX_LENGTH, validationErrors);
        if (this.name() && (this.name().indexOf('"') > -1 || this.name().indexOf("'") > -1)) {
            validationErrors.push("Epic names cannot have quotations");
        }
        var epicByLabel = this.project.getEpicByLabel(this.label());
        if (this.label() && epicByLabel != null && epicByLabel != this) {
            validationErrors.push("Epic label already used");
        }
        return validationErrors;
    },statusChange: function(opacity) {
        this.events.fire("statusChange", opacity);
    },getStoryPoints: function getStoryPoints(usePseudopoints) {
        var stories = this.getStories();
        var pointsInBucket = {0: [0, 0],1: [0, 0],2: [0, 0],3: [0, 0]};
        for (var i = 0; i < stories.length; i++) {
            var state = stories[i].getCurrentState();
            var bucket = StoryState.getBucketForState(state);
            var estimate = usePseudopoints ? stories[i].getPseudopoints() : stories[i].getEstimate();
            estimate = (estimate < 0) ? 0 : estimate;
            pointsInBucket[bucket][0] += estimate;
            pointsInBucket[bucket][1] += 1;
        }
        if (!this.project.hasAllIterations()) {
            pointsInBucket[0][0] += this.pastDoneStoriesEstimates();
            if (usePseudopoints) {
                pointsInBucket[0][0] += this._pastDoneStoriesNoPointCount * Story.PSEUDO_POINT_MULTIPLIER;
            }
            pointsInBucket[0][1] += this.pastDoneStoriesCount();
        }
        j.extend(pointsInBucket, {accepted: pointsInBucket[StoryState.ACCEPTED.getStateGroup()][0],active: pointsInBucket[StoryState.STARTED.getStateGroup()][0],unstarted: pointsInBucket[StoryState.UNSTARTED.getStateGroup()][0],unscheduled: pointsInBucket[StoryState.UNSCHEDULED.getStateGroup()][0],storyCount: {accepted: pointsInBucket[StoryState.ACCEPTED.getStateGroup()][1],active: pointsInBucket[StoryState.STARTED.getStateGroup()][1],unstarted: pointsInBucket[StoryState.UNSTARTED.getStateGroup()][1],unscheduled: pointsInBucket[StoryState.UNSCHEDULED.getStateGroup()][1]}});
        return pointsInBucket;
    },getPseudopoints: function getPseudopoints() {
        return this.getStoryPoints(true);
    },getCompletionDate: function getCompletionDate() {
        var stories = this.getStories();
        var storyWithMaxPriority, finishDate = null;
        for (var i = 0; i < stories.length; i++) {
            var bucket = StoryState.getBucketForState(stories[i].getCurrentState());
            if (bucket >= 3) {
                break;
            }
            storyWithMaxPriority = stories[i];
        }
        if (storyWithMaxPriority) {
            finishDate = this.project.getIterationContainingStory(storyWithMaxPriority).getFinish();
        }
        return finishDate;
    },getUrl: function getUrl() {
        return document.location.protocol + '//' + document.location.host + '/epic/show/' + this.id();
    }});
Epic.NEW_EPIC_ID = "newEpic";
Epic.DESCRIPTION_MAX_LENGTH = 20000;
ExternalStory = Class.create(BaseDomain, {initialize: function(json, project) {
        this.project = this._project = project;
        this._id = this.getOrNull(json.external_id);
        this._integrationId = this.getOrNull(json.integration_id);
        this._name = this.getOrDefault(json.name, '');
        this._storyType = this.getOrNull(json.story_type);
        this._estimate = this.getOrDefault(json.estimate, -1);
        this._createdAt = this.getDateOrNull(json.created_at);
        this._reportedBy = this.getOrNullString(json.requested_by);
        this._ownedBy = this.getOrNullString(json.owned_by);
        this._description = this.getOrNullString(json.description);
        this._state = this.getOrDefault(json.state, '');
        this._extra = this.getOrDefault(json.extra, {});
        if (json.extra && json.extra.last_active_at) {
            this._extra.last_active_at = new Date(json.extra.last_active_at);
        }
    },id: function() {
        return this._id;
    },getId: function() {
        return this._id;
    },getIntegrationId: function() {
        return this._integrationId;
    },getName: function() {
        return this._name;
    },getDescription: function() {
        return this._description;
    },getType: function() {
        return "story";
    },hasDescription: function() {
        if (!this._description) {
            return false;
        }
        return !StringUtils.isWhitespace(this._description);
    },getState: function() {
        return this._state;
    },getEstimate: function() {
        return this._estimate;
    },getRequestedBy: function() {
        return this._reportedBy;
    },getOwnedBy: function() {
        return this._ownedBy;
    },getCreatedAt: function() {
        return this._createdAt;
    },getExtras: function() {
        return this._extra;
    },getStoryType: function getStoryType() {
        return this._storyType;
    },_findMemberByIdName: function(name) {
        var member = this._project.members.findByName(name);
        return member == undefined ? -1 : member.getId();
    },createStory: function() {
        var storyJson = {id: this._project.getNextTempStoryId(),integration_id: this._integrationId,external_id: this._id,current_state: StoryState.UNSAVED,name: this._name,story_type: this._storyType,description: this._description,estimate: this._estimate,requested_by_id: this._findMemberByIdName(this._reportedBy),owned_by_id: this._findMemberByIdName(this._ownedBy)}
        return new Story(storyJson, this._project);
    }});
ExternalStory.NEW_ExternalStory_ID = "newExternalStory";
Tracker.GoogleDocResource = Class.create(BaseDomain, {initialize: function(json) {
        this.events = new EventChannelRegistry(this, "resourceUpdate");
        this.resourceType = Resource.GOOGLE_DOC_TYPE;
        this.id = json['id'];
        this.resourceId = json['resource_id'];
        this.googleId = json['google_id'];
        this.alternateLink = json['alternate_link'];
        this.title = json['title'];
        this.kind = json['kind'];
        this.personId = json['person_id'] || app.project.getSigninMemberId();
        this.hitchableType = json['hitchable_type'];
        this.hitchableId = json['hitchable_id'];
        this.createdAt = json['created_at'] ? new Date(json['created_at']) : Clock.now();
    },toJSONHash: function() {
        return {"id": this.id,"resource_id": this.resourceId,"google_id": this.googleId,"alternate_link": this.alternateLink,"title": this.title,"kind": this.kind,"hitchable_type": this.hitchableType,"hitchable_id": this.hitchableId,"created_at": this.createdAt ? this.createdAt.getTime() : null,"person_id": this.personId}
    },getHitchable: function getHitchable() {
        if (this.hitchableId) {
            return app.project.getTempComment(this.hitchableId);
        } else {
            throw "no comment id";
        }
    },getFilename: function() {
        return this.title;
    },getId: function() {
        return this.id;
    },getUploader: function() {
        return app.project.members.findById(this.personId);
    },getDownloadUrl: function() {
        return this.id ? '/google_doc_resources/' + this.id : false;
    },isGoogleDocResource: function() {
        return true;
    },isUploaded: function() {
        return true;
    },getEllipsifiedFilename: function(numChars) {
        return this.title.ellipsify(numChars || 27);
    },getFileExtension: function() {
        return Tracker.GoogleDocResource.FILE_EXTENSIONS[this.kind.replace('/', '_')];
    }});
Tracker.GoogleDocResource.FILE_EXTENSIONS = {document: 'doc',pdf: 'pdf',spreadsheet: 'ss',presentation: 'pres',image_png: 'png',image_jpeg: 'jpg',image_jpg: 'jpg',image_gif: 'gif',image: 'img',form: 'form',folder: 'fldr',drawing: 'draw',collection: 'coll'}
HistoryItem = Class.create();
HistoryItem.TIME_RANGE = 60 * 15 * 1000;
HistoryItem.prototype = {initialize: function(project, initialCommand) {
        this.project = project;
        this.commands = [];
        this.commands.push(initialCommand);
        this.initialCommand = initialCommand;
        this.events = new EventChannelRegistry(this, "addCommand");
        this.setStartDate(initialCommand.getOccurredAt());
        this.id = initialCommand.getVersion();
    },getAffectedTopLevelElements: function() {
        return this.initialCommand.getAffectedTopLevelElements();
    },canRevealTopLevelElements: function() {
        return this.initialCommand.canRevealTopLevelElements();
    },getCommands: function() {
        return this.commands;
    },timeAgo: function() {
        return Date.naturalNameForRange(this.getInitialCommand().getOccurredAt(), this.startDate);
    },getInitialCommand: function() {
        return this.initialCommand;
    },addCommand: function(command) {
        this.commands.push(command);
        this.setStartDate(command.getOccurredAt());
        this.events.fire("addCommand", command);
    },setStartDate: function(startDate) {
        this.startDate = startDate;
        this.endDate = new Date(this.startDate.getTime() + HistoryItem.TIME_RANGE);
    },shouldContain: function(command) {
        try {
            if (!this.initialCommand.hasSameAffectedElementsAs(command) || !this.withinRange(command.getOccurredAt())) {
                return false;
            }
        } catch (exception) {
            app.sendClientErrorToServer("historyItem.shouldContain threw exception", exception);
            return false;
        }
        return true;
    },withinRange: function(date) {
        if (Date.equals(date, this.startDate)) {
            return true;
        }
        if (Date.equals(date, this.endDate)) {
            return true;
        }
        return date.isBetween(this.startDate, this.endDate);
    }};
Integration = Class.create();
Integration.NEW_Integration_ID = "newIntegration";
Integration.GET_SATISFACTION_TYPE = 'get_satisfaction';
Integration.prototype = {initialize: function(json) {
        this._id = json.id || null;
        this._name = json.name || '';
        this._fieldLabel = json.field_label || '';
        this._baseUrl = json.base_url || '';
        this._synchronized = json.synchronized || false;
        this._can_import = json.can_import || false;
        this._isOther = json.is_other == null ? true : json.is_other;
        this._integrationType = json.integration_type || '';
        this._storyName = json.story_name || '';
        this._htmlId = json.html_id || '';
        this._active = json.active || false;
        this._canChangeExternalStoryId = json.can_change_external_story_id || false;
    },getId: function() {
        return this._id;
    },isActive: function() {
        return this._active;
    },getHtmlId: function() {
        return this._htmlId;
    },canImport: function() {
        return this._can_import;
    },canChangeExternalStoryId: function() {
        return this._canChangeExternalStoryId;
    },getIntegrationType: function() {
        return this._integrationType;
    },getStoryName: function() {
        return this._storyName;
    },getName: function() {
        return this._name;
    },getFieldLabel: function() {
        if (this._integrationType == Integration.GET_SATISFACTION_TYPE) {
            return this._fieldLabel.gsub(' ID', '');
        }
        return this._fieldLabel;
    },getBaseUrl: function() {
        return this._baseUrl;
    },getExternalUrl: function(externalId) {
        return this.getBaseUrl() + externalId;
    },isSynchronized: function() {
        return this._synchronized;
    },isOther: function() {
        return this._isOther;
    }};
Iteration = Class.create(BaseDomain, {initialize: function(params, number, project) {
        this._project = project;
        this._iterationSettings = this._project.getIterationSettings(number);
        this._start = new Date(params.start);
        this._finish = new Date(params.finish || this._start.plusDays(this._iterationSettings.getIterationLength() * 7));
        this._velocity = new Velocity(params.velocity || {});
        this._stories = params.stories || [];
        this._number = number;
        this._carryover = params.carryover || 0;
        this.setCapacity(params.capacity || 0);
    },isTeamStrengthOverridden: function() {
        return this.getTeamStrength() != 1.0;
    },getTeamStrength: function() {
        return this._iterationSettings.getTeamStrength();
    },setTeamStrength: function(percentage) {
        this._iterationSettings.setTeamStrength(percentage);
        this._project.invalidateCachesAndNotify();
    },setCapacity: function(capacity) {
        this._capacity = Math.roundNumber(capacity * this.getTeamStrength() * this.getIterationLengthAdjustment() + this._carryover, 1);
    },getCapacity: function() {
        return this._capacity;
    },getStart: function() {
        return this._start;
    },getFinish: function() {
        return this._finish;
    },getProject: function() {
        return this._project;
    },getIterationLength: function() {
        return this._iterationSettings.getIterationLength();
    },setIterationLength: function(percentage) {
        this._iterationSettings.setIterationLength(percentage);
        this._project.invalidateCachesAndNotify();
    },hasOverridenIterationLength: function() {
        return this._iterationSettings.hasOverridenIterationLength();
    },getIterationLengthAdjustment: function() {
        return this.getIterationLength() / this._project.getIterationLength();
    },isPlanned: function() {
        return this._iterationSettings.isPlanned();
    },getVelocity: function() {
        return this._velocity;
    },getStories: function() {
        return this._stories;
    },getStoryIds: function() {
        return this._stories.collect(function(story) {
            return story.id();
        });
    },getNumber: function() {
        return this._number;
    },getName: function() {
        return "Iteration " + this._number;
    },id: function() {
        return "iteration" + this._number;
    },contains: function(targetStory) {
        for (var i = 0; i < this._stories.length; ++i) {
            if (this._stories[i].id() == targetStory.id()) {
                return true;
            }
        }
        return false;
    },containsDeadline: function(deadline) {
        return deadline.getDate().isBetween(this._start, this._finish);
    },containsDate: function(date) {
        return date.isBetween(this._start, this._finish);
    },toJSONHash: function() {
        return {number: this._number,start: this._start.getTime(),finish: this._finish.getTime(),velocity: this._velocity.toJSONHash(),story_ids: this.getStoryIds()};
    },toJSON: function() {
        return Object.toJSON(this.toJSONHash());
    },remove: function(story) {
        for (var i = 0; i < this._stories.length; ++i) {
            if (this._stories[i].id() == story.id()) {
                this._stories.splice(i, 1);
                return;
            }
        }
        throw "could not find story to remove: " + story;
    },canFit: function(story) {
        if (story.isAccepted()) {
            return story.getAcceptedAt() < this._finish;
        } else if (this.isPast()) {
            return false;
        } else if (story.isReleaseMarker()) {
            return true;
        } else if (this.isCurrent() && story.isActive()) {
            return true;
        } else {
            return (this._capacity >= this._velocity.getTotal() + story.getEstimate());
        }
    },getCarryoverForNextIteration: function() {
        return Math.max(0, this._capacity - this._velocity.getTotal());
    },isPast: function() {
        return (this._finish <= DateUtils.now());
    },isCurrent: function() {
        return DateUtils.now().isBetween(this._start, this._finish);
    },isNext: function() {
        return DateUtils.now().plusMsec(this.iterationLength()).isBetween(this._start, this._finish);
    },isAfterNext: function() {
        return DateUtils.now().plusMsec(2 * this.iterationLength()) < this._finish;
    },iterationLength: function() {
        return this._finish.getTime() - this._start.getTime();
    },fillFrom: function(stories) {
        while (!stories.isEmpty() && (this.canFit(stories[0]))) {
            var story = stories.shift();
            this._addStory(story);
        }
    },fillWithPlannedStories: function(stories) {
        while (!stories.isEmpty() && (stories[0].getPlannedIterationNumber() == this.getNumber())) {
            this._addStory(stories.shift());
        }
    },_addStory: function(story) {
        this._velocity.add(story);
        this._stories.push(story);
    },insertStoryBefore: function(newStory, beforeStory) {
        if (this.contains(newStory)) {
            throw "could not insert existing story: " + newStory;
        }
        if (beforeStory == Project.PAST_FINAL_STORY) {
            this._stories.push(newStory);
            return;
        }
        for (var i = 0; i < this._stories.length; ++i) {
            if (this._stories[i].id() == beforeStory.id()) {
                this._stories.splice(i, 0, newStory);
                return;
            }
        }
        throw "could not find story to insert before: " + beforeStory;
    },isEmpty: function() {
        return this._stories.isEmpty();
    },getFirstStory: function() {
        return this._stories.first();
    },getLastStory: function() {
        return this._stories.last();
    },getCompletedBefore: function(date) {
        var total = 0;
        for (var i = 0; i < this._stories.length; i++) {
            var story = this._stories[i];
            if (this._project.allowsEstimationOf(story.getStoryType())) {
                if (!story.isAccepted()) {
                    return total;
                } else {
                    if (story.getAcceptedAt() < date) {
                        total += story.getEstimate();
                    } else {
                        return total;
                    }
                }
            }
        }
        return total;
    },dispose: function() {
    },statusChange: function() {
    },getStoriesAndDeadlines: function() {
        return this._stories.concat(this._project.getDeadlinesBetween(this._start, this._finish));
    },nextIteration: function() {
        var result = this._project.getIterationByNumber(this.getNumber() + 1);
        return result ? result : null;
    },getFeatureCount: function() {
        return this._getStoryCountForType(StoryType.FEATURE);
    },getChoreCount: function() {
        return this._getStoryCountForType(StoryType.CHORE);
    },getBugCount: function() {
        return this._getStoryCountForType(StoryType.BUG);
    },_getStoryCountForType: function(aType) {
        var result = 0;
        this.getStories().each(function(story) {
            if (story.getStoryType() == aType) {
                result++;
            }
        });
        return result;
    }});
Iteration.iterationNumberFromId = function(id) {
    return parseInt(id.substring("iteration".length));
};
IterationSettings = Class.create(BaseDomain, {initialize: function(project, json) {
        this.project = project;
        this.iterationNumber = json.iteration_number;
        this.planned = json.planned || false;
        this.teamStrength = json.team_strength == undefined ? 1 : json.team_strength;
        this.iterationLength = json.iteration_length == undefined ? -1 : json.iteration_length;
    },isPlanned: function() {
        return this.planned;
    },getTeamStrength: function() {
        return this.teamStrength;
    },getIterationLength: function() {
        return this.hasOverridenIterationLength() ? this.iterationLength : this.project.getIterationLength();
    },hasOverridenIterationLength: function() {
        return this.iterationLength > -1;
    },markAsPlanned: function() {
        this.planned = true;
    },markAsNotPlanned: function() {
        this.planned = false;
    },setTeamStrength: function(teamStrength) {
        this.teamStrength = teamStrength == null ? 1 : teamStrength;
    },setIterationLength: function(weeks) {
        this.iterationLength = weeks;
    }});
IterationsBuilder = Class.create();
IterationsBuilder.prototype = {initialize: function(project, stories) {
        this.project = project;
        this.stories = stories;
        this.current = null;
        this.iterations = [];
        this.done = [];
        this.backlog = [];
        this.projectedCapacity = null;
    },build: function() {
        this.iterationNumber = 1;
        this.iterationStart = this.project.getStartDate();
        this.iterationCarryover = 0;
        while (!this.stories.isEmpty()) {
            this._buildIteration();
        }
    },_createIteration: function() {
        var iterationParams = {start: this.iterationStart,carryover: this.iterationCarryover};
        return new Iteration(iterationParams, this.iterationNumber, this.project);
    },_buildIteration: function() {
        var iteration = this._createIteration();
        this.iterationNumber += 1;
        if (!iteration.isPast()) {
            iteration.setCapacity(this.getProjectedCapacity());
        }
        if (iteration.isCurrent() && iteration.isPlanned()) {
            iteration.fillWithPlannedStories(this.stories);
            iteration.setCapacity(0);
        } else {
            iteration.fillFrom(this.stories);
        }
        this.iterations.push(iteration);
        if (iteration.isPast()) {
            this.done.push(iteration);
        } else if (iteration.isCurrent()) {
            this.current = iteration;
        } else {
            this.backlog.push(iteration);
        }
        this.iterationCarryover = iteration.getCarryoverForNextIteration();
        this.iterationStart = iteration.getFinish();
    },getProjectedCapacity: function() {
        if (this.projectedCapacity == null) {
            this.projectedCapacity = this.project.getTheory().deriveFrom(this.iterations);
        }
        return this.projectedCapacity;
    }};
LabelRepository = Class.create({initialize: function(json, project) {
        this._labels = $H({});
        this.project = project;
        var labels_json = json.labels || [];
        for (var i = 0; i < labels_json.length; i++) {
            this.addLabel(labels_json[i]);
        }
        this.project.events.subscribe(this, "epicUpdate");
    },onEpicUpdate: function(project, epic) {
        this.addLabel(epic.label());
        for (var key in this._labels.toObject()) {
            this._labels.set(key, this._isEpicLabel(key));
        }
    },addLabel: function(label_name) {
        var stripped = LabelRepository.normalizedLabel(label_name);
        if (stripped != "" && !this._labels.member(stripped)) {
            this._labels.set(stripped, this._isEpicLabel(stripped));
        }
        return stripped;
    },addLabels: function(labels_array) {
        var addedLabels = [];
        if (labels_array != null) {
            for (var i = 0; i < labels_array.length; i++) {
                addedLabels.push(this.addLabel(labels_array[i]));
            }
        }
        return addedLabels;
    },removeLabel: function(label_name) {
        var stripped = LabelRepository.normalizedLabel(label_name);
        this._labels.unset(stripped);
    },isEpicLabel: function(label_name) {
        var stripped = LabelRepository.normalizedLabel(label_name);
        return this._labels.get(stripped) || false;
    },getEpicLabels: function() {
        var epicLabels = [];
        for (var key in this._labels.toObject()) {
            if (this._labels.get(key)) {
                epicLabels.push(key);
            }
        }
        return StringUtils.sortIgnoreCase(epicLabels);
    },getNonEpicLabels: function(labelsToInclude) {
        labelsToInclude = labelsToInclude || [];
        var nonEpicLabels = [];
        for (var key in this._labels.toObject()) {
            if (!this._labels.get(key)) {
                nonEpicLabels.push(key);
            }
        }
        return StringUtils.sortIgnoreCase(nonEpicLabels.concat(labelsToInclude));
    },getSortedLabels: function() {
        return StringUtils.sortIgnoreCase(this._labels.keys());
    },getLabels: function() {
        return this.getSortedLabels();
    },count: function() {
        return this._labels.size();
    },toString: function() {
        return this.getSortedLabels().join(",");
    },_isEpicLabel: function(normalizedLabel) {
        return this.project.epics.any(function(epic) {
            return epic.label() == normalizedLabel
        });
    }});
LabelRepository.normalizedLabel = function(label) {
    return _(label || '').trim().replace(/\,/g, '').toLowerCase();
};
LabelSet = Class.create();
LabelSet.prototype = {initialize: function(json) {
        this._labels = [];
        var labels_json = json.labels || [];
        for (var i = 0; i < labels_json.length; i++) {
            this.addLabel(labels_json[i]);
        }
    },addLabel: function(label_name) {
        var stripped = LabelRepository.normalizedLabel(label_name);
        if (stripped == "") {
            return;
        }
        if (!this._labels.contains(stripped)) {
            this._labels.push(stripped);
        }
    },addLabels: function(labels_array) {
        if (labels_array == null) {
            return;
        }
        for (var i = 0; i < labels_array.length; i++) {
            this.addLabel(labels_array[i]);
        }
    },removeLabel: function(name) {
        var normalizedName = LabelRepository.normalizedLabel(name);
        this._labels = $A(this._labels).without(normalizedName);
    },getSortedLabels: function() {
        return StringUtils.sortIgnoreCase(this._labels);
    },getLabels: function() {
        return this.getSortedLabels();
    },getLabelsArray: function getLabelsArray() {
        return this._labels;
    },toString: function() {
        return this.getSortedLabels().join(",");
    },containsNormalized: function containsNormalized(normalizedName) {
        return this._labels.indexOf(normalizedName) > -1;
    },contains: function(name) {
        return this.containsNormalized(LabelRepository.normalizedLabel(name));
    }};
Member = Class.create(BaseDomain, {initialize: function(json) {
        this.id = _.isUndefined(json.id) ? null : json.id;
        this.initials = json.initials || null;
        this.name = json.name || null;
        this.readOnly = json.read_only || false;
        this.inactive = json.inactive || false;
        this.guest = json.guest || false;
        this.owner = json.owner || false;
        this.displayName = this.name;
        if (this.inactive)
            this.displayName = this.displayName + " <inactive>"
    },getId: function() {
        return this.id;
    },getInitials: function() {
        return this.initials;
    },getName: function() {
        return this.name;
    },getDisplayName: function() {
        return this.displayName;
    },isReadOnly: function() {
        return this.readOnly;
    },isInactive: function() {
        return this.inactive;
    },isGuest: function() {
        return this.guest;
    },isOwner: function() {
        return this.owner;
    },canDeleteComment: function(comment) {
        if (this.readOnly || this.guest || this.inactive) {
            return false;
        } else if (this.owner) {
            return true;
        } else {
            return this.id == comment.authorId;
        }
    }});
Member.UNKNOWN = -1;
Member.UNKNOWN_MEMBER = new Member({id: Member.UNKNOWN,initials: "??",name: "Unknown",read_only: true});
Members = Class.create();
Members.sort = function(members) {
    return members.sort(function(a, b) {
        var aName = a.name.toLowerCase();
        var bName = b.name.toLowerCase();
        if (aName < bName) {
            return -1;
        } else if (aName > bName) {
            return 1;
        } else {
            return 0;
        }
    });
}
Members.prototype = {initialize: function(memberMap) {
        this.map = memberMap;
    },findById: function(id) {
        return this.map[id];
    },findByName: function(name) {
        var member;
        for (var key in this.map) {
            member = this.map[key];
            if (member.getName() == name) {
                return member;
            }
        }
    },add: function(member) {
        this.map[member.getId()] = member;
    },setSigninMemberId: function(id) {
        this.signinMemberId = id;
    },getSigninMemberId: function() {
        return this.signinMemberId;
    },getSigninMember: function() {
        return this.findById(this.signinMemberId);
    },all: function() {
        return Members.sort(Object.values(this.map));
    },allActiveCollaborators: function() {
        return $A(this.all()).reject(function(member) {
            return (member.isReadOnly() || member.isInactive());
        })
    },length: function() {
        return Object.values(this.map).length;
    }};
PointScale = Class.create({getIndexOf: function getIndexOf(points) {
        if (points == -1) {
            return -1;
        }
        var offset = $A(this.getPossiblePoints()).indexOf(points);
        if (offset == -1) {
            return null;
        }
        return offset;
    },isCustom: function() {
        return false;
    }});
PointScale.forScale = function(pointScale, isCustom) {
    if (isCustom) {
        return new CustomPointScale(pointScale);
    }
    if (pointScale == "0,1,2,4,8") {
        return new PowersOf2PointScale();
    } else if (pointScale == "0,1,2,3,5,8") {
        return new FibonacciPointScale();
    } else if (pointScale == "0,1,2,3") {
        return new LinearPointScale();
    } else {
        return new CustomPointScale(pointScale);
    }
};
LinearPointScale = Class.create(PointScale, {initialize: function() {
    },getPossiblePoints: function() {
        return [0, 1, 2, 3];
    },getName: function() {
        return "linear";
    },getScale: function() {
        return "0,1,2,3";
    }});
PowersOf2PointScale = Class.create(PointScale, {initialize: function() {
    },getPossiblePoints: function() {
        return [0, 1, 2, 4, 8];
    },getName: function() {
        return "powers_of_2";
    },getScale: function() {
        return "0,1,2,4,8";
    }});
FibonacciPointScale = Class.create(PointScale, {initialize: function() {
    },getPossiblePoints: function() {
        return [0, 1, 2, 3, 5, 8];
    },getName: function() {
        return "fibonacci";
    },getScale: function() {
        return "0,1,2,3,5,8";
    }});
CustomPointScale = Class.create(PointScale, {initialize: function(pointScaleString) {
        this._pointScale = pointScaleString;
        this._possiblePoints = pointScaleString.split(',');
        for (var i = 0; i < this._possiblePoints.length; i++) {
            this._possiblePoints[i] = parseInt(this._possiblePoints[i]);
        }
    },getPossiblePoints: function() {
        return this._possiblePoints;
    },getName: function() {
        return "custom";
    },getScale: function() {
        return this._pointScale;
    },isCustom: function() {
        return true;
    }});
Project = Class.create(BaseDomain, {initialize: function(json) {
        this._currentMaxPseudopointsPerEpic = null;
        this._theory = TheoryFactory.buildFromJson(json.theory);
        this.config = new Config(json.config || {});
        if (json.settings_start_time && json.settings_start_time > 0) {
            this._settingStartTime = new Date(json.settings_start_time);
        }
        if (json.unloaded_accepted_story_time && json.unloaded_accepted_story_time > 0) {
            this._firstAcceptedStartTime = new Date(json.unloaded_accepted_story_time);
        }
        this.id = this.getOrNull(json.id);
        this.name = this.getOrNull(json.name);
        this._version = this.getOrNull(json.version);
        this._commandHistory = [];
        this._version = json.version || null;
        this._setupIterationSettings(json);
        this._setupIntegrations(json);
        this._readOnly = json.read_only;
        this._enableTasks = json.enable_tasks;
        this._numberOfDoneIterationsToShow = json.number_of_done_iterations_to_show;
        this._enablePlannedMode = json.enable_planned_mode;
        this._estimatableStoryTypes = [StoryType.FEATURE];
        if (json["bugs_and_chores_are_estimatable"]) {
            this._estimatableStoryTypes.push(StoryType.CHORE);
            this._estimatableStoryTypes.push(StoryType.BUG);
        }
        this._allowsAttachments = this.getOrDefault(json.allow_attachments, false);
        this._epicsEnabled = this.getOrDefault(json.epics_enabled, false);
        this._historicalReportingEnabled = this.getOrDefault(json.historical_reporting_enabled, false);
        this._hasGoogleDomain = this.getOrDefault(json.has_google_domain, false);
        this._weekStartDay = this.getOrDefault(json.week_start_day, 1);
        this.timeZone = json.time_zone;
        this._iterationLength = this.getOrNull(json.iteration_length);
        this.commandQueue = new CommandQueue(new ServerProxy(), this.getVersion.bind(this), this.updateHistory.bind(this), this);
        this.events = new EventChannelRegistry(this, "update", "historyUpdate", "addStory", "removeStory", "epicUpdate", "attachmentUpdate", "updateAffectingEpicSize");
        this.onStorySelectionUpdateEvent = new EventChannel("storySelectionUpdate", this);
        this._setupMembers(json);
        this.resources = new Resources(json.resources, this);
        var pointScaleName = json.point_scale || new LinearPointScale().getScale();
        this._pointScaleIsCustom = json.point_scale_is_custom || false;
        this._pointScale = PointScale.forScale(pointScaleName, this._pointScaleIsCustom);
        this.setEpics(json.epics);
        this.labelRepository = new LabelRepository(json, this);
        this._setupStories(json);
        this._epicPointCache = {};
        this._epicCompletionDateCache = {};
        this._epicDoneStateCache = {};
        this._invalidateCaches(false);
        this._selectedModels = [];
        this._nextTempStoryId = DateUtils.now().getTime();
        this._tempComments = {};
        this._lastSelectedModel = null;
        this.cacheEpicStories();
        this.events.subscribe(this, "updateAffectingEpicSize");
    },_setupIntegrations: function(json) {
        this._integrations = {};
        if (json.integrations) {
            for (var i = 0; i < json.integrations.length; i++) {
                var integration = json.integrations[i];
                this._integrations[integration.id] = new Integration(integration);
            }
        }
    },_setupIterationSettings: function(json) {
        this._iterationSettings = {};
        if (json.iteration_settings) {
            for (var i = 0; i < json.iteration_settings.length; i++) {
                var iterationSetting = json.iteration_settings[i];
                this._iterationSettings[iterationSetting.iteration_number] = new IterationSettings(this, iterationSetting);
            }
        }
    },_setupMembers: function(json) {
        var memberMap = {};
        for (var memberId in json.members) {
            memberMap[memberId] = new Member(json.members[memberId]);
        }
        this.members = new Members(memberMap);
    },_setupStories: function(json) {
        this._storyArray = [];
        for (var i = 0; i < json.stories.length; i++) {
            var story = new Story(json.stories[i], this);
            this._storyArray.push(story);
            this._subscribeToStory(story);
        }
    },setEpics: function(epics) {
        var self = this;
        this.epics = new Collection({project: this,itemClass: Epic,json: epics});
    },getType: function() {
        return "project";
    },getNextTempId: function() {
        return new UUID().toString();
    },getNextTempStoryId: function() {
        return this._nextTempStoryId++;
    },getId: function() {
        return this.id;
    },_subscribeToStory: function(story) {
        story.events.subscribe(this, "updateAffectingProject");
    },_unsubscribeFromStory: function(story) {
        story.events.unsubscribe(this, "updateAffectingProject");
    },_calculateIterations: function() {
        var iterationsBuilder = this._createIterationsBuilder(this, this.getStories().select(Project.SCHEDULED_FILTER));
        this._currentIteration = iterationsBuilder.current;
        this._iterations = iterationsBuilder.iterations;
        this._doneIterations = iterationsBuilder.done;
        this._backlogIterations = iterationsBuilder.backlog;
        this._projectedCapacity = iterationsBuilder.getProjectedCapacity();
    },_createIterationsBuilder: function(project, stories) {
        var builder = new IterationsBuilder(project, stories);
        builder.build();
        return builder;
    },getProjectedCapacity: function() {
        if (this._iterations == null) {
            this._calculateIterations();
        }
        return this._projectedCapacity;
    },_invalidateIterations: function(retainExpandedStates) {
        if (this._iterations) {
            for (var i = 0; i < this._iterations.length; i++) {
                this._iterations[i].dispose();
            }
        }
        if (this._iterations) {
            this._previouslyCalculatedIterations = retainExpandedStates ? this._iterations : null;
        }
        this._iterations = null;
        this._doneIterations = null;
        this._currentIteration = null;
        this._backlogIterations = null;
    },_calculateIterationsIfNecessary: function() {
        if (this._iterations == null) {
            this._calculateIterations();
        }
    },getIterations: function() {
        this._calculateIterationsIfNecessary();
        return this._iterations;
    },getIterationLength: function() {
        return this._iterationLength;
    },getWeekStartDay: function() {
        return this._weekStartDay;
    },getIterationByNumber: function(number) {
        return this.getIterations()[number - 1];
    },getNextStoryStartingIn: function(iteration) {
        var story = iteration.getFirstStory();
        if (story) {
            return story;
        }
        var iterations = this.getIterations();
        if (iterations && (iterations.length > 0) && iterations.last().getNumber() > iteration.getNumber()) {
            return this.getNextStoryStartingIn(this.getIterationByNumber(iteration.getNumber() + 1));
        }
        return Project.PAST_FINAL_STORY
    },hasAllIterations: function() {
        return this._numberOfDoneIterationsToShow == null;
    },getDoneIterations: function() {
        this._calculateIterationsIfNecessary();
        return this._doneIterations;
    },getVisibleDoneIterations: function() {
        var doneIterations = this.getDoneIterations();
        if (doneIterations && this._numberOfDoneIterationsToShow) {
            return doneIterations.slice(0 - this._numberOfDoneIterationsToShow);
        } else {
            return doneIterations;
        }
    },getFirstVisibleIterationStartDate: function() {
        var doneIterations = this.getVisibleDoneIterations();
        return doneIterations.length >= 1 ? doneIterations[0].getStart() : this.getStartDate();
    },getBacklogIterations: function() {
        this._calculateIterationsIfNecessary();
        return this._backlogIterations;
    },getHistoryForStory: function(story, onDataLoadCallback) {
        this.commandQueue.enqueue(new GetHistoryForStory(this, story.id(), onDataLoadCallback));
    },getHistoryForEpic: function(epic, onDataLoadCallback) {
        this.commandQueue.enqueue(new GetHistoryForStory(this, -epic.id(), onDataLoadCallback));
    },getCurrentIteration: function() {
        this._calculateIterationsIfNecessary();
        return this._currentIteration;
    },getIterationContainingStory: function(story) {
        if (story && story.getType() == 'story') {
            var iterations = this.getIterations();
            for (var i = 0; i < iterations.length; i++) {
                var iteration = iterations[i];
                if (iteration.contains(story)) {
                    return iteration;
                }
            }
        }
        return null;
    },isStoryInDoneIteration: function(story) {
        return story && story.isAccepted() && story.getAcceptedAt() < this.getCurrentIteration().getStart();
    },getMember: function(memberId) {
        return this.members.findById(memberId);
    },getIterationContainingDeadline: function(deadline) {
        return this.getIterationContainingDate(deadline.getDate());
    },getIterationContainingDate: function(date) {
        var iterations = this.getIterations();
        for (var i = 0; i < iterations.length; i++) {
            var iteration = iterations[i];
            if (iteration.containsDate(date)) {
                return iteration;
            }
        }
        return null;
    },getPreviousIteration: function(iteration) {
        return this.getIterationByNumber(iteration.getNumber() - 1);
    },getReleaseMarkers: function() {
        return this.findStoriesMatching(Project.RELEASES_FILTER);
    },getUnscheduledStories: function() {
        return this.findStoriesMatching(Project.UNSCHEDULED_FILTER);
    },getScheduledStories: function() {
        return this.findStoriesMatching(Project.SCHEDULED_FILTER);
    },getUnacceptedLabelCounts: function() {
        var labelCounts = {};
        this.getLabelNames().each(function(label) {
            labelCounts[label] = 0;
        });
        var len = this._storyArray.length;
        for (var i = 0; i < len; ++i) {
            var story = this._storyArray[i];
            if (!story.isAccepted()) {
                var labels = story.getLabels();
                for (var k = 0; k < labels.length; k++) {
                    var label = labels[k];
                    labelCounts[label] = labelCounts[label] + 1;
                }
            }
        }
        return labelCounts;
    },getStoryCount: function getStoryCount() {
        return this._storyArray.length;
    },findStoriesMatching: function(filter) {
        return this._storyArray.select(filter);
    },findStoryMatching: function(filter) {
        return this._storyArray.detect(filter);
    },findByTypeAndId: function findByTypeAndId(type, id) {
        if (type == null) {
            return null;
        }
        switch (type.toLowerCase()) {
            case "story":
                return this.getStoryById(id);
            case "epic":
                return this.epics.findById(id);
            default:
                return null;
        }
    },getName: function() {
        return this.name;
    },getTimeZone: function() {
        return this.timeZone;
    },getStartDateBasedOnFirstAcceptedStory: function() {
        var firstLocalStory = (this._storyArray[0] && this._storyArray[0].isAccepted()) ? this._storyArray[0] : null;
        var firstStoryTime = DateUtils.earliestDate(this._firstAcceptedStartTime, firstLocalStory ? firstLocalStory.getAcceptedAt() : null);
        return firstStoryTime ? firstStoryTime.asDateWithZone(this.timeZone).asDateBeginningOfWeekWithStartDay(this.getWeekStartDay()) : null;
    },getStartDate: function() {
        return DateUtils.earliestDate(this._settingStartTime, this.getStartDateBasedOnFirstAcceptedStory()) || DateUtils.now().asDateWithZone(this.timeZone).asDateBeginningOfWeekWithStartDay(this.getWeekStartDay());
    },allowsAttachments: function() {
        return this._allowsAttachments;
    },epicsEnabled: function() {
        return this._epicsEnabled;
    },historicalReportingEnabled: function() {
        return this._historicalReportingEnabled;
    },hasGoogleDomain: function() {
        return this._hasGoogleDomain;
    },getTheory: function() {
        return this._theory;
    },setTheory: function(newTheory) {
        this._setTheory(newTheory);
        this._overriddenTheory = null;
        this.notify();
    },_setTheory: function(newTheory) {
        this._theory = newTheory;
        this._invalidateCaches(false);
    },isPlannedModeEnabled: function() {
        return this._enablePlannedMode;
    },isCurrentIterationPlanned: function() {
        var currentIter = this.getCurrentIteration();
        if (currentIter != null) {
            return this.isIterationPlanned(this.getCurrentIterationNumber());
        } else if (this.isFirstIteration() && this.getIterationSettings(1).isPlanned()) {
            return true;
        } else {
            return false;
        }
    },isFirstIteration: function() {
        return this.getCurrentIterationNumber() == 1;
    },getCurrentIterationNumber: function() {
        return (this._iterations == null || this._iterations.length == 0 || !this.getCurrentIteration()) ? 1 : this.getCurrentIteration().getNumber();
    },getCurrentIterationMode: function() {
        return this.isCurrentIterationPlanned() ? UpdateIterationMode.PLANNED : UpdateIterationMode.AUTO;
    },isIterationPlanned: function(iterationNumber) {
        return this.getIterationSettings(iterationNumber).isPlanned();
    },addPlannedIterationNumber: function(iterationNumber) {
        this.getIterationSettings(iterationNumber).markAsPlanned();
    },removePlannedIterationNumber: function(iterationNumber) {
        this.getIterationSettings(iterationNumber).markAsNotPlanned();
    },getIterationSettings: function(iterationNumber) {
        if (this._iterationSettings[iterationNumber] == undefined) {
            this._iterationSettings[iterationNumber] = new IterationSettings(this, {});
        }
        return this._iterationSettings[iterationNumber];
    },getIntegrations: function() {
        return $H(this._integrations).values();
    },getIntegration: function(id) {
        return this._integrations[id];
    },hasIntegrations: function() {
        return $H(this._integrations).size() > 0;
    },getDefaultIntegration: function() {
        var integration;
        for (var key in this._integrations) {
            integration = this._integrations[key];
            if (integration.isOther() && integration.canChangeExternalStoryId()) {
                return integration;
            }
        }
        return null;
    },overrideTheory: function(newTheory) {
        var originalTheory = this._theory;
        this._setTheory(newTheory);
        if (this._overriddenTheory == null) {
            this._overriddenTheory = originalTheory;
        }
        this.notify();
    },revertTheory: function() {
        this.setTheory(this._overriddenTheory);
    },isVelocityOverridden: function() {
        return (this._overriddenTheory != null);
    },_indexOfStoryId: function(storyId) {
        for (var i = 0; i < this._storyArray.length; i++) {
            if (this._storyArray[i].id() == storyId) {
                return i;
            }
        }
        return -1;
    },indexOfStory: function(story) {
        return this._storyArray.indexOf(story);
    },moveStoryBetween: function(story, firstStory, secondStory, disableNotify) {
        var notified = false;
        if (secondStory && this.canMoveStoryBefore(story, secondStory)) {
            notified = this.moveStoryBefore(story, secondStory, disableNotify);
        } else {
            notified = this.moveStoryAfter(story, firstStory, disableNotify);
        }
        if (!disableNotify && !notified) {
            this._invalidateCaches(true);
            this.notify();
        }
    },moveStoryBefore: function(story, beforeStory) {
        if (story == beforeStory) {
            return false;
        }
        if (story == this.findStoryBefore(beforeStory)) {
            return false;
        }
        if (beforeStory == Project.PAST_FINAL_STORY) {
            beforeStory = null;
        }
        this._quietlyRemoveStory(story);
        this._quietlyAddStory(story, beforeStory);
        return true;
    },canMoveStoryBefore: function(story, beforeStory) {
        var afterStory = this.findStoryBefore(beforeStory);
        return story.canMoveBetweenStories(afterStory, beforeStory);
    },canMoveStoryAfter: function(story, afterStory) {
        var beforeStory = this.findStoryAfter(afterStory);
        return story.canMoveBetweenStories(afterStory, beforeStory);
    },moveStoryAfter: function(story, afterStory) {
        if (story == afterStory) {
            return false;
        }
        if (story == this.findStoryAfter(afterStory)) {
            return false;
        }
        this._quietlyRemoveStory(story);
        this._quietlyAddStoryAfter(story, afterStory);
        return true;
    },moveStoryToEnd: function(story) {
        this.moveStoryBefore(story, Project.PAST_FINAL_STORY);
    },addStoryBefore: function(story, beforeStory) {
        this._quietlyAddStory(story, beforeStory);
        this._subscribeToStory(story);
        this.events.fire("addStory", story);
        this.onUpdateAffectingProject(story);
    },removeStory: function(story) {
        story.events.fire("beforeRemove");
        this._quietlyRemoveStory(story);
        this._unsubscribeFromStory(story);
        this.removeSelectedModel(story);
        this.notify();
    },applyLabelToSelectedStories: function(label) {
        var stories = this._selectedModels.select(function(story) {
            return !story.hasLabel(label);
        });
        if (stories.length > 0) {
            this.commandQueue.enqueue(new ApplyLabel(this, label, stories));
            this.labelRepository.addLabel(label);
            this.notify();
            return stories;
        } else {
            return false;
        }
    },removeLabelFromSelectedStories: function(label) {
        var stories = this._selectedModels.select(function(story) {
            return story.hasLabel(label);
        });
        if (stories.length > 0) {
            this.commandQueue.enqueue(new RemoveLabel(this, label, stories));
            this.notify();
            return stories;
        } else {
            return false;
        }
    },addSelectedModel: function(model) {
        if (!this.isSelectedModel(model) && this._canSelectModel(model)) {
            this._selectedModels.push(model);
            model.fireSelectionUpdateEvent();
            this._lastSelectedModel = model;
        }
        this.onStorySelectionUpdateEvent.fire();
    },removeSelectedModel: function(story) {
        var removeIndex = this._selectedModels.indexOf(story);
        if (removeIndex != -1) {
            this._selectedModels.splice(removeIndex, 1);
            story.fireSelectionUpdateEvent();
            this.onStorySelectionUpdateEvent.fire();
        }
        this._lastSelectedModel = null;
    },getLastSelectedModel: function() {
        return this._lastSelectedModel;
    },isSelectedModel: function(story) {
        return this._selectedModels.indexOf(story) != -1;
    },addSelectedModels: function(models) {
        for (var i = 0; i < models.length; i++) {
            var model = models[i];
            if (!this.isSelectedModel(model) && this._canSelectModel(model)) {
                this._selectedModels.push(model);
                model.fireSelectionUpdateEvent();
                this._lastSelectedModel = model;
            }
        }
        this.onStorySelectionUpdateEvent.fire();
    },removeSelectedModels: function(stories) {
        for (var i = 0; i < stories.length; i++) {
            var story = stories[i];
            var removeIndex = this._selectedModels.indexOf(story);
            if (removeIndex != -1) {
                this._selectedModels.splice(removeIndex, 1);
                story.fireSelectionUpdateEvent();
            }
            this._lastSelectedModel = null;
        }
        this.onStorySelectionUpdateEvent.fire();
    },hasSelectedModels: function() {
        return !!this._selectedModels.length;
    },removeAllSelectedModels: function() {
        this.removeSelectedModels(this.getSelectedModels().clone());
    },getSelectedModels: function(inStates) {
        var projectStories = this._storyArray;
        var selectedStoriesInOrder = [];
        if (inStates) {
            for (var i = 0, len = projectStories.length; i < len; i++) {
                if ((this._selectedModels.indexOf(projectStories[i]) != -1) && (inStates == undefined || inStates.indexOf(projectStories[i].getCurrentState()) != -1)) {
                    selectedStoriesInOrder.push(projectStories[i]);
                }
            }
            return selectedStoriesInOrder;
        } else {
            return _.clone(this._selectedModels).sort(function(a, b) {
                return a.compareTo(b);
            });
        }
    },getLabelsForSelectedModels: function() {
        var labelsHash = {};
        var selectedStories = this.getSelectedModels();
        j.each(selectedStories, function(index, selectedStory) {
            j.each(selectedStory.getLabels(), function(index, selectedStoryLabel) {
                labelsHash[selectedStoryLabel] = null;
            });
        });
        var labels = [];
        j.each(labelsHash, function(key, value) {
            labels.push(key)
        });
        return labels.sort();
    },getNonAcceptedSelectedStories: function(inStates) {
        return this.getSelectedModels([StoryState.DELIVERED, StoryState.REJECTED, StoryState.FINISHED, StoryState.STARTED, StoryState.UNSTARTED, StoryState.UNSCHEDULED, StoryState.UNSAVED]);
    },getNumberOfSelectedModels: function() {
        return this._selectedModels.length;
    },_canSelectModel: function(model) {
        return model instanceof Story;
    },archiveSelectedStories: function() {
        var stories = this.getSelectedModels();
        if (stories.length > 0) {
            this.commandQueue.enqueue(new MultiArchiveStory(this, stories));
        }
        this.removeAllSelectedModels();
    },deleteSelectedStories: function() {
        var stories = this.getSelectedModels();
        if (stories.length == 1) {
            this.commandQueue.enqueue(new Tracker.DeleteStory({id: stories[0].id()}, this));
        } else if (stories.length > 1) {
            this.commandQueue.enqueue(new MultiDeleteStory(this, stories));
        }
        this.removeAllSelectedModels();
    },_moveSelectedStories: function(endState, onBottom) {
        var stories = this.getSelectedModels();
        var story_ids_to_move = [];
        var length = stories.length;
        for (var i = 0; i < length; i++) {
            var story = stories[i];
            if (story.isUnstarted() || story.isUnscheduled() || story.isActive()) {
                this.removeSelectedModel(story);
                story_ids_to_move.push(story.id());
            }
        }
        if (story_ids_to_move.length > 0) {
            this.commandQueue.enqueue(new Tracker.MoveStory({story_ids: story_ids_to_move,end_state: endState.getName(),position: onBottom ? Tracker.MoveStory.BOTTOM : Tracker.MoveStory.TOP}, this));
        }
    },moveSelectedStoriesToIcebox: function(onBottom) {
        this._moveSelectedStories(StoryState.UNSCHEDULED, onBottom);
    },moveSelectedStoriesToBacklog: function(onBottom) {
        this._moveSelectedStories(StoryState.UNSTARTED, onBottom);
    },_quietlyAddStory: function(story, beforeStory) {
        if (beforeStory == Project.PAST_FINAL_STORY || beforeStory == null) {
            this._storyArray.push(story);
        } else {
            var insertIndex = this.indexOfStory(beforeStory);
            if (insertIndex == -1) {
                throw new Error("no story id " + beforeStory.id());
            }
            this._storyArray.splice(insertIndex, 0, story);
        }
        this._invalidateCaches(true);
    },_quietlyAddStoryAfter: function(story, afterStory) {
        if (afterStory == null) {
            this._storyArray.unshift(story);
        } else {
            var insertIndex = this.indexOfStory(afterStory);
            if (insertIndex == -1) {
                throw new Error("no story id " + afterStory.id());
            }
            this._storyArray.splice(insertIndex + 1, 0, story);
        }
        this._invalidateCaches(true);
    },quietlyRemoveStories: function(stories) {
        var i = stories.length;
        while (i--) {
            this._quietlyRemoveStory(stories[i]);
        }
    },quietlyAddStories: function(stories, story, beforeOrAfter) {
        var insertIndex = this._storyArray.length;
        if (story != null) {
            insertIndex = this.indexOfStory(story);
            if (insertIndex == -1) {
                throw new Error("no story id " + story.id());
            }
            insertIndex = insertIndex + (beforeOrAfter == "after" ? 1 : 0);
        }
        var arguments = [insertIndex, 0].concat(stories);
        this._storyArray.splice.apply(this._storyArray, arguments);
        this._invalidateCaches(true);
    },_quietlyRemoveStory: function(story) {
        var removeIndex = this.indexOfStory(story);
        if (removeIndex == -1) {
            return;
        }
        this._storyArray.splice(removeIndex, 1);
        this._invalidateCaches(true);
    },newStory: function() {
        return new Story({id: Story.NEW_STORY_ID,name: "",description: "",estimate: Story.UNESTIMATED,story_type: StoryType.FEATURE,current_state: StoryState.UNSCHEDULED,owned_by_id: Member.UNKNOWN,requested_by_id: this.members.signinMemberId}, this);
    },setSigninMemberId: function(id) {
        this.members.setSigninMemberId(id);
    },getSigninMemberId: function() {
        return this.members.getSigninMemberId();
    },getSigninMember: function() {
        return this.members.getSigninMember();
    },isReadOnly: function() {
        return this._readOnly || this.getSigninMember().isReadOnly();
    },areTasksEnabled: function() {
        return this._enableTasks;
    },validate: function() {
    },isValid: function() {
        return this.getValidationErrors().length == 0;
    },getValidationErrors: function() {
        return [];
    },insertNewStoriesBefore: function() {
        var unscheduled = this.getUnscheduledStories();
        if (unscheduled.length == 0) {
            return Project.PAST_FINAL_STORY;
        }
        return unscheduled[0];
    },_lastIteration: function() {
        return this.getIterations()[this.getIterations().length - 1];
    },assignIdToStory: function(story, newId) {
        story.setId(newId);
        this.notify();
    },getStoryById: function(id) {
        if (id instanceof Array) {
            var result = [];
            var i = id.length;
            while (i--) {
                var story = this.getStoryById(id[i]);
                if (story) {
                    result.unshift(story);
                }
            }
            return result;
        } else {
            var index = this._indexOfStoryId(id);
            if (index == -1) {
                return null;
            }
            return this._storyArray[index];
        }
    },getResourceById: function(id) {
        return this.resources.findById(id);
    },getResources: function() {
        return this.resources.all();
    },getVersion: function() {
        return this._version;
    },setVersion: function(version) {
        this._version = version;
    },addTempComment: function(comment) {
        this._tempComments[comment.id] = comment;
    },getTempComment: function(id) {
        return this._tempComments[id];
    },updateHistory: function(command) {
        if (command.isMutator()) {
            if (command.showInHistory()) {
                this.events.fire("historyUpdate", command);
            }
        }
        return this._version;
    },initiateVersionCheck: function() {
        if (!this.commandQueue.isProcessing()) {
            this.commandQueue.enqueue(new CheckProjectVersion(this.id));
        }
    },_iterationFor: function(story) {
        if (story == Project.PAST_FINAL_STORY) {
            return this.getIterations()[this.getIterations().length - 1];
        }
        for (var i = 0; i < this.getIterations().length; ++i) {
            var iteration = this.getIterations()[i];
            if (iteration.contains(story)) {
                return iteration;
            }
        }
        throw "could not find iteration for: " + (story.toJSON ? story.toJSON() : Object.toJSON(story));
    },onUpdateAffectingProject: function(incomingModel) {
        this._invalidateCaches(true);
        this._updateLabels(incomingModel);
        this.notify();
    },addLabel: function(label) {
        return this.labelRepository.addLabel(label);
    },removeLabel: function(label) {
        this.labelRepository.removeLabel(label);
    },removeLabelIfUnused: function(label) {
        if (this.getStoriesWithLabel(label).length == 0 && this.getEpicsWithLabel(label).length == 0) {
            this.removeLabel(label);
        }
    },_updateLabels: function(incomingModel) {
        this.labelRepository.addLabels(incomingModel.getLabels());
    },_isPotentMove: function(currentIndex, i) {
        return currentIndex != i - 1;
    },invalidateCachesAndNotify: function() {
        this._invalidateCaches();
        this.notify();
    },notify: function() {
        this.onUpdateAffectingEpicSize();
        this.events.fire("update");
    },getEpics: function() {
        return this.epics.items();
    },copyCache: function(source, dest) {
        _(source).each(function(value, key) {
            dest[key] = value;
        });
    },onUpdateAffectingEpicSize: function onUpdateAffectingEpicSize() {
        var completionDateCache = {}, originalPointCache = {}, epicDoneStateCache = {};
        var originalMaxPseudopoints = this._currentMaxPseudopointsPerEpic;
        this._currentMaxPseudopointsPerEpic = null;
        this.copyCache(this._epicPointCache, originalPointCache);
        this.copyCache(this._epicCompletionDateCache, completionDateCache);
        this.copyCache(this._epicDoneStateCache, epicDoneStateCache);
        this.cacheEpicStories();
        this.getMaxPseudopointsPerEpic();
        var epics = this.getEpics();
        var fireOnAllEpics = (originalMaxPseudopoints != this._currentMaxPseudopointsPerEpic);
        for (var i = 0; i < epics.length; i++) {
            var epic = epics[i];
            var epicId = epic.id();
            this._epicCompletionDateCache[epicId] = epic.getCompletionDate();
            this._epicDoneStateCache[epicId] = [epic.isAccepted(), epic.isDone()];
            var pointsChanged = !_.isEqual(this._epicPointCache[epicId], originalPointCache[epicId]);
            var dateChanged = !_.isEqual(this._epicCompletionDateCache[epicId], completionDateCache[epicId]);
            var stateChanged = !_.isEqual(this._epicDoneStateCache[epicId], epicDoneStateCache[epicId]);
            if (dateChanged || stateChanged) {
                epic.events.fire('update');
            } else if (fireOnAllEpics || pointsChanged) {
                epic.events.fire('updatePointCounts');
            }
        }
    },cacheEpicStories: function() {
        var labelsToStories = {}, self = this, story, storyLabels;
        for (var i = 0; i < this._storyArray.length; i++) {
            story = this._storyArray[i];
            storyLabels = story._labelSet.getLabelsArray();
            for (var j = 0; j < storyLabels.length; j++) {
                var encodedLabel = this._encodeKey(storyLabels[j]);
                if (!labelsToStories[encodedLabel]) {
                    labelsToStories[encodedLabel] = [];
                }
                labelsToStories[encodedLabel].push(story);
            }
        }
        this.epics.each(function(epic) {
            epic.setStoriesCache(labelsToStories[self._encodeKey(epic.label())] || []);
        });
    },getMaxPseudopointsPerEpic: function() {
        if (this._currentMaxPseudopointsPerEpic) {
            return this._currentMaxPseudopointsPerEpic;
        }
        var maxPseudopoints = 0;
        var epics = this.epics.items();
        for (var i = 0; i < epics.length; i++) {
            var points = epics[i].getStoryPoints(true);
            var pseudopoints = 0;
            pseudopoints += points.accepted + points.active + points.unstarted + points.unscheduled;
            if (pseudopoints > maxPseudopoints) {
                maxPseudopoints = pseudopoints;
            }
            this._epicPointCache[epics[i].id()] = [points.accepted, points.active, points.unstarted, points.unscheduled]
        }
        this._currentMaxPseudopointsPerEpic = maxPseudopoints;
        return maxPseudopoints;
    },getEpicByName: function(name) {
        var epics = this.epics.items();
        for (var i = 0; i < epics.length; i++) {
            if (epics[i].name() == name) {
                return epics[i];
            }
        }
        return null;
    },getEpicById: function(id) {
        return this.epics.findById(id);
    },getEpicByLabel: function(label) {
        var normalizedLabel = LabelRepository.normalizedLabel(label);
        var epics = this.epics.items();
        for (var i = 0; i < epics.length; i++) {
            if (epics[i].label() == normalizedLabel) {
                return epics[i];
            }
        }
        return null;
    },getStories: function() {
        return this._storyArray.copy();
    },getNumberOfStories: function() {
        return this._storyArray.length;
    },storyIdsInOrder: function() {
        return this._storyArray.collect(function(s) {
            return s.id();
        });
    },lookupStoryByName: function(name) {
        return this._storyArray.detect(function(s) {
            return s.getName() == name;
        });
    },findStoryAfter: function(story) {
        var stories = this.getStories();
        return this._findStoryAfter(story, stories);
    },_findStoryAfter: function(story, stories) {
        var next = Project.PAST_FINAL_STORY;
        if (story == null) {
            return next;
        }
        var len = stories.length;
        var justFound = false;
        for (var i = 0; i < len; ++i) {
            if (justFound) {
                next = stories[i];
                break;
            }
            if (stories[i]._id == story._id) {
                justFound = true;
            }
        }
        return next;
    },findStoryBefore: function(story) {
        var stories = this.getStories();
        return this._findStoryBefore(story, stories);
    },_findStoryBefore: function _findStoryBefore(story, stories) {
        var previous = null;
        if (story == null) {
            return previous;
        }
        var len = stories.length;
        for (var i = 0; i < len; ++i) {
            if (stories[i]._id == story._id) {
                break;
            }
            previous = stories[i];
        }
        return previous;
    },moveToBottomOfBucket: function(story) {
        var bottomStory = this.findStoryAtBottomOfBucket(story.getBucket());
        if (bottomStory && bottomStory != story) {
            this.moveStoryAfter(story, bottomStory);
        } else {
            this.moveStoryBefore(story, this.findStoryAtTopOfBucket(story.getBucket() + 1));
        }
    },findStoryAtBottomOfBucket: function(targetBucket) {
        if (targetBucket == -1) {
            return null;
        }
        var reversedStories = this.getStories().reverse();
        var len = reversedStories.length;
        for (var i = 0; i < len; ++i) {
            var story = reversedStories[i];
            if (story.getBucket() <= targetBucket) {
                return story;
            }
        }
        if (targetBucket == Story.LOWEST_BUCKET) {
            return null;
        } else {
            reversedStories.pop()
        }
    },moveToTopOfBucket: function(story) {
        var topStory = this.findStoryAtTopOfBucket(story.getBucket());
        if (topStory && topStory != story) {
            this.moveStoryBefore(story, topStory);
        } else {
            this.moveStoryAfter(story, this.findStoryAtBottomOfBucket(story.getBucket() - 1));
        }
    },findStoryAtTopOfBucket: function(targetBucket) {
        var stories = this.getStories();
        var len = stories.length;
        for (var i = 0; i < len; ++i) {
            var story = stories[i];
            if (story.getBucket() >= targetBucket) {
                return story;
            }
        }
        return Project.PAST_FINAL_STORY;
    },getOpenBugCount: function() {
        return this._storyArray.select(function(story) {
            return story.getStoryType() == StoryType.BUG && !story.isAccepted()
        }).length;
    },getUnestimatedFeatureCount: function() {
        return this._storyArray.select(function(story) {
            return story.getStoryType() == StoryType.FEATURE && story.isUnestimated()
        }).length;
    },addEstimatableStoryType: function(storyType) {
        this._estimatableStoryTypes.push(storyType);
    },allowsEstimationOf: function(storyType) {
        return this._estimatableStoryTypes.contains(storyType);
    },getStoriesForSigninMember: function() {
        return this.findStoriesMatching(function(story) {
            if (story.isAccepted()) {
                return false;
            }
            return story.isOwnedBySigninMember() || (story.isRequestedBySigninMember() && story.isDelivered())
        });
    },getAcceptedStories: function() {
        return this.findStoriesMatching(function(story) {
            if (story.isAccepted()) {
                return true;
            }
        });
    },getStoriesWithLabel: function(label) {
        var normalizedLabel = LabelRepository.normalizedLabel(label);
        return this.findStoriesMatching(function(story) {
            return story.hasNormalizedLabel(normalizedLabel);
        });
    },getEpicsWithLabel: function(label) {
        return this.epics.select(function(epic) {
            return epic.hasLabel(label);
        });
    },updateStoriesWithLabel: function(label) {
        return this.findStoriesMatching(function(story) {
            if (story.hasLabel(label)) {
                story.events.fire("update");
                return true;
            }
            return false;
        });
    },_encodeKey: function encodeKey(label) {
        return "___tracker___" + label;
    },_invalidateCaches: function(retainIterationExpandedStates) {
        this._invalidateIterations(retainIterationExpandedStates);
        this._invalidateDeadlines();
    },_invalidateDeadlines: function() {
        this._deadlines = null;
    },getDeadlines: function() {
        if (this._deadlines == null) {
            var releases = this.findStoriesMatching(function(story) {
                return story.isReleaseMarker() && !story.isUnscheduled() && !story.isAccepted() && story.hasDeadline();
            });
            this._deadlines = [];
            for (var i = 0; i < releases.length; i++) {
                this._deadlines.push(new Deadline(releases[i], this));
            }
            this._deadlines.sort(function(deadline1, deadline2) {
                return deadline1.getDate() - deadline2.getDate();
            });
        }
        return this._deadlines;
    },getDeadlinesBetween: function(start, end) {
        var deadlines = this.getDeadlines();
        var result = [];
        for (var i = 0; i < deadlines.length; i++) {
            if (deadlines[i].getDate().isBetween(start, end)) {
                result.push(deadlines[i]);
            }
        }
        return result;
    },getDeadline: function(deadlineId) {
        var deadlines = this.getDeadlines();
        for (var i = 0; i < deadlines.length; i++) {
            if (deadlines[i].id() == deadlineId) {
                return deadlines[i];
            }
        }
        return null;
    },getPossiblePoints: function() {
        return this._pointScale.getPossiblePoints();
    },getPointScaleName: function() {
        return this._pointScale.getName();
    },getPointScale: function() {
        return this._pointScale;
    },getFirstStory: function() {
        var orderedStories = this.getStories();
        return orderedStories.length > 0 ? orderedStories[0] : null;
    },findStoriesBetweenInclusive: function(story1, story2) {
        var allStories = this.getStories();
        var startIndex = allStories.indexOf(story1);
        var endIndex = allStories.indexOf(story2);
        var result = [];
        for (var i = startIndex; i <= endIndex; i++) {
            result.push(allStories[i]);
        }
        return result;
    },getFirstStoryInRelease: function(marker) {
        var allReleaseMarkers = this.getReleaseMarkers();
        var indexOfMarker = allReleaseMarkers.indexOf(marker);
        if (indexOfMarker == 0) {
            return this.getFirstStory();
        }
        return this.findStoryAfter(allReleaseMarkers[indexOfMarker - 1]);
    },getFirstStoryInCurrentRelease: function() {
        var currentMarker = this.getCurrentReleaseMarker();
        if (currentMarker == null) {
            return this.getFirstStory();
        }
        return this.getFirstStoryInRelease(currentMarker);
    },getStartDateOfReleaseWithMarker: function(marker) {
        var allReleaseMarkers = this.getReleaseMarkers();
        var indexOfMarker = allReleaseMarkers.indexOf(marker);
        if (indexOfMarker <= 0) {
            return this.getStartDate();
        } else {
            return allReleaseMarkers[indexOfMarker - 1].getAcceptedAt();
        }
    },getStartDateOfCurrentRelease: function() {
        var currentMarker = this.getCurrentReleaseMarker();
        if (currentMarker == null) {
            return this.getStartDate();
        }
        return this.getStartDateOfReleaseWithMarker(currentMarker);
    },getCurrentReleaseMarker: function() {
        return this._storyArray.find(function(story) {
            return story.isReleaseMarker() && !story.isAccepted() && !story.isUnscheduled()
        });
    },getLabelNames: function() {
        return this.labelRepository.getLabels();
    },hasOnlyUnestimatedStories: function() {
        return this.getNumberOfStories() > 0 && this._doesNotHaveStoryMatching(function(s) {
            return s.isEstimated()
        });
    },hasOnlyStoriesInStates: function(storyStates) {
        return this.getNumberOfStories() > 0 && this._doesNotHaveStoryMatching(function(story) {
            return !storyStates.include(story.getCurrentState());
        });
    },hasFinishedStories: function() {
        return this._hasStoryMatching(function(story) {
            return story.isFinished()
        });
    },hasAcceptedStories: function() {
        return this._hasStoryMatching(function(story) {
            return story.isAccepted()
        });
    },hasDeliveredStories: function() {
        return this._hasStoryMatching(function(story) {
            return story.isDelivered()
        });
    },hasCurrentIterationOnly: function() {
        return this.getIterations().size() == 1;
    },_hasStoryMatching: function(filter) {
        return this.findStoryMatching(filter) != null;
    },_doesNotHaveStoryMatching: function(filter) {
        return this.findStoryMatching(filter) == null;
    }});
Project.PAST_FINAL_STORY = {getName: function() {
        return "Past Final Story";
    },id: function() {
        return "END";
    },getId: function() {
        return "END";
    },getBucket: function() {
        return 5
    },getCurrentState: function() {
        return 'unscheduleable';
    },isActive: function() {
        return false
    },isReleaseMarker: function() {
        return false
    },getPreviousStory: function() {
        return null
    }};
Project.RELEASES_FILTER = function(story) {
    return story.isReleaseMarker() && !story.isUnscheduled();
};
Project.UNSCHEDULED_FILTER = function(story) {
    return story.isUnscheduled();
};
Project.SCHEDULED_FILTER = function(story) {
    return !story.isUnscheduled();
};
ReleaseBuilder = Class.create();
ReleaseBuilder.prototype = {initialize: function(project, now) {
        this._project = project;
        this._now = now || DateUtils.now();
    },forReleaseMarker: function(marker) {
        return marker.isAccepted() ? this.forSingle(marker) : this.forAggregateFromCurrent(marker);
    },forSingle: function(marker) {
        var firstStory = this._project.getFirstStoryInRelease(marker);
        return this._createReleaseWithStoriesBetweenInclusive(firstStory, this._project.getStartDateOfReleaseWithMarker(marker), marker);
    },forAggregateFromCurrent: function(marker) {
        var firstStory = this._project.getFirstStoryInCurrentRelease();
        return this._createReleaseWithStoriesBetweenInclusive(firstStory, this._project.getStartDateOfCurrentRelease(), marker);
    },_createReleaseWithStoriesBetweenInclusive: function(firstStory, startDate, marker) {
        var stories;
        if (firstStory == null) {
            stories = [];
        } else {
            stories = this._project.findStoriesBetweenInclusive(firstStory, marker);
        }
        return new Release(this._project, stories, startDate, marker, this._now);
    }}
Release = Class.create();
Release.prototype = {initialize: function(project, stories, startDate, releaseMarker, now) {
        this._project = project;
        this._stories = stories;
        this._startDate = startDate;
        this._releaseMarker = releaseMarker;
        this._now = now;
    },getName: function() {
        return this._releaseMarker.getName();
    },getStories: function() {
        return this._stories;
    },getTotalPoints: function() {
        var result = 0;
        this.getStories().each(function(story) {
            if (this._project.allowsEstimationOf(story.getStoryType()) && !story.isUnestimated()) {
                result += story.getEstimate();
            }
        }.bind(this));
        return result;
    },hasDeadline: function() {
        return this._releaseMarker.hasDeadline();
    },getDeadline: function() {
        return this._releaseMarker.getDeadline();
    },isAccepted: function() {
        return this._releaseMarker.isAccepted();
    },getEndDate: function() {
        if (this._releaseMarker.isAccepted()) {
            return this._releaseMarker.getAcceptedAt();
        } else {
            return this._calculateProjectedEndDate();
        }
    },_calculateProjectedEndDate: function() {
        var pointsRemaining = this.getRemainingPoints();
        var daysSoFar = this._now.elapsedDaysFrom(this.getStartDate());
        var projectedIterationsRemaining = pointsRemaining / this._project.getProjectedCapacity();
        var totalDays = daysSoFar + projectedIterationsRemaining * this._project.getIterationLength() * 7;
        return this.getStartDate().plusDays(totalDays).atMidnight();
    },getRemainingPoints: function() {
        var result = 0;
        this.getStories().each(function(story) {
            if (!story.isAccepted() && this._project.allowsEstimationOf(story.getStoryType()) && !story.isUnestimated()) {
                result += story.getEstimate();
            }
        }.bind(this));
        return result;
    },getStartDate: function() {
        return this._startDate;
    },getPointsRemainingAt: function(date) {
        var time = date.atMidnight().getTime();
        var result = this.getTotalPoints();
        var stories = this.getStories();
        var index = 0;
        for (var story = stories[index]; index + 1 < stories.length && story.isAccepted() && story.getAcceptedAt().atMidnight().getTime() < time; story = stories[++index]) {
            if (this._project.allowsEstimationOf(story.getStoryType()) && !story.isUnestimated()) {
                result -= story.getEstimate();
            }
        }
        return result;
    }}
Resource = Class.create(BaseDomain, {initialize: function(json, project) {
        this.resourceType = Resource.TYPE;
        this.events = new EventChannelRegistry(this, "resourceUpdate");
        this._initial_from_json(json, project);
    },updateFromJson: function(json, project) {
        this._initial_from_json(json, project);
        this.events.fire('resourceUpdate');
    },toJSON: function() {
        return Object.toJSON(this.toJSONHash());
    },toJSONHash: function() {
        var hash = {id: this.id,filename: this.filename,title: this.filename,thumbnailable: this.thumbnailable,description: this.description,uploaded: this.uploaded,created_at: this.createdAt.getTime(),size: this.size,content_type: this.contentType,download_url: this.downloadUrl,big_url: this.bigUrl,thumbnail_url: this.thumbnailUrl};
        if (this.getUploader() != null) {
            hash.uploader_id = this.getUploader().getId();
        }
        return hash;
    },getId: function() {
        return this.id;
    },getFilename: function() {
        return this.filename;
    },getFileExtension: function(length) {
        if (!this.filename) {
            return null;
        }
        var lastIndex = this.filename.lastIndexOf('.');
        if (lastIndex < 1) {
            return null;
        }
        var ext = this.filename.substr(lastIndex + 1, length || this.filename.length);
        if (ext == this.filename || !ext) {
            return null;
        }
        return ext;
    },getEllipsifiedFilename: function(numChars) {
        var fileExtension = this.getFileExtension(3);
        if (fileExtension) {
            var lastIndex = this.filename.lastIndexOf('.');
            var filenameWithoutExtension = this.filename.substr(0, lastIndex);
            return filenameWithoutExtension.ellipsify(numChars || 23) + "." + fileExtension;
        } else {
            return this.filename.ellipsify(numChars || 27)
        }
    },getDescription: function() {
        return this.description;
    },hasDescription: function() {
        if (!this.description) {
            return false;
        }
        return !StringUtils.isWhitespace(this.description);
    },isUploaded: function() {
        return this.uploaded;
    },isThumbnailable: function() {
        return this.thumbnailable;
    },getCreatedAt: function() {
        return this.createdAt;
    },getSize: function() {
        return this.size;
    },getContentType: function() {
        return this.contentType;
    },getThumbnailUrl: function() {
        return this.thumbnailUrl;
    },getBigUrl: function() {
        return this.bigUrl;
    },getUploader: function() {
        return this.uploader;
    },getDownloadUrl: function() {
        return this.downloadUrl;
    },setDescription: function(newDescription) {
        return this.description = newDescription;
    },thumbnail: function() {
        if (this.isUploaded()) {
            return {src: this.isThumbnailable() ? this.getThumbnailUrl() : story_icon_path("paper_clip.png"),bigSrc: this.isThumbnailable() ? this.getBigUrl() : story_icon_path("paper_clip.png"),alt: this.getFilename(),className: "resource_image",href: this.getDownloadUrl()}
        } else {
            return {src: story_icon_path("paper_clip_unavailable.gif"),alt: "Your attachment is still uploading"}
        }
    },_initial_from_json: function(json, project) {
        this.id = json.id;
        this.filename = json.filename || null;
        this.thumbnailable = json.thumbnailable;
        this.thumbnailUrl = json.thumbnail_url || null;
        this.bigUrl = json.big_url || null;
        this.description = json.description || null;
        this.uploaded = json.uploaded;
        this.createdAt = json.created_at ? new Date(json.created_at) : null;
        this.size = json.size || 0;
        this.contentType = json.content_type || null;
        this.uploader = project.members.findById(json.uploader_id);
        this.downloadUrl = json.download_url;
        this.project = project;
        this.title = this.filename;
    },toString: function() {
        return this.toJSON();
    },isGoogleDocResource: function() {
        return false;
    }});
Resource.GOOGLE_DOC_TYPE = 'GoogleDocResource';
Resource.TYPE = 'Resource';
Resources = Class.create();
Resources.MIME_TYPES_BY_NAME = {'image': 'Images','pdf': 'PDF Documents','msword': 'M$ Word Documents','plain': 'Text Documents','audio': 'Audio Files','zip': 'Archives'};
Resources.prototype = {initialize: function(resourceJsonMap, project) {
        this.map = {};
        for (var resourceId in resourceJsonMap) {
            this.map[resourceId] = new Resource(resourceJsonMap[resourceId], project);
        }
    },findById: function(id) {
        return this.map[id];
    },length: function() {
        return Object.keys(this.map).size();
    },addResource: function(resource) {
        this.map[resource.id] = resource;
    },removeResource: function(resource) {
        this.removeResourceById(resource.id)
    },removeResourceById: function(resourceId) {
        delete this.map[resourceId];
    },group: function(resourceIds) {
        var result = {};
        for (var i = 0; i < resourceIds.length; i++) {
            var resource = this.findById(resourceIds[i]);
            var mediaTypeName = this._findMediaTypeName(resource.getContentType());
            if (!result[mediaTypeName]) {
                result[mediaTypeName] = new Array();
            }
            result[mediaTypeName].push(resource);
        }
        return result;
    },all: function() {
        return Object.values(this.map).sortBy(function(resource) {
            return resource.id
        });
    },_findMediaTypeName: function(contentType) {
        if (contentType == null) {
            return "Other Files";
        }
        var mimeTypes = Object.keys(Resources.MIME_TYPES_BY_NAME);
        var foundType;
        for (var i = 0; i < mimeTypes.size(); ++i) {
            var mimeType = mimeTypes[i];
            if (contentType.indexOf(mimeType) > -1) {
                foundType = mimeType;
                break;
            }
        }
        return Resources.MIME_TYPES_BY_NAME[foundType] ? Resources.MIME_TYPES_BY_NAME[foundType] : "Other Files";
    }};
StoryState = Class.create({initialize: function(name, displayName, groupPriority) {
        this._name = name;
        this._displayName = displayName;
        this._groupPriority = groupPriority;
    },getName: function() {
        return this._name;
    },getDisplayName: function() {
        return this._displayName;
    },toString: function() {
        return this.getName();
    },getStateGroup: function() {
        return this._groupPriority;
    }});
StoryState.valueOf = function(nameOrState) {
    if (!nameOrState || nameOrState.getName) {
        return nameOrState;
    }
    return StoryState[nameOrState.toUpperCase()];
};
StoryState.UNSAVED = new StoryState("unsaved", "Not Yet Saved", 4);
StoryState.UNSCHEDULED = new StoryState("unscheduled", "Not Yet Scheduled", 3);
StoryState.UNSTARTED = new StoryState("unstarted", "Not Yet Started", 2);
StoryState.REJECTED = new StoryState("rejected", "Rejected", 2);
StoryState.STARTED = new StoryState("started", "Started", 1);
StoryState.FINISHED = new StoryState("finished", "Finished", 1);
StoryState.DELIVERED = new StoryState("delivered", "Delivered", 1);
StoryState.ACCEPTED = new StoryState("accepted", "Accepted", 0);
StoryState.STATES_IN_ORDER = [StoryState.UNSCHEDULED, StoryState.UNSTARTED, StoryState.STARTED, StoryState.FINISHED, StoryState.DELIVERED, StoryState.ACCEPTED, StoryState.REJECTED];
StoryState.getBucketForState = function(state) {
    switch (state) {
        case StoryState.ACCEPTED:
            return 0;
        case StoryState.STARTED:
        case StoryState.FINISHED:
        case StoryState.DELIVERED:
        case StoryState.REJECTED:
            return 1;
        case StoryState.UNSTARTED:
            return 2;
        case StoryState.UNSCHEDULED:
            return 3;
        case StoryState.UNSAVED:
        case null:
        case undefined:
            return 4;
        default:
            throw "Unknown state '" + state + "'";
    }
};
StoryAction = Class.create();
StoryAction.valueOf = function(nameOrAction) {
    if (!nameOrAction || nameOrAction.getName) {
        return nameOrAction;
    }
    return StoryAction[nameOrAction.replace("ed", "").toUpperCase()];
};
StoryAction.prototype = {initialize: function(name, pastTenseDisplayName) {
        this._name = name;
        this._pastTenseDisplayName = pastTenseDisplayName;
    },getName: function() {
        return this._name;
    },toString: function() {
        return this.getName();
    },getPastTenseDisplayName: function() {
        return this._pastTenseDisplayName;
    }};
StoryAction.START = new StoryAction("start", "Started");
StoryAction.FINISH = new StoryAction("finish", "Finished");
StoryAction.DELIVER = new StoryAction("deliver", "Delivered");
StoryAction.ACCEPT = new StoryAction("accept", "Accepted");
StoryAction.REJECT = new StoryAction("reject", "Rejected");
StoryAction.RESTART = new StoryAction("restart", "Restarted");
StoryType = Class.create();
StoryType.valueOf = function(nameOrType) {
    if (!nameOrType || nameOrType.getName) {
        return nameOrType;
    }
    return StoryType[nameOrType.toUpperCase()];
};
StoryType.prototype = {initialize: function(name, displayName, availableStates) {
        this._name = name;
        this._displayName = displayName;
        this._availableStates = availableStates;
        this._transitions = [];
    },getName: function() {
        return this._name;
    },getDisplayName: function() {
        return this._displayName;
    },getAvailableStates: function() {
        return this._availableStates;
    },addTransition: function(beginState, action, endState) {
        this._transitions.push({beginState: beginState,action: action,endState: endState});
    },getActionsForState: function(state) {
        var result = [];
        for (var i = 0; i < this._transitions.length; i++) {
            var transition = this._transitions[i];
            if (transition.beginState == state) {
                result.push(transition.action);
            }
        }
        return result;
    },getTransitionForAction: function(currentState, action, story) {
        var transition = this._transitions.detect(function(transition) {
            return transition.beginState == currentState && transition.action == action;
        });
        if (!transition) {
            throw new TransitionError(currentState, action, story);
        }
        return transition.endState;
    },toString: function() {
        return this.getName();
    },getAllTransitions: function() {
        var allPossibleTransitions = [];
        for (var i = 0; i < this._transitions.length; i++) {
            var transition = this._transitions[i];
            if (!this.containsState(allPossibleTransitions, transition.beginState))
                allPossibleTransitions.push(transition.beginState);
            if (!this.containsState(allPossibleTransitions, transition.endState))
                allPossibleTransitions.push(transition.endState);
        }
        return allPossibleTransitions;
    },containsState: function(array, state) {
        for (var i = 0; i < array.length; i++) {
            if (array[i] == state) {
                return true;
            }
        }
        return false;
    }};
StoryType.FEATURE = new StoryType("feature", "Feature", [StoryState.UNSCHEDULED, StoryState.UNSTARTED, StoryState.STARTED, StoryState.FINISHED, StoryState.DELIVERED, StoryState.ACCEPTED, StoryState.REJECTED]);
StoryType.FEATURE.addTransition(StoryState.UNSCHEDULED, StoryAction.START, StoryState.STARTED);
StoryType.FEATURE.addTransition(StoryState.UNSTARTED, StoryAction.START, StoryState.STARTED);
StoryType.FEATURE.addTransition(StoryState.STARTED, StoryAction.FINISH, StoryState.FINISHED);
StoryType.FEATURE.addTransition(StoryState.FINISHED, StoryAction.DELIVER, StoryState.DELIVERED);
StoryType.FEATURE.addTransition(StoryState.DELIVERED, StoryAction.ACCEPT, StoryState.ACCEPTED);
StoryType.FEATURE.addTransition(StoryState.DELIVERED, StoryAction.REJECT, StoryState.REJECTED);
StoryType.FEATURE.addTransition(StoryState.REJECTED, StoryAction.RESTART, StoryState.STARTED);
StoryType.CHORE = new StoryType("chore", "Chore", [StoryState.UNSCHEDULED, StoryState.UNSTARTED, StoryState.STARTED, StoryState.ACCEPTED]);
StoryType.CHORE.addTransition(StoryState.UNSCHEDULED, StoryAction.START, StoryState.STARTED);
StoryType.CHORE.addTransition(StoryState.UNSTARTED, StoryAction.START, StoryState.STARTED);
StoryType.CHORE.addTransition(StoryState.STARTED, StoryAction.FINISH, StoryState.ACCEPTED);
StoryType.BUG = new StoryType("bug", "Bug", [StoryState.UNSCHEDULED, StoryState.UNSTARTED, StoryState.STARTED, StoryState.FINISHED, StoryState.DELIVERED, StoryState.ACCEPTED, StoryState.REJECTED]);
StoryType.BUG.addTransition(StoryState.UNSCHEDULED, StoryAction.START, StoryState.STARTED);
StoryType.BUG.addTransition(StoryState.UNSTARTED, StoryAction.START, StoryState.STARTED);
StoryType.BUG.addTransition(StoryState.STARTED, StoryAction.FINISH, StoryState.FINISHED);
StoryType.BUG.addTransition(StoryState.FINISHED, StoryAction.DELIVER, StoryState.DELIVERED);
StoryType.BUG.addTransition(StoryState.DELIVERED, StoryAction.ACCEPT, StoryState.ACCEPTED);
StoryType.BUG.addTransition(StoryState.DELIVERED, StoryAction.REJECT, StoryState.REJECTED);
StoryType.BUG.addTransition(StoryState.REJECTED, StoryAction.RESTART, StoryState.STARTED);
StoryType.RELEASE = new StoryType("release", "Release", [StoryState.UNSCHEDULED, StoryState.UNSTARTED, StoryState.ACCEPTED]);
StoryType.RELEASE.addTransition(StoryState.UNSTARTED, StoryAction.FINISH, StoryState.ACCEPTED);
StoryType.ITERATION = new StoryType("iteration", "Iteration", []);
StoryType.all = [StoryType.FEATURE, StoryType.BUG, StoryType.CHORE, StoryType.RELEASE];
Story = Class.create(BaseDomain, {initialize: function(json, project) {
        this.events = new EventChannelRegistry(this, "update", "updateAffectingProject", "statusChange", "startPendingUpdate", "stopPendingUpdate", "attachmentUpdate", "selectionUpdate", "commentChange", "taskChange", "taskCompleteChange", "moveFromProject", "highlight", "beforeRemove");
        this._id = json.id || 0;
        if (project)
            this.membersFinder = project.members;
        this.project = project;
        this._tasks = [];
        this.readFromJson(json);
        this.selected = false;
        this.previousStoryAttributes = null;
        this._isDeleted = false;
        this._isBeingCreated = false;
        this.comments(json.comments);
    },getType: function() {
        return "story";
    },markDeleted: function() {
        this._isDeleted = true;
    },markNotDeleted: function() {
        this._isDeleted = false;
    },isDeleted: function() {
        return this._isDeleted;
    },markAsBeingCreated: function() {
        this._isBeingCreated = true;
    },markAsNotBeingCreated: function() {
        this._isBeingCreated = false;
    },isBeingCreated: function() {
        return this._isBeingCreated;
    },readFromJson: function(json) {
        this._name = this.getOrNullString(json.name);
        this._description = this.getOrNullString(json.description);
        if (json.estimate == null) {
            this._estimate = Story.UNESTIMATED
        } else {
            var estimate = parseInt(json.estimate);
            this._estimate = estimate || 0;
        }
        this._currentState = this.getOrNull(StoryState.valueOf(json.current_state));
        this._storyType = this.getOrNull(StoryType.valueOf(json.story_type));
        this._requestedById = this.getOrDefault(json.requested_by_id, Member.UNKNOWN);
        this._acceptedAt = this.getDateOrNull(json.accepted_at);
        this._createdAt = this.getDateOrNull(json.created_at);
        if (json.owned_by_id != Member.UNKNOWN) {
            if (!this.membersFinder)
                throw new Error("need a Members");
            this._ownedBy = this.membersFinder.findById(json.owned_by_id);
        }
        this._deadline = this.getDateOrNull(json.deadline);
        this._externalId = this.getOrNullString(json.external_id);
        this._integrationId = this.getOrNullString(json.integration_id);
        this.setCLNumbers(this.getOrNullString(json.cl_numbers));
        this._labelSet = new LabelSet(json);
        this._resourceIds = this.getOrDefault(json.resources, []);
        this._plannedIterationNumber = this.getOrNull(json.planned_iteration_number);
        this.updateTasksFromJson(json.tasks);
    },updateTasksFromJson: function(tasks) {
        if (tasks) {
            this._tasks = [];
            for (var i = 0; i < tasks.length; i++) {
                var task = new Task(tasks[i]);
                this._tasks.push(task);
            }
        }
    },updateFromJson: function(json) {
        this.previousStoryAttributes = this.toJSONHash();
        this.updateAttributesFromJSON(json);
        var updatedJson = this.toJSONHash();
        if (Object.toJSON(updatedJson) != Object.toJSON(this.previousStoryAttributes)) {
            this.notifyAffectingProject();
        }
    },_moveStoryIfNecessary: function(initialState) {
        if (this.isNew() || initialState == null) {
            return;
        }
        if (initialState == StoryType.RELEASE) {
            initialState = StoryState.UNSTARTED;
        }
        this.moveAfterStateChange(initialState);
    },moveAfterStateChange: function(initialState) {
        var oldBucket = StoryState.getBucketForState(initialState);
        var newBucket = StoryState.getBucketForState(this.getCurrentState());
        if (this.isAccepted()) {
            if (initialState !== this.getCurrentState()) {
                this.project.moveToBottomOfBucket(this);
            }
        } else {
            if (newBucket < oldBucket) {
                this._moveToBottomOfEarlierBucket(newBucket);
            } else {
                this._moveToTopOfLaterBucket(newBucket);
            }
        }
    },_moveToBottomOfEarlierBucket: function(bucket) {
        var target = null;
        var cursor = this.getPreviousStory();
        while (cursor != null) {
            if (!(cursor.isReleaseMarker() && cursor.isUnstarted())) {
                if (cursor.getBucket() > bucket) {
                    target = cursor;
                } else {
                    break;
                }
            }
            cursor = cursor.getPreviousStory();
        }
        if (target) {
            this.project.moveStoryBefore(this, target)
        }
    },_moveToTopOfLaterBucket: function(bucket) {
        var target = null;
        var cursor = this.getNextStory();
        while (cursor != null) {
            if (!(cursor.isReleaseMarker() && cursor.isUnstarted())) {
                if (cursor.getBucket() < bucket) {
                    target = cursor;
                } else {
                    break
                }
            }
            cursor = cursor.getNextStory();
        }
        if (target) {
            this.project.moveStoryAfter(this, target)
        }
    },_moveStoryWithinAcceptedStories: function(initiallyBefore) {
        var stories = this.project.getAcceptedStories();
        stories.sort(function(a, b) {
            return a.compareTo(b);
        });
        var finallyBefore = this.project._findStoryAfter(this, stories);
        if (finallyBefore == Project.PAST_FINAL_STORY) {
            this.project.moveStoryAfter(this, stories.last());
        } else if (initiallyBefore.id() != finallyBefore.id()) {
            this.project.moveStoryBefore(this, finallyBefore);
        }
    },updateAttributesFromJSON: function(json) {
        this.setName(json.name || "", true);
        this.setDescription(json.description || "", true);
        this.setEstimate(json.estimate || 0, true);
        if (json.created_at) {
            this.setCreatedAt(new Date(json.created_at), true);
        }
        this.setStoryType(StoryType.valueOf(json.story_type) || null, true);
        if (json.deadline) {
            this.setDeadline(new Date(parseInt(json.deadline)), true);
        } else {
            this.setDeadline(null, true);
        }
        this.setPlannedIterationNumber(json.planned_iteration_number || null);
        this.setCurrentState(StoryState.valueOf(json.current_state) || null, true);
        if (json.accepted_at) {
            this.setAcceptedAt(new Date(parseInt(json.accepted_at)), true);
        }
        this.setRequestedById(json.requested_by_id || Member.UNKNOWN, true);
        this.setOwnedById(json.owned_by_id || Member.UNKNOWN, true);
        this.setExternalId(json.external_id || "");
        this.setIntegrationId(json.integration_id || "");
        this.setCLNumbers(json.cl_numbers || "");
        this._labelSet = new LabelSet(json);
        this.updateTasksFromJson(json.tasks);
    },applyChangesFromJson: function applyChangesFromJson(changesJson) {
        var updatedHash = this.toJSONHash();
        for (var key in changesJson) {
            updatedHash[key] = changesJson[key];
        }
        this.updateAttributesFromJSON(updatedHash);
    },toJSON: function() {
        return Object.toJSON(this.toJSONHash());
    },toJSONHash: function() {
        return {id: this._id,name: this._name,description: this._description,current_state: (this._currentState ? this._currentState.getName() : null),story_type: (this._storyType ? this._storyType.getName() : null),estimate: this._estimate,requested_by_id: this._requestedById,accepted_at: (this._acceptedAt ? this._acceptedAt.getTime() : null),created_at: (this._createdAt ? this._createdAt.getTime() : null),deadline: (this._deadline ? this._deadline.getTime() : null),owned_by_id: (this._ownedBy ? this._ownedBy.getId() : Member.UNKNOWN),external_id: this._externalId,integration_id: this._integrationId,comments: this.commentsJSONHash(),labels: this.getLabels(),planned_iteration_number: this.getPlannedIterationNumber(),cl_numbers: this.getCLNumbers()};
    },getAvailableStates: function(newStoryType) {
        return this._availableStatesForStoryType(newStoryType ? newStoryType : this.getStoryType());
    },_availableStatesForStoryType: function(storyType) {
        var result = [];
        storyType = StoryType.valueOf(storyType);
        var availableStates = storyType.getAvailableStates();
        for (var i = 0; i < availableStates.length; i++) {
            if (availableStates[i] != StoryState.UNSCHEDULED || this.isUnscheduled()) {
                result.push(availableStates[i]);
            }
        }
        return result;
    },getAvailableActions: function() {
        return Story.getAvailableActions(this.getStoryType(), this.getCurrentState());
    },getNewStateForAction: function(currentState, action, storyType) {
        var type = storyType || this.getStoryType();
        return type.getTransitionForAction(currentState, action, this);
    },performAction: function(action, disableNotify) {
        this.setCurrentState(this.getNewStateForAction(this.getCurrentState(), action), disableNotify);
    },toString: function() {
        return this.toJSON();
    },hasSameValuesAs: function(anotherStory) {
        return (this.getName() == anotherStory.getName() && this.getDescription() == anotherStory.getDescription() && this.getEstimate() == anotherStory.getEstimate() && this.getCurrentState() == anotherStory.getCurrentState() && this.getStoryType() == anotherStory.getStoryType() && this.getRequestedById() == anotherStory.getRequestedById() && this.getOwnedById() == anotherStory.getOwnedById() && Date.equalsMDYYYY(this.getAcceptedAt(), anotherStory.getAcceptedAt()) && Date.equalsMDYYYY(this.getDeadline(), anotherStory.getDeadline()) && this.getLabelsString() == anotherStory.getLabelsString() && this.getExternalId() == anotherStory.getExternalId() && this.getIntegrationId() == anotherStory.getIntegrationId() && this.getCLNumbers() == anotherStory.getCLNumbers());
    },comesBefore: function(that) {
        var bothAccepted = this.isAccepted() && that.isAccepted();
        return ((this._getStateGroup() < that._getStateGroup()) || (bothAccepted && this.getAcceptedAt().getTime() < that.getAcceptedAt().getTime()) || (!bothAccepted && this._getStateGroup() == that._getStateGroup() && this.getIndex() < that.getIndex()));
    },_getStateGroup: function() {
        return this.getCurrentState().getStateGroup();
    },getIndex: function() {
        return this.project.indexOfStory(this);
    },commentsJSONHash: function commentsJSONHash() {
        var result = [];
        this._comments.each(function(comment) {
            result.push(comment.toJSONHash());
        });
        return result;
    },id: function() {
        return this._id;
    },getId: function() {
        return this._id;
    },getName: function() {
        return this._name;
    },getDescription: function() {
        return this._description;
    },getEstimate: function() {
        return this._estimate;
    },getCurrentState: function() {
        return this._currentState;
    },getStoryType: function() {
        return this._storyType;
    },getRequestedById: function() {
        return this._requestedById;
    },getOwnedById: function() {
        return this._ownedBy ? this._ownedBy.getId() : Member.UNKNOWN;
    },getAcceptedAt: function() {
        return this._acceptedAt;
    },getCreatedAt: function() {
        return this._createdAt;
    },getExternalId: function() {
        return this._externalId;
    },getExternalIdLabel: function() {
        var integration = this.getIntegration();
        if (!integration)
            return "";
        return integration.getIntegrationType() == "get_satisfaction" ? "View Topic" : this.getExternalId();
    },hasExternalId: function() {
        return !(this._externalId == null || this._externalId == "");
    },setExternalId: function(externalId) {
        this._externalId = externalId;
    },getIntegrationId: function() {
        return this._integrationId;
    },setIntegrationId: function(integrationId) {
        this._integrationId = integrationId;
    },isExternallyLinked: function() {
        return this.hasExternalId() && this.getIntegration() != null;
    },getIntegration: function() {
        return this.hasExternalId() ? this.project.getIntegration(this._integrationId) : this.project.getDefaultIntegration();
    },getUrl: function getUrl() {
        return document.location.protocol + '//' + document.location.host + app.projectIndependentShowStoryPath(this.id());
    },setRequestedById: function(id) {
        this._requestedById = id;
    },setOwnedById: function(id) {
        this._ownedBy = this.membersFinder.findById(id);
    },getDeadline: function() {
        return this._deadline;
    },getRequestedBy: function() {
        return this.membersFinder.findById(this._requestedById);
    },getOwnedBy: function() {
        return this._ownedBy;
    },isOwned: function() {
        return this._ownedBy ? true : false;
    },getTasks: function() {
        return this._tasks;
    },getTaskById: function(id) {
        for (var i = 0; i < this._tasks.length; i++) {
            if (this._tasks[i].id() == id) {
                return this._tasks[i];
            }
        }
        return null;
    },addNewTask: function(newTask) {
        if (!newTask.hasId()) {
            newTask.assignId(this.nextTempId());
        }
        this._tasks.push(newTask);
    },removeTask: function(task) {
        this._quietlyRemoveTask(task);
    },_quietlyRemoveTask: function(task) {
        var taskIndex = this._tasks.indexOf(task);
        if (taskIndex > -1) {
            this._tasks.splice(taskIndex, 1);
        }
    },moveTaskToPosition: function(task, position) {
        this._quietlyRemoveTask(task);
        this._tasks.splice(position - 1, 0, task);
    },getTaskPosition: function(task) {
        return this._tasks.indexOf(task) + 1;
    },hasCommits: function() {
        return this.comments().any(function(comment) {
            return comment.isCommit();
        });
    },hasResources: function() {
        return this.comments().any(function(comment) {
            return comment.hasResources();
        });
    },hasImages: function hasImages() {
        return this.comments().any(function(comment) {
            return comment.hasImages();
        });
    },getResourceCount: function getResourceCount() {
        var total = 0;
        var comments = this.comments().items();
        for (var i = 0; i < comments.length; i++) {
            total += comments[i].getResourceCount();
        }
        return total;
    },getAllResources: function getAllResources() {
        return this.comments().map(function(comment) {
            return comment.getAllResources();
        }).flatten();
    },fireSelectionUpdateEvent: function() {
        this.events.fire("selectionUpdate");
    },setId: function(newId) {
        this._id = newId;
    },isNew: function() {
        return this._id == Story.NEW_STORY_ID;
    },setName: function(newName, disableNotify) {
        if (newName != this._name) {
            this._name = newName;
            if (!disableNotify) {
                this.notifyNotAffectingProject();
            }
        }
    },setDescription: function(newDescription, disableNotify) {
        if (newDescription != this._description) {
            this._description = newDescription;
            if (!disableNotify) {
                this.notifyNotAffectingProject();
            }
        }
    },setCurrentState: function(newState, disableNotify) {
        var oldState = this._currentState;
        if (newState != null && newState != oldState) {
            this._currentState = newState;
            if (!this.project.isCurrentIterationPlanned() || this.isUnscheduled()) {
                this.setPlannedIterationNumber(null);
            } else if ((this.isActive() || this.isAccepted()) && this.project.isCurrentIterationPlanned()) {
                this.setPlannedIterationNumber(this.project.getCurrentIterationNumber());
            }
            if (this.isAccepted()) {
                if (this._acceptedAt == null) {
                    this._acceptedAt = DateUtils.now();
                }
                if (!disableNotify) {
                    this.notifyAffectingProject();
                }
            } else {
                this._acceptedAt = null;
                if (!disableNotify) {
                    this.notifyAffectingProject();
                }
            }
            this._moveStoryIfNecessary(oldState);
        }
    },getNextNonReleaseStory: function() {
        var next = this.getNextStory()
        while (next != null && next.isReleaseMarker()) {
            next = next.getNextStory();
        }
        return next;
    },getPreviousNonReleaseStory: function() {
        var prev = this.getPreviousStory();
        while (prev != null && prev.isReleaseMarker()) {
            prev = prev.getPreviousStory();
        }
        return prev;
    },getBucket: function() {
        if (this.isReleaseMarker() && this.isUnstarted()) {
            var previousStory = this.getPreviousStory();
            if (previousStory != null && !previousStory.isAccepted()) {
                return previousStory.getBucket();
            } else {
                var nextStory = this.getNextNonReleaseStory();
                if (nextStory && nextStory.isActive()) {
                    return nextStory.getBucket();
                }
            }
        }
        return StoryState.getBucketForState(this._currentState);
    },setStoryType: function(newType, disableNotify) {
        if (newType == null) {
            return;
        }
        if (newType != this._storyType) {
            var oldType = this._storyType;
            this.setDeadline(null);
            if (!this.isReleaseMarker() && newType == StoryType.RELEASE) {
                var currState = this.getCurrentState();
                if (currState != StoryState.UNSCHEDULED) {
                    if (currState == StoryState.UNSTARTED || currState == StoryState.STARTED) {
                        this.setCurrentState(StoryState.UNSTARTED);
                    } else {
                        this.setCurrentState(StoryState.FINISHED);
                    }
                }
            }
            this._storyType = newType;
            if (oldType == StoryType.RELEASE) {
                this._moveStoryIfNecessary(oldType);
            }
            if (!disableNotify) {
                this.notifyAffectingProject();
            }
        }
    },setEstimate: function(newEstimate, disableNotify) {
        if (newEstimate != this._estimate) {
            this._estimate = parseInt(newEstimate);
            if (!disableNotify) {
                this.notifyAffectingProject();
            }
        }
    },getPseudopoints: function() {
        return this._estimate > 0 ? this._estimate : Story.PSEUDO_POINT_MULTIPLIER;
    },setAcceptedAt: function(newAcceptedAt, disableNotify) {
        if (!this._acceptedAt || newAcceptedAt.getTime() != this._acceptedAt.getTime()) {
            if (this.project.isCurrentIterationPlanned() && this.project.getCurrentIteration().containsDate(newAcceptedAt)) {
                this.setPlannedIterationNumber(this.project.getCurrentIterationNumber());
            } else {
                this.setPlannedIterationNumber(null);
            }
            var initiallyBefore = this.project.findStoryAfter(this);
            this._acceptedAt = newAcceptedAt;
            this._moveStoryWithinAcceptedStories(initiallyBefore);
            if (!disableNotify) {
                this.notifyAffectingProject();
            }
        }
    },setCreatedAt: function(newCreatedAt, disableNotify) {
        if (newCreatedAt != this._createdAt) {
            this._createdAt = newCreatedAt;
            if (!disableNotify) {
                this.notifyAffectingProject();
            }
        }
    },setDeadline: function(newDeadline, disableNotify) {
        if (newDeadline != this._deadline) {
            this._deadline = newDeadline;
            if (!disableNotify) {
                this.notifyAffectingProject();
            }
        }
    },setPlannedIterationNumber: function(iterationNumber) {
        this._plannedIterationNumber = iterationNumber;
    },getPlannedIterationNumber: function() {
        if (this._plannedIterationNumber == undefined) {
            this._plannedIterationNumber = null;
        }
        return this._plannedIterationNumber;
    },statusChange: function(opacity) {
        this.events.fire("statusChange", opacity);
    },startPendingUpdate: function() {
        this.events.fire("startPendingUpdate");
    },stopPendingUpdate: function() {
        this.events.fire("stopPendingUpdate");
    },isUnsaved: function() {
        return this._currentState == StoryState.UNSAVED;
    },isUnstarted: function() {
        return this._currentState == StoryState.UNSTARTED;
    },isUnscheduled: function() {
        return this._currentState == StoryState.UNSCHEDULED;
    },isStarted: function() {
        return this._currentState == StoryState.STARTED;
    },isDelivered: function() {
        return this._currentState == StoryState.DELIVERED;
    },isFinished: function() {
        return this._currentState == StoryState.FINISHED;
    },isAccepted: function() {
        return this._currentState == StoryState.ACCEPTED;
    },isRejected: function() {
        return this._currentState == StoryState.REJECTED;
    },requiresEstimate: function requiresEstimate() {
        if (this.isEstimatable() && !(this.isUnscheduled() || this.isUnstarted())) {
            return true;
        }
        return false;
    },isActive: function() {
        return this.isUnstartedReleaseMarkerActive() || this.isStarted() || this.isFinished() || this.isDelivered() || this.isRejected();
    },isUnstartedReleaseMarkerActive: function() {
        if (this.isReleaseMarker() && this.isUnstarted()) {
            var nextNonReleaseStory = this.getNextNonReleaseStory();
            if (nextNonReleaseStory && nextNonReleaseStory.isActive()) {
                return true;
            } else {
                var previousStory = this.getPreviousNonReleaseStory();
                return previousStory && previousStory.isActive();
            }
        }
        return false;
    },isUnestimated: function() {
        return this._estimate == Story.UNESTIMATED;
    },isEstimatable: function() {
        return this.project.allowsEstimationOf(this.getStoryType());
    },isEstimated: function() {
        return !this.isUnestimated();
    },isReleaseMarker: function() {
        return this._storyType == StoryType.RELEASE;
    },notifyAffectingProject: function() {
        this.events.fire("update");
        this.events.fire("updateAffectingProject");
        this.project.events.fire("updateAffectingEpicSize");
    },notifyNotAffectingProject: function() {
        this.events.fire("update");
        this.project.events.fire("updateAffectingEpicSize");
    },notifyTaskChange: function() {
        this.events.fire("taskChange");
    },hasTasks: function() {
        return this.project.areTasksEnabled() && this.getTasks().length > 0;
    },hasDeadline: function() {
        return this._deadline != null;
    },hasDescription: function() {
        if (!this._description) {
            return false;
        }
        return !StringUtils.isWhitespace(this._description);
    },getValidationErrors: function() {
        var validationErrors = [];
        this.validatePresenceOf(this.getStoryType(), "story type", validationErrors);
        this.validatePresenceOf(this.getName(), "name", validationErrors, "Please enter a story name.");
        this.validatePresenceOf(this.getRequestedById(), "requester", validationErrors, "Please choose a story requester.");
        this.validateLength(this.getName(), "name", Story.NAME_MAX_LENGTH, validationErrors);
        this.validateLength(this.getDescription(), "description", Story.DESCRIPTION_MAX_LENGTH, validationErrors);
        if (this.isEstimatable() && (this.isActive() || this.isAccepted()) && this.isUnestimated()) {
            validationErrors[validationErrors.length] = this.getStoryType().getDisplayName().pluralize()
            + " in the " + this.getCurrentState().getName()
            + " state must be estimated.";
        }
        if (!this.isEstimatable() && this.isEstimated()) {
            validationErrors[validationErrors.length] = this.getStoryType().getDisplayName().pluralize() + " are not estimatable in this project.";
        }
        return validationErrors;
    },assignIdToNewTask: function(replacementId, tempId) {
        var task = this.getTaskById(tempId);
        if (task != null) {
            task.assignId(replacementId);
            this.notifyTaskChange();
        }
    },isTempId: function() {
        return this._id > 1000000000000;
    },hasBeenSaved: function() {
        return !this.isTempId();
    },nextTempId: function() {
        if (this.currentTempId == undefined) {
            this.currentTempId = 0;
        }
        this.currentTempId++;
        return 'temp' + this.currentTempId;
    },getSigninMember: function() {
        return this.membersFinder.getSigninMember();
    },isOwnedBySigninMember: function() {
        return this.membersFinder.getSigninMember() == this._ownedBy;
    },isRequestedBySigninMember: function() {
        return this.membersFinder.getSigninMemberId() == this._requestedById;
    },isPastDeadline: function() {
        if (!this.hasDeadline()) {
            return false;
        }
        var iteration = this.project.getIterationContainingStory(this);
        return iteration != null && this.getDeadline().isBefore(iteration.getStart());
    },getCLNumbers: function() {
        this._clNumbers = this._clNumbers.gsub(" ", "");
        return this._clNumbers;
    },setCLNumbers: function(clNumbers) {
        return this._clNumbers = clNumbers.gsub(" ", "");
    },hasCLNumbers: function() {
        return (null != this._clNumbers && this._clNumbers.length != 0);
    },getLabels: function() {
        return this._labelSet.getLabels();
    },addLabel: function(labelName) {
        this._labelSet.addLabel(labelName);
    },removeLabel: function(labelName) {
        this._labelSet.removeLabel(labelName);
    },getLabelsString: function() {
        return this._labelSet.toString();
    },hasNormalizedLabel: function(normalizedLabel) {
        return this._labelSet.containsNormalized(normalizedLabel);
    },hasLabel: function(labelName) {
        return this._labelSet.contains(labelName);
    },comments: function comments(commentHashes) {
        var self = this;
        if (!this._comments || commentHashes) {
            this._comments = new Collection({json: commentHashes,itemClass: Tracker.Comment,project: this.project});
        } else {
            return this._comments;
        }
    },hasComments: function hasComments() {
        return this._comments.hasItems();
    },_getDateInUserTimezoneFromString: function(dateString) {
        return DateWithZone.newDateFromString(dateString);
    },compareTo: function(other) {
        var thisBucket = this.getBucket()
        var otherBucket = other.getBucket();
        var compare = thisBucket - otherBucket;
        if (compare != 0) {
            return compare;
        }
        switch (thisBucket) {
            case 0:
                compare = this.getAcceptedAt().getTime() - other.getAcceptedAt().getTime();
                break;
            case 1:
            case 2:
            case 3:
                compare = this.getIndex() - other.getIndex();
                break;
            default:
                throw "unknown state group " + thisBucket + " for story " + this.id();
        }
        if (compare != 0) {
            return compare;
        }
        return this.id() - other.id();
    },isAfter: function(anotherStory) {
        return this.project.indexOfStory(this) == this.project.indexOfStory(anotherStory) + 1;
    },isBefore: function(anotherStory) {
        var anotherStoryIndex;
        if (anotherStory == null || anotherStory == Project.PAST_FINAL_STORY) {
            anotherStoryIndex = this.project.getNumberOfStories();
        } else {
            anotherStoryIndex = this.project.indexOfStory(anotherStory);
        }
        return this.project.indexOfStory(this) == anotherStoryIndex - 1;
    },isBetween: function(firstStory, secondStory) {
        return this.isAfter(firstStory) && this.isBefore(secondStory);
    },canMoveBetween: function(firstStory, secondStory) {
        return (firstStory || secondStory) && !this.isBetween(firstStory, secondStory) && this != firstStory && this != secondStory;
    },getNextStory: function() {
        var next = this.project.findStoryAfter(this);
        if (next == Project.PAST_FINAL_STORY) {
            return null;
        } else {
            return next;
        }
    },getPreviousStory: function getPreviousStory() {
        return this.project.findStoryBefore(this);
    },canMoveBetweenStories: function(previousStory, nextStory) {
        if (this.isReleaseMarker() && (!nextStory || !nextStory.isAccepted())) {
            return true;
        }
        return (!nextStory || (this.getBucket() <= nextStory.getBucket())) && (!previousStory || this.getBucket() >= previousStory.getBucket());
    }});
Story.UNESTIMATED = -1;
Story.LOWEST_BUCKET = 0;
Story.DESCRIPTION_MAX_LENGTH = 20000;
Story.NAME_MAX_LENGTH = 5000;
Story.EXTERNAL_ID_MAX_LENGTH = 255;
Story.PSEUDO_POINT_MULTIPLIER = 0.5;
Story.NEW_STORY_ID = "newStory";
Story.DELETED_STORY = {getName: function() {
        return "Deleted Story";
    },id: function() {
        return "DELETED";
    },getId: function() {
        return "DELETED";
    },getPlannedIterationNumber: function() {
        return null;
    },isDeleted: function() {
        return true;
    }};
Story.getAvailableActions = function(storyType, storyState) {
    return !storyType ? [] : storyType.getActionsForState(storyState);
};
function TransitionError(state, action, story) {
    this.message = "Can't perform action '" + action + "' on state '" + state + "' for story " + story.getId() + " " + story.getName();
}
Task = Class.create(BaseDomain, {initialize: function(json) {
        this.updateAttributesFromJSON(json);
    },toJSONHash: function() {
        return {id: this._id,story_id: this._storyId,created_at: this._createdAtMillis,description: this._description,complete: this._complete};
    },applyChangesFromJson: function applyChangesFromJson(changesJson) {
        var updatedHash = this.toJSONHash();
        for (var key in changesJson) {
            updatedHash[key] = changesJson[key];
        }
        this.updateAttributesFromJSON(updatedHash);
    },getValidationErrors: function() {
        var validationErrors = [];
        this.validateLength(this._description, "task", Task.DESCRIPTION_MAX_LENGTH, validationErrors);
        this.validatePresenceOf(this._storyId, "story Id", validationErrors, "Task must be added to a story.");
        return validationErrors;
    },updateAttributesFromJSON: function(json) {
        this._id = json.id || 0;
        this._storyId = json.story_id || null;
        this._createdAtMillis = parseInt(json.created_at) || null;
        this._description = json.description || null;
        this._complete = json.complete || false;
        this._isDeleted = false;
    },id: function() {
        return this._id;
    },setId: function(newId) {
        this._id = newId;
    },setDescription: function(newDescription) {
        this._description = newDescription;
    },storyId: function() {
        return this._storyId;
    },description: function() {
        return this._description;
    },complete: function() {
        return this._complete;
    },setComplete: function(state) {
        this._complete = state;
    },toggleComplete: function() {
        this._complete = !this._complete;
    },isDeleted: function() {
        return this._isDeleted;
    },isNewRecord: function() {
        return new String(this.id()).include("temp");
    },hasId: function() {
        return this._id != 0;
    },deleteMe: function() {
        this._isDeleted = true;
    },undeleteMe: function() {
        this._isDeleted = false;
    },createdAtDate: function() {
        return new Date(this._createdAtMillis);
    },assignId: function(id) {
        this._id = id;
    }});
Task.NEW_TASK_ID = "newTask";
Task.DESCRIPTION_MAX_LENGTH = 1000;
TheoryFactory = Class.create();
TheoryFactory.buildFromJson = function(json) {
    if (json == null) {
        return new FixedTheory(1000000);
    }
    switch (json.name) {
        case 'Fixed':
            return new FixedTheory(json.velocity);
        case 'Extrapolation':
            return new ExtrapolationTheory(json.default_velocity, json.iterations_to_average);
    }
    throw "Unknown json - " + json;
};
FixedTheory = Class.create();
FixedTheory.prototype = {initialize: function(velocity) {
        this.velocity = velocity;
    },deriveFrom: function(pastIterations, noDataFunctor) {
        return this.velocity;
    },getDisplayText: function() {
        return "overridden";
    },toString: function() {
        return "FixedTheory(" + this.velocity + ")";
    },asServerVelocityScheme: function() {
        return "";
    },getDefaultVelocity: function() {
        return this.velocity;
    }};
ExtrapolationTheory = Class.create();
ExtrapolationTheory.prototype = {initialize: function(defaultVelocity, iterationsToAverage) {
        this.defaultVelocity = defaultVelocity;
        this.requestedIterationsToAverage = iterationsToAverage || 1;
        this._defaulted = true;
    },deriveFrom: function(pastIterations, noDataFunctor) {
        this._defaulted = false;
        var numItersToConsider = Math.min(pastIterations.length, this.requestedIterationsToAverage);
        if (numItersToConsider == 0) {
            this._defaulted = true;
            return noDataFunctor ? noDataFunctor() : this.defaultVelocity;
        }
        var targetIterations = pastIterations.slice(pastIterations.length - numItersToConsider, pastIterations.length);
        var mean = this._meanTotalPoints(targetIterations);
        if (mean == 0) {
            this._defaulted = true;
            return noDataFunctor ? noDataFunctor() : this.defaultVelocity;
        }
        return mean;
    },_meanTotalPoints: function(iterations) {
        var points = 0;
        var strength = 0;
        var length = 0;
        iterations.each(function(iteration) {
            var teamStrength = iteration.getTeamStrength();
            if (teamStrength <= 0) {
                return;
            }
            points += (iteration.getVelocity().getTotal() / teamStrength);
            strength += teamStrength;
            length += iteration.getIterationLengthAdjustment();
        });
        if (strength === 0 || length === 0) {
            return this.defaultVelocity;
        }
        var meanAsFloat = points / length;
        if (meanAsFloat > 0 && meanAsFloat < 1) {
            return 1;
        } else {
            return Math.floor(meanAsFloat);
        }
    },getDisplayText: function() {
        if (this._defaulted) {
            return "project default";
        } else {
            return this.requestedIterationsToAverage + " iteration average";
        }
    },toString: function() {
        return "ExtrapolationTheory(" + this.defaultVelocity + "," + this.requestedIterationsToAverage + ")";
    },asServerVelocityScheme: function() {
        return "PastIters " + this.requestedIterationsToAverage;
    },getDefaultVelocity: function() {
        return this.defaultVelocity;
    }};
Velocity = Class.create();
Velocity.prototype = {initialize: function(json) {
        this._projected = json.projected || 0;
        this._completed = json.completed || 0;
    },getProjected: function() {
        return this._projected;
    },getCompleted: function() {
        return this._completed;
    },equals: function(other) {
        return this.getProjected() == other.getProjected() && this.getCompleted() == other.getCompleted();
    },getTotal: function() {
        return this._projected + this._completed;
    },add: function(story) {
        if (story.isUnestimated()) {
            return;
        }
        if (story.isAccepted()) {
            this._completed += story.getEstimate();
        } else {
            this._projected += story.getEstimate();
        }
    },toJSONHash: function() {
        return {completed: this._completed,projected: this._projected,total: this.getTotal()};
    }};
Hint = Class.create();
Hint.prototype = {initialize: function(hintText, condition) {
        this._hintText = hintText;
        this._condition = condition;
    },getHintText: function() {
        return this._hintText;
    },getCondition: function() {
        return this._condition;
    },appliesTo: function(project) {
        return this._condition(project);
    },toString: function() {
        return this._hintText.truncate(20);
    }}
Hint.ADD_STORY = new Hint("To get started, use the Add Story button or type 'a' to create a story. A story describes a concrete feature, usually written from the perspective of a user (e.g. 'User can add item to shopping cart'). New stories will appear in the Icebox. <p><a href='/help/gettingstarted' target='_blank'>More on getting started...</a>", function(project) {
    return project.getNumberOfStories() == 0
});
Hint.ESTIMATE_STORIES = new Hint("When you're done adding stories, estimate the stories using the bars to the right of story titles. <p><a href='/help/gettingstarted#estimation' target='_blank'>More about estimation...</a>", function(project) {
    return project.hasOnlyUnestimatedStories()
});
Hint.DRAG_TO_BACKLOG = new Hint("When finished estimating, drag stories from the Icebox to the Backlog or Current panel. The current iteration and the backlog are connected, and stories will move between them automatically. <a href='/help/faq#whyaremystoriesmovingfromthebacklogtothecurrentpanel' target='_blank'>Read more..</a>", function(project) {
    return project.hasOnlyStoriesInStates([StoryState.UNSCHEDULED])
});
Hint.ACCEPTED_TO_DONE = new Hint("Accepted stories will move to the Done panel at end of the current iteration, and the project's velocity will recalculate based on the total # of points accepted in previous iterations.<br><br>For more hints, and to learn about other features, please read through the <a href='/help' target='_blank'>Tracker help pages</a>.", function(project) {
    return project.hasCurrentIterationOnly() && project.hasAcceptedStories()
});
Hint.ACCEPT_STORIES = new Hint("Delivered stories should be reviewed by the customer, who can either accept or reject them and provide feedback. <p><a href='/help/gettingstarted#storyworkflow' target='_blank'>More on story workflow...</a>", function(project) {
    return project.hasCurrentIterationOnly() && project.hasDeliveredStories()
});
Hint.DELIVER_STORIES = new Hint("Press the Deliver button on a story when it's ready for acceptance by the project's customer, and you've deployed the feature to a demo or staging environment. <p><a href='/help/gettingstarted#storyworkflow' target='_blank'>More on story workflow...</a>", function(project) {
    return project.hasCurrentIterationOnly() && project.hasFinishedStories()
});
Hint.USE_START_BUTTON = new Hint("Use the Start button when you begin working on a story, and the Finish button when you think your work is done. <a href='/help/gettingstarted#storyworkflow' target='_blank'>More on story workflow...</a>", function(project) {
    return project.hasCurrentIterationOnly() && project.hasOnlyStoriesInStates([StoryState.UNSTARTED, StoryState.STARTED, StoryState.UNSCHEDULED])
});
Hint.ALL_HINTS = [Hint.ADD_STORY, Hint.ESTIMATE_STORIES, Hint.DRAG_TO_BACKLOG, Hint.ACCEPTED_TO_DONE, Hint.ACCEPT_STORIES, Hint.DELIVER_STORIES, Hint.USE_START_BUTTON];
HintSuggester = Class.create();
HintSuggester.prototype = {initialize: function(project) {
        this.project = project;
        this.acknowledgedHints = [];
    },makeSuggestion: function() {
        var hint = this._determineApplicableHint();
        if (hint == null) {
            return null;
        }
        if (this.acknowledgedHints.contains(hint)) {
            return null;
        }
        return hint;
    },_determineApplicableHint: function() {
        var theProject = this.project;
        var theHint = null;
        Hint.ALL_HINTS.each(function(hint) {
            if (hint.appliesTo(theProject)) {
                theHint = hint;
                throw $break;
            }
        });
        return theHint;
    },acknowledge: function(hint) {
        this.acknowledgedHints.push(hint);
    }};
FormPopup = {ajaxBefore: function(popupId) {
        var image_html = '<img src="' + images_root_path('application/icons/ajax-loader.gif') + '" id="popup_spinner" style="position: absolute; left: 45%; top: 30%;" alt="Loading..." />';
        $$('#' + popupId + ' .form_flash').invoke('hide');
        $$('#' + popupId + ' label.infield').invoke('hide');
        var popup_content = $$('#' + popupId + ' .popup_content').first();
        var submit_buttons = $$('#' + popupId + ' input[type="submit"]');
        submit_buttons.invoke('disable');
        submit_buttons.invoke('addClassName', 'disabled');
        popup_content.setStyle({position: 'relative'});
        popup_content.childElements().invoke('setOpacity', 0.2);
        popup_content.childElements().first().insert({before: image_html});
    },ajaxFailure: function(popupId) {
        var popup_content = $$('#' + popupId + ' .popup_content').first();
        var submit_buttons = $$('#' + popupId + ' input[type="submit"]');
        submit_buttons.invoke('enable');
        submit_buttons.invoke('removeClassName', 'disabled');
        popup_content.childElements().invoke('setOpacity', 1);
        popup_content.setStyle({position: 'static'}).show();
        $$('#' + popupId + ' label.infield').invoke('show');
        $('popup_spinner').remove();
    }};
Flash = Class.create();
Flash.DEFAULT_TIME_BEFORE_FADE = 2500;
Flash.PROLONGED_TIME_BEFORE_FADE = 10000;
Flash.FADE_TIME = 800;
Flash.prototype = {initialize: function(elements, callback, displayTime) {
        this.elements = elements;
        this.callback = callback;
        this.startTime = this.now();
        this.going = true;
        this.timeBeforeFade = displayTime;
        this.totalTime = this.timeBeforeFade + Flash.FADE_TIME;
    },now: function() {
        return Clock.now();
    },update: function() {
        if (this.going) {
            var elapsed = this.now() - this.startTime;
            if (elapsed < this.timeBeforeFade) {
                this.set(1.0);
                ThreadManager.startThread("Flash.update()", this.update.bind(this), 100);
            } else if (elapsed < this.totalTime) {
                var opacity = (Flash.FADE_TIME - (elapsed - this.timeBeforeFade)) / Flash.FADE_TIME;
                this.set(opacity);
                ThreadManager.startThread("Flash.update()", this.update.bind(this), 100);
            } else {
                this.stop();
            }
        }
    },show: function() {
        this.update();
    },stop: function() {
        this.going = false;
        this.set(0.0);
        flashes.splice(flashes.indexOf(this), 1);
        if (this.callback) {
            this.callback();
        }
    },getElements: function() {
        return this.elements;
    },set: function(opacity) {
        for (var i = 0; i < this.elements.length; i++) {
            var element = this.elements[i];
            if (element.statusChange) {
                element.statusChange(opacity);
            }
        }
    }};
Flash.gradient = function(start, end, percent) {
    return Math.round(start + (percent * (end - start)));
};
Flash.calculateColor = function(opacity, originalColor) {
    var red = this.gradient(254, originalColor['red'], 1 - opacity);
    var green = this.gradient(203, originalColor['green'], 1 - opacity);
    var blue = this.gradient(106, originalColor['blue'], 1 - opacity);
    return "rgb(" + red + "," + green + "," + blue + ")";
};
var flashes = [];
function flash(elements, callback) {
    for (var i = 0; i < elements.length; i++) {
        for (var j = 0; j < flashes.length; j++) {
            if (flashes[j].getElements()[0] == elements[i]) {
                flashes[j].stop();
                break;
            }
        }
        var flash = new Flash(elements, callback, Flash.DEFAULT_TIME_BEFORE_FADE);
        flashes.push(flash);
        flash.show();
    }
}
function prolongedFlash(elements, callback, displayTime) {
    for (var i = 0; i < elements.length; i++) {
        for (var j = 0; j < flashes.length; j++) {
            if (flashes[j].getElements()[0] == elements[i]) {
                flashes[j].stop();
                break;
            }
        }
        if (!displayTime) {
            displayTime = Flash.PROLONGED_TIME_BEFORE_FADE;
        }
        var flash = new Flash(elements, callback, displayTime);
        flashes.push(flash);
        flash.show();
    }
}
Maintenance = Class.create();
Maintenance.FINAL_MESSAGE = "Tracker update imminent - save your work";
Maintenance.FINAL_DISPLAY_TIME = 600000;
Maintenance.WARNING_MESSAGE = "Tracker update in TIME - save your work";
Maintenance.prototype = {initialize: function(maintenanceTime, trackerVersion) {
        var maintenance = new Date(maintenanceTime).getTime();
        this.valid = trackerVersion == window.app.getTrackerVersion();
        if (!this.valid) {
            return;
        }
        if (maintenance <= Clock.now()) {
            prolongedStatus(Maintenance.FINAL_MESSAGE, null, Maintenance.FINAL_DISPLAY_TIME, "maintenance");
            return;
        }
        var seconds = 1000;
        var minutes = 60 * seconds;
        this.scheduledMessages = [[15 * minutes, "15 minutes"], [10 * minutes, "10 minutes"], [5 * minutes, "5 minutes"], [4 * minutes, "4 minutes"], [3 * minutes, "3 minutes"], [2 * minutes, "2 minutes"], [60 * seconds, "60 seconds"], [45 * seconds, "45 seconds"], [30 * seconds, "30 seconds"]];
        var self = this;
        this.scheduledMessages.each(function(m) {
            var millisFromMaintenance = m[0], warningTime = m[1];
            self.scheduleMessage(maintenance - millisFromMaintenance, Maintenance.WARNING_MESSAGE.replace("TIME", warningTime));
        });
        this.scheduleFunction(maintenance - 15 * seconds, prolongedStatus, Maintenance.FINAL_MESSAGE, null, Maintenance.FINAL_DISPLAY_TIME, "maintenance");
    },scheduleMessage: function(timestamp, message) {
        this.scheduleFunction(timestamp, function() {
            prolongedStatus(message, null, Flash.PROLONGED_TIME_BEFORE_FADE, "maintenance");
        });
    },scheduleFunction: function(timestamp, fn, arg1, arg2, arg3, arg4) {
        var now = Clock.now();
        if (timestamp == now) {
            fn(arg1, arg2, arg3, arg4);
        } else if (timestamp > now) {
            var timeout = timestamp - now;
            setTimeout(function() {
                fn(arg1, arg2, arg3, arg4);
            }, timeout);
        }
    }};
StatusBox = Class.create();
StatusBox.prototype = {initialize: function(statusElement) {
        this.statusElement = statusElement;
        this.statusChanges = [];
    },_setMessage: function(className, message) {
        if (!this.statusElement) {
            this.statusElement = $('status');
        }
        if (!this.statusElement.statusChange) {
            this.statusElement.statusChange = function(opacity) {
                Element.setOpacity(this, opacity);
            }.bind(this.statusElement);
        }
        this.statusElement.innerHTML = message;
        this.statusElement.className = className;
    },show: function(message, elementsToUpdate, displayTime, additionalClasses) {
        this.displayTime = displayTime;
        this.statusChanges.push({'message': message,'elementsToUpdate': elementsToUpdate,'additionalClasses': additionalClasses});
        if (this.statusChanges.length == 1) {
            this.first();
        }
    },first: function() {
        if (!this.statusChanges.isEmpty()) {
            var current = this.statusChanges[0];
            var classNames = current["additionalClasses"] == null ? "statusOn" : "statusOn " + current["additionalClasses"];
            this._setMessage(classNames, current['message']);
            var elements = current['elementsToUpdate'];
            elements.push(this.statusElement);
            if (this.displayTime) {
                prolongedFlash(elements, this.next.bind(this), this.displayTime);
            } else {
                flash(elements, this.next.bind(this));
            }
        }
    },next: function() {
        var current = this.statusChanges.shift();
        this._setMessage('statusOff', '');
        this.first();
    }};
function status(message, elementsToUpdate, additionalClasses) {
    StatusBox.singleton.show(message, elementsToUpdate ? elementsToUpdate : [], null, additionalClasses);
}
function prolongedStatus(message, elementsToUpdate, displayTime, additionalClasses) {
    if (!displayTime) {
        displayTime = Flash.PROLONGED_TIME_BEFORE_FADE;
    }
    StatusBox.singleton.show(message, elementsToUpdate ? elementsToUpdate : [], displayTime, additionalClasses);
}
StatusBox.singleton = new StatusBox();
function UUID() {
    this.id = this.createUUID();
}
UUID.prototype.valueOf = function() {
    return this.id;
}
UUID.prototype.toString = function() {
    return this.id;
}
UUID.prototype.createUUID = function() {
    var dg = new Date(1582, 10, 15, 0, 0, 0, 0);
    var dc = new Date();
    var t = dc.getTime() - dg.getTime();
    var h = '-';
    var tl = UUID.getIntegerBits(t, 0, 31);
    var tm = UUID.getIntegerBits(t, 32, 47);
    var thv = UUID.getIntegerBits(t, 48, 59) + '1';
    var csar = UUID.getIntegerBits(UUID.rand(4095), 0, 7);
    var csl = UUID.getIntegerBits(UUID.rand(4095), 0, 7);
    var n = UUID.getIntegerBits(UUID.rand(8191), 0, 7) +
    UUID.getIntegerBits(UUID.rand(8191), 8, 15) +
    UUID.getIntegerBits(UUID.rand(8191), 0, 7) +
    UUID.getIntegerBits(UUID.rand(8191), 8, 15) +
    UUID.getIntegerBits(UUID.rand(8191), 0, 15);
    return tl + h + tm + h + thv + h + csar + csl + h + n;
}
UUID.getIntegerBits = function(val, start, end) {
    var base16 = UUID.returnBase(val, 16);
    var quadArray = new Array();
    var quadString = '';
    var i = 0;
    for (i = 0; i < base16.length; i++) {
        quadArray.push(base16.substring(i, i + 1));
    }
    for (i = Math.floor(start / 4); i <= Math.floor(end / 4); i++) {
        if (!quadArray[i] || quadArray[i] == '')
            quadString += '0';
        else
            quadString += quadArray[i];
    }
    return quadString;
}
UUID.returnBase = function(number, base) {
    return (number).toString(base).toUpperCase();
}
UUID.rand = function(max) {
    return Math.floor(Math.random() * (max + 1));
}
var IterationTextFormatter = {getTerseIterationNumberFor: function(iteration) {
        return iteration.getNumber() + "";
    },getVerboseIterationNumberFor: function(iteration) {
        return "Iteration " + iteration.getNumber();
    },getTerseDateTextFor: function(iteration) {
        var timeZoneName = iteration.getProject().getTimeZone();
        var text = this._getTerseDateText(iteration.getStart(), timeZoneName);
        if (iteration.hasOverridenIterationLength()) {
            text += " - " + this._getTerseDateText(iteration.getFinish().plusDays(-1), timeZoneName);
        } else if (iteration.isCurrent()) {
            text += " - Current";
        }
        return text;
    },_getTerseDateText: function(date, timeZoneName) {
        var text = date.asDateWithZone(timeZoneName).asDisplayStringNoYear();
        if (date.getFullYear() != DateUtils.now().getFullYear()) {
            text += " ";
            text += date.getFullYear();
        }
        return text;
    },getVerboseDateTextFor: function(iteration) {
        var timeZoneName = iteration.getProject().getTimeZone();
        return "Iteration from " +
        iteration.getStart().asDateWithZone(timeZoneName).asDisplayStringWithTimezone() + " through " +
        iteration.getFinish().plusDays(-1).asDateWithZone(timeZoneName).asDisplayStringWithTimezone();
    },getTersePointsTextFor: function(iteration) {
        return IterationTextFormatter._pointsText(iteration, "Pts", "Pts");
    },getVerbosePointsTextFor: function(iteration) {
        return IterationTextFormatter._pointsText(iteration, "Points completed", "Points remaining");
    },_pointsText: function(iteration, completedString, remainingString) {
        var velocity = iteration.getVelocity();
        var text;
        if (iteration.isPast()) {
            return completedString + ": " + velocity.getCompleted();
        } else if (iteration.isCurrent()) {
            return completedString + ": " + velocity.getCompleted() + " of " + velocity.getTotal();
        } else {
            return remainingString + ": " + velocity.getProjected();
        }
    },getTerseTeamStrengthFor: function(iteration) {
        return IterationTextFormatter.teamStrengthAsPercent(iteration) + "%";
    },getVerboseTeamStrengthFor: function(iteration) {
        return "Team strength for this iteration is at " + IterationTextFormatter.teamStrengthAsPercent(iteration) + "%. Click to change.";
    },teamStrengthAsPercent: function(iteration) {
        return (iteration.getTeamStrength() * 100).toFixed(0);
    }};
var ProjectTabResizer;
ProjectTabResizer = {resizeTabs: function(windowWidth) {
        var minWidth = parseInt(j('body').css('min-width'));
        windowWidth = windowWidth > minWidth ? windowWidth : minWidth;
        var rowElement = j('#project_name_row');
        var otherTabs = rowElement.find('li:not(.current)');
        var numTabs = otherTabs.length;
        var maxWidth = windowWidth - (parseInt(rowElement.css('padding-left')) + parseInt(rowElement.css('padding-right')) +
        (parseInt(rowElement.find('li').css('margin-right')) * (numTabs + 1)) +
        parseInt(rowElement.find('li.current').width()));
        if (j.browser.msie) {
            maxWidth -= 10;
        }
        for (var i = 0; i < numTabs; i++) {
            otherTabs[i] = j(otherTabs[i]);
        }
        if (ProjectTabResizer.calcNeededWidth(otherTabs) <= maxWidth) {
            rowElement.find('li:not(.current)').removeClass('ellipsify');
            rowElement.find('li:not(.current)').css('max-width', '');
            return;
        }
        var maxWidthPerOtherTab = ProjectTabResizer.calcMaxWidthPerOtherTab(otherTabs, numTabs, maxWidth);
        rowElement.find('li:not(.current)').css('max-width', maxWidthPerOtherTab + 'px');
        j.each(otherTabs, function(index, tabElement) {
            if (parseInt(tabElement.attr('originalWidth')) >= maxWidthPerOtherTab) {
                tabElement.addClass('ellipsify');
            } else {
                tabElement.removeClass('ellipsify');
            }
        });
    },calcNeededWidth: function(otherTabs) {
        var neededWidth = 0;
        j.each(otherTabs, function(index, tabElement) {
            var elementWidth = tabElement.attr('originalWidth');
            if (!elementWidth) {
                elementWidth = tabElement.width();
                tabElement.attr('originalWidth', elementWidth);
            } else {
                elementWidth = parseInt(elementWidth);
            }
            neededWidth += elementWidth;
        });
        return neededWidth;
    },calcMaxWidthPerOtherTab: function(otherTabs, numTabs, maxWidth) {
        otherTabs.sort(function(a, b) {
            return parseInt(a.attr('originalWidth')) - parseInt(b.attr('originalWidth'));
        });
        var lastTabNarrowEnough = -1;
        var accumulatedWidths = 0;
        for (var i = 0; i < numTabs; i++) {
            var width = parseInt(otherTabs[i].attr('originalWidth'));
            var numRemainingTabs = numTabs - i;
            if ((accumulatedWidths + (width * numRemainingTabs)) > maxWidth) {
                break;
            }
            lastTabNarrowEnough = i;
            accumulatedWidths += width;
        }
        var maxWidthPerOtherTab;
        if (lastTabNarrowEnough < 0) {
            maxWidthPerOtherTab = Math.floor(maxWidth / numTabs);
        } else {
            var baseWidth = parseInt(otherTabs[lastTabNarrowEnough].attr('originalWidth'));
            var numEllipsifiedTabs = (numTabs - 1) - lastTabNarrowEnough;
            var pixelsAvailable = maxWidth - (accumulatedWidths + (baseWidth * numEllipsifiedTabs));
            maxWidthPerOtherTab = baseWidth + (pixelsAvailable / numEllipsifiedTabs);
        }
        return maxWidthPerOtherTab;
    }};
var PayPeriodActions = {setPeriod: function(start, finish) {
        $("from_date_date_period[start]").value = start;
        $("to_date_date_period[finish]").value = finish;
    }};
Widget = Class.create();
Widget.prototype = {initialize: function(widgetType, htmlIdSuffix) {
        this.super_init(widgetType, htmlIdSuffix);
    },super_init: function(widgetType, htmlIdSuffix) {
        this.widgetType = widgetType;
        this._htmlIdSuffix = htmlIdSuffix;
        this._htmlId = htmlIdSuffix || "";
    },getDragGroup: function() {
        return this.widgetType.gsub(/Widget$/, '');
    },getDropGroup: function getDropGroup() {
        return "InvalidDropGroup";
    },getTitle: function() {
        return null;
    },getSubtitle: function() {
        return null;
    },setParent: function(parent) {
        this.parent = parent;
        var parentHtmlId;
        if (parent) {
            parentHtmlId = parent.htmlId();
        }
        if (parentHtmlId) {
            if (this._htmlIdSuffix) {
                this._htmlId = parentHtmlId + "_" + this._htmlIdSuffix;
            } else {
                this._htmlId = parentHtmlId;
            }
        } else {
            if (this._htmlIdSuffix) {
                this._htmlId = this._htmlIdSuffix;
            } else {
                this._htmlId = "";
            }
        }
        this._noteParentSet(parent);
    },getMiddlePositionY: function() {
        var top = this.getAbsolutePosition().y;
        var dim = this.getDimensions();
        return top + dim.height / 2;
    },getDimensions: function() {
        return Element.getDimensions(this.getDomElement());
    },getAbsolutePosition: function() {
        var offset = j(this.getDomElement()).offset();
        return {y: offset.top,x: offset.left}
    },showErrorMessage: function(message) {
        alert(message);
    },swapElement: function(orig, replacement) {
        var parent = orig.parentNode;
        if (parent && parent.nodeType == ELEMENT_NODE_TYPE) {
            parent.insertBefore(replacement, orig);
            parent.removeChild(orig);
        }
    },_noteParentSet: function(parent) {
    },htmlId: function() {
        return this._htmlId;
    },toString: function() {
        return this.widgetType + "Widget: " + this._htmlId;
    },postShow: function() {
    },afterAddedToDom: function() {
    },destroy: function() {
        if (this._destroy != undefined) {
            this._destroy();
        }
        this.unsubscribeFromEvents();
    },unsubscribeFromEvents: function() {
        if (this._unsubscribeFromEvents != undefined) {
            this._unsubscribeFromEvents();
        }
    },_setOriginalBackground: function() {
        var re;
        var style = Element.getStyle(this.renderedElement, "background-color");
        if (!style) {
            style = "";
        }
        if (!this._originalBackgroundColor) {
            this._originalBackgroundColor = {};
        }
        if (re = style.match(/rgb\((\d+), ?(\d+), ?(\d+)\)/)) {
            this._originalBackgroundColor['red'] = re[1];
            this._originalBackgroundColor['green'] = re[2];
            this._originalBackgroundColor['blue'] = re[3];
        } else {
            this._originalBackgroundColor = {red: 255,green: 248,blue: 215};
        }
    },showChange: function(opacity) {
        if (this.renderedElement) {
            if (this._originalBackgroundColor == null) {
                this._setOriginalBackground();
            }
            if (opacity == 0.0) {
                this.renderedElement.style.backgroundColor = "";
                this.isShowingChange = false;
            } else {
                this.renderedElement.style.backgroundColor = Flash.calculateColor(opacity, this._originalBackgroundColor);
                this.isShowingChange = true;
            }
        }
    },_createBottomDiv: function() {
        var bottomDiv = Element.newDiv(null, {className: 'btm'});
        bottomDiv.appendChild(Element.newDiv(null, {className: 'right'}));
        bottomDiv.appendChild(Element.newDiv(null, {className: 'left'}));
        bottomDiv.appendChild(Element.newDiv(null, {className: 'mid'}));
        return bottomDiv;
    },_isSelected: function() {
        return false;
    },j: function(selector) {
        var element = this.renderedElement || this._initialRenderedElement;
        if (element) {
            if (selector) {
                return j(selector, element);
            } else {
                return j(element);
            }
        } else {
            if (selector) {
                return j(this.selfSelector() + ' ' + selector, this._containerElement);
            } else {
                return j(this.selfSelector(), this._containerElement);
            }
        }
    }};
Widget.FormButton = Class.create();
Widget.FormButton.prototype = Object.extend(new Widget(), {initialize: function(buttonText, onclickFunction, htmlIdSuffix, isDisabled, options) {
        this.super_init("FormButton", htmlIdSuffix);
        this._onclickFunction = onclickFunction;
        this._buttonText = buttonText;
        this._isDisabled = isDisabled;
        this._options = options;
    },render: function() {
        var attributes = {type: "submit",value: this._buttonText,id: this.htmlId(),onclick: function() {
                return false
            }};
        for (var optionName in this._options) {
            attributes[optionName] = this._options[optionName];
        }
        this.renderedElement = Element.create("input", attributes);
        j(this.renderedElement).click(this.onclickHandler.bind(this, this));
        if (this._isDisabled) {
            this.renderedElement.disabled = true;
        }
        return this.renderedElement;
    },onclickHandler: function() {
        var form = j(this.renderedElement).closest('form')[0];
        j('.saveable', form).trigger('widget:save');
        if (!form) {
            throw "Couldn't find form parent for " + this.renderedElement;
        }
        var params = {};
        params = formToCgiHash(form);
        var returnValue = this._onclickFunction(params);
        return returnValue ? returnValue : false;
    },fireClick: function() {
        this.onclickHandler();
    }});
Widget.ContainerDragDropModule = {_createDroppable: function(options) {
        var hoverClass = 'drop_target';
        if (this.containedWidget.additionalHoverClass) {
            hoverClass += ' ' + this.containedWidget.additionalHoverClass();
        }
        j(this.renderedElement).data('widget', this).droppable({greedy: true,hoverClass: hoverClass,addClasses: false,accept: function(draggable) {
                if (!draggable.is('.item')) {
                    return false;
                }
                var drag = draggable.data('widget');
                if (drag) {
                    var drop = j(this).data('widget');
                    return drag.canBeDroppedOn(drop);
                } else {
                    return false;
                }
            }}).on('drop', function(e, ui) {
            var drag = ui.draggable.data('widget');
            var drop = j(this).data('widget');
            var func = function() {
                drag.notifyDroppedOn(drop, options);
                ui.helper.remove();
            }
            if (!j.browser.msie) {
                func()
            } else {
                setTimeout(func, 0);
            }
        });
    },destroyDraggable: function() {
        j(this.renderedElement).draggable('destroy').droppable('destroy').removeData('widget').off();
    },disableDraggable: function() {
        var $j = j(this.renderedElement);
        if ($j.data('draggable')) {
            $j.attr('aria-disabled', true).data('draggable').options.disabled = true;
        }
    },enableDraggable: function() {
        var $j = j(this.renderedElement);
        if ($j.data('draggable')) {
            $j.attr('aria-disabled', false).data('draggable').options.disabled = false;
        }
    }};
Widget.ContainedDragDropModule = {isAllowedDragDropCombination: function(dragGroup, dropGroup) {
        var acceptMap = {"ExternalStoryPreview": ["InactiveStory", "BoundaryStory"],"InactiveStory": ["InactiveStory", "BoundaryStory", "EpicPreview"],"InactiveRelease": ["ActiveStory", "InactiveStory", "BoundaryStory", "EpicPreview"],"ActiveRelease": ["ActiveStory", "InactiveStory", "BoundaryStory", "EpicPreview"],"ActiveStory": ["ActiveStory", "BoundaryStory", "EpicPreview"],"EpicPreview": ["EpicPreview", "EpicEndOfList"]};
        return !!(acceptMap[dragGroup] && acceptMap[dragGroup].indexOf(dropGroup) != -1)
    },canBeDroppedOn: function canBeDroppedOn(drop) {
        if (!drop) {
            return true;
        }
        var dropGroup = drop.dropGroup;
        if (!dropGroup && app.isInTesting()) {
            throw "Unset Drop Group"
        }
        if (this.model && this.model.project.hasSelectedModels() && this.model.project.isSelectedModel(this.model)) {
            var selectedStories = this.model.project.getSelectedModels();
            for (var i = 0; i < selectedStories.length; i++) {
                var storyDragGroup = this.dragGroupForStory(selectedStories[i]);
                if (!selectedStories[i].isAccepted() && !this.isAllowedDragDropCombination(storyDragGroup, dropGroup)) {
                    return false;
                }
            }
            return true;
        }
        return this.isAllowedDragDropCombination(this.getDragGroup(), dropGroup);
    },_disableDraggable: function() {
        if (this.parent && this.parent.disableDraggable) {
            this.parent.disableDraggable();
        }
    }};
Widget.PanelModule = {isInReleasePanel: function() {
        return (this.itemListWidget.title == 'Releases');
    },isInSearchPanel: function() {
        return (this.itemListWidget.title == 'Search Results');
    },isInMyWorkPanel: function() {
        return (this.itemListWidget.title == 'My Work');
    },isInBacklogPanel: function() {
        return (this.itemListWidget.title == 'Backlog');
    },isInDonePanel: function() {
        return (this.itemListWidget.title == 'Done');
    },isInIceboxPanel: function() {
        return (this.itemListWidget.title == 'Icebox');
    },isInCurrentPanel: function() {
        return (this.itemListWidget.title == 'Current');
    },isInEpicStoriesPanel: function() {
        return (this.itemListWidget.title == 'Epic Stories');
    },getEffectivePanel: function getEffectivePanel() {
        switch (this.itemListWidget.title) {
            case "Current":
            case "Icebox":
                return this.itemListWidget.title;
            case "Backlog":
                if (app.layout.isCurrentInBacklog) {
                    var widgetToLookup = (this.widgetType == "Item" || this.widgetType == "EndOfList") ? this : this.parent;
                    return this.itemListWidget.isBelowSecondIterationHeader(widgetToLookup) ? "Backlog" : "Current";
                } else {
                    return "Backlog"
                }
            case "Epic Stories":
                var prevWidget = this.prevWidget && this.prevWidget() ? this.prevWidget() : null;
                if (prevWidget && prevWidget != this && prevWidget.containedWidget && prevWidget.containedWidget.isSeparationWidget) {
                    return "Icebox";
                }
                if (this.containedWidget && this.containedWidget.isSeparationWidget) {
                    return "Current";
                }
                return null;
            default:
                return null;
        }
    }};
BaseWidget = Class.create({initialize: function initialize(project) {
        this.project = project;
        this.isSaving = false;
        this.isDestroyed = false;
        this._configuration = this.configuration();
        this._originalBackgroundColor = {red: 209,green: 209,blue: 209};
        this._childWidgets = {};
        for (key in this._configuration["childWidgets"]) {
            var childConfiguration = this._configuration["childWidgets"][key], childClass = childConfiguration[0], childArgs = childConfiguration[1];
            this._childWidgets[key] = new childClass(childArgs[0], childArgs[1], childArgs[2], childArgs[3], childArgs[4], childArgs[5], childArgs[6], childArgs[7], childArgs[8], childArgs[9]);
        }
    },configuration: function configuration() {
        return {domainEvents: [],delegateEvents: {},placeholders: {},renderedElementHtml: null};
    },paint: function paint() {
        return '<div></div>'
    },render: function render() {
        var $renderedElement;
        if (this._configuration['renderedElementHtml']) {
            $renderedElement = j(this._configuration['renderedElementHtml']);
            $renderedElement.append(this.paint());
        } else {
            $renderedElement = j(this.paint());
        }
        this.renderedElement = $renderedElement.get(0);
        for (selector in this._childWidgets) {
            this.j(selector).append(this._childWidgets[selector].render());
        }
        return this.renderedElement;
    },getAllChanges: function getAllChanges() {
        throw "implement me in subclass!";
    },hasAnyChanges: function hasAnyChanges() {
        return !_(this.getAllChanges()).isEmpty();
    },updateDynamicValues: function updateDynamicValues() {
    },afterAddedToDom: function afterAddedToDom() {
        var self = this;
        this._setupPlaceholders();
        $H(this._configuration['delegateEvents']).each(function(definition) {
            var eventType = definition[0].split(' ', 1)[0], selector = definition[0].substring(eventType.length), handlerNameOrFn = definition[1], handlerMethod = (j.isFunction(handlerNameOrFn) ? handlerNameOrFn : self[handlerNameOrFn]);
            if (!j.isFunction(handlerMethod)) {
                throw "callback method '" + handlerNameOrFn + "' is not a function";
            }
            var proxiedMethod = j.proxy(handlerMethod, self);
            self.j().on(eventType, selector, function(event) {
                var args = _(arguments).toArray();
                args.unshift(j(event.currentTarget));
                return proxiedMethod.apply(self, args);
            });
        });
        this.updateDynamicValues();
        $H(this._childWidgets).values().invoke('afterAddedToDom');
    },destroy: function destroy() {
        if (this.isDestroyed) {
            return;
        }
        $H(this._childWidgets).values().invoke('destroy');
        if (this.renderedElement) {
            this.j().remove();
        }
        this.renderedElement = null;
        this.project = null;
        this.isDestroyed = true;
    },onPlaceholderTextareaFocus: function onPlaceholderTextareaFocus($textarea, $event, placeHolderText) {
        if ($textarea.val() == placeHolderText) {
            $textarea.addClass('focused');
            $textarea.val("");
        }
    },onPlaceholderTextareaBlur: function onPlaceholderTextareaBlur($textarea, $event, placeHolderText) {
        if ($textarea.val() == '') {
            $textarea.removeClass('focused');
            $textarea.val(placeHolderText);
        }
    },showChange: function(opacity) {
        if (this.renderedElement) {
            if (opacity == 0.0) {
                this.elementsToFlash().css('backgroundColor', '');
                this.isShowingChange = false;
            } else {
                this.elementsToFlash().css('backgroundColor', Flash.calculateColor(opacity, this._originalBackgroundColor));
                this.isShowingChange = true;
            }
            this.afterShowChange(opacity);
        }
    },elementsToFlash: function elementToFlash() {
        return j(this.renderedElement);
    },afterShowChange: function afterShowChange(opacity) {
    },getChildWidgets: function getChildWidgets() {
        var widgets = [];
        for (key in this._childWidgets) {
            widgets.push(this._childWidgets[key]);
        }
        return widgets;
    },getChildWidgetBySelector: function getChildWidgetBySelector(selector) {
        return this._childWidgets[selector];
    },showErrorMessage: function(message) {
        alert(message);
    },htmlId: function htmlId() {
        if (!this._uuid) {
            this._uuid = new UUID().toString();
        }
        return this._uuid;
    },_runCommand: function(command) {
        this.isSaving = true;
        this.project.commandQueue.enqueue(command);
    },j: function(selector) {
        var element = this.renderedElement;
        if (element) {
            if (selector) {
                return j(selector, element);
            } else {
                return j(element);
            }
        } else {
            throw new Error("renderedElement was not set on '" + this + "'. Did you try to call this.j('" + selector + "') before you rendered?");
        }
    },_setupPlaceholders: function _setupPlaceholders() {
        var self = this;
        $H(this._configuration['placeholders']).each(function(definition) {
            var selector = definition[0], placeholderTextOrFn = definition[1], placeHolderText = j.isFunction(self[placeholderTextOrFn]) ? self[placeholderTextOrFn]() : placeholderTextOrFn;
            if (self.j(selector).val() != placeHolderText) {
                self.j(selector).addClass('focused');
            }
            self.j(selector).data("placeHolder_text", placeHolderText);
            var proxiedMethodFocus = j.proxy(self.onPlaceholderTextareaFocus, self);
            var proxiedMethodBlur = j.proxy(self.onPlaceholderTextareaBlur, self);
            self.j().on("focus", selector, function(event) {
                return proxiedMethodFocus(j(event.currentTarget), event, placeHolderText);
            });
            self.j().on("blur", selector, function(event) {
                return proxiedMethodBlur(j(event.currentTarget), event, placeHolderText);
            });
        });
    }});
BaseWidget.MAGIC_TABINDEX = 10;
BaseModelWidget = Class.create(BaseWidget, {initialize: function initialize($super, model) {
        if (!model) {
            throw ("BaseModelWidget needs to passed a valid model");
        }
        this.model = model;
        this.readOnly = this.model.project.isReadOnly() || (this.model && this.model.isBeingCreated && this.model.isBeingCreated());
        $super(model.project);
    },isReadOnly: function isReadOnly() {
        return this.readOnly;
    },afterAddedToDom: function afterAddedToDom($super) {
        $super();
        var self = this;
        $A(this._configuration['domainEvents'].concat(["startPendingUpdate", "stopPendingUpdate"])).uniq().each(function(eventConfigString) {
            var eventName = eventConfigString, modelAttr = "model";
            var config = eventConfigString.split('.');
            if (config.length == 2) {
                eventName = config[1];
                modelAttr = config[0];
            }
            var handlerName = "on" + eventName.substring(0, 1).capitalize() + eventName.substring(1);
            if (!self[handlerName]) {
                self[handlerName] = function() {
                    self.updateDynamicValues();
                }
            }
            self[modelAttr].events.subscribe(self, eventName);
        });
    },destroy: function destroy($super) {
        if (this.isDestroyed) {
            return;
        }
        var self = this;
        $A(this._configuration['domainEvents']).each(function(eventConfigString) {
            var eventName = eventConfigString, modelAttr = "model";
            var config = eventConfigString.split('.');
            if (config.length == 2) {
                eventName = config[1];
                modelAttr = config[0];
            }
            if (self[modelAttr]) {
                self[modelAttr].events.unsubscribe(self, eventName);
            }
        });
        this.model = null;
        $super();
    },onBeforeRemove: function onBeforeRemove() {
    },onStartPendingUpdate: function onStartPendingUpdate() {
    },onStopPendingUpdate: function onStopPendingUpdate() {
        this.isSaving = false;
    },onStatusChange: function(model, opacity) {
        this.showChange(opacity);
    },showErrorMessageForModel: function(model) {
        this.showErrorMessage(model.showErrorMessage);
        model.showErrorMessage = false;
    },_runCommand: function($super, command) {
        if (this.model.isNew()) {
            command.execute();
        } else {
            $super(command);
        }
    }});
var StoryIconHelper = {getStoryTypeIconPath: function(story, suffix) {
        var storyType = story.getStoryType().getName();
        if (story.hasExternalId()) {
            storyType = storyType + '_external';
        }
        return story_icon_path(storyType + (suffix || ".png"));
    },getStoryTypeIconPathFromType: function(storyType, hasExternalId, suffix) {
        var storyTypeIcon = storyType;
        if (hasExternalId) {
            storyTypeIcon = storyType + '_external';
        }
        return story_icon_path(storyTypeIcon + (suffix || ".png"));
    },getStoryEstimateIconPath: function(story, suffix) {
        if (story.project.getPointScale().isCustom()) {
            return "";
        }
        var path;
        var mySuffix = "_" + story.project.getPointScaleName() + (suffix || ".gif");
        if (story.isEstimatable() || story.isEstimated()) {
            if (story.isUnestimated()) {
                path = "estimate_unestimated" + mySuffix;
            } else {
                path = "estimate_" + story.getEstimate() + "pt" + mySuffix;
            }
        } else {
            path = "estimate_0pt" + mySuffix;
        }
        return story_icon_path(path);
    },getStoryEstimateIconPathFromEstimate: function(estimate, pointScaleName, isCustom, isEstimateable, isEstimated, suffix) {
        if (isCustom) {
            return "";
        }
        var path;
        var mySuffix = "_" + pointScaleName + (suffix || ".gif");
        if (isEstimateable && isEstimated) {
            path = "estimate_" + estimate + "pt" + mySuffix;
        } else if (isEstimateable && !isEstimated) {
            path = "estimate_unestimated" + mySuffix;
        } else {
            path = "estimate_0pt" + mySuffix;
        }
        return story_icon_path(path);
    },getStoryEstimateIconTitle: function(story) {
        if (story.project.getPointScale().isCustom() || !story.isEstimatable()) {
            return "";
        }
        var title;
        if (story.isUnestimated()) {
            title = "Unestimated"
        } else {
            title = "Estimate: " + story.getEstimate() + " " + (story.getEstimate() == 1 ? "point" : "points");
        }
        return title;
    }};
AbstractChart = Class.create();
AbstractChart.prototype = Object.extend(new Widget(), {super_init: function(project) {
        this._project = project;
        this._calculated = false;
    },onUpdate: function() {
        this._calculated = false;
        if (this.chartElement != null)
            this.paint();
    },_destroy: function() {
        if (this.renderedElement) {
            j(this.renderedElement).empty();
        }
        this.unsubscribeFromEvents();
    },subscribeToEvents: function() {
        this._project.events.subscribe(this, "update");
    },unsubscribeFromEvents: function() {
        this._project.events.unsubscribe(this, "update");
    },paint: function() {
        this.chartElement.style.visibility = "hidden";
        Element.show(this.waitElement);
        ThreadManager.startThread("chartPainter", this._paint.bind(this), 100);
    },render: function() {
        this.renderedElement = Element.newDiv(null);
        this.waitElement = Element.newDiv("Rendering...", {className: "chartWait"});
        this.renderedElement.appendChild(this.waitElement);
        this.chartElement = Element.newDiv(null);
        this.chartElement.style.visibility = "hidden";
        this.renderedElement.appendChild(this.chartElement);
        this.container = Element.newDiv(null, {className: "chart"});
        this.myRender();
        this.summaryDiv = Element.newDiv("", {className: "chartBusinessSummary"});
        this.chartElement.appendChild(this.summaryDiv);
        return this.renderedElement;
    },_paint: function() {
        if (!this._calculated) {
            this._calculate();
            this._calculated = true;
        }
        j(this.container).empty().removeData().off();
        this.chart = new Chart(this.container);
        this.myPaint();
        this.summaryDiv.innerHTML = this.getBusinessSummary();
        Element.hide(this.waitElement);
        this.chartElement.style.visibility = "visible";
    }});
AbstractPanelViewWidget = Class.create(Widget, {needsRenderDelay: function() {
        return false;
    },fillInWidgets: function() {
        throw "PanelView subclass should implement fillInWidgets()";
    },getDescription: function() {
        throw "PanelView subclass should implement getDescription()";
    },getTitle: function() {
        throw "PanelView subclass should implement getTitle()";
    },_noteParentSet: function(parent) {
        this.panel = parent;
    },open: function() {
    },close: function() {
    },manifestInfo: null});
BaseDetailsWidget = Class.create(BaseModelWidget, {initialize: function($super, model, parentWidget, options) {
        options = options || {};
        if (options.sidebar) {
            this._hasSidebar = true;
        }
        $super(model);
        this.parentWidget = parentWidget;
        this._inputSelectors = this.defineInputSelectors();
        this.isClosing = false;
    },_hasSidebar: false,hasSidebar: function() {
        return this._hasSidebar || this._sidebarAttachmentWidget() != null;
    },configuration: function configuration() {
        var delegateEvents = {"focus .subset li.clearfix": "onMetaRowFocus","blur .subset li.clearfix": "onMetaRowBlur","keydown .details": "onKeyDown","keypress .name_container textarea": "onKeyPress","click .maximize a.button": "maximize","click .cancel_or_close .cancel": "close","click .cancel_or_close .close": "saveAttachmentsAndClose"};
        if (!this.model.isNew()) {
            j.extend(delegateEvents, {"click .toggle_expanded_button": "saveAndClose","click .model_id_area input": "selectInputValue","click .story_link_area input": "selectInputValue"});
        }
        if (!this.isReadOnly()) {
            j.extend(delegateEvents, {"click .save": "saveButtonClickHandler","click .save_button": "saveButtonClickHandler","click .cancel_button": "close","click .readonly_description": "onDescriptionFocus","focus .description_area": "onDescriptionFocus","click .readonly_description a": "onDescriptionAnchorClick","keyup .description_area": "updateDirtyState","paste .details": "onPaste","click .name_container a.edit_button": "onEditName"});
            var name_selector = this.defineInputSelectors()['name'];
            delegateEvents["blur " + name_selector] = "updateDirtyState";
            delegateEvents["keyup " + name_selector] = "updateDirtyState";
        }
        var childWidgets = {'.comments_placeholder': [Tracker.CommentsWidget, [this.model, this.isReadOnly(), {attachmentOptions: {thumbnailSize: this._hasSidebar ? "big" : "thumb"}}]]};
        if (this._hasSidebar) {
            childWidgets['.sidebar_attachments_placeholder'] = [Tracker.CommentsWidget, [this.model, this.isReadOnly(), {disableAddComment: true,filterValue: 'attachments'}]]
        }
        return {domainEvents: ["beforeRemove", "update", "stopPendingUpdate", "startPendingUpdate", 'commentChange'],placeholders: {".name_container textarea.placeholder": "_newModelEnterTitleLabel"},delegateEvents: delegateEvents,childWidgets: childWidgets,renderedElementHtml: '<div class="details_container"></div>'};
    },paint: function paint() {
        return Tracker.Template.render('base_details_template', {model: this.model,modelType: this.model.getType(),htmlId: this.htmlId(),isReadOnly: this.isReadOnly(),isNew: this.model.isNew(),sectionA: this.sectionAHtml(),sectionB: this.sectionBHtml(),textareaHeightClass: Tracker.AutoResizer.HEIGHT_CLASS});
    },afterAddedToDom: function afterAddedToDom($super) {
        $super();
        if (app.useFlashClickToCopy && app.hasFlash && !this.model.isNew()) {
            this.setupCopyToClipboard('.model_id_label', this.model.id(), "Copy " + this.model.getType() + " ID to clipboard");
            this.setupCopyToClipboard('.full_url', this.model.getUrl(), "Copy " + this.model.getType() + " URL to clipboard");
        }
        if (this.readOnly) {
            this._getInputElement('name').attr('disabled', 'disabled');
        }
        this.j(".description_container").css({height: 0,overflow: 'hidden'});
        var $name = this._getInputElement('name');
        if (this.model.isNew()) {
            $name.val(this._newModelEnterTitleLabel());
        }
        if (!this.readOnly) {
            this.handleInitialFocus();
            Tracker.AutoResizer.makeContainedTextareasResizeable(this.j());
        }
        if (!this.model.isNew()) {
            this._buildMoreMenu(this.j('.more_menu'));
        }
    },handleInitialFocus: function() {
        if (this.model.isNew()) {
            this.j('.name_container').addClass('editing');
        }
        Element.putCursorAtEnd(this._getInputElement('name').get(0));
    },afterMaximize: function() {
        if (this._childWidgets['.sidebar_attachments_placeholder']) {
            throw "Cannot maximize widget that is already maximized";
        }
        var commentsWidget = new Tracker.CommentsWidget(this.model, this.isReadOnly(), {disableAddComment: true,filterValue: 'attachments'});
        this._childWidgets['.sidebar_attachments_placeholder'] = commentsWidget;
        this.j('.sidebar_attachments_placeholder').append(commentsWidget.render());
        this._rebuildMoreMenu();
        commentsWidget.afterAddedToDom();
        this._commentsWidget().afterMaximize();
        this.handleInitialFocus();
    },afterMinimize: function(close) {
        if (!this._childWidgets['.sidebar_attachments_placeholder']) {
            throw "Cannot minimize widget that has not been previously maximized";
        }
        this._childWidgets['.sidebar_attachments_placeholder'].destroy();
        delete this._childWidgets['.sidebar_attachments_placeholder'];
        this._commentsWidget().afterMinimize();
        if (close) {
            this._destroyMoreMenu();
        } else {
            this._rebuildMoreMenu();
        }
        this.handleInitialFocus();
    },updateDynamicValues: function updateDynamicValues() {
        this.setValues();
        this._commentsWidget().updateDynamicValues();
        var sidebar = this._sidebarAttachmentWidget();
        if (sidebar) {
            sidebar.updateDynamicValues();
        }
    },setValues: function() {
        this.j(".name_container h3 span").text(this.model.getName());
    },saveCommandClass: function saveCommandClass() {
        return Tracker[(this.model.isNew() ? "Add" : "Edit") + this.model.getType().capitalize()];
    },destroy: function destroy($super) {
        if (this.parentWidget && this.parentWidget._closeFullPageViewIfPresent) {
            this.parentWidget._closeFullPageViewIfPresent('full_story');
        }
        this._destroyMoreMenu();
        $super();
    },maximize: function() {
        throw "Implement in subclass";
    },minimize: function() {
        app.layout.getPanels()[0].viewWidget.minimize();
    },sectionAHtml: function sectionAHtml() {
        return Tracker.Template.render(this.model.getType() + '_details_section_a_template', j.extend({model: this.model,modelType: this.model.getType(),htmlId: this.htmlId(),isReadOnly: this.isReadOnly(),isNew: this.model.isNew()}, this.sectionAArgs()));
    },sectionAArgs: function sectionAArgs() {
        return {};
    },sectionBArgs: function sectionBArgs() {
        return {};
    },sectionBHtml: function sectionBHtml() {
        return Tracker.Template.render(this.model.getType() + '_details_section_b_template', j.extend({model: this.model,modelType: this.model.getType(),htmlId: this.htmlId(),isReadOnly: this.isReadOnly(),isNew: this.model.isNew()}, this.sectionBArgs()));
    },elementsToFlash: function elementsToFlash() {
        return this.getDetailsDiv();
    },onEditName: function onEditName() {
        this.j(".name_container").addClass("editing");
        Element.putCursorAtEnd(this.j(".name_container textarea.autoresize").get(0));
    },onMetaRowFocus: function onMetaRowFocus($target, event) {
        $target.closest('li.clearfix').addClass('focused');
    },onMetaRowBlur: function onMetaRowBlur($target, event) {
        $target.closest('li.clearfix').removeClass('focused');
    },_buildMoreMenu: function _buildMoreMenu($target) {
        this._moreMenu = new FormBalloon({width: 105,excludeCloseButton: true,excludeActionButtons: true,positionAdjustment: {horizontal: -24,vertical: 2},showStem: false,additionalClassNames: ['dropdown_menu', 'more_menu_dropdown'],enableVerticalFlip: true,builder: j.proxy(this._buildMoreMenuContent, this)});
        this._moreMenu.attachTo($target.get(0));
    },_buildMoreMenuContent: function _buildMoreMenuContent() {
        var self = this;
        var $menu = j("<ul><li><a class='view_history'>View History</a></li></ul>");
        var isFullPage = this.isMaximized();
        if (isFullPage) {
            $menu.find('.view_history').addClass('disabled');
        }
        $menu.find('.view_history').click(function() {
            if (!isFullPage) {
                self.onViewHistoryClick();
            }
            self._moreMenu.close();
        });
        if (!this.readOnly) {
            $menu.append(j("<li><a class='delete'>Delete</a></li>"));
            $menu.find('.delete').click(function() {
                self._moreMenu.close();
                self.deleteModel();
            });
        }
        return $menu.get(0);
    },isMaximized: function isMaximized() {
        return j('.full_model').length == 1;
    },_destroyMoreMenu: function _destroyMoreMenu() {
        if (this._moreMenu != undefined && this._moreMenu != null) {
            this._moreMenu.detach();
            this._moreMenu = null;
        }
    },selectInputValue: function selectInputValue($target) {
        $target.select();
    },onBeforeRemove: function onBeforeRemove() {
        if (this.isMaximized()) {
            this.parentWidget.collapse();
        }
    },onUpdate: function onUpdate() {
        if (!this.isSaving) {
            this.updateDynamicValues();
        }
    },onCommentChange: function() {
        if (this.hasSidebar() && this.model.isNew()) {
            this._sidebarAttachmentWidget().updateDynamicValues();
        }
    },onStopPendingUpdate: function onStopPendingUpdate() {
        this.isSaving = false;
        if (this.model && this.renderedElement) {
            this.setValues();
        }
    },onPaste: function onPaste() {
        setTimeout(this.updateDirtyState.bind(this), 100);
    },onKeyDown: function onKeyDown($topLevelElement, $event) {
        var $target = j($event.target);
        if (this.isSaving || this.isClosing) {
            return;
        }
        switch ($event.keyCode) {
            case Event.KEY_ESC:
                this.close();
                $event.stopPropagation();
                $event.preventDefault();
                break;
            case Event.KEY_RETURN:
                if (($target.is("textarea") || $target.is("input")) && !$target.hasClass('save_on_enter')) {
                    return;
                }
                if (app.save_on_enter) {
                    this.saveAndClose();
                    $event.stopPropagation();
                    $event.preventDefault();
                }
                break;
            case 83:
                var countOfModifierKeysDown = _([$event.metaKey, $event.ctrlKey, $event.shiftKey, $event.altKey]).compact().length;
                if (countOfModifierKeysDown == 1 && (HotKeys.useMetaKey ? $event.metaKey : $event.ctrlKey)) {
                    $event.preventDefault();
                    this.saveAndClose();
                }
                break;
        }
    },onKeyPress: function(el, $event) {
        if (app.save_on_enter && $event.keyCode == Event.KEY_RETURN) {
            $event.preventDefault();
        }
        this.j(".name_container").addClass("editing");
    },repositionClipboard: function($id_label, clipboardElement) {
        var left = '' + ($id_label.offset().left + 1) + 'px';
        var top = '' + ($id_label.offset().top + 1) + 'px';
        clipboardElement.style.left = left;
        clipboardElement.style.top = top;
    },setupCopyToClipboard: function setupCopyToClipboard(elementSelector, text, title) {
        title = title || text;
        var self = this;
        var $id_label = this.j(elementSelector);
        var clipboardElement = j('#clipboard_container').get(0);
        $id_label.mouseover(function(event) {
            app.clipboard.div.title = title;
            app.clipboard.div.alt = title;
            self.repositionClipboard($id_label, clipboardElement);
            app.clipboard.setText(text);
            app.clipboard.handlers['complete'] = [function() {
                    var selector = '.' + self.model.getType() + '_name';
                    self.j(selector).focus();
                    setTimeout(function() {
                        $id_label.addClass('active');
                        setTimeout(function() {
                            $id_label.removeClass('active');
                        }, 100);
                    }, 100);
                }];
            app.clipboard.handlers['mouseover'] = [function() {
                    $id_label.addClass('hover');
                    if (j.browser.mozilla) {
                        if (j('#clipboard_tooltip').size() == 0) {
                            j("body").append("<span id='clipboard_tooltip'>" + title + "</span>");
                        } else {
                            j('#clipboard_tooltip').text(title);
                        }
                        j("#clipboard_tooltip").css("top", (event.pageY + 10) + "px").css("left", (event.pageX + 10) + "px").fadeIn("slow")
                    }
                }];
            app.clipboard.handlers['mouseout'] = [function() {
                    $id_label.removeClass('hover');
                    clipboardElement.style.left = "-9999px";
                    clipboardElement.style.top = "0px";
                    if (j.browser.mozilla) {
                        j("#clipboard_tooltip").hide();
                    }
                }];
            self.repositionClipboard($id_label, clipboardElement);
        });
    },onViewHistoryClick: function onViewHistoryClick() {
        this.parentWidget.viewHistory();
    },hasUploadsInProgress: function() {
        if (!this._commentsWidget()) {
            return false;
        }
        return this._commentsWidget()._hasUploadsInProgress();
    },canBeClosed: function canBeClosed() {
        if (this.hasUploadsInProgress()) {
            alert('Please wait for file uploads to complete before saving this ' + this.model.getType());
            return false;
        }
        return true;
    },saveButtonClickHandler: function saveButtonClickHandler() {
        if (this.getDetailsDiv().hasClass('dirty')) {
            this.saveAndClose();
        }
    },saveAndClose: function saveAndClose() {
        if (this.canBeClosed()) {
            this.writeChildWidgetChangesToTopLevelModel();
            if (this.saveChanges()) {
                this.close();
            }
        }
    },saveAttachmentsAndClose: function saveAttachmentsAndClose() {
        var didClose = true;
        this.isClosing = true;
        var changes = this.getAllChanges();
        if (_(changes).chain().keys().include('resource_ids').value()) {
            this._commentsWidget().addComment("");
        }
        if (_(changes).chain().except('resource_ids').isEmpty().value()) {
            this.parentWidget.collapse();
        } else {
            didClose = this._confirmClose();
            if (didClose) {
                this.parentWidget.collapse();
            }
        }
        this.isClosing = false;
        return didClose;
    },getAllChanges: function getAllChanges() {
        var changes = this.getDetailsChanges();
        var children = this.getChildWidgets();
        for (var i = 0; i < children.length; i++) {
            Object.extend(changes, children[i].getAllChanges());
        }
        return changes;
    },getDetailsChanges: function() {
        var self = this;
        if (self.readOnly) {
            return {};
        }
        var inputs = this.defineInputSelectors();
        return _(inputs).inject(function(result, selector, input) {
            if (self._hasFieldBeenEdited(input)) {
                result[input] = self._getInputValue(input, self._getInputElement(input));
            }
            return result;
        }, {});
    },close: function close() {
        if (this.isDestroyed) {
            this.parentWidget.collapse();
            return;
        }
        if (!this._hasWidgetBeenEdited() || this.isSaving || this._confirmClose()) {
            if (this.model.isNew()) {
                this.parentWidget.removeFromItemList();
            } else {
                this.parentWidget.collapse();
            }
            this.isClosing = false;
            return true;
        }
        return false;
    },deleteModel: function deleteModel() {
        if (this.confirmDelete()) {
            this._runCommand(new this.DELETE_COMMAND({id: this.model.id()}, this.project));
            return true;
        }
        return false;
    },defineInputSelectors: function defineInputSelectors() {
        throw "YOU should implement defineInputSelectors()";
    },onDescriptionAnchorClick: function onDescriptionAnchorClick($element, event) {
        event.stopPropagation();
    },onDescriptionFocus: function() {
        var $readOnlyDescription = this.j('.readonly_description');
        if (!$readOnlyDescription.is(":visible")) {
            return;
        }
        $readOnlyDescription.hide();
        var $descriptionArea = this.j('.description_area');
        $descriptionArea.closest('div').css({height: 'auto',overflow: 'visible'});
        this.descriptionArea = $descriptionArea;
        Element.putCursorAtEnd($descriptionArea.get(0));
        $descriptionArea.closest('form').trigger("story:description:didBecomeEditable");
    },confirmDelete: function() {
        return confirm("Are you sure you want to delete " + this.model.getType() + " '" + this.model.getName() + "'?");
    },saveChanges: function() {
        if (this.model.isNew() || this._hasWidgetBeenEdited()) {
            var commandJson = j.extend(this._getSaveFields(), {id: this.model.id()});
            this._addAdditionalSaveCommandJson(commandJson);
            var saveCommand = new (this.saveCommandClass())(commandJson, this.project);
            this.isSaving = true;
            this.project.commandQueue.enqueue(saveCommand);
            if (saveCommand.model.showErrorMessage) {
                this.showErrorMessageForModel(saveCommand.model);
                this.isSaving = false;
                var nameElem = this._getInputElement("name");
                if (nameElem && nameElem.data('placeHolder_text') == this._getInputValue("name", nameElem)) {
                    nameElem.focus();
                }
                return false;
            }
        }
        return true;
    },updateDirtyState: function updateDirtyState() {
        if (this.model.isNew() || this._hasWidgetBeenEdited()) {
            this.getDetailsDiv().addClass('dirty');
        } else {
            this.getDetailsDiv().removeClass('dirty');
        }
    },writeChildWidgetChangesToTopLevelModel: function writeChildWidgetChangesToTopLevelModel() {
        if (this._hasCommentInProgress()) {
            this._commentsWidget().addComment();
        }
        this.j('div.labels input.create').trigger(j.Event('keydown', {which: j.ui.keyCode.ENTER,keyCode: j.ui.keyCode.ENTER}));
    },getDetailsDiv: function getDetailsDiv() {
        return this._detailsDiv || (this._detailsDiv = this.j('.details'));
    },_hasCommentInProgress: function() {
        if (this.isReadOnly()) {
            return false;
        }
        if (!this._commentsWidget()) {
            return false;
        }
        return this._commentsWidget().hasCommentsInProgress();
    },_addAdditionalSaveCommandJson: function(commandJson) {
        if (this.model.isNew()) {
            commandJson['comments'] = this._commentsWidget().newCommentsJsonArray();
        }
    },_confirmClose: function _confirmClose() {
        var closeMe = confirm("Do you want to abandon your " + this.model.getType() + " changes?");
        this.isClosing = false;
        return closeMe;
    },_setupChosenSelect: function _setupChosenSelect(inputSelectorKey, changeHandler) {
        var $select = this._getInputElement(inputSelectorKey);
        $select.chosen({flex_width: true});
        changeHandler = changeHandler ? changeHandler : function() {
            this.updateDirtyState();
        };
        $select.change(changeHandler.bind(this));
    },_setDescription: function($element, value) {
        $element.val(value);
        this.j('.readonly_description').html(Element.formatText(value));
    },_getInputValue: function _getInputValue(key, element) {
        return this["_get" + key.capitalize()] ? this["_get" + key.capitalize()]() : element.val();
    },_hasFieldBeenEdited: function(key) {
        if (this.readOnly) {
            return false;
        }
        if (this["_has" + key.capitalize() + 'BeenEdited']) {
            return this["_has" + key.capitalize() + 'BeenEdited']();
        }
        var jElement = this._getInputElement(key);
        var localValue = this._getInputValue(key, jElement);
        var uneditedValue = jElement.data('uneditedValue');
        var placeholderText = jElement.data('placeHolder_text');
        if (placeholderText == localValue && this.model.isNew()) {
            return false;
        }
        if (uneditedValue == undefined) {
            return false;
        }
        if (!localValue && !uneditedValue) {
            return false;
        }
        return localValue != uneditedValue;
    },_hasWidgetBeenEdited: function _hasWidgetBeenEdited() {
        if (this.readOnly) {
            return false;
        }
        if (this._hasCommentInProgress()) {
            return true;
        }
        var inputs = this.defineInputSelectors();
        var localChanges = {};
        j.each(inputs, function(key, selector) {
            if (this._hasFieldBeenEdited(key)) {
                var jElement = this._getInputElement(key);
                localChanges[key] = this._getInputValue(key, jElement);
            }
        }.bind(this));
        return !j.isEmptyObject(localChanges);
    },_getSaveFields: function _getSaveFields() {
        var inputs = this.defineInputSelectors();
        var changedFields = {};
        j.each(inputs, function(key, selector) {
            var jElement = this._getInputElement(key);
            var jsonValue = this._getInputValue(key, jElement);
            if ((this.model.isNew() && jsonValue != "") || this._hasFieldBeenEdited(key)) {
                if (jElement.data('placeHolder_text')) {
                    jsonValue = jElement.data('placeHolder_text') == jsonValue ? '' : jsonValue;
                }
                changedFields[key] = jsonValue;
            }
        }.bind(this));
        return changedFields;
    },_setField: function(key, value, isLocalChange, clearUneditedValue) {
        var $element = this._getInputElement(key);
        var hasBeenEdited = this._hasFieldBeenEdited(key);
        if ((this.model.isNew() && key == 'name') || clearUneditedValue) {
            $element.data('uneditedValue', "");
        } else {
            $element.data('uneditedValue', value);
        }
        if (!hasBeenEdited || isLocalChange) {
            var method = this["_set" + key.capitalize()] || this._defaultFieldSetter;
            method.call(this, $element, value);
        }
    },_getInputElement: function(key) {
        return this.j(this._inputSelectors[key]);
    },_defaultFieldSetter: function($element, value) {
        $element.val(value);
    },_newModelEnterTitleLabel: function _newModelEnterTitleLabel() {
        return this.model.getType().capitalize() + " title";
    },_commentsWidget: function _commentsWidget() {
        return this._childWidgets['.comments_placeholder'];
    },_sidebarAttachmentWidget: function _sidebarAttachmentWidget() {
        return this._childWidgets['.sidebar_attachments_placeholder'];
    },_rebuildMoreMenu: function _rebuildMoreMenu() {
        this._destroyMoreMenu();
        if (!this.model.isNew()) {
            this._buildMoreMenu(this.j('.more_menu'));
        }
    }});
BasePreviewWidget = Class.create(Widget, {initialize: function(model, project, itemListWidget, revealer, widgetType) {
        this.super_init(widgetType, "content");
        this.model = model;
        this.project = project;
        this.itemListWidget = itemListWidget;
        this._revealer = revealer;
        this._expanded = false;
    },id: function() {
        return this.model.id();
    },viewHistory: function() {
        this.itemListWidget.viewHistory(this.model);
    },removeFromItemList: function removeFromItemList() {
        this.itemListWidget.removeItem(this.id());
    },isExpanded: function() {
        return this._expanded;
    },onRevealClick: function(e) {
        e.preventDefault();
        this._revealer.revealItem(this.model);
    },hasRevealer: function() {
        return this._revealer != null;
    },_closeFullPageViewIfPresent: function(panel_type) {
        if (app.layout.containsPanelOfType(panel_type)) {
            app.layout.getPanels()[0].viewWidget.collapse();
        }
    }});
Object.extend(BasePreviewWidget.prototype, Widget.ContainedDragDropModule);
ChartsWidget = Class.create(AbstractPanelViewWidget, {initialize: function(project) {
        this.super_init("Charts", "charts");
        this.project = project;
        this.charts = [];
        this.activeChartIndex = 0;
    },fillInWidgets: function() {
        var releaseBurnDownChart = new ReleaseBurnDownChart(this.project);
        var currentIterationBurnUpChart = new CurrentIterationBurnUpChart(this.project);
        var velocityChart = new VelocityChart(this.project);
        if (releaseBurnDownChart.hasCurrentRelease()) {
            this.charts.push(releaseBurnDownChart);
            this.charts.push(currentIterationBurnUpChart);
            this.charts.push(velocityChart);
        } else {
            this.charts.push(currentIterationBurnUpChart);
            this.charts.push(velocityChart);
            this.charts.push(releaseBurnDownChart);
        }
        this.charts.push(new StoryTypeBreakdownChart(this.project));
    },myDomainObjects: function() {
        return [];
    },getTitle: function() {
        return "Charts";
    },getDescription: function() {
        return "Here you can see charts for the project.  Charts update as you make changes to the project.";
    },render: function() {
        this.renderedElement = Element.newDiv(null, {id: this.htmlId(),className: "charts list"});
        this.renderedElement.appendChild(this._createBottomDiv());
        var outer = new Element.newDiv('', {className: 'items'});
        this.inner = new Element.newDiv('', {className: 'inner'});
        outer.appendChild(this.inner);
        this.renderedElement.appendChild(outer);
        this.draw();
        return this.renderedElement;
    },draw: function() {
        this.activeChart = this.charts[this.activeChartIndex];
        var helpWidget = new HelpWidget(this, this.activeChart.getTitle(), Element.newDiv(this.activeChart.getDescription()), this.htmlId(), "chartHelpIcon");
        this.inner.appendChild(helpWidget.render());
        var chartOptions = [];
        for (var j = 0; j < this.charts.length; j++) {
            chartOptions[j] = [j, this.charts[j].getTitle()];
        }
        var table = Element.newTable(1, 2);
        table.rows[0].cells[0].appendChild(Element.newDiv("Chart Type:", {className: "chartType"}));
        this._chartsDropdown = Element.newDropDownBox("chartsDropdown", chartOptions, this.activeChartIndex, {id: this.htmlId() + 'chartsDropdown',className: 'chartsDropdown'});
        this._chartsDropdown.onchange = this.redraw.bind(this);
        table.rows[0].cells[1].appendChild(this._chartsDropdown);
        this.inner.appendChild(table);
        this.inner.appendChild(Element.newDiv("", {className: "chartSeparator"}));
        this.inner.appendChild(this.activeChart.render());
        this.inner.appendChild(Element.newDiv(null, {className: "chartFooter"}));
    },redraw: function() {
        var oldActiveChartIndex = this.activeChartIndex;
        this.activeChartIndex = this._chartsDropdown.selectedIndex;
        if (this.activeChartIndex != oldActiveChartIndex) {
            this.inner.update("");
            this.draw();
        }
        this.paint();
    },postRender: function() {
        this.paint();
    },onResize: function() {
        this.paint();
    },paint: function() {
        if (!this.renderedElement) {
            return;
        }
        if (this.painting) {
            return;
        }
        this.painting = true;
        this.activeChart = this.charts[this.activeChartIndex];
        this.activeChart.paint();
        this.painting = false;
    },needsRenderDelay: function() {
        return true;
    },open: function() {
        this.charts.each(function(chart) {
            chart.subscribeToEvents();
        })
    },close: function() {
        this.charts.each(function(chart) {
            chart.unsubscribeFromEvents();
        })
    },clone: function() {
        return new ChartsWidget(this.project);
    },_destroy: function() {
        this.close();
        if (this.renderedElement) {
            j(this.renderedElement).remove();
            this.renderedElement = null;
        }
    }});
Tracker.CommentAttachmentsWidget = Class.create(BaseModelWidget, {initialize: function($super, comment) {
        $super(comment);
        this.hitchableType = "Comment";
        this._uploadsInProgress = 0;
        this._serverProxy = new ServerProxy();
        this.createdResources = [];
        if (this.model.isNew()) {
            this.uploadURL = '/api/resource/upload?project_id=' + this.project.getId();
        } else {
            this.uploadURL = '/api/resource/upload?hitchable_id=' + App.idFor(this.model);
        }
        this.createdGoogleDocResources = {};
    },configuration: function configuration() {
        var baseConfig = {delegateEvents: {},domainEvents: ['attachmentUpdate'],childWidgets: {},renderedElementHtml: "<div class='comment_attachment_widget_container'></div>"};
        if (j.browser.mozilla && !j('body').hasClass('ff_3')) {
            j.extend(baseConfig['delegateEvents'], {"click .upload_button": function($target) {
                    $target.find("input").click();
                },"click .upload_button input": function($t, e) {
                    e.stopPropagation();
                }});
        }
        return baseConfig;
    },onAttachmentUpdate: function onAttachmentUpdate(comment) {
        if (comment.getAllResources().length == '') {
            this.j('.attachment_list_container').html('')
        }
        comment.googleDocResources.each(function(gdr) {
            if (!this.createdGoogleDocResources[gdr.resourceId]) {
                this.createdGoogleDocResources[gdr.resourceId] = gdr;
                var row = j(Tracker.Template.render('unsaved_comment_google_doc_resource_attachment_row_template', {filename: gdr.title,filename_ellipsified: gdr.getEllipsifiedFilename(),kind: gdr.kind.replace('/', '_')}));
                this.j('.attachment_list_container').append(row);
                row.find('.file_upload_cancel img').click(function() {
                    row.fadeOut(function() {
                        row.remove();
                        this.model.removeGoogleDocResource(gdr);
                        this.createdGoogleDocResources[gdr.resourceId] = null;
                    }.bind(this));
                }.bind(this));
            }
        }.bind(this));
    },onResourceUpdate: function(resource) {
        var row = this.j('.resource_' + resource.id);
        var thumbnailContainer = row.find('.unsaved_comment_attachment_thumbnail');
        thumbnailContainer.attr('title', resource.filename);
        if (resource.thumbnailable) {
            thumbnailContainer.addClass('image');
            thumbnailContainer.html('<div style="background:url(' + resource.thumbnailUrl + ') no-repeat center"/>');
        } else {
            thumbnailContainer.html(resource.getFileExtension(3) || 'file');
        }
    },paint: function() {
        var includeGoogleDocButton = (app.project && app.project.hasGoogleDomain() && app.memberHasGoogleIdentity);
        return Tracker.Template.render(this.templateName(), {uploadUrl: this.uploadURL,includeGoogleDocButton: includeGoogleDocButton});
    },updateDynamicValues: function updateDynamicValues() {
        var dropZoneLocator = this.j().closest(".details_container").get(0);
        var resourceTableLocator = this.j(".attachment_list_container");
        this.j(".attachment_list_container").html('');
        this.j().data('commentId', this.model.id);
        try {
            this._fileUploadUI('destroy');
        } catch (e) {
        }
        this.j(".attachment_list_container").html('');
        this._fileUploadUI(this._fileUploadUIConfig(dropZoneLocator, resourceTableLocator, this._modelId()));
    },afterAddedToDom: function afterAddedToDom($super) {
        $super();
        var includeGoogleDocButton = (app.project && app.project.hasGoogleDomain() && app.memberHasGoogleIdentity);
        if (includeGoogleDocButton) {
            this._createGoogleDocListBalloon().attachTo(this.j('.google_doc_attach_button').get(0));
        }
    },destroy: function($super) {
        this._unsubscribeCreatedResources();
        try {
            this._fileUploadUI('destroy');
        } catch (e) {
        }
        if (this.formBalloon) {
            this.formBalloon.close();
            this.formBalloon.detach();
        }
        $super();
    },_resetComment: function _resetComment() {
        if (this.model != null) {
            this.model.clearUserEnteredValues();
        } else {
            this.model = new Tracker.Comment({}, this.project);
            this.project.addTempComment(this.model);
        }
    },_modelId: function() {
        return 'comment_' + this.model.id
    },_fileUploadUI: function(fileUploadUIConfig) {
        this.j().fileUploadUI(fileUploadUIConfig, "attachFileFor_" + this._modelId());
    },templateName: function() {
        return 'attachment_upload_template';
    },selfSelector: function() {
        return ".attachment_form";
    },_unsubscribeCreatedResources: function() {
        if (this.createdResources) {
            this.createdResources.each(function(resource) {
                resource.events.unsubscribe(this, "resourceUpdate");
            }.bind(this));
            this.createdResources = [];
        }
    },_handleUploadResponse: function(response, uniqueId) {
        var responseJson;
        try {
            if (response && response.responseText) {
                responseJson = response.responseText.parseJSON()
            } else {
                responseJson = j.parseJSON(response.contents().text());
            }
        } catch (e) {
            responseJson = null;
        }
        if (!responseJson) {
            this.showErrorMessage(uniqueId, "Unknown error occurred");
        } else if (responseJson.errors) {
            this.showErrorMessage(uniqueId, responseJson.errors);
        } else if (responseJson.status == "ERROR") {
            this.showErrorMessage(uniqueId, responseJson.message);
        } else if (!responseJson.id) {
            this.showErrorMessage(uniqueId, "Attachment creation failed");
        } else {
            this._handleSuccessfulUploadResponse(responseJson, null, uniqueId);
        }
    },_handleSuccessfulUploadResponse: function($super, responseJson, command, uniqueId) {
        var command = new Tracker.AddResource(responseJson, this.project)
        this.project.commandQueue.enqueue(command);
        new AttachCommentResource(responseJson, this.model, this.project).execute();
        if (this.model.isNew()) {
            var newResource = command.resource;
            this.createdResources.push(newResource);
            newResource.events.subscribe(this, 'resourceUpdate');
            this._updateResourceRow(newResource, uniqueId);
        }
    },hasUploadsInProgress: function() {
        return this._uploadsInProgress > 0;
    },_updateResourceRow: function(resource, uniqueId) {
        var row = this.j('.file_index_' + uniqueId);
        row.removeClass('file_index_' + uniqueId).addClass('resource_' + resource.id);
        row.find('.ui-progressbar-value').width('100%').show();
        row.find('.unsaved_comment_attachment_row').addClass('done');
        row.find('.file_upload_cancel img').click(function() {
            this.model.removeResourceById(resource.id);
            this._uploadsInProgress -= 1;
            row.fadeOut(function() {
                row.remove();
            });
        }.bind(this));
        row.find('.unsaved_comment_attachment_thumbnail').show();
    },_uploadsAttempted: 0,_buildUploadRow: function(files, index) {
        var filename = files[index].name;
        var filename_ellipsified = filename.ellipsify(25);
        files[index].uniqueId = this._uploadsAttempted++;
        return j(Tracker.Template.render('unsaved_comment_attachment_row_template', {filename: filename,filename_ellipsified: filename_ellipsified,file_index: files[index].uniqueId}));
    },_fileUploadUIConfig: function(dropZoneLocator, resourceTableLocator, modelId) {
        var widget = this;
        var config = {namespace: "attachFileFor_" + modelId,cssClass: "jquery_file_upload",cssClassHighlight: "attachment_drop_zone",dropZone: j.browser.msie ? undefined : j(dropZoneLocator),dropZoneEnlarge: j.noop,dropZoneReduce: j.noop,cancelSelector: '.file_upload_cancel img, .file_upload_cancel button',uploadTable: function() {
                return j(resourceTableLocator)
            },onAbort: function(e, files, index, xhr, handler) {
                widget._uploadsInProgress -= 1;
                handler.removeNode(handler.uploadRow, handler.hideProgressBarAll);
            },onError: function(e, files, index, xhr, handler) {
                widget._uploadsInProgress -= 1;
                widget.showErrorMessage(files[index].uniqueId, "Error occurred during upload");
            },downloadTable: function() {
                return j(resourceTableLocator);
            },onDrop: function(e) {
                j(dropZoneLocator).removeClass('attachment_drop_zone');
                var form = widget.j().closest('form');
                widget.j().trigger("ensureVisable", form.get(0).offsetTop + form.height() + 34);
                widget.j().trigger("ensureVisable", form.get(0).offsetTop - 50);
                e.stopPropagation();
            },beforeSend: function(event, files, index, xhr, handler, callBack) {
                if (files[index].size > 10485760) {
                    widget.showErrorMessage(files[index].uniqueId, "File cannot be > 10MB in size.");
                    return;
                }
                widget._uploadsInProgress += 1;
                callBack();
            },buildUploadRow: this._buildUploadRow.bind(widget),onLoad: function(event, files, index, xhr, handler) {
                widget._handleUploadResponse(xhr, files[index].uniqueId);
                widget._uploadsInProgress -= 1;
            }};
        if (j.browser.mozilla) {
            config.onDragEnter = function(event) {
                j(dropZoneLocator).addClass('attachment_drop_zone');
            };
            config.onDragLeave = function(event) {
                if (j(event.relatedTarget).closest(dropZoneLocator).length == 0) {
                    j(dropZoneLocator).removeClass('attachment_drop_zone');
                }
            };
        }
        return config;
    },showErrorMessage: function(index, message) {
        var row = this.j(".file_index_" + index);
        row.find(".file_upload_progress").addClass('error');
        row.find(".error_message").text(message).removeClass('hidden');
    },_createGoogleDocListBalloon: function(trigger) {
        this.formBalloon = new FormBalloon({width: 270,excludeCloseButton: true,showStem: false,applyButtonLabel: 'Attach',additionalClassNames: ['google_doc_balloon'],positionAdjustment: {horizontal: 10,vertical: 8},enableVerticalFlip: true,builder: this._buildGoogleDocList.bind(this),onPostShow: function() {
                this._serverProxy.sendAjaxRequest('/google_docs', {}, 'get', {onSuccess: this._populateGoogleDocList.bind(this)});
            }.bind(this),onApply: this._attachGoogleDocResourcesFromList.bind(this),onClose: this._cleanGoogleDocList.bind(this)});
        return this.formBalloon;
    },_buildGoogleDocList: function() {
        return j('<div>', {'class': 'google_doc_list'}).html(this._loadingHtml()).get(0);
    },_populateGoogleDocList: function(googleDocuments) {
        this.googleDocuments = googleDocuments;
        var attachedGoogleIds = j(this.model.googleDocResources.items()).map(function(index, googleDocResource) {
            return googleDocResource.googleId;
        });
        var html = '<div class="google_doc_filter"><input type="text"/></div><div class="google_doc_scroller"><ul>';
        j.each(googleDocuments, function(index, googleDocument) {
            if (j.inArray(googleDocument['google_id'], attachedGoogleIds) > -1) {
                return;
            }
            html += '<li class="' + googleDocument.kind.replace('/', '_') + '"><label for="google_doc_list' + index + '">' + '<input id="google_doc_list' + index + '" type="checkbox" data-index="' + index + '"/><em></em><span>' +
            googleDocument.title + '</span></label></li>';
        });
        html += '</ul></div>';
        var widget = j('.google_doc_list').html(html);
        j('.google_doc_filter input', widget).on('keyup', function() {
            var val = j(this).val();
            j('.google_doc_scroller label span', widget).each(function() {
                if (LiquidMetal.score(j(this).text(), val) > 0) {
                    j(this).closest('label').show();
                } else {
                    j(this).closest('label').hide();
                }
            });
        });
    },_attachGoogleDocResourcesFromList: function() {
        var checkedElements = j('.google_doc_list input:checked');
        var selectedDocuments = [];
        for (var i = 0; i < checkedElements.length; i++) {
            var index = j(checkedElements[i]).data('index');
            var googleDocument = this.googleDocuments[parseInt(index)];
            var hitchableId = this.model.getId ? this.model.getId() : this.model.id;
            googleDocument['hitchable_type'] = this.hitchableType;
            googleDocument['hitchable_id'] = hitchableId;
            selectedDocuments.push(googleDocument);
        }
        if (selectedDocuments.length) {
            var command = new Tracker.AddGoogleDocResources({google_doc_resources: selectedDocuments}, this.project);
            this._runCommand(command);
        }
        this._cleanGoogleDocList();
    },_cleanGoogleDocList: function() {
        this.googleDocuments = [];
        j('.google_doc_list').html(this._loadingHtml());
    },_loadingHtml: function() {
        return '<ul><li>Loading<blink>...</blink></li></ul>';
    }});
Tracker.CommentsWidget = Class.create(BaseModelWidget, {initialize: function($super, model, readOnly, options) {
        options = options || {};
        this.commentWidgets = [];
        this.isInFlyover = options.isInFlyover || false;
        this.filterValue = options.filterValue || 'all';
        this.options = options;
        this._readOnly = readOnly;
        if (this.options.disableAddComment) {
            this._disableAddComment = options.disableAddComment;
        }
        $super(model);
    },_disableAddComment: false,isReadOnly: function isReadOnly($super) {
        return this._readOnly || $super();
    },canAddComments: function() {
        return !this._disableAddComment;
    },configuration: function configuration($super) {
        var baseConfig = $super();
        j.extend(baseConfig['delegateEvents'], {"keydown textarea.commentArea": "onCommentAreaKeydown","click .addComment": "clickAddComment","click .cancel_comment": "clearComment"});
        if (!(this.isReadOnly() || this._disableAddComment)) {
            var comment = new Tracker.Comment({}, this.project);
            this.project.addTempComment(comment);
            baseConfig['childWidgets'] = {'.attachmentPlaceholder': [Tracker.CommentAttachmentsWidget, [comment, false]]};
        }
        j.extend(baseConfig['placeholders'], {"textarea.commentArea": Tracker.CommentsWidget.ADD_A_COMMENT_TEXT});
        return baseConfig;
    },paint: function() {
        return Tracker.Template.render('comments_template', {isEpic: this.model instanceof Epic,author: app.project.getSigninMember().getName().escapeHTML(),allImagesPath: "/projects/" + this.model.project.id + "/" + this.model.getPluralType() + "/" + this.model.id() + "/images",isReadOnly: this.isReadOnly() || this._disableAddComment,textAreaValue: Tracker.CommentsWidget.ADD_A_COMMENT_TEXT});
    },updateDynamicValues: function() {
        this._paintComments();
        this._updateViewImagesLink();
        if (!this._disableAddComment && !this.isReadOnly() && !this.hasCommentsInProgress()) {
            this._commentAttachmentsWidget().updateDynamicValues();
        }
    },afterAddedToDom: function afterAddedToDom($super) {
        var $select = this.j('.filter select');
        $select.chosen({disable_search_threshold: 10});
        $select.change(j.proxy(this._handleFilterChange, this));
        this._updateViewImagesLink();
        this._paintComments();
        Tracker.AutoResizer.makeContainedTextareasResizeable(this.j());
        $super();
    },destroy: function($super) {
        this._destroyCommentWidgets();
        $super();
    },onCommentAreaKeydown: function onCommentAreaKeydown($target, $event) {
        if ($event.which == 13 && $event.shiftKey) {
            this.addComment();
            $event.preventDefault();
        }
    },clickAddComment: function clickAddComment($target, $event) {
        this.addComment();
    },addComment: function addComment(overrideText) {
        if (this._hasUploadsInProgress()) {
            alert('Please wait for file uploads to complete before adding this comment');
            return;
        }
        var changes = this.getAllChanges();
        if (_(changes).isEmpty()) {
            return;
        }
        var commentHash = {person_id: this.project.getSigninMemberId(),text: _.isString(overrideText) ? overrideText : (changes['text'] || ''),created_at: DateUtils.now().getTime(),resource_ids: changes['resource_ids'] || [],google_doc_resources: changes['google_doc_resources'] || {}};
        if (this.model.isNew()) {
            commentHash['commentable'] = this.model;
        } else {
            commentHash['commentable_id'] = this.model.id();
            commentHash['commentable_type'] = this.model.getType().capitalize();
        }
        var command = new Tracker.AddComment(commentHash, this.project);
        this._runCommand(command);
        if (command.model.showErrorMessage) {
            this.showErrorMessageForModel(command.model);
            return false;
        }
        this.j('form textarea.commentArea').val('').focus();
        this._commentAttachmentsWidget()._resetComment();
        this.updateDynamicValues();
    },clearComment: function clearComment($target, $event) {
        $event.preventDefault();
        this.j('form textarea.commentArea').val("").blur();
        this._newComment().removeAllResources();
    },hasCommentsInProgress: function hasCommentsInProgress() {
        return !this._disableAddComment && this.hasAnyChanges();
    },getAllChanges: function getAllChanges() {
        var changes = {};
        if (!(this.isReadOnly() || this._disableAddComment)) {
            var $textArea = this.j('form textarea.commentArea');
            if ($textArea.length > 0) {
                var text = ($textArea.val() || '').trim();
                if (text != "" && text != Tracker.CommentsWidget.ADD_A_COMMENT_TEXT) {
                    changes['text'] = text;
                }
            }
            var newComment = this._newComment();
            if (newComment.hasResources()) {
                changes['resource_ids'] = newComment.resourceIds;
            }
            if (newComment.googleDocResources.length() > 0) {
                changes['google_doc_resources'] = newComment.googleDocResources.toJSONHash();
            }
        }
        return changes;
    },afterMaximize: function() {
        this.options = j.extend(true, this.options, {attachmentOptions: {thumbnailSize: 'big'}});
        _(this.commentWidgets).invoke('afterMaximize');
    },afterMinimize: function() {
        this.options = j.extend(true, this.options, {attachmentOptions: {thumbnailSize: 'thumb'}});
        _(this.commentWidgets).invoke('afterMinimize');
    },newCommentsJsonArray: function newCommentsJsonArray() {
        return this.model.commentsJSONHash();
    },_updateViewImagesLink: function _updateViewImagesLink() {
        this.j('.images').toggle(this.model.hasImages() && !this.model.isNew());
    },_newComment: function _newComment() {
        return this.isReadOnly() || this._disableAddComment ? null : this._commentAttachmentsWidget().model;
    },_hasUploadsInProgress: function() {
        return this._commentAttachmentsWidget() && this._commentAttachmentsWidget().hasUploadsInProgress();
    },_paintComments: function() {
        var html = this.j('.commentList'), comments = this.model.comments();
        if (comments) {
            this._destroyCommentWidgets();
            comments.each(function(comment) {
                var commentWidget = new Tracker.CommentWidget(comment, this.isReadOnly(), this.isInFlyover, this.options);
                this.commentWidgets.push(commentWidget);
                html.append(j(commentWidget.render()));
            }.bind(this));
        }
        this._filter();
    },_commentAttachmentsWidget: function _commentAttachmentsWidget() {
        return this._childWidgets['.attachmentPlaceholder'];
    },_destroyCommentWidgets: function _destroyCommentWidgets() {
        this.commentWidgets.each(function(commentWidget) {
            commentWidget.destroy();
        });
        this.commentWidgets = [];
    },_handleFilterChange: function(e) {
        this.filterValue = j(e.target).val();
        this._filter();
    },_filter: function _filter() {
        var filter = this.filterValue;
        this.j('.commentList .comment:visible:first').removeClass('first');
        this.j('.commentList .comment:visible:last').removeClass('last');
        this.j('.commentList').removeClass('attachments_only');
        this.j('.filter_empty').hide();
        this.commentWidgets.each(function(widget) {
            widget.setFilter(filter);
        });
        if (filter == 'attachments') {
            if (this.model.hasResources()) {
                this.j('.commentList').addClass('attachments_only');
                this.j('.commentList .comment:visible:first').addClass('first');
                this.j('.commentList .comment:visible:last').addClass('last');
            } else {
                this._showFilterEmpty("no attachments");
            }
        } else if (filter == 'commit') {
            if (!this.model.hasCommits()) {
                this._showFilterEmpty("no commits");
            }
        }
    },_showFilterEmpty: function _showFilterEmpty(text) {
        this.j('.filter_empty .contents').text(text);
        this.j('.filter_empty').show();
    }});
Tracker.CommentsWidget.ADD_A_COMMENT_TEXT = 'Add a comment';
Tracker.CommentWidget = Class.create(Widget, {initialize: function($super, comment, readOnly, isInFlyover, options) {
        $super('commentWidget', "comment_widget");
        this.readOnly = readOnly;
        this.comment = comment;
        this.project = comment.project;
        this.isInFlyover = isInFlyover || false;
        this._filterValue = 'all';
        options = options || {};
        this.attachmentList = new AttachmentList(comment, this, j.extend({readOnly: this.readOnly,isInFlyover: this.isInFlyover}, options.attachmentOptions || {}));
        this._subscribeToEvents();
    },isReadOnly: function isReadOnly() {
        return this.readOnly;
    },setFilter: function setFilter(filter) {
        this._filterValue = filter;
        this._filter();
    },onAttachmentUpdate: function(attachment) {
        this._paint();
    },render: function() {
        this.renderedElement = j('<li class="comment">').get(0);
        var $element = j(this.renderedElement);
        $element.addClass(this.comment.commitType);
        if (this.comment.isCommit()) {
            $element.addClass('commit');
        }
        if (this.comment.hasResources()) {
            $element.addClass('attachment');
        }
        this._paint();
        return this.renderedElement;
    },deleteComment: function(event) {
        if (this.confirmDelete()) {
            this._runCommand(new Tracker.DeleteComment(this._baseCommentHash(), this.project));
        }
    },detachResource: function(resource) {
        var commandJsonHash = {resource: resource.toJSONHash(),comment: this._baseCommentHash()};
        if ((this.comment.getResourceCount()) > 1 || this.comment.text) {
            this._runCommand(new Tracker.DetachCommentResource(commandJsonHash, this.project));
        } else {
            this._runCommand(new Tracker.DeleteComment(this._baseCommentHash(), this.project));
        }
    },confirmDelete: function() {
        var message, numResources = this.comment.resourceIds.length;
        if (numResources > 0) {
            message = "Are you sure you want to delete this comment, along with " + numResources + " file " + "attachment".pluralize(numResources) + "?";
        }
        else {
            message = "Are you sure you want to delete this comment?";
        }
        return confirm(message);
    },selfSelector: function() {
        return ".comment";
    },afterMaximize: function() {
        this.attachmentList.afterMaximize();
    },afterMinimize: function() {
        this.attachmentList.afterMinimize();
    },_subscribeToEvents: function() {
        this.comment.events.subscribe(this, "attachmentUpdate")
    },_unsubscribeFromEvents: function() {
        this.comment.events.unsubscribe(this, "attachmentUpdate")
    },_paint: function() {
        var self = this;
        if (this.comment.commitType == 'github') {
            this._paintGitHubComment();
        } else {
            var html = Tracker.Template.render('comment_template', {text: Element.formatText(this.comment.text),author: this.comment.getAuthor().getName().escapeHTML(),naturalCreatedAt: this.comment.createdAt.asDateWithZone().asDisplayStringWithTime(),includeDeleteLink: this.comment.canBeDeletedBy(this.project.getSigninMember()) && !this.isReadOnly()});
            j(this.renderedElement).html(html);
            if (this.comment.getResourceCount() > 0) {
                j('.attachments', this.renderedElement).append(this.attachmentList.render());
            } else {
                j('.attachments', this.renderedElement).hide();
            }
        }
        j('.delete_comment a', this.renderedElement).click(function(e) {
            self.deleteComment(e);
        });
        this._filter();
    },_paintGitHubComment: function _paintGitHubComment() {
        var data = this.comment.text.split('\n');
        if (data.length >= 3) {
            var author = data.shift().trim(), url = data.shift().trim(), text = data.join('\n').trim();
        } else {
            text = this.comment.text;
        }
        var html = Tracker.Template.render('github_comment_template', {author: Element.formatText(author),text: Element.formatText(text),url: Element.formatText(url),naturalCreatedAt: this.comment.createdAt.asDateWithZone().asDisplayStringWithTime(),includeDeleteLink: this.comment.canBeDeletedBy(this.project.getSigninMember()) && !this.isReadOnly()});
        j(this.renderedElement).html(html)
    },_destroy: function() {
        j(this.renderedElement).remove();
        this.renderedElement = null;
        if (this.attachmentList)
            this.attachmentList.destroy();
    },_runCommand: function(command) {
        if (this.comment.isNew()) {
            command.execute();
        } else {
            this.isSaving = true;
            this.project.commandQueue.enqueue(command);
        }
    },_baseCommentHash: function _baseCommentHash() {
        var commentHash = null;
        if (this.comment.isNew()) {
            commentHash = {commentable: this.comment.getCommentable()};
        } else {
            commentHash = {commentable_id: this.comment.commentableId,commentable_type: this.comment.commentableType}
        }
        commentHash['id'] = this.comment.id;
        return commentHash;
    },_filter: function _filter() {
        if (!this.renderedElement) {
            return;
        }
        if (this._filterValue == 'all') {
            this.j().show();
            this.j('.attachments, .author, .text, .created_at, .delete_comment').show();
        }
        if (this._filterValue == 'commit') {
            this.j('.attachments, .author, .text, .created_at, .delete_comment').show();
            this.j().toggle(this.comment.isCommit());
        }
        if (this._filterValue == 'comment') {
            this.j('.attachments, .author, .text, .created_at, .delete_comment').show();
            this.j().toggle(!this.comment.isCommit());
        }
        if (this._filterValue == 'attachments') {
            this.j().toggle(this.comment.hasResources());
            this.j('.author, .text, .created_at, .delete_comment').hide();
        }
    }});
HistoryWidget = Class.create(Widget, {_buildContent: function(command) {
        var template = command.historyTemplate();
        if (template && Tracker.Template.exists(template)) {
            var details = command.getDescriptionDetails();
            return j(Tracker.Template.render(template, j.extend({action: command.getAction(),subject: details.subject,verb: details.verb,description: Element.breakUpLongWords(Element.cleanupText(details.object_phrase)),changes: command.getChanges() || {}}, command.historyTemplateInfo()))).get(0);
        }
        var content = Element.newDiv("", {className: "history_content"});
        content.appendChild(this._createDescription(command));
        if (command.hasChanges()) {
            var detailsElement = this._createDetailsElement(command);
            content.appendChild(detailsElement);
        }
        return content;
    },_createDescription: function(command) {
        var description = new Element("div", {className: "description"});
        description.appendChild(new Element("img", {src: story_icon_path("history/" + command.getAction() + ".png"),className: "action_icon"}));
        if (command.hasChanges()) {
            var link = Element.newLinkToFunction(function() {
                $(this._detailsIdForCommand(command)).toggle();
            }.bind(this), {className: "details_link"}, "details");
            description.appendChild(link);
        }
        description.appendChild(new Element("div", {className: ""}).update(this._getFormattedDescription(command)));
        return description;
    },_detailsIdForCommand: function(command) {
        return this.htmlId() + '_details_' + command.getVersion();
    },_buildDefaultChangeElement: function _buildDefaultChangeElement(changes) {
        var newDiv = new Element("div");
        newDiv.appendChild(new Element("span", {className: "key"}).update(this._getFormattedKey(key).capitalize()));
        newDiv.appendChild(new Element("span", {className: "value"}).update(this._getFormattedChange(key, changes[key])));
        return newDiv;
    },_getDetailsHtml: function _getDetailsHtml(changes) {
        var detailsArray = [];
        for (key in changes) {
            detailsArray.push("<span class='field'>" + this._getFormattedKey(key) + "</span> to " + this._getFormattedChange(key, changes[key]));
        }
        return detailsArray.join(", ");
    },_changedStoriesElement: function _changedStoriesElement(changes) {
        var storyNames = $H(changes).values().sort();
        var newDiv = new Element("div");
        for (var i = 0; i < storyNames.length; i++) {
            newDiv.appendChild(new Element("div", {className: "story_name"}).update("- " + Element.cleanupText(storyNames[i])));
        }
        return newDiv;
    },_includesCommand: function(commandList, commandType) {
        return commandList.indexOf(commandType) > -1;
    },_createDetailsElement: function(command) {
        var detailsDiv = new Element("div", {id: this._detailsIdForCommand(command),className: "details"});
        Element.hide(detailsDiv);
        var changes = command.getChanges();
        var commandType = command.getType();
        if (this._includesCommand(HistoryWidget.CHANGE_COMMANDS, commandType)) {
            detailsDiv.update("Changed " + this._getDetailsHtml(changes));
        } else if (HistoryWidget.ADD_STORY_COMMAND == command.getType() || HistoryWidget.ADD_EPIC_COMMAND == command.getType()) {
            detailsDiv.update("Set " + this._getDetailsHtml(changes));
        } else if (this._includesCommand(HistoryWidget.BRIEF_DETAIL_COMMANDS, commandType)) {
            detailsDiv.appendChild(this._changedStoriesElement(changes));
        } else {
            for (key in changes) {
                detailsDiv.appendChild(this._buildDefaultChangeElement(changes));
            }
        }
        return detailsDiv;
    },_getFormattedDescription: function(command) {
        var details = command.getDescriptionDetails();
        return details.subject.escapeHTML() + " <b>" + details.verb + "</b> " +
        Element.breakUpLongWords(Element.cleanupText(details.object_phrase));
    },_getFormattedKey: function _getFormattedKey(key) {
        switch (key) {
            case "owned_by_id":
                return "owned by";
            case "requested_by_id":
                return "requested by";
            default:
                return key;
        }
    },_getFormattedChange: function(key, change) {
        switch (key) {
            case 'deadline':
            case 'accepted_at':
                if (!change) {
                    change = 'blank'
                } else {
                    change = new Date(parseInt(change)).asDisplayString();
                }
                break;
            case 'owned_by_id':
            case 'requested_by_id':
                change = app.project.getMember(change) ? app.project.getMember(change).getName() : 'none';
                break;
            case 'labels':
                if (change == "") {
                    change = "(none)";
                }
        }
        return Element.cleanupText(change);
    },onRevealClick: function() {
        var stories = this.getAffectedTopLevelElements();
        for (var i = 0; i < stories.length; i++) {
            if (stories[i]) {
                this.revealer.revealItem(stories[i]);
            }
        }
    },isDraggable: function() {
        return false;
    },isHoverable: function() {
        return false;
    },_destroy: function() {
        this.unsubscribeFromEvents();
        if (this.renderedElement) {
            j(this.renderedElement).remove();
            this.renderedElement = null;
        }
    }});
HistoryWidget.CHANGE_COMMANDS = ['editStory', 'EditTask', 'moveStoryBefore', 'editEpic'];
HistoryWidget.ADD_STORY_COMMAND = 'addStory';
HistoryWidget.ADD_EPIC_COMMAND = 'addEpic';
HistoryWidget.BRIEF_DETAIL_COMMANDS = ['multiArchiveStory', 'multiDeleteStory', 'multiMoveStory', 'applyLabel', 'removeLabel', 'moveFromProject', 'moveIntoProject'];
StoryHistoryCommandWidget = Class.create(HistoryWidget, {initialize: function(project, commandSource, revealer, hideTitle) {
        this.super_init("Command", "command");
        this.project = project;
        this.commandSource = commandSource;
        this.revealer = revealer;
        this.hideTitle = hideTitle;
        this._subscribeToEvents();
    },_subscribeToEvents: function() {
        app.events.subscribe(this, "periodicUpdate");
    },_unsubscribeFromEvents: function() {
        app.events.unsubscribe(this, "periodicUpdate");
    },getCommand: function() {
        if (!this.command) {
            this.command = this.commandSource.getCommand();
        }
        return this.command;
    },onPeriodicUpdate: function() {
        this.timeElement.update(this.command.timeAgo());
    },id: function() {
        return this.getCommand().getVersion();
    },render: function() {
        var command = this.getCommand();
        this.renderedElement = Element.newDiv("", {className: "history_item"});
        var content = this._buildContent(command);
        this.renderedElement.appendChild(content);
        this.timeElement = new Element("div", {className: "time_ago"}).update(command.timeAgo());
        content.appendChild(this.timeElement);
        return this.renderedElement;
    },getAffectedTopLevelElements: function() {
        return this.getCommand().getAffectedTopLevelElements();
    }});
StoryHistoryCommandWidget.forCommand = function(project, command, revealer, hideTitle) {
    return new StoryHistoryCommandWidget(project, {getCommand: function() {
            return command;
        }}, revealer, hideTitle);
};
CurrentIterationBurnUpChart = Class.create();
CurrentIterationBurnUpChart.prototype = Object.extend(new AbstractChart(), {initialize: function(project, now) {
        this.super_init(project);
        this._now = now || DateUtils.now();
        this.currentIteration = null;
    },getTitle: function() {
        return "Current Iteration Burn-Up";
    },getDescription: function() {
        return "The Current Iteration Burn-Up chart shows progress in the current iteration based on the accepted story point count." + "<ul><li>The X-axis shows the days in the iteration.</li>" + "<li>The Y-axis shows the accepted story point count.</li>" + "<li>The 'Expected' line shows the expected progress through the iteration based on the current velocity.</li>" + "<li>The 'Actual' line shows the true progress through the iteration so far. It is green if it is above the Target and red if it is below.</li></ul>";
    },myRender: function() {
        this.chartElement.appendChild(Element.newDiv("Points accepted", {className: "chartYAxisLabel"}));
        this.chartElement.appendChild(this.container);
        this.chartElement.appendChild(Element.newDiv("Day", {className: "chartXAxisLabel"}));
    },getBusinessSummary: function() {
        if (this.currentIteration == null) {
            return "There is no current iteration in this project.";
        }
        var points = this.actualValues[this.actualValues.length - 1];
        var result = points;
        if (points == 1) {
            result += " point has";
        } else {
            result += " points have";
        }
        result += " been accepted so far this iteration.";
        return result;
    },_calculate: function() {
        this.currentIteration = this._project.getCurrentIteration();
        if (this.currentIteration == null) {
            return;
        }
        var targetTotal = this._project.getProjectedCapacity();
        this.total = this.currentIteration.getVelocity().getTotal();
        this.horizontalLabels = [""];
        this.actualValues = [0];
        this.targetValues = [0];
        var count = 1;
        var dayCount = this._project.getIterationLength() * 7;
        for (var day = this.currentIteration.getStart().atMidnight(); day < this.currentIteration.getFinish().atMidnight(); day = day.plusDays(1)) {
            this.horizontalLabels.push(day.atNoon().asDateWithZone().getShortDowString());
            this.targetValues.push(count * targetTotal / dayCount);
            if (this._now > day.atMidnight()) {
                this.actualValues.push(this.currentIteration.getCompletedBefore(day.plusDays(1).atMidnight()));
            }
            count++;
        }
        if (this.actualValues.length == 0) {
            this.actualColor = "#0000FF";
        } else {
            var lastActual = this.actualValues[this.actualValues.length - 1];
            var targetAtLastActual = this.targetValues[this.actualValues.length - 1];
            this.actualColor = lastActual >= targetAtLastActual ? "#00FF00" : "#FF0000";
        }
    },myPaint: function() {
        if (!this.currentIteration) {
            return;
        }
        this.chart.setDefaultType(CHART_LINE);
        this.chart.setHorizontalLabels(this.horizontalLabels);
        this.chart.setVerticalRange(0, this.total);
        this.chart.setGridDensity(this.horizontalLabels.length, this.total + 1 > 20 ? 20 : this.total + 1);
        this.chart.setShowLegend(true);
        this.chart.add("Expected", "#444444", this.targetValues);
        this.chart.add("Actual", this.actualColor, this.actualValues);
        this.chart.draw();
    }});
DeadlineBarWidget = Class.create();
DeadlineBarWidget.prototype = Object.extend(new Widget(), {initialize: function(deadline, project, itemListWidget) {
        this.super_init("Deadline", "content");
        this.deadline = deadline;
        this.deadline.addUpdateSubscriber(this);
        this.itemListWidget = itemListWidget;
        this.project = project;
    },render: function() {
        this.renderedElement = Element.newDiv('', {id: this.htmlId(),className: "deadline"});
        this.renderedElement.onselectstart = function() {
            return false
        };
        this.paint();
        return this.renderedElement;
    },isDraggable: function() {
        return false;
    },isHoverable: function() {
        return !this.isInDonePanel();
    },getDragGroup: function() {
        return 'DeadlineBar';
    },paint: function() {
        if (this.renderedElement) {
            this.renderedElement.appendChild(this.createDeadlineBarElement());
        }
    },repaint: function() {
        if (this.renderedElement) {
            j(this.renderedElement).empty().removeData().off();
            this.paint();
        }
    },createDeadlineBarElement: function() {
        var text = this.deadline.getDate().asDateWithZone().asDisplayString() + ": deadline for " + this.deadline.getName();
        return Element.newDiv(text, {id: this.htmlId() + "_deadline_bar",className: "deadlineBar"});
    },id: function() {
        return this.deadline.id();
    },onUpdate: function(project) {
        if (this.deadline.getDate() != null) {
            this.repaint();
        }
    },isInBacklogPanel: function() {
        return (this.itemListWidget.title == 'Backlog');
    },isInIceboxPanel: function() {
        return false;
    },_destroy: function() {
        this.deadline.removeUpdateSubscriber(this);
        if (this.renderedElement) {
            j(this.renderedElement).remove();
            this.renderedElement = null;
        }
    },getStoryId: function() {
        var nextIteration = this.deadline.getIteration().nextIteration();
        return nextIteration != null ? nextIteration.getFirstStory().id() : null;
    },getMoveAfterStory: function() {
        return this.deadline.getIteration().getLastStory();
    },getMoveBeforeStory: function() {
        return this.getMoveAfterStory().getNextStory();
    },getDropGroup: function dropGroup() {
        if (!this.isHoverable()) {
            return "InvalidDropGroup";
        }
        var prevStory = this.getMoveAfterStory();
        if (prevStory) {
            return prevStory.isActive() ? "ActiveStory" : "InactiveStory";
        }
        return "InactiveStory";
    },getProject: function() {
        return this.project;
    }});
Object.extend(DeadlineBarWidget.prototype, Widget.PanelModule);
EndOfListWidget = Class.create();
EndOfListWidget.ID = "endOfList";
EndOfListWidget.CLASS_NAME = "endOfList";
EndOfListWidget.prototype = Object.extend(new Widget(), {initialize: function(parentWidget, message) {
        this.super_init("EndOfList", EndOfListWidget.ID);
        this.setParent(parentWidget);
        this.itemListWidget = parentWidget;
        this._message = message || '';
        this.containedWidget = this;
        this.dropGroup = 'InvalidDropGroup';
    },getDragGroup: function() {
        return "StoryEndOfList";
    },getDropGroup: function getDropGroup() {
        var story = this.getMoveAfterStory(app.project);
        var effectivePanel = this.getEffectivePanel();
        if (story && !story.isActive()) {
            return "InactiveStory";
        } else if (effectivePanel == "Backlog" || effectivePanel == "Icebox") {
            return "InactiveStory";
        } else {
            return "BoundaryStory";
        }
    },_noteParentSet: function(parent) {
        this.parent = parent;
    },render: function() {
        this.renderedElement = Element.newDiv(this._message, {id: this.htmlId(),className: EndOfListWidget.CLASS_NAME});
        return this.renderedElement;
    },id: function() {
        return EndOfListWidget.ID;
    },getStoryId: function() {
        return null;
    },getProject: function() {
        return null;
    },getMoveAfterStory: function(project) {
        if (this.isInCurrentPanel()) {
            if (project.getCurrentIteration()) {
                return project.getCurrentIteration().getLastStory();
            } else {
                return null;
            }
        } else {
            return project.findStoryAtBottomOfBucket(this.getBucket());
        }
    },getMoveBeforeStory: function(project) {
        var afterStory = this.getMoveAfterStory(project);
        return afterStory ? afterStory.getNextStory() : null;
    },createDraggable: function(options) {
        if (!this.parent.allowsAdds()) {
            return;
        }
        this._createDroppable(options);
    },getBucket: function() {
        switch (this.parent.title) {
            case 'Done':
                return 0;
            case 'Backlog':
                return 2;
            case 'Icebox':
                return 3;
            case 'Epic Stories':
                return 3;
            case 'Current':
                return 1;
            default:
                return -1;
        }
    },addMarkerBefore: function() {
        this.renderedElement.style.borderTop = "2px solid black";
        this.renderedElement.style.marginTop = "-2px";
    },removeMarkerBefore: function() {
        this.renderedElement.style.borderTop = "";
        this.renderedElement.style.marginTop = "";
    },getDomElement: function() {
        return this.renderedElement;
    }});
Object.extend(EndOfListWidget.prototype, Widget.ContainerDragDropModule);
Object.extend(EndOfListWidget.prototype, Widget.PanelModule);
EpicEndOfListWidget = Class.create(EndOfListWidget, {initialize: function($super, parentWidget, message) {
        $super(parentWidget, message);
        this.super_init('EpicEndOfListWidget', 'epicEndOfListWidget');
        this.dropGroup = "EpicEndOfList";
    },getDragGroup: function() {
        return "EpicEndOfList";
    },getDropGroup: function dropGroup() {
        return "EpicEndOfList";
    }});
LabeledPanelEndOfListWidget = Class.create(EndOfListWidget, {initialize: function($super, parentWidget, message, labelFunction) {
        $super(parentWidget, message);
        this.labelFunction = labelFunction;
    },getMoveAfterStory: function($super, project) {
        var story = project.getStoriesWithLabel(this.labelFunction()).last();
        if (story && story.isUnscheduled()) {
            return story;
        } else {
            return $super(project);
        }
    },getMoveBeforeStory: function(project) {
        return null;
    },getEffectivePanel: function getEffectivePanel() {
        return "Icebox";
    },createDraggable: function(options) {
        if (!this.parent.allowsAdds()) {
            return;
        }
        options = options || {};
        options.noDefaultNewState = true;
        this._createDroppable(options);
    }});
IconsWidget = Class.create(Widget, {initialize: function($super, type, model_type, model, project, previewWidget, flyoverContainer) {
        this.super_init(type, "icons");
        this.model_type = model_type;
        this.model = model;
        this.flyoverContainer = flyoverContainer;
        this.model.events.subscribe(this, "update");
        this._suffix = ".gif";
        this.setParent(previewWidget);
        this._isSpinning = false;
        this._project = project;
    },onUpdate: function() {
        this._repaint();
    },onAttachmentUpdate: function() {
        this._repaint();
    },onCommentChange: function() {
        this._repaint();
    },_repaint: function() {
        this.detachFlyover();
        j(this.renderedElement).empty();
        j(this.modelIconsDiv).empty();
        this._paint();
        this.refresh();
    },super_paint: function() {
        this._addExpandIcon(this.renderedElement);
        this.renderedElement.appendChild(this.modelIconsDiv);
        this._addFlyover(this.modelIconsDiv);
        if (this._flyover) {
            this._flyover.attachTo(this.modelIconsDiv);
        }
    },render: function() {
        if (this.renderedElement) {
            j(this.renderedElement).empty().removeData().off();
        }
        this.renderedElement = Element.newDiv('', {className: "icons"});
        this.modelIconsDiv = Element.newDiv("", {className: "left"});
        this._paint();
        this._onResize = j.proxy(this.resize, this);
        j(window).resize(this._onResize);
        return this.renderedElement;
    },refresh: function() {
        var isUnderEdit = this.parent.isExpanded();
        this.showStatusIcons(!isUnderEdit);
        this._updateExpandIcon();
        this._refreshSpinner();
    },resize: function resize() {
        this.detachFlyover();
        this._addFlyover(this.modelIconsDiv);
        if (this._flyover) {
            this._flyover.attachTo(this.modelIconsDiv);
        }
    },getFlyover: function() {
        return this._flyover;
    },_noteParentSet: function(parent) {
        this.parent = parent;
    },detachFlyover: function detachFlyover() {
        if (this._flyover) {
            this._flyover.detach();
        }
    },super_destroy: function() {
        this.detachFlyover();
        j(window).off('resize', this._onResize);
        this.model.events.unsubscribe(this, "update");
    },showSpinnerIcon: function() {
        if (!this._isSpinning) {
            this.spinnerIcon = this._createSpinnerIcon();
            this.swapElement(this.modelTypeIcon, this.spinnerIcon);
            this._isSpinning = true;
        }
    },hideSpinnerIcon: function() {
        if (this._isSpinning) {
            this.swapElement(this.spinnerIcon, this.modelTypeIcon);
            this._isSpinning = false;
        }
    },_addExpandIcon: function _addExpandIcon(toElement) {
        var element = this.expandImageElement = j('<img/>').get(0);
        element.id = this.htmlId() + "_editButton";
        element.className = this._toggleExpandedButtonClass();
        j(element).on('click', this.parent.onEditClick.bind(this.parent)).on('mousedown', this.onMouseDown.bind(this));
        this._updateExpandIcon();
        toElement.appendChild(element);
    },_updateExpandIcon: function _updateExpandIcon() {
        var exp = this.parent.isExpanded();
        this.expandImageElement.src = story_icon_path(this.model_type + "_" + (exp ? "expanded" : "collapsed") + "1.png");
        this.expandImageElement.title = exp ? "Collapse" : "Expand";
    },onMouseDown: function(event) {
        event.stopImmediatePropagation();
    },_createSpinnerIcon: function() {
        return Element.newImage(this._getSpinnerIconSrc(), {className: 'storyTypeIcon',title: 'pending'});
    },_getSpinnerIconSrc: function() {
        if (this.model_type == 'epic') {
            return story_icon_path("spinners/epic.gif");
        }
        else {
            return story_icon_path("spinners/" + (this.parent.isExpanded() ? 'expanded' : this.model.getCurrentState() + this._spinnerIconStorySuffix()) + ".gif");
        }
    },_addFlyover: function() {
        if (this.flyoverContainer) {
            this._flyover = new Flyover(null, this._createFlyoverContentsDiv.bind(this), this.flyoverContainer, [], [], 425, 60, 3);
            this._flyover.scrollBarEnabled = false;
            this._flyover._postShow = function() {
                var windowHeight = Utils.windowDimensions().height;
                var overlayHeight = j(this.overlayDiv).height();
                if (windowHeight - Flyover.HEADER_HEIGHT < overlayHeight) {
                    var header = 64;
                    var footer = j('.foot', this.overlayDiv).height();
                    var meta = j('.meta', this.overlayDiv).height();
                    j('.body', this.overlayDiv).css('height', (windowHeight - Flyover.HEADER_HEIGHT - header - footer - meta) + 'px');
                }
            }
        }
    },_refreshSpinner: function() {
        if (this._isSpinning) {
            var newSpinner = this._createSpinnerIcon();
            this.swapElement(this.spinnerIcon, newSpinner);
            this.spinnerIcon = newSpinner;
        }
    },_toggleExpandedButtonClass: function _toggleExpandedButtonClass() {
        return "toggleExpandedButton";
    },showStatusIcons: function() {
    }});
EpicStoriesWidget = Class.create(AbstractPanelViewWidget, {initialize: function($super, epic, options) {
        $super("Epic Stories", "epic stories");
        this._options = options;
        this.epic = epic;
        this.project = epic.project;
        this.statusWidget = new EpicStatusWidget();
        this.itemListWidget = new ItemListWidget("Epic Stories", this.getDescription(), new EpicStoriesWidgetSource(epic), {renderAsynchronously: this._options.renderAsynchronously,renderChunkSize: this._options.renderChunkSize,statusWidget: this.statusWidget,draggableOptions: {label: function() {
                    return this.epic.label()
                }.bind(this)}});
        this._subscribeToEvents();
    },_updateStatus: function() {
        this.pastDoneStoriesCount = this.epic.pastDoneStoriesCount() +
        this.itemListWidget.itemWidgetSource.getAcceptedStoriesBeforeCurrentIteration(this.epic.getStories()).length;
        if (this.pastDoneStoriesCount > 0) {
            this.statusWidget.setPastDoneStoriesCount(this.pastDoneStoriesCount);
            this.statusWidget.repaint();
            this.statusWidget.afterAddedToDom();
        }
    },onShowPastDoneStories: function() {
        this.statusWidget.updateMessage("Loading stories...");
        this.itemListWidget.itemWidgetSource.loadDoneStories(this.statusWidget);
    },_updateStoryCounts: function _updateStoryCounts() {
        j('.subHeader .right', this.renderedElement).text(this.getStoryCounts());
    },scrollBy: function scrollBy(delta) {
        return this.itemListWidget.scrollBy(delta);
    },_unsubscribeFromEvents: function() {
        this.epic.events.unsubscribe(this, "update");
    },_subscribeToEvents: function() {
        this.epic.events.subscribe(this, "update");
        this.itemListWidget.itemWidgetSource.events.subscribe(this, 'update');
        this.statusWidget.events.subscribe(this, 'showPastDoneStories');
    },_destroy: function() {
        this.itemListWidget.destroy();
        this.statusWidget.destroy();
        j(this.renderedElement).remove();
        this.renderedElement = null;
        this.statusWidget = null;
        this.itemListWidget = null;
    },onUpdate: function() {
        if (this.renderedElement) {
            if (this.epic.isDeleted()) {
                this.panel.close();
            }
            else {
                this.panel.updateTitle();
                this._updateStatus();
                this._updateStoryCounts();
            }
        }
    },getTitle: function() {
        return this.epic.getName();
    },getDescription: function() {
        return "Epic Stories.....";
    },render: function() {
        this.renderedElement = Element.newDiv('', {id: this.htmlId()});
        this.paint();
        return this.renderedElement;
    },paint: function() {
        this.itemListDiv = this.itemListWidget.render();
        j(this.renderedElement).addClass("epic_stories").append(this.subHeader()).append(this.itemListDiv);
        this.itemsElement = this.itemListWidget.itemsElement;
        this._updateStatus();
        this._updateStoryCounts();
        this.j('.reveal_epic').click(function() {
            j(this.renderedElement).trigger('tracker:reveal_epic', this.epic);
        }.bind(this));
    },myDomainObjects: function() {
        return _(this.itemListWidget.itemWidgets).chain().pluck('containedWidget').pluck('model').compact().value();
    },additionalPanelLinks: function() {
        var panelLinks = [];
        if (!this.project.isReadOnly()) {
            var addStoryLink = j("<a class='panelLink new_story' href='#' title='Add Story'></a>");
            addStoryLink.click(j.proxy(this.onClickCreateNewStory, this));
            panelLinks.push(addStoryLink.get(0));
        }
        return panelLinks;
    },subHeader: function subHeader() {
        var html = "<div class='subHeader'>" + "<a class='reveal_epic' href='#'>Show Epic</a>" + "<div class='right'>" + this.getStoryCounts() + "</div>" + "</div>";
        return j(html)[0];
    },getStoryCounts: function getStoryCounts() {
        var visibleStories = _(this.itemListWidget.itemWidgets).chain().pluck('containedWidget').pluck('model').compact().value();
        var storyCount = visibleStories.length;
        var estimatesCount = _(visibleStories).chain().invoke('getEstimate').reject(function(n) {
            return n < 0
        }).reduce(function(sum, num) {
            return sum + num;
        }, 0).value();
        return [storyCount, " story".pluralize(storyCount, " stories"), ", ", estimatesCount, " point".pluralize(estimatesCount, " points")].join('');
    },onClickCreateNewStory: function onClickCreateNewStory() {
        var epic = this.epic;
        var separator_widget = this.itemListWidget.getItemWidgetById('icebox_stories_separation_line');
        var before_widget = this.itemListWidget.nextWidget(separator_widget);
        this.itemListWidget.addNewItem(Story.NEW_STORY_ID, function(newWidget) {
            newWidget.editWidget.j('.details').trigger('new_story_on_epic', epic);
        }, before_widget.id());
    },fillInWidgets: function() {
        this.itemListWidget.setParent(this.panel);
        this.itemListWidget.clearWidgets();
        this.itemListWidget.fillInWidgets();
    },manifestInfo: function() {
        return {epicId: this.epic.id()};
    },postRender: function() {
        this.itemListWidget.postRender();
    }});
EpicsWidget = Class.create(AbstractPanelViewWidget, {initialize: function(project, options) {
        this.super_init("Epics", "epics");
        this._options = Object.extend({renderAsynchronously: true,renderChunkSize: 25}, options || {});
        this.project = project;
        this._widgetSource = new EpicsWidgetSource(project);
        this.statusWidget = new EpicHeaderWidget(this._widgetSource);
        this.statusWidget.events.subscribe(this, 'showDoneEpics');
        this.itemListWidget = new ItemListWidget("Epics", this.getDescription(), this._widgetSource, {renderAsynchronously: this._options.renderAsynchronously,renderChunkSize: this._options.renderChunkSize,statusWidget: this.statusWidget,newItemId: Epic.NEW_EPIC_ID});
    },onShowDoneEpics: function() {
        this.statusWidget.hide();
        this._widgetSource.showDoneEpics();
    },scrollBy: function scrollBy(delta) {
        return this.itemListWidget.scrollBy(delta);
    },getTitle: function() {
        return "Epics";
    },getDescription: function() {
        return "Epics are truly EPIC!!!!";
    },_noteParentSet: function(parent) {
        this.panel = parent;
        this.itemListWidget._noteParentSet(parent);
    },render: function() {
        this.renderedElement = Element.newDiv('', {id: this.htmlId()});
        this.paint();
        j(this.renderedElement).data('project', this.project);
        this.statusWidget.afterAddedToDom();
        return this.renderedElement;
    },paint: function() {
        this.renderedElement.className = "epics";
        this.itemListDiv = this.itemListWidget.render();
        this.renderedElement.appendChild(this.itemListDiv);
        this.itemsElement = this.itemListWidget.itemsElement;
    },fillInWidgets: function() {
        this.itemListWidget.setParent(this.panel);
        this.itemListWidget.clearWidgets();
        this.itemListWidget.fillInWidgets();
    },postRender: function() {
        this.itemListWidget.postRender();
    },_destroy: function() {
        this.project.events.unsubscribe(this, "updateAffectingEpicSize");
        this.itemListWidget.destroy();
        this.itemListWidget = null;
        j(this.renderedElement).remove();
        this.renderedElement = null;
    },additionalPanelLinks: function() {
        var panelLinks = [];
        if (!this.project.isReadOnly()) {
            var $link = j("<a class='panelLink add_epic' href='#' title='Add Epic'></a>");
            $link.click(j.proxy(this.addNewEpic, this));
            panelLinks.push($link.get(0));
        }
        return panelLinks;
    },addNewEpic: function addNewEpic() {
        this.itemListWidget.addNewItem(Epic.NEW_EPIC_ID);
    },showStory: function(epic, modelDetails) {
        var renderListener = {onDoneRendering: function() {
                if (epic.isDone() && !this._widgetSource.isShowingDoneEpics()) {
                    this.onShowDoneEpics();
                }
                var itemWidget = this.itemListWidget.getItemWidgetById(epic.id());
                if (modelDetails) {
                    var previewWidget = itemWidget.containedWidget;
                    previewWidget.editWidget = modelDetails;
                    modelDetails.parentWidget = previewWidget;
                }
                itemWidget.containedWidget.expand();
                this.itemListWidget.scrollToItem(itemWidget);
            }.bind(this)};
        this.itemListWidget.addRenderListener(renderListener);
    },revealItem: function(epic) {
        var renderListener = {onDoneRendering: function() {
                if (this.panel.isActive()) {
                    if (epic.isDone() && !this._widgetSource.isShowingDoneEpics()) {
                        this.onShowDoneEpics();
                    }
                    var epicWidget = this.itemListWidget.getItemWidgetById(epic.id());
                    this.itemListWidget.scrollToItem(epicWidget);
                    epicWidget.containedWidget.expand();
                    flash([epic]);
                }
            }.bind(this)};
        this.itemListWidget.addRenderListener(renderListener);
    }});
EpicDetailsWidget = Class.create(BaseDetailsWidget, {DELETE_COMMAND: Tracker.DeleteEpic,configuration: function configuration($super) {
        var baseConfig = $super();
        j.extend(baseConfig['delegateEvents'], {"click .view_stories": "onViewStories","keydown .view_stories": "onViewStories"});
        baseConfig['domainEvents'].push("project.update");
        return baseConfig
    },afterAddedToDom: function($super) {
        this._setupLabelWidget();
        $super();
    },_setupLabelWidget: function _setupLabelWidget() {
        var $input = this._getInputElement("label");
        var self = this;
        $input.labelWidget({readOnly: this.isReadOnly(),limit: true,ellipsify: 20,labelClassFunctor: function() {
                return 'epic_label';
            },initialLabels: this.model.getLabels(),availableLabels: function() {
                return self.project.labelRepository.getNonEpicLabels(self.model.label() ? [self.model.label()] : [])
            },addLabelCallback: j.proxy(this.updateDirtyState, this),removeLabelCallback: j.proxy(this.updateDirtyState, this),click: j.proxy(app.showPanelForLabel, app)});
    },setValues: function($super) {
        $super();
        this._setField("name", this.model.name());
        this._setField("label", this.model.label());
        this._setField("description", this.model.description() || '');
        this._setStoryCount();
    },defineInputSelectors: function defineInputSelectors() {
        return {name: ".epic_name",description: ".description_area",label: "li.linked_label input.label"};
    },htmlId: function() {
        if (this.model.isNew()) {
            return "epic_" + Epic.NEW_EPIC_ID + "_details";
        } else {
            return "epic_" + this.model.id() + "_details";
        }
    },onViewStories: function($target, e) {
        if (e.type == 'click' || e.type == 'keydown' && e.which == 13) {
            app.layout.showEpicStoriesPanel(this.model.id());
            e.preventDefault();
            e.stopPropagation();
        }
    },hasBeenEdited: function hasBeenEdited(field) {
        return this._hasWidgetBeenEdited.apply(this, arguments);
    },maximize: function() {
        app.layout.openPanel(Panel.FULL_EPIC, {viewWidgetOptions: {epic: this.model,modelDetails: this}});
    },_setId: function() {
        return null
    },_setLabel: function($element, value) {
        $element.val(value).labelWidget('labels', value === '' ? [] : value.split(','));
    },_setStoryCount: function() {
        var storyCount = this.model.getStories().length;
        switch (storyCount) {
            case 0:
                this.j('.storyCount').text('');
                this.j('.storyWord').text(' no stories');
                break;
            case 1:
                this.j('.storyCount').text("1");
                this.j('.storyWord').text(" story");
                break;
            default:
                this.j('.storyCount').text(storyCount);
                this.j('.storyWord').text(" stories");
        }
    }});
EpicFlyoverWidget = Class.create(BaseModelWidget, {configuration: function configuration() {
        return {domainEvents: [],delegateEvents: {"click .view_stories": "onViewStories","click .epic_label": "onViewStories"},childWidgets: {'.comments.section': [Tracker.CommentsWidget, [this.model, true, {isInFlyover: true}]]}};
    },paint: function paint() {
        var completionDate = this.model.getCompletionDate();
        return Tracker.Template.render('epic_flyover_template', {name: this.model.name(),label: this.model.label(),description: this.model.description(),hasComments: this.model.hasComments(),hasStories: this.model.hasStories(),hasDescription: this.model.hasDescription(),completionDate: completionDate ? completionDate.asDisplayMonthDay() : null});
    },onViewStories: function() {
        app.layout.showEpicStoriesPanel(this.model.id());
    }});
EpicIconsWidget = Class.create(IconsWidget, {initialize: function($super, model, project, previewWidget, flyoverContainer) {
        $super("EpicIcons", "epic", model, project, previewWidget, flyoverContainer);
    },_destroy: function() {
        this.super_destroy();
    },_paint: function() {
        this.super_paint();
        this._addModelTypeIcon(this.modelIconsDiv);
        j(this.modelIconsDiv).addClass('epic_icon_container');
    },_spinnerIconStorySuffix: function() {
        return "";
    },_createFlyoverContentsDiv: function() {
        return new EpicFlyoverWidget(this.model);
    },_toggleExpandedButtonClass: function _toggleExpandedButtonClass() {
        return "toggle_expanded_button";
    },_addModelTypeIcon: function(toElement) {
        if (this.model.hasComments() || this.model.hasDescription()) {
            if (this._project.allowsAttachments() && this.model.hasResources()) {
                this.modelTypeIcon = Element.newImage(story_icon_path("story_flyover_attachment_icon.png"), {className: 'flyoverIcon'});
            } else {
                this.modelTypeIcon = Element.newImage(story_icon_path("story_flyover_icon.png"), {className: 'flyoverIcon'});
            }
        } else {
            this.modelTypeIcon = Element.newSpan("", {className: 'epic_icon_empty'});
        }
        toElement.appendChild(this.modelTypeIcon);
    }});
EpicPreviewWidget = Class.create(BasePreviewWidget, {initialize: function($super, epic, project, itemListWidget, revealer) {
        $super(epic, project, itemListWidget, revealer, "EpicPreview");
        this.project = project;
        this._subscribeToEvents();
        this._pendingUpdateCount = 0;
        this._onEditClickFunction = this.onEditClick.bind(this);
        this.dropGroup = "EpicPreview";
        this._originalBackgroundColor = {red: 255,green: 248,blue: 215};
    },_subscribeToEvents: function() {
        this.model.events.subscribe(this, "statusChange", "update", "startPendingUpdate", "stopPendingUpdate", "updatePointCounts");
    },_unsubscribeFromEvents: function() {
        this.model.events.unsubscribe(this, "statusChange", "update", "startPendingUpdate", "stopPendingUpdate", "updatePointCounts");
    },_destroy: function() {
        if (this.iconsWidget) {
            this.iconsWidget.destroy();
            this.iconsWidget = null;
        }
        if (this.epicProgressFlyover) {
            this.epicProgressFlyover.detach();
            this.epicProgressFlyover = null;
        }
        this._unsubscribeFromEvents();
        if (this.editWidget) {
            this.editWidget.destroy();
        }
        if (this.renderedElement) {
            j(this.renderedElement).remove();
            this.renderedElement = null;
        }
    },hasRevealButton: function() {
        return this.hasRevealer() && this.project.getEpicById(this.model.id()) != null;
    },onUpdate: function() {
        if (this.renderedElement == null) {
            return;
        }
        this.j('.epicPreviewText').html(Element.cleanupText(this.model.name()));
        this._updateStoriesInEpicGraph(this.project.getMaxPseudopointsPerEpic());
        this._addOrRemoveDoneClass();
        if (this.isExpanded()) {
            j(this.epicHeader).hide();
        }
    },onUpdatePointCounts: function onUpdatePointCounts() {
        if (this.renderedElement == null) {
            return;
        }
        this._updateStoriesInEpicGraph(this.project.getMaxPseudopointsPerEpic());
    },render: function() {
        this.$renderedElement = j('<div />', {id: this.htmlId(),'class': 'draggableItem storyItem epicItem' + (this.project.isReadOnly() ? " readOnly" : "")});
        this.$renderedElement.data('epicId', this.model.id());
        this.renderedElement = this.$renderedElement.get(0);
        this._addOrRemoveDoneClass();
        this._paint();
        this._setCursorForTitle();
        return this.renderedElement;
    },_paint: function() {
        this._paintDropOverlay();
        this._paintPreviewElement();
        this.detailElement = Element.create("div", {className: "epicDetailElement"});
        this.renderedElement.appendChild(this.detailElement);
    },_addOrRemoveDoneClass: function() {
        if (!this.$renderedElement) {
            return;
        }
        if (this.model.isAccepted()) {
            if (!this.$renderedElement.hasClass('accepted')) {
                this.$renderedElement.addClass('accepted');
                this._recreateDraggable();
            }
        } else {
            if (this.$renderedElement.hasClass('accepted')) {
                this.$renderedElement.removeClass('accepted');
                this._recreateDraggable();
            }
        }
    },_paintDropOverlay: function() {
        j(this.renderedElement).append('<div class="story_drop_overlay"></div>');
    },_paintPreviewElement: function() {
        if (this.iconsWidget) {
            this.iconsWidget.destroy();
        }
        if (this.epicProgressFlyover) {
            this.epicProgressFlyover.detach();
        }
        var hasRevealButton = this.hasRevealButton();
        var html = Tracker.Template.render('epic_preview_template', {name: this.model.name(),htmlId: this.htmlId(),hasRevealButton: hasRevealButton});
        j(this.renderedElement).append(html);
        this.iconsWidget = new EpicIconsWidget(this.model, this.project, this, document.body);
        this.j('.icons').replaceWith(this.iconsWidget.render());
        this._makeStoriesInEpicGraph();
        this.epicHeader = this.j('.epicPreviewHeader').get(0);
        j(this.epicHeader).dblclick(this._onEditClickFunction);
        this.j('.epicStoriesView').click(j.proxy(this._showEpicStoriesPanel, this));
        if (hasRevealButton) {
            this.j().on('click', '.revealLink', j.proxy(this.onRevealClick, this))
        }
    },_makeStoriesInEpicGraph: function() {
        this._graphElement = this.j('.epic_details_graph').get(0);
        this._updateStoriesInEpicGraph(this.project.getMaxPseudopointsPerEpic());
        this.epicProgressFlyover = new EpicProgressFlyover(this.model);
        this.epicProgressFlyover.attachTo(this._graphElement);
        j(this._graphElement).click(function(e) {
            this._showEpicStoriesPanel();
            this.epicProgressFlyover.close();
        }.bind(this));
        return this._graphElement;
    },_showEpicStoriesPanel: function _showEpicStoriesPanel() {
        app.layout.showEpicStoriesPanel(this.model.id());
    },_updateStoriesInEpicGraph: function(maxPseudopoints) {
        if (!this._graphElement)
            return;
        j(this._graphElement).toggleClass('no_stories', this.model.getStories().length === 0);
        var pseudopointsInBucket = this.model.getPseudopoints();
        ['accepted', 'active', 'unstarted', 'unscheduled'].each(function(bucket) {
            j('.' + bucket + '_bar', this._graphElement).width((pseudopointsInBucket[bucket] * 100.0) / maxPseudopoints + '%')
        }.bind(this));
        if (this.epicProgressFlyover) {
            this.epicProgressFlyover.rebuild();
        }
    },isHoverable: function() {
        return !this.project.isReadOnly() && !this.isExpanded() && !this.model.isAccepted();
    },isDraggable: function() {
        return !this.project.isReadOnly() && !this.isExpanded() && !this.model.isAccepted();
    },_recreateDraggable: function() {
        this._setCursorForTitle();
        this.itemListWidget.destroyDraggableContainedWidget(this);
        if (this.isDraggable() || this.isHoverable()) {
            this.itemListWidget.createDraggableContainedWidget(this);
        }
    },notifyDroppedOn: function(targetWidget) {
        var prevWidget = targetWidget.parent.prevWidget(targetWidget);
        if (prevWidget == targetWidget) {
            prevWidget = null;
        }
        new EpicController(this.project).handleDragDrop(this, prevWidget, targetWidget);
    },onEditClick: function(event) {
        if (this.isExpanded()) {
            this.collapse();
        } else {
            this.expand();
        }
    },expand: function() {
        if (this._expanded)
            return;
        this._expanded = true;
        if (!this.editWidget) {
            this.editWidget = new EpicDetailsWidget(this.model, this);
        }
        if (this.editWidget.renderedElement) {
            this.detailElement.appendChild(this.editWidget.renderedElement);
        } else {
            this.detailElement.appendChild(this.editWidget.render());
            this.editWidget.afterAddedToDom();
        }
        j(this.epicHeader).hide();
        this._recreateDraggable();
        this.j().trigger('details:didExpand').trigger('panel:resize');
    },collapse: function() {
        this._closeFullPageViewIfPresent('full_epic');
        this._expanded = false;
        this.iconsWidget.refresh();
        j(this.epicHeader).show();
        if (this.editWidget) {
            this.editWidget.destroy();
            this.editWidget = null;
        }
        this._recreateDraggable();
    },removeFromItemList: function($super, id) {
        this._closeFullPageViewIfPresent('full_epic');
        $super(id);
    },onStartPendingUpdate: function(epic) {
        this._pendingUpdateCount++;
        if (this._pendingUpdateCount > 0 && this.iconsWidget) {
            this.iconsWidget.showSpinnerIcon();
        }
    },onStopPendingUpdate: function(epic) {
        this._pendingUpdateCount--;
        if (this._pendingUpdateCount <= 0 && this.iconsWidget) {
            this.iconsWidget.hideSpinnerIcon();
        }
    },showChange: function(opacity) {
        if (this.renderedElement) {
            if (opacity == 0.0) {
                this.elementsToFlash().css('backgroundColor', '');
                this.isShowingChange = false;
            } else {
                this.elementsToFlash().css('backgroundColor', Flash.calculateColor(opacity, this._originalBackgroundColor));
                this.isShowingChange = true;
            }
            this.afterShowChange(opacity);
        }
    },elementsToFlash: function elementToFlash() {
        return j(this.renderedElement);
    },afterShowChange: function afterShowChange(opacity) {
        if (this.editWidget) {
            this.editWidget.showChange(opacity);
        }
    },onStatusChange: function(epic, opacity) {
        if (!this.hasRevealer()) {
            this.showChange(opacity);
        }
    },_setCursorForTitle: function() {
        if (this.$renderedElement) {
            this.$renderedElement.find(".titleField").css({cursor: this.isDraggable() ? 'move' : "default"});
        }
    },getDropGroup: function getDropGroup() {
        return "EpicPreview";
    }});
ExternalStoryPreviewWidget = Class.create();
ExternalStoryPreviewWidget.prototype = Object.extend(new Widget(), {initialize: function(externalStory, integration, project, itemListWidget) {
        this.super_init("ExternalStoryPreview", "content");
        this.project = project;
        this.integration = integration;
        this.model = this.externalStory = externalStory;
        this.itemListWidget = itemListWidget;
    },_destroy: function() {
        if (this.renderedElement) {
            j(this.renderedElement).remove();
            this.renderedElement = null;
        }
        if (this._flyover) {
            this._flyover.detach();
        }
    },render: function() {
        this.renderedElement = Element.newDiv('', {id: this.htmlId(),className: 'draggableItem externalStory ' + this.additionalClassNames()});
        this.renderedElement.style.cursor = 'move';
        this._paint();
        return this.renderedElement;
    },additionalClassNames: function() {
        throw "Subclasses should override the additionalClassNames function";
    },_paint: function() {
        this.renderedElement.appendChild(this._createTitleRow());
        this.renderedElement.appendChild(this._secondRow());
        this.renderedElement.appendChild(this._thirdRow());
        this.renderedElement.appendChild(Element.create('div', {className: 'clear'}));
        this._addFlyover();
    },_createTitleRow: function() {
        var titleRow = Element.create("div", {className: 'titleRow'});
        this.iconDiv = Element.create("div", {className: 'icon'});
        var storyIcon = Element.newImageLink({src: story_icon_path(this._storyIconName()),className: 'externalStoryIcon'});
        this.iconDiv.appendChild(storyIcon);
        if (this.externalStory.hasDescription()) {
            var descriptionBubbleIcon = Element.newImageLink({src: story_icon_path("story_flyover_icon.png"),className: 'flyoverIcon'});
            this.iconDiv.appendChild(descriptionBubbleIcon);
        }
        var title = Element.newSpan(this.externalStory.getName(), {className: "title",cleanupText: true,breakUpLongWords: true});
        titleRow.appendChild(this.iconDiv);
        titleRow.appendChild(title);
        return titleRow;
    },_addFlyover: function(container) {
        this._flyover = new Flyover(this.externalStory.getName(), this._createFlyoverContentsDiv.bind(this), container, Layout.SCROLLABLE_ELEMENT_IDS, ["storyFlyover externalStory bugTool"], 475, 40, 3);
        this._flyover.attachTo(this.iconDiv);
    },_createFlyoverContentsDiv: function() {
        var contents = Element.newDiv("");
        contents.appendChild(this._secondRow());
        var details = Element.newDiv('', {className: "flyoverContent storyDetails"});
        contents.appendChild(details);
        var externalStoryIdDiv = this._createExternalStoryIdDiv();
        externalStoryIdDiv.addClassName("right");
        details.appendChild(externalStoryIdDiv);
        if (this.externalStory.hasDescription()) {
            var descriptionSection = Element.newDiv("", {className: 'section'});
            details.appendChild(descriptionSection);
            descriptionSection.appendChild(Element.newDiv("Description", {className: "header"}));
            descriptionSection.appendChild(Element.newDiv(this.externalStory.getDescription(), {className: 'descriptionText',cleanupText: true,breakUpLongWords: true}));
        } else {
            details.appendChild(Element.newDiv('', {className: 'clear'}));
        }
        return contents;
    },_storyIconName: function() {
        throw "Subclasses should override the _storyIconName function";
    },_secondRow: function() {
        var secondRow = Element.create("div", {className: 'secondRow'});
        secondRow.appendChild(this._secondRowContent());
        return secondRow;
    },_secondRowContent: function() {
        throw "Subclasses should override the _secondRowContent function";
    },_thirdRow: function() {
        var thirdRow = Element.create("div", {className: 'thirdRow'});
        thirdRow.appendChild(this._thirdRowContent());
        return thirdRow;
    },_thirdRowContent: function() {
        throw "Subclasses should override the _thirdRowContent function";
    },_createExternalLink: function() {
        throw "Subclasses should override the _createExternalLink function";
    },id: function() {
        return this.externalStory.getId();
    },getTitleHtmlId: function() {
        return this.htmlId();
    },notifyDroppedOn: function(targetWidget, options) {
        var prevWidget = targetWidget.parent.prevWidget(targetWidget);
        this._getStoryController().handleDragDrop(this, prevWidget, targetWidget, options);
    },_getStoryController: function() {
        return new StoryController(this.project);
    },isDraggable: function() {
        return true;
    },isHoverable: function() {
        return false;
    },getExternalStory: function() {
        return this.externalStory;
    },getStory: function() {
        return this.externalStory.createStory();
    }});
Object.extend(ExternalStoryPreviewWidget.prototype, Widget.ContainedDragDropModule);
HeaderWidget = Class.create(BaseWidget, {initialize: function initialize($super, id, name, description) {
        $super();
        this._id = id;
        this._name = name;
        this._description = description;
        this.widgetType = 'HeaderWidget';
    },paint: function paint() {
        return Tracker.Template.render('header_template', {name: this._name,description: this._description,className: this._id});
    },id: function id() {
        return this._id;
    },isDraggable: function() {
        return false;
    },isHoverable: function() {
        return false;
    },setParent: function setParent(parentWidget) {
        this.parentWidget = parentWidget;
    }});
HelpWidget = Class.create();
HelpWidget.prototype = Object.extend(new Widget(), {initialize: function(parentWidget, helpTopic, contentDiv, identifier, className, flyoverContainer) {
        this.super_init("Help", identifier ? "help_" + identifier : "help");
        this.setParent(parentWidget);
        this.helpTopic = helpTopic;
        this.contentDiv = contentDiv;
        this.className = className || "helpIcon";
        this.flyoverContainer = flyoverContainer || document.body;
    },render: function() {
        var renderedElement = Element.newDiv('', {id: this.htmlId(),className: this.className});
        var image = Element.newImage(images_root_path("application/icons/common/question_mark.gif"));
        this.flyover = new Flyover(this.helpTopic, function() {
            return this.contentDiv;
        }.bind(this), this.flyoverContainer, Layout.SCROLLABLE_ELEMENT_IDS, ['help']);
        this.flyover.attachTo(image);
        renderedElement.appendChild(image);
        return renderedElement;
    },_destroy: function() {
        if (this.flyover) {
            this.flyover.detach();
        }
    }});
ProjectHistoryItemWidget = Class.create(HistoryWidget, {initialize: function(historyItem, revealer) {
        this.super_init("Command", "command");
        this.historyItem = historyItem;
        this.revealer = revealer;
        this._subscribeToEvents();
    },_subscribeToEvents: function() {
        app.events.subscribe(this, "periodicUpdate");
        this.historyItem.events.subscribe(this, "addCommand");
    },_unsubscribeFromEvents: function() {
        app.events.unsubscribe(this, "periodicUpdate");
        this.historyItem.events.unsubscribe(this, "addCommand");
    },onAddCommand: function(historyItem, command) {
        if (this.allHistoryContent) {
            this.allHistoryContent.appendChild(this._buildContent(command));
            if (this.revealLink && command.getType() == "deleteStory") {
                $(this.revealLink).hide();
            }
        }
    },onPeriodicUpdate: function() {
        if (this.timeElement) {
            this.timeElement.update(this.historyItem.timeAgo());
        }
        if (this.revealLink && !this.historyItem.canRevealTopLevelElements()) {
            $(this.revealLink).hide();
        }
    },render: function() {
        var command = this.historyItem.getInitialCommand();
        this.renderedElement = Element.newDiv("", {className: "history_item aggregated"});
        this._buildHeader(command);
        this.allHistoryContent = Element.newDiv("");
        this.renderedElement.appendChild(this.allHistoryContent);
        this.historyItem.getCommands().each(function(c) {
            this.allHistoryContent.appendChild(this._buildContent(c));
        }.bind(this));
        this.timeElement = new Element("div", {className: "time_ago"}).update(this.historyItem.timeAgo());
        this.renderedElement.appendChild(this.timeElement);
        return this.renderedElement;
    },_buildHeader: function(command) {
        var titleString = Element.cleanupText(command.getTitle());
        var affectedElementType = command.getAffectedTopLevelElementType();
        affectedElementType = affectedElementType == 'epic' ? affectedElementType + "2" : affectedElementType;
        var header = Element.newDiv("", {className: "history_header"});
        header.appendChild(new Element("img", {src: story_icon_path(affectedElementType + ".png"),className: "affected_element_icon"}));
        if (this.revealer && command.canRevealTopLevelElements()) {
            this.revealLink = Element.newLinkToFunction(this.onRevealClick.bind(this), {className: "reveal reveal_icon",title: "Reveal"}, "");
            header.appendChild(this.revealLink);
        }
        this.renderedElement.appendChild(header);
        titleString = (titleString == "Multiple Stories" ? titleString : '"' + titleString + '"');
        header.appendChild(new Element("span").update(titleString));
    },getAffectedTopLevelElements: function() {
        return this.historyItem.getAffectedTopLevelElements();
    },id: function() {
        return this.historyItem.id;
    }});
IntegrationWidget = Class.create(AbstractPanelViewWidget, {initialize: function(project, integration, integrationWidgetSourceClass, options) {
        this.super_init("Integration", "results");
        this._integration = integration;
        this._options = Object.extend({renderAsynchronously: true,renderChunkSize: 25}, options || {});
        this.project = project;
        this.integrationWidgetSource = new integrationWidgetSourceClass(this.project, integration, this.externalStoriesCompleteCallback.bind(this), this.externalStoriesUnavailableCallback.bind(this));
        this.statusWidget = new StatusWidget();
        this.itemListWidget = new IntegrationItemListWidget("Integration Results", this.getDescription(), this.integrationWidgetSource, {renderAsynchronously: this._options.renderAsynchronously,renderChunkSize: this._options.renderChunkSize,statusWidget: this.statusWidget});
    },getTitle: function() {
        return this._integration.getName();
    },getDescription: function() {
        return "The " + this._integration.getName() + " panel shows stories from your integration. You may create linked stories in Tracker by dragging them into the Current, Backlog or Icebox panels."
    },render: function() {
        var renderedElement = Element.newDiv('', {id: this.htmlId()});
        this.renderedElement = renderedElement;
        this.paint();
        return renderedElement;
    },paint: function() {
        this.renderedElement.className = "integration";
        this.renderedElement.className = "search";
        this.itemListDiv = this.itemListWidget.render();
        this.renderedElement.appendChild(this.itemListDiv);
        this.resetStatusClass();
        this.load();
    },fillInWidgets: function() {
        this.itemListWidget.setParent(this);
        this.itemListWidget.fillInWidgets();
    },load: function() {
        this._updateResults(0);
        this.statusWidget.updateStatus(this._loadingMessage());
        this.integrationWidgetSource.load();
    },externalStoriesCompleteCallback: function() {
        var resultsCount = this.integrationWidgetSource.getCount();
        this.statusWidget.updateStatus("Loaded " + resultsCount + " " + this._storyName(resultsCount));
        this._updateResults(resultsCount);
    },externalStoriesUnavailableCallback: function(response, e) {
        this._updateResults(0);
        this.statusWidget.updateStatus("Unable to load " + this._storyName(0) + this._lastSourceErrorMessage());
        this.statusWidget.addStatusClass('error');
    },_lastSourceErrorMessage: function() {
        var errorMessage = this.integrationWidgetSource.getLastErrorMessage();
        return errorMessage ? (" - " + errorMessage) : "";
    },_updateResults: function(resultsCount) {
        this.resetStatusClass();
        if (resultsCount == 0) {
            this.statusWidget.addStatusClass('none');
        } else {
            this.statusWidget.addStatusClass('found');
        }
    },setRenderSynchronously: function() {
        this.itemListWidget._options.renderAsynchronously = false;
    },_destroy: function() {
        this.itemListWidget.destroy();
        this.itemListWidget = null;
        this.integrationWidgetSource = null;
    },resetStatusClass: function() {
        this.statusWidget.resetStatusClass("integrationResults");
    },additionalPanelLinks: function() {
        var panelLinks = [];
        this.refreshLink = Element.newLinkToFunction(this.load.bind(this), {href: "#",className: 'panelLink refresh',id: this.htmlId() + "_refresh_link",title: "Refresh"}, "");
        panelLinks.push(this.refreshLink);
        return panelLinks;
    },_loadingMessage: function() {
        return 'Loading ' + this._storyName(0) + '...';
    },_storyName: function(count) {
        return this._integration.getStoryName().toLowerCase().pluralize(count);
    }});
ItemListWidget = Class.create(AbstractPanelViewWidget, {initialize: function(title, description, itemWidgetSource, options) {
        this.draggableCount = 0;
        this.super_init("ItemList", "itemList");
        this.title = title || "";
        this.description = description;
        this.itemWidgetSource = itemWidgetSource;
        this.itemWidgets = [];
        this.itemWidgetsById = {};
        this.renderListeners = [];
        this.endOfListMessage = '';
        this.itemWidgetSource.events.subscribe(this, "update");
        this._options = Object.extend({renderAsynchronously: false,renderChunkSize: 25}, options || {});
        this.deferredRender = j.Deferred();
    },selectStory: function(story) {
        if (story) {
            app.project.addSelectedModel(story);
        }
    },unselectStory: function(story) {
        if (story) {
            app.project.removeSelectedModel(story);
        }
    },selectRange: function(selectedStory) {
        var objectIds = this.itemWidgetSource.storyIdsInOrder();
        var lastSelectedStory = app.project.getLastSelectedModel();
        var fromIndex = objectIds.indexOf(lastSelectedStory ? lastSelectedStory.id() : null);
        var toIndex = objectIds.indexOf(selectedStory.id());
        var stories = [selectedStory];
        if (lastSelectedStory && fromIndex != -1 && fromIndex != toIndex) {
            if (fromIndex > toIndex) {
                var tmpIndex = toIndex;
                toIndex = fromIndex;
                fromIndex = tmpIndex;
            }
            for (var i = fromIndex + 1; i < toIndex; i++) {
                var story = app.project.getStoryById(objectIds[i]);
                if (story && story.getStoryType) {
                    stories.unshift(story);
                }
            }
        }
        app.project.addSelectedModels(stories);
    },allowsAdds: function() {
        return this.itemWidgetSource != null ? this.itemWidgetSource.allowsAdds() : false;
    },getTitle: function() {
        return this.title;
    },getSubtitle: function() {
        return this._options["subtitle"];
    },getDescription: function() {
        return this.description;
    },getPanelHtmlId: function() {
        if (this.panel == null) {
            return "";
        } else {
            return this.panel.htmlId();
        }
    },myDomainObjects: function() {
        return this.itemWidgetSource.myDomainObjects();
    },viewHistory: function(story) {
        this.panel.viewHistory(story);
    },clearWidgets: function() {
        this.itemWidgets = [];
        this.itemWidgetsById = {};
    },fillInWidgets: function() {
        this._fillInWidgets(this.itemWidgetSource.createWidgets(this));
    },_fillInWidgets: function(itemWidgets) {
        var endOfListWidget = this.itemWidgetSource.getEndOfListWidget(this, this.endOfListMessage);
        itemWidgets.push(endOfListWidget);
        for (var i = 0; i < itemWidgets.length; i++) {
            this.addToWidgetCollection(itemWidgets[i]);
        }
    },getFirstWidget: function() {
        return this.itemWidgets.length > 0 ? this.itemWidgets[0] : null;
    },getLastWidgetIgnoring: function(ignoreId) {
        for (var i = (this.itemWidgets.length - 1); i >= 0; i--) {
            var itemWidget = this.itemWidgets[i];
            if (itemWidget.widgetType == 'EndOfList' || itemWidget.containedWidget.widgetType == 'Deadline' || itemWidget.id() == ignoreId) {
            } else {
                return this.itemWidgets[i];
            }
        }
        return null;
    },getLastStoryId: function() {
        return this.getLastWidgetIgnoring().id();
    },onUpdate: function() {
        var self = this;
        if (this.itemsElement) {
            j(this.innerElement).trigger("list:onUpdate");
            var renderListener = {onDoneRendering: function() {
                    self.update();
                    j(self.innerElement).trigger("panel:resize");
                }};
            this.addRenderListener(renderListener);
        }
    },recalculateDropGroups: function recalculateDropGroups() {
        if (this.panel && !this.panel.isDroppable) {
            return;
        }
        var currentGroup = null;
        for (var i = 0; i < this.itemWidgets.length; i++) {
            if (currentGroup == 'InactiveStory') {
                this.itemWidgets[i].containedWidget.dropGroup = "InactiveStory";
            } else {
                currentGroup = this.itemWidgets[i].containedWidget.getDropGroup();
                this.itemWidgets[i].containedWidget.dropGroup = currentGroup;
            }
        }
    },render: function() {
        this.renderedElement = Element.newDiv();
        this.paint();
        j(this.renderedElement).on('ensureVisable', function(event, position) {
            this.ensureVisable(position)
        }.bind(this));
        return this.renderedElement;
    },clone: function() {
        var cloneWidget = new ItemListWidget(this.title, this.description, this.itemWidgetSource.clone());
        cloneWidget.scrollPostRender(this.getScrollTop());
        return cloneWidget;
    },addToWidgetCollection: function(widget) {
        try {
            var widgetId = widget.id().toString();
            this.itemWidgetsById[widgetId] = widget;
            this.itemWidgets.push(widget);
        } catch (e) {
            app.sendClientErrorToServer("Failed to add widget to collection; skipping.", e);
        }
    },hasNoStories: function() {
        return this.itemWidgets.length == 1;
    },getItemWidgetById: function(widgetId) {
        return this.itemWidgetsById[widgetId.toString()];
    },update: function() {
        if (!this.itemsElement) {
            return;
        }
        var loom = {move: this.moveItem.bind(this),add: this.addItem.bind(this),remove: this.removeItem.bind(this)};
        var weaver = new Weaver(loom, {verbose: false,asynchronous: this._options.renderAsynchronously,chunkSize: this._options.renderChunkSize});
        var desiredOrder = this.itemWidgetSource.idsInOrder();
        this._addSpecialListObjects(desiredOrder);
        weaver.weave(this._orderedWidgetIds(), desiredOrder);
        this.recalculateDropGroups();
    },postRender: function() {
        this.update();
        j(document).trigger('itemList:postRender', this);
    },_addSpecialListObjects: function(desiredOrder) {
        var newWidget = this.getNewWidget();
        if (newWidget) {
            desiredOrder.unshift(newWidget.id());
        }
        desiredOrder.push(EndOfListWidget.ID);
    },addItem: function(widgetId, beforeWidgetId) {
        try {
            var newWidget = this.itemWidgetSource.createWidgetForId(widgetId, this);
            this.addToWidgetCollection(newWidget);
            newWidget.render();
            this.moveItem(widgetId, beforeWidgetId);
            if (widgetId != Story.NEW_STORY_ID && widgetId != Epic.NEW_EPIC_ID) {
                this.createDraggable(newWidget);
            }
            j(this.renderedElement).trigger('panel:resize');
        } catch (e) {
            app.sendClientErrorToServer("Failed to render item; skipping.", e);
        }
    },getNewWidget: function() {
        if (!this.newItemId)
            return null;
        var widgetContainer = this.itemWidgetsById[this.newItemId];
        return (typeof (widgetContainer) == 'undefined') ? null : widgetContainer.containedWidget;
    },_orderedWidgetIds: function() {
        return this.itemWidgets.collect(function(w) {
            return w.id();
        });
    },addRenderListener: function(listener) {
        this.renderListeners.push(listener);
        this.updateRenderListener(listener);
    },updateRenderListener: function(listener) {
        if (!this.renderListeners.contains(listener))
            return;
        if (this.hasFinishedRendering()) {
            listener.onDoneRendering();
            this.renderListeners.splice(this.renderListeners.indexOf(listener), 1);
        } else {
            ThreadManager.startThread("ItemListRenderer.updateRenderListener()", function() {
                this.updateRenderListener(listener)
            }.bind(this), Panel.RENDER_ITEM_DELAY);
        }
    },getUnrenderedWidgetCount: function() {
        return this.getTotalWidgetsCount() - this.getRenderedWidgetCount();
    },getRenderedWidgetCount: function() {
        return this.itemsElement ? this.itemsElement.childNodes.length : 0;
    },getTotalWidgetsCount: function() {
        return this.itemWidgets.length;
    },hasFinishedRendering: function() {
        return this.itemsElement && this.getUnrenderedWidgetCount() == 0;
    },addNewItem: function(newItemId, functor, beforeWidgetId) {
        if (!this.getWidget(newItemId)) {
            this.addItem(newItemId, beforeWidgetId || this.itemWidgets[0].id());
        }
        this.newItemId = newItemId;
        var newWidget = this.getWidget(newItemId);
        if (!newWidget.isExpanded()) {
            newWidget.expand();
        }
        functor && functor.call(this, newWidget);
        this.scrollToItem(newWidget);
    },toDebugItemIdString: function() {
        var str = "";
        for (var i = 0; i < this.itemWidgets.length; ++i) {
            str += this.itemWidgets[i].id() + ',';
        }
        return str;
    },getWidget: function(id) {
        var widgetContainer = this.itemWidgetsById[id];
        return (typeof (widgetContainer) == 'undefined') ? null : widgetContainer.containedWidget;
    },htmlToWidgetId: function(htmlId) {
        return htmlId.split("_").last();
    },widgetToHtmlId: function(widgetId) {
        return this.htmlId() + "_" + widgetId;
    },moveItem: function(widgetId, beforeWidgetId) {
        var widget = this.getItemWidgetById(widgetId);
        var beforeWidget;
        if (beforeWidgetId == null) {
            beforeWidget = this.getItemWidgetById('endOfList');
        } else {
            beforeWidget = this.getItemWidgetById(beforeWidgetId);
        }
        if (beforeWidget.renderedElement) {
            this.itemsElement.insertBefore(widget.renderedElement, beforeWidget.renderedElement);
        } else {
            this.itemsElement.appendChild(widget.renderedElement);
        }
        this.itemWidgets.splice(this.itemWidgets.indexOf(widget), 1);
        this.itemWidgets.splice(this.itemWidgets.indexOf(beforeWidget), 0, widget);
    },removeItem: function(widgetId) {
        var widget = this.getItemWidgetById(widgetId);
        if (widget == undefined) {
            return;
        }
        this.destroyDraggable(widget);
        this.itemWidgets.splice(this.itemWidgets.indexOf(widget), 1);
        if (widget.renderedElement) {
            this.itemsElement.removeChild(widget.renderedElement);
        }
        delete this.itemWidgetsById[widgetId.toString()];
        widget.destroy();
        j(this.renderedElement).trigger('panel:resize');
    },paint: function() {
        var self = this;
        function delayRenderElements() {
            var chunkSize = Math.ceil(self.chunkPercentage() * self.itemWidgets.length);
            function delayRenderElement(index) {
                var itemWidgetsLength = self.itemWidgets.length;
                if (index >= itemWidgetsLength) {
                    self.deferredRender.resolve();
                    return;
                }
                var endIndex = Math.min(index + chunkSize, itemWidgetsLength);
                for (; index < endIndex; index++) {
                    var item = self.itemWidgets[index];
                    self._paintElement(item);
                }
                ThreadManager.startThread("ItemListWidget._paint", function() {
                    delayRenderElement(index);
                }, Panel.RENDER_ITEM_DELAY);
            }
            delayRenderElement(0);
        }
        this.renderedElement.id = this.htmlId();
        this.renderedElement.className = "list";
        this.renderedElement.appendChild(this._createBottomDiv());
        var items = Element.newDiv('', {className: "items",id: this.htmlId() + "_items"});
        this.innerElement = Element.newDiv('', {className: "inner scrolling_item_list"});
        items.appendChild(this.innerElement);
        if (this._options.statusWidget != undefined) {
            this.innerElement.appendChild(this._options.statusWidget.render());
        }
        this.itemsElement = Element.newDiv('');
        this.innerElement.appendChild(this.itemsElement);
        delayRenderElements();
        j(this.innerElement).on('scroll', function() {
            j(this).trigger("list:didScroll");
        });
        this.renderedElement.appendChild(items);
        return this.renderedElement;
    },getReferenceItemListWidget: function() {
        var referencePanel = this.panel.layout.getFirstPanelForType(this.panel.type);
        if (referencePanel != this.panel) {
            return referencePanel.viewWidget;
        } else {
            return null;
        }
    },_paintElement: function(item) {
        if (!item.renderedElement) {
            this.itemsElement.appendChild(item.render());
            this.createDraggable(item, this.itemWidgets.indexOf(item));
        } else {
            this.itemsElement.appendChild(item.renderedElement);
            return null;
        }
    },createDraggable: function(itemWidget, index) {
        itemWidget.createDraggable(this._options.draggableOptions, index);
    },createDraggableContainedWidget: function(widget) {
        var itemWidget = this.getItemWidgetById(widget.id());
        if (itemWidget) {
            this.createDraggable(itemWidget);
        }
    },destroyDraggable: function(itemWidget) {
        if (itemWidget != null) {
            itemWidget.destroyDraggable();
        }
    },destroyDraggableContainedWidget: function(widget) {
        var itemWidget = this.getItemWidgetById(widget.id());
        this.destroyDraggable(itemWidget);
    },toDebugIdString: function() {
        var keys = '';
        for (var ids in this.itemWidgetsById) {
            if (this.itemWidgetsById[ids] == null) {
                keys += ids + '(null),';
            } else if (typeof (this.itemWidgetsById[ids]) == 'undefined') {
                keys += ids + '(undefined),';
            } else {
                keys += ids + ',';
            }
        }
        return "Indexed ids=" + keys;
    },isFirst: function(widget) {
        return this.itemWidgets.length > 0 && this.itemWidgets[0] == widget;
    },isLast: function(widget) {
        return this.itemWidgets.length > 0 && this.itemWidgets[this.itemWidgets.length - 1] == widget;
    },nextWidget: function(widget) {
        var widgetIndex = this.itemWidgets.indexOf(widget);
        return this.itemWidgets.length - 1 == widgetIndex ? widget : this.itemWidgets[widgetIndex + 1];
    },prevWidget: function(widget) {
        var widgetIndex = this.itemWidgets.indexOf(widget);
        return 0 == widgetIndex ? widget : this.itemWidgets[widgetIndex - 1];
    },revealItem: function(story) {
        var self = this;
        var renderListener = {onDoneRendering: function() {
                if (self.panel.isActive()) {
                    var itemWidget = self.getItemWidgetById(story.id());
                    if (itemWidget) {
                        self.scrollToItem(itemWidget);
                        flash([story]);
                    } else {
                        status("The story you're trying to reveal is no longer on the client");
                    }
                }
            }};
        this.addRenderListener(renderListener);
    },getWidgetsContainingIterationHeaders: function(limit) {
        var iterationHeaderWidgets = [];
        for (var i = 0; i < this.itemWidgets.length; i++) {
            if (this.itemWidgets[i].containedWidget && this.itemWidgets[i].containedWidget.widgetType == "IterationHeader") {
                iterationHeaderWidgets.push(this.itemWidgets[i])
            }
            if (limit && iterationHeaderWidgets.length > limit)
                break;
        }
        return iterationHeaderWidgets;
    },isBelowSecondIterationHeader: function(widget) {
        var widgetIndex = this.itemWidgets.indexOf(widget);
        var limit = 2;
        var iterationHeaders = this.getWidgetsContainingIterationHeaders(limit);
        if (iterationHeaders.length > 1) {
            var secondIterationHeaderIndex = this.itemWidgets.indexOf(iterationHeaders[1]);
            if (widgetIndex > secondIterationHeaderIndex) {
                return true;
            }
        }
        return false;
    },scrollPostRender: function(scrollTop) {
        this.addRenderListener({onDoneRendering: function() {
                this.scrollTo(scrollTop);
            }.bind(this)});
    },showStory: function(model, modelDetails) {
        var renderListener = {onDoneRendering: function() {
                var itemWidget = this.getItemWidgetById(model.id());
                if (modelDetails) {
                    var previewWidget = itemWidget.containedWidget;
                    previewWidget.editWidget = modelDetails;
                    modelDetails.parentWidget = previewWidget;
                }
                itemWidget.containedWidget.expand();
                if (modelDetails) {
                    modelDetails.handleInitialFocus();
                }
                this.scrollToItem(itemWidget);
            }.bind(this)};
        this.addRenderListener(renderListener);
    },expandAll: function() {
        this.itemWidgetSource.showAllIterations();
    },collapseAll: function() {
        this.itemWidgetSource.hideAllIterations();
    },toggleItemsForIteration: function(iterationHeaderWidget) {
        this.itemWidgetSource.toggleIteration(iterationHeaderWidget.iteration.getNumber());
    },repaint: function() {
        j(this.renderedElement).empty().removeData().off();
        this.clearWidgets();
        this.fillInWidgets();
        this.paint();
    },getScrollTop: function() {
        return this.innerElement.scrollTop;
    },scrollToItem: function(itemWidget) {
        if (itemWidget) {
            this.innerElement.scrollTop = itemWidget.renderedElement.offsetTop - Panel.TITLE_HEIGHT;
            this.j().trigger('panel:focus');
        }
    },scrollToBottom: function() {
        this.innerElement.scrollTop = this.innerElement.scrollHeight;
    },scrollTo: function(scrollTop) {
        this.savedScrollTop = scrollTop;
        this.innerElement.scrollTop = scrollTop;
    },scrollBy: function(delta) {
        this.innerElement.scrollTop += delta;
    },ensureVisable: function(position) {
        if (position < this.innerElement.scrollTop) {
            this.scrollTo(position);
        }
        if (position > this.innerElement.scrollTop + this.j().height()) {
            this.scrollTo(position - this.j().height());
        }
    },draggingItem: function(item) {
        j(this.innerElement).trigger("list:draggingItem");
    },getDomElement: function() {
        return this.itemsElement;
    },_inSamePanelAs: function(widgetId, widget) {
        return widgetId.split('_', 1) == widget.htmlId().split('_', 1);
    },_destroy: function() {
        var self = this;
        this.deferredRender.then(function() {
            self.renderListeners = [];
            self.itemWidgetSource.events.unsubscribe(self, "update");
            for (var i = 0; i < self.itemWidgets.length; ++i) {
                var item = self.itemWidgets[i].unsubscribeFromEvents();
            }
            self._destroyNextChunkOfWidgets();
            self.itemWidgetSource.destroy();
        });
    },_destroyNextChunkOfWidgets: function() {
        var numberToDestroy = Math.min(Math.ceil(this.chunkPercentage() * this.itemWidgets.length), this.itemWidgets.length);
        for (var i = 0; i < numberToDestroy; ++i) {
            var item = this.itemWidgets.pop();
            this.destroyDraggable(item);
            item.destroy();
        }
        if (this.itemWidgets.length > 0) {
            ThreadManager.startThread("ItemListWidget._destroyNextChunkOfWidgets", this._destroyNextChunkOfWidgets.bind(this), ItemListWidget.ITEM_DESTROY_DELAY_MILLIS);
        } else {
            this.itemsElement = null;
            this.innerElement = null;
            this.itemWidgetsById = null;
        }
    },chunkPercentage: function() {
        return j.browser.msie ? 0.02 : 0.5;
    }});
Object.extend(ItemListWidget, {ITEM_DESTROY_DELAY_MILLIS: 250});
Object.extend(ItemListWidget.prototype, Widget.PanelModule);
IntegrationItemListWidget = Class.create(ItemListWidget, {getItemWidgetById: function(widgetId) {
        return this.itemWidgetsById[widgetId.toString()];
    }});
(function() {
    var dragDropPositionRefreshInterval = 200;
    var refreshPositions = _.throttle(function(self) {
        var $draggable = j(self.renderedElement).data('draggable');
        if ($draggable) {
            j.ui.ddmanager.prepareOffsets($draggable, null);
        }
    }, dragDropPositionRefreshInterval);
    ItemWidget = Class.create(Widget, {dragDelay: 0,initialize: function(htmlIdSuffix, containedWidget, parentWidget) {
            this.super_init("Item", htmlIdSuffix);
            this.setParent(parentWidget);
            this.itemListWidget = parentWidget;
            this.containedWidget = containedWidget;
            this.containedWidget.setParent(this);
        },render: function() {
            var hookElement = Element.newDiv('', {id: this.htmlId(),className: "item"});
            hookElement.appendChild(this.containedWidget.render());
            this.renderedElement = hookElement;
            return hookElement;
        },id: function() {
            if (this._id) {
                return this._id;
            }
            return this._id = this.containedWidget.id();
        },setId: function(id) {
            this._id = id;
        },notifyDroppedOn: function(targetWidget, options) {
            this.containedWidget.notifyDroppedOn(targetWidget, options);
            j('.draggableItem').removeClass('drag-highlight');
        },refreshPositionsOnce: function() {
            refreshPositions(this);
        },createDraggable: function(options, index) {
            var self = this;
            if (this.containedWidget.isDraggable()) {
                j(this.renderedElement).data('widget', this).draggable({appendTo: '#draggable_content',helper: function(event) {
                        var numberOfSelectedStories = 0;
                        if (self.containedWidget._isSelected()) {
                            numberOfSelectedStories = self.containedWidget.getProject().getNonAcceptedSelectedStories().length;
                        }
                        var clone = j(this).clone().removeAttr('id');
                        if (numberOfSelectedStories <= 1) {
                            return clone;
                        } else {
                            return Tracker.Template.render('multi_drag_story_template', {numberOfStories: numberOfSelectedStories,dragElement: clone.wrap('<div></div>').parent().html()});
                        }
                    },opacity: 0.5,delay: this.dragDelay,addClasses: false,scroll: false}).on('dragstart', function(e, ui) {
                    if (self.containsSelectedStory()) {
                        j('.storyItem.selected').not('.accepted').addClass('drag-highlight');
                    }
                    var $draggable = j(this);
                    ui.helper.width($draggable.outerWidth(true));
                    j('.draggableItem', this).addClass('drag-highlight');
                    j('.story_content').addClass('dragging_' + self.containedWidget.model.getType());
                }).on('dragstop', function(e, ui) {
                    j('.story_content').removeClass('dragging_' + self.containedWidget.model.getType());
                    j('.draggableItem').removeClass('drag-highlight');
                    j('.draggableItem', this).removeClass('drag-highlight');
                });
            }
            if (this.containedWidget.isHoverable()) {
                this._createDroppable(options);
            }
        },containsSelectedStory: function() {
            return this.containedWidget && this.containedWidget.story && this.containedWidget.story.project.isSelectedModel(this.containedWidget.story);
        },canBeDroppedOn: function(drop) {
            return this.containedWidget.canBeDroppedOn(drop && drop.containedWidget ? drop.containedWidget : undefined);
        },addMarkerBefore: function(isFirst) {
            this.containedWidget.renderedElement.style.borderTop = isFirst ? "1px solid black" : "2px solid #333";
            if (isFirst) {
                this.containedWidget.renderedElement.style.marginBottom = "-1px";
            } else {
                this.containedWidget.renderedElement.style.marginTop = "-1px";
            }
        },removeMarkerBefore: function() {
            if (this.containedWidget.renderedElement) {
                this.containedWidget.renderedElement.style.borderTop = "";
                this.containedWidget.renderedElement.style.marginTop = "";
                this.containedWidget.renderedElement.style.marginBottom = "";
            }
        },setDragHighlighting: function(isDragging) {
            if (this.containedWidget.renderedElement != null) {
                var el = this.containedWidget.renderedElement;
                if (el) {
                    if (isDragging) {
                        el.style.backgroundColor = "#FFFF99";
                        el.style.margin = "0"
                    } else {
                        el.style.backgroundColor = "";
                    }
                }
            }
        },getStoryId: function() {
            return this.containedWidget.getStoryId();
        },getProject: function() {
            return this.containedWidget.getProject();
        },getMoveAfterStory: function(project, dragStory) {
            return this.containedWidget.getMoveAfterStory(project, dragStory);
        },getMoveBeforeStory: function(project, dragStory) {
            return this.containedWidget.getMoveBeforeStory(project, dragStory);
        },getDomElement: function() {
            return this.containedWidget.renderedElement;
        },_noteParentSet: function(parent) {
            this.parent = parent;
        },_destroy: function() {
            if (this.containedWidget) {
                this.containedWidget.destroy();
            }
        },prevWidget: function() {
            return this.parent.prevWidget(this);
        },nextWidget: function() {
            return this.parent.nextWidget(this);
        },_unsubscribeFromEvents: function() {
            if (this.containedWidget && this.containedWidget._unsubscribeFromEvents) {
                this.containedWidget._unsubscribeFromEvents();
            }
        }});
    ItemWidget.dragDropPositionRefreshInterval = dragDropPositionRefreshInterval;
    Object.extend(ItemWidget.prototype, Widget.ContainerDragDropModule);
    Object.extend(ItemWidget.prototype, Widget.PanelModule);
})();
var IterationDateLabelWidget = Class.create(Widget, {initialize: function(iteration, project) {
        this.super_init("IterationDateLabel", "content");
        this.iteration = iteration;
        this.project = project;
    },render: function() {
        this.renderedElement = Element.newSpan("", {className: "date"});
        this.dateElement = this._createDateElement();
        this.renderedElement.appendChild(this.dateElement);
        if (!this.project.isReadOnly()) {
            this.buildBalloon();
        }
        return this.renderedElement;
    },refresh: function(iteration) {
        this.iteration = iteration;
        var newDateElement = this._createDateElement();
        this.renderedElement.replaceChild(newDateElement, this.dateElement);
        this.dateElement = newDateElement;
    },_destroy: function() {
        if (this.balloon != undefined && this.balloon != null) {
            this.balloon.detach();
        }
    },_createDateElement: function() {
        var className = 'date_label';
        if (this.iteration.hasOverridenIterationLength()) {
            className += " overridden";
        }
        return Element.newLink(IterationTextFormatter.getTerseDateTextFor(this.iteration), {className: className,title: IterationTextFormatter.getVerboseDateTextFor(this.iteration)});
    },updateIterationLength: function(serializedForm) {
        var iterationLength = parseInt(serializedForm.iteration_length);
        var command = new UpdateIterationLength(this.project, this.iteration.getNumber(), iterationLength);
        this.project.commandQueue.enqueue(command);
    },revertIterationLength: function() {
        if (this.iteration.hasOverridenIterationLength()) {
            var command = new UpdateIterationLength(this.project, this.iteration.getNumber(), -1);
            this.project.commandQueue.enqueue(command);
        }
    },buildBalloon: function() {
        this.balloon = new FormBalloon({description: "Adjusts this iteration's length.",width: 180,builder: this._buildIterationLengthBalloon.bind(this),onApply: this.updateIterationLength.bind(this),onRevert: this.revertIterationLength.bind(this),onReset: this._setIterationLengthValues.bind(this),validator: this._iterationLengthValidator.bind(this)});
        this.balloon.attachTo(this.renderedElement);
        return this.balloon;
    },_buildIterationLengthBalloon: function() {
        var contents = new Element('div', {className: "iteration_length"});
        contents.update('<label>Iteration length:</label>' + '<input type="text" maxlength=2 name="iteration_length" />' + '<span>wks</span>');
        return contents;
    },_setIterationLengthValues: function(balloon) {
        balloon.contents.select("input[name=iteration_length]")[0].value = this.iteration.getIterationLength();
    },_iterationLengthValidator: function(serializedForm) {
        var newValue = serializedForm.iteration_length;
        if (isNaN(parseInt(newValue)) || parseInt(newValue) < 0) {
            return [{name: "iteration_length",message: "Must be greater than or equal to zero"}];
        } else {
            return null;
        }
    }});
IterationHeaderWidget = Class.create(Widget, {initialize: function(iteration, project, itemListWidget, revealer) {
        this.super_init("IterationHeader", "content");
        this.iteration = iteration;
        this.project = project;
        this.itemListWidget = itemListWidget;
        this.revealer = revealer;
        this.iterationNumber = this.iteration.getNumber();
        this.myId = "iteration" + this.iterationNumber;
        this.isIterationHeader = true;
        this._subscribeToEvents();
    },_subscribeToEvents: function() {
        this.project.events.subscribeAsync(this, "update");
        this.itemListWidget.itemWidgetSource.events.subscribe(this, "toggleIteration");
    },_unsubscribeFromEvents: function() {
        this.project.events.unsubscribe(this, "update");
        this.itemListWidget.itemWidgetSource.events.unsubscribe(this, "toggleIteration");
    },render: function() {
        this.renderedElement = $(Element.newDiv('', {id: this.htmlId(),className: 'iterationHeader'}));
        this.renderedElement.onselectstart = function() {
            return false
        };
        this.paint();
        return this.renderedElement;
    },isDraggable: function() {
        return false;
    },getDragGroup: function() {
        if (this.isInDonePanel()) {
            return "DoneIterationHeader";
        } else {
            return "IterationHeader";
        }
    },getDropGroup: function dropGroup() {
        if (!this.isHoverable()) {
            return "InvalidDropGroup";
        }
        var prevStory = this.getMoveAfterStory(this.project);
        if (prevStory) {
            if (prevStory.isAccepted && prevStory.isAccepted()) {
                return "InvalidDropGroup";
            }
            if (prevStory.isActive() && app.layout.isCurrentInBacklog) {
                return "BoundaryStory";
            }
            return prevStory.isActive() ? "ActiveStory" : "InactiveStory";
        }
        return "InactiveStory";
    },_recreateDraggable: function() {
        this.itemListWidget.destroyDraggableContainedWidget(this);
        if (this.isDraggable() || this.isHoverable()) {
            this.itemListWidget.createDraggableContainedWidget(this);
        }
    },isHoverable: function() {
        return !this.isInDonePanel() && this.itemListWidget.getFirstWidget() && this.itemListWidget.getFirstWidget().containedWidget != this;
    },paint: function() {
        if (this.renderedElement) {
            var left = Element.newDiv("", {className: "left"});
            var right = Element.newDiv("", {className: "right"});
            this._toggleElement = this._createToggleElement();
            left.appendChild(this._toggleElement);
            left.appendChild(this._createIterationLengthElement());
            left.appendChild(this._createDateElement());
            if (this.project.isPlannedModeEnabled() && this.iteration.isCurrent()) {
                right.appendChild(this._createUpdateIterationModeElement());
            }
            this._pointsElement = this._createPointsElement();
            right.appendChild(this._pointsElement);
            right.appendChild(this._createTeamStrengthElement());
            this.renderedElement.appendChild(left);
            this.renderedElement.appendChild(right);
        }
    },_destroy: function() {
        this._unsubscribeFromEvents();
        if (this.dateLabelWidget) {
            this.dateLabelWidget.destroy();
        }
        if (this.teamStrengthWidget) {
            this.teamStrengthWidget.destroy();
        }
        if (this.iterationModeWidget) {
            this.iterationModeWidget.destroy();
        }
        if (this.renderedElement) {
            j(this.renderedElement).remove();
            this.renderedElement = null;
        }
    },getPointsElement: function() {
        return this._pointsElement;
    },getToggleElement: function() {
        return this._toggleElement;
    },toggleExpanded: function() {
        this.itemListWidget.toggleItemsForIteration(this);
        j(this.renderedElement).trigger('panel:resize');
    },isExpanded: function() {
        return this._toggleElement.src.indexOf("open") >= 0;
    },id: function() {
        return this.myId;
    },getStoryId: function() {
        return this.project.getNextStoryStartingIn(this.iteration).id();
    },getMoveAfterStory: function() {
        var story = this.project.getNextStoryStartingIn(this.iteration);
        return story ? story.getPreviousStory() : null;
    },getMoveBeforeStory: function() {
        return this.project.getNextStoryStartingIn(this.iteration);
    },getProject: function() {
        return this.project;
    },onUpdate: function() {
        var oldIteration = this.iteration;
        if (!oldIteration) {
            return;
        }
        this.iteration = this.project.getIterationByNumber(this.iterationNumber);
        if (this.iteration == null) {
            this.project.events.unsubscribe(this, "update");
            this.itemListWidget.itemWidgetSource.events.unsubscribe(this, "toggleIteration");
            if (this.renderedElement) {
                j(this.renderedElement).empty().removeData().off();
            }
        } else {
            if (this.renderedElement) {
                var oldVelocity = oldIteration.getVelocity();
                var newVelocity = this.iteration.getVelocity();
                if (!oldVelocity.equals(newVelocity)) {
                    this._pointsElement.update(IterationTextFormatter.getTersePointsTextFor(this.iteration));
                }
                if (this.dateLabelWidget) {
                    this.dateLabelWidget.refresh(this.iteration);
                }
                if (this.teamStrengthWidget) {
                    this.teamStrengthWidget.refresh(this.iteration);
                }
                if (this.iterationModeWidget) {
                    this.iterationModeWidget.refresh(this.iteration);
                }
            }
            this._updateToggleElement();
        }
    },onToggleIteration: function() {
        this._updateToggleElement();
    },_createIterationLengthElement: function() {
        return Element.newSpan(IterationTextFormatter.getTerseIterationNumberFor(this.iteration), {id: this.htmlId() + "_iteration_label",className: "iteration_length",title: IterationTextFormatter.getVerboseIterationNumberFor(this.iteration)});
    },_updateToggleElement: function() {
        if (this._toggleElement) {
            var oldToggleElement = this._toggleElement;
            j(oldToggleElement).off();
            this._toggleElement = this._createToggleElement();
            oldToggleElement.parentNode.replaceChild(this._toggleElement, oldToggleElement);
        }
    },_createToggleElement: function() {
        if (this.iteration.isEmpty()) {
            return this._createDummyToggleElement();
        } else if (this.itemListWidget.panel.isExpandable) {
            return this._createExpandableToggleElement();
        } else if (this.iteration == this.project.getCurrentIteration()) {
            return this._createCurrentToggleElement();
        } else {
            return this._createDummyToggleElement();
        }
    },_createExpandableToggleElement: function() {
        var expanded = this.itemListWidget.itemWidgetSource.isShowingIteration(this.iteration.getNumber());
        var onclickFunction = this.toggleExpanded.bind(this);
        var icon = expanded ? "iteration_expander_open.png" : "iteration_expander_closed.png";
        var text = expanded ? "Collapse" : "Expand";
        var zippyImageLink = $(Element.newImageLink({id: this.htmlId() + "_toggle_expanded_button",className: 'iterationHeaderToggleExpandedButton',src: story_icon_path(icon),title: text}, {"click": onclickFunction}));
        return zippyImageLink;
    },_createDummyToggleElement: function() {
        return Element.newDiv(Element.ZERO_WIDTH_SPACE, {className: 'iterationHeaderToggleExpandedButton'});
    },_createCurrentToggleElement: function() {
        return Element.newImage(story_icon_path("iteration_current.png"), {className: "current",width: "12",height: "12",title: "Current iteration"});
    },_createDateElement: function() {
        this.dateLabelWidget = new IterationDateLabelWidget(this.iteration, this.project);
        return this.dateLabelWidget.render();
    },_createPointsElement: function() {
        return Element.newSpan(IterationTextFormatter.getTersePointsTextFor(this.iteration), {className: "points",title: IterationTextFormatter.getVerbosePointsTextFor(this.iteration)});
    },_createTeamStrengthElement: function() {
        this.teamStrengthWidget = new IterationTeamStrengthWidget(this.iteration, this.project);
        return this.teamStrengthWidget.render();
    },_createUpdateIterationModeElement: function(row) {
        this.iterationModeWidget = new IterationModeWidget(this.iteration, this.project);
        return this.iterationModeWidget.render();
    }});
Object.extend(IterationHeaderWidget.prototype, Widget.PanelModule);
var IterationTeamStrengthWidget = Class.create(Widget, {initialize: function(iteration, project) {
        this.super_init("IterationTeamStrength", "content");
        this.iteration = iteration;
        this.project = project;
    },render: function() {
        var className = this.project.isReadOnly() ? 'strengthWidgetContainer read_only' : 'strengthWidgetContainer';
        this.renderedElement = Element.newSpan("", {className: className});
        this.teamStrenghElement = this._createTeamStrengthElement();
        this.renderedElement.appendChild(this.teamStrenghElement);
        if (!this.project.isReadOnly()) {
            this.buildBalloon();
        }
        return this.renderedElement;
    },_destroy: function() {
        if (this.balloon != undefined && this.balloon != null) {
            this.balloon.detach();
        }
    },_createTeamStrengthElement: function() {
        if (this.iteration.isTeamStrengthOverridden()) {
            return $(Element.newSpan(IterationTextFormatter.getTerseTeamStrengthFor(this.iteration), {title: IterationTextFormatter.getVerboseTeamStrengthFor(this.iteration),className: "team_strength_action"}));
        } else {
            if (this.project.isReadOnly()) {
                return $(Element.newSpan(Element.ZERO_WIDTH_SPACE, {className: "teamStrengthIcon team_strength_action",title: IterationTextFormatter.getVerboseTeamStrengthFor(this.iteration)}));
            } else {
                return $(Element.newLink(Element.ZERO_WIDTH_SPACE, {className: "teamStrengthIcon team_strength_action",title: IterationTextFormatter.getVerboseTeamStrengthFor(this.iteration)}));
            }
        }
    },refresh: function(iteration) {
        this.iteration = iteration;
        j('.team_strength_action', this.renderedElement).empty().removeData().off();
        var newTeamStrengthElement = this._createTeamStrengthElement();
        this.renderedElement.replaceChild(newTeamStrengthElement, this.teamStrenghElement);
        this.teamStrenghElement = newTeamStrengthElement;
        if (this.balloon) {
            this.balloon.attachTo(j('.team_strength_action', this.renderedElement).get(0));
        }
    },buildBalloon: function() {
        this.balloon = new FormBalloon({description: "Adjusts this iteration's weight in velocity calculations.",width: 180,builder: this._buildTeamStrengthBalloon.bind(this),onApply: this.updateTeamStrength.bind(this),onReset: this._setTeamStrengthValues.bind(this),validator: this._teamStrengthValidator.bind(this)});
        this.balloon.attachTo(j('.team_strength_action', this.renderedElement).get(0));
        return this.balloon;
    },_buildTeamStrengthBalloon: function() {
        var contents = new Element('div', {className: "team_strength"});
        contents.update('<label>Team Strength:</label>' + '<input type="text" name="team_strength" />' + '<span>%</span>');
        return contents;
    },_setTeamStrengthValues: function(balloon) {
        balloon.contents.select("input[name=team_strength]")[0].value = this._getTeamStrengthAsPercent();
    },_teamStrengthValidator: function(serializedForm) {
        var newValue = serializedForm.team_strength;
        if (isNaN(parseInt(newValue)) || parseInt(newValue) < 0) {
            return [{name: "team_strength",message: "Must be greater than or equal to zero"}];
        } else {
            return null;
        }
    },updateTeamStrength: function(serializedForm) {
        var newValue = serializedForm.team_strength;
        var percent = parseInt(newValue) / 100;
        var command = new UpdateTeamStrength(this.project, this.iteration.getNumber(), percent);
        this.project.commandQueue.enqueue(command);
    },_getTeamStrengthAsPercent: function() {
        return IterationTextFormatter.teamStrengthAsPercent(this.iteration);
    }});
var IterationModeWidget = Class.create(Widget, {initialize: function(iteration, project) {
        this.super_init("IterationMode", "content");
        this.iteration = iteration;
        this.project = project;
    },render: function() {
        this.renderedElement = this._createItertaionModeElement();
        this.buildBalloon();
        this._updateIterationModeControls();
        return this.renderedElement;
    },_destroy: function() {
        if (this.balloon != undefined && this.balloon != null) {
            this.balloon.detach();
        }
    },_createItertaionModeElement: function() {
        return this._iterationModeButton = new Element("a", {id: this.htmlId() + "_iteration_mode_button",href: "#",'class': "iterationModeIcon"});
    },refresh: function(iteration) {
        this.iteration = iteration;
        this._updateIterationModeControls();
    },buildBalloon: function() {
        this.balloon = new FormBalloon({description: "<p>In Auto Mode, Tracker plans each iteration automatically, based on velocity.<p>" + "<p>Commit Mode allows you to override velocity-based planning, and move more (or fewer) stories into the current iteration.</p>",width: 220,builder: this._buildIterationModeBalloon.bind(this),onApply: this.applyIterationMode.bind(this),disabled: this.project.isReadOnly()});
        this.balloon.attachTo(this.renderedElement);
        return this.balloon;
    },applyIterationMode: function(serializedForm) {
        var mode = serializedForm[this.radioInputName()];
        if (mode != this.project.getCurrentIterationMode() && !this.project.isReadOnly()) {
            this.project.commandQueue.enqueue(new UpdateIterationMode(this.project, mode));
        }
    },radioInputName: function() {
        return this.htmlId() + "_mode";
    },_updateIterationModeControls: function() {
        var isCurrentIterationPlanned = this.project.isCurrentIterationPlanned();
        if (this._iterationModeButton) {
            if (isCurrentIterationPlanned) {
                this._iterationModeButton.addClassName('on');
                this._iterationModeButton.title = "Current iteration is in Commit mode, which allows you to plan manually. Click to plan automatically, based on velocity.";
            } else {
                this._iterationModeButton.removeClassName('on');
                this._iterationModeButton.title = "Current iteration is planned automatically, based on velocity. Click to change to Commit mode, which allows you to plan for more, or fewer stories.";
            }
            if (this.autoModeRadio) {
                if (isCurrentIterationPlanned) {
                    this.plannedModeRadio.checked = 'checked';
                } else {
                    this.autoModeRadio.checked = 'checked';
                }
            }
        }
    },_buildIterationModeBalloon: function() {
        var contents = new Element('div', {className: "iteration_planning"});
        var isCurrentIterationPlanned = this.project.isCurrentIterationPlanned();
        var autoCheckedValue = isCurrentIterationPlanned ? "" : "checked='checked'";
        var commitCheckedValue = isCurrentIterationPlanned ? "checked='checked'" : "";
        var autoInputId = this.radioInputName() + "_auto_mode";
        var commitInputId = this.radioInputName() + "_commit_mode";
        contents.update('<h3>Current Iteration Planning</h3>' + '<div><label for="' + autoInputId + '">Auto Mode - based on velocity</label>' + '<input type="radio" ' + autoCheckedValue + ' value="auto" name="' + this.radioInputName() + '" id="' + autoInputId + '" /></div>' + '<div><label for="' + commitInputId + '">Commit Mode - plan manually</label>' + '<input type="radio" ' + commitCheckedValue + ' value="planned" name="' + this.radioInputName() + '" id="' + commitInputId + '" /></div>');
        this.autoModeRadio = contents.select('input[value=auto]')[0];
        this.plannedModeRadio = contents.select('input[value=planned]')[0];
        this._updateIterationModeControls();
        return contents;
    }});
SeparationLineWidget = Class.create(BaseWidget, {initialize: function initialize($super, project, displayText, moveStoryBeforeFunctor, moveStoryAfterFunctor) {
        $super();
        this.displayText = displayText;
        this._id = StringUtils.underscored(displayText.toLowerCase()).trim() + "_separation_line";
        this.getMoveBeforeStory = moveStoryBeforeFunctor;
        this.getMoveAfterStory = moveStoryAfterFunctor;
        this.widgetType = 'SeparationLineWidget';
    },paint: function paint() {
        return j('<div class="separation_line">' + this.displayText + '</div>').get(0);
    },id: function id() {
        return this._id;
    },isDraggable: function() {
        return false;
    },isHoverable: function() {
        return true;
    },isSeparationWidget: true,getDropGroup: function getDropGroup() {
        return "BoundaryStory";
    },getDragGroup: function() {
        return 'SeparationLine';
    },getEffectivePanel: function() {
        return 'Current';
    },setParent: function setParent(parentWidget) {
        this.parentWidget = parentWidget;
    }});
StatusWidget = Class.create(BaseWidget, {updateStatus: function(message) {
        this.j().html(message);
    },addStatusClass: function(className) {
        this.j().addClass(className);
    },resetStatusClass: function(className) {
        this.j().attr('class', className);
    },setVisible: function(visible) {
        this.j().toggle(visible);
    }});
EpicStatusWidget = Class.create(StatusWidget, {initialize: function($super) {
        $super();
        this.events = new EventChannelRegistry(this, "showPastDoneStories");
        this.pastDoneStoriesCount = 0;
        this.hidden = false;
        this.isLoading = false;
    },paint: function() {
        if (this.hidden || this.pastDoneStoriesCount == 0) {
            return ''
        }
        var text = ['show ', this.pastDoneStoriesCount, " done story".pluralize(this.pastDoneStoriesCount, " done stories")].join('');
        return '<div class="dots"><a href="#" class="message">' + text + '</a></div>';
    },configuration: function($super) {
        return j.extend($super(), {'renderedElementHtml': '<div class="done_bar">','delegateEvents': {'click a': 'showPastDoneStories'}});
    },showPastDoneStories: function($target, e) {
        e.preventDefault();
        if (this.isLoading) {
            return;
        }
        this.isLoading = true;
        this.events.fire('showPastDoneStories');
    },repaint: function() {
        this.updateStatus(this.paint());
    },setPastDoneStoriesCount: function(pastDoneStoriesCount) {
        this.pastDoneStoriesCount = pastDoneStoriesCount;
    },hide: function() {
        this.isLoading = false;
        this.hidden = true;
        this.repaint();
    },destroy: function($super) {
        this.events.unsubscribeAll("showPastDoneStories");
        $super();
    },updateMessage: function(message) {
        this.j('.message').html(message);
    }});
EpicHeaderWidget = Class.create(BaseWidget, {initialize: function($super, messageSource) {
        $super();
        this._source = messageSource;
        this._hidden = false;
        this.events = new EventChannelRegistry(this, "showDoneEpics");
        this._source.events.subscribe(this, 'update')
    },configuration: function($super) {
        return j.extend($super(), {'renderedElementHtml': '<div class="done_bar show_done_epics">','delegateEvents': {'click a': 'messageClicked'}});
    },paint: function() {
        var headerMessage = this._source.getHeaderMessage();
        return headerMessage && !this._hidden ? '<div class="dots"><a href="#" class="message">' + headerMessage + '</a></div>' : '';
    },messageClicked: function($target, e) {
        e.preventDefault();
        this.events.fire('showDoneEpics');
    },repaint: function() {
        this.j().html(this.paint());
    },onUpdate: function() {
        this.repaint();
    },hide: function() {
        this._hidden = true;
        this.repaint();
    },destroy: function($super) {
        this.events.unsubscribeAll("messageClicked");
        this._source = null;
        $super();
    }});
var SidebarItemWidget = Class.create();
SidebarItemWidget.prototype = Object.extend(new Widget(), {onUpdate: function() {
        if (this.renderedElement) {
            var newList = this._renderList();
            j(this.list).replaceWith(newList);
            this.list = newList;
            if (this.header.hasClassName("collapsed")) {
                this.list.toggle();
            }
            j(this.renderedElement).trigger('panel:resize');
        }
    },render: function() {
        this.renderedElement = new Element("div", {className: this.sidebarType});
        this.header = this._renderHeader();
        j(this.header).click(j.proxy(this.toggleList, this));
        this.renderedElement.appendChild(this.header);
        this.paint();
        return this.renderedElement;
    },paint: function() {
        if (this.renderedElement) {
            this.list = this._renderList();
            this.renderedElement.appendChild(this.list);
        }
    },toggleList: function() {
        this.header.toggleClassName("collapsed");
        this.list.toggle();
    },setMaxHeight: function(maxHeight) {
        this.renderedElement.select(".list").first().setStyle({maxHeight: maxHeight + "px"});
    },_destroy: function() {
        this._unsubscribeFromEvents();
    }});
ShowDoneWidget = Class.create(BaseWidget, {initialize: function initialize($super, id, message) {
        $super();
        this._id = id;
        this._message = message;
        this.widgetType = 'ShowDoneWidget';
    },paint: function paint() {
        return Tracker.Template.render('show_done_template', {id: this._id,message: this._message});
    },id: function id() {
        return this._id;
    },isDraggable: function() {
        return false;
    },isHoverable: function() {
        return false;
    },setParent: function setParent(parentWidget) {
        this.parentWidget = parentWidget;
    }});
LabelsWidget = Class.create(SidebarItemWidget, {initialize: function(sidebarWidget, project) {
        this.super_init("Labels", "labels");
        this.sidebarType = SidebarWidget.LABELS;
        this.sidebarWidget = sidebarWidget;
        this.project = project;
        this._subscribeToEvents();
    },_subscribeToEvents: function() {
        this.project.events.subscribe(this, "update");
    },_unsubscribeFromEvents: function() {
        this.project.events.unsubscribe(this, "update");
    },getTitle: function() {
        return "Labels";
    },numberOfElements: function() {
        return this.project.getLabelNames().length;
    },_renderHeader: function() {
        return new Element("h3").insert("Labels");
    },_renderList: function() {
        var labelList = new Element("ul");
        var labels = this.project.getLabelNames();
        var labelCounts = this.project.getUnacceptedLabelCounts();
        if (labels.length > 0) {
            labels.each(function(label) {
                var element = this._renderLabelItem(label, labelCounts[label]);
                labelList.appendChild(element);
            }.bind(this));
        } else {
            labelList.appendChild(this._renderEmptyLabels());
        }
        return labelList;
    },_renderLabelItem: function(label, count) {
        var labelItem = new Element("li", {className: "list_item " + (this.project.labelRepository.isEpicLabel(label) ? 'epic_label' : '')});
        if (!this.project.isReadOnly()) {
            this._addLabelIcons(label, labelItem);
        }
        var labelLink = new Element("a", {href: '#',className: 'link'});
        j(labelLink).click(j.proxy(function(e) {
            this._onLabelClick(label);
            e.stopPropagation();
            e.preventDefault();
        }, this));
        var escapedLabel = label.escapeHTML();
        var labelText = escapedLabel.truncate(count ? 22 : 25);
        var countText = "";
        if (count) {
            countText = " (" + count + ")";
            labelText = labelText + countText;
            labelLink.addClassName("with_count");
        }
        labelLink.setAttribute("title", escapedLabel + countText);
        labelLink.update(labelText);
        labelItem.appendChild(labelLink);
        return labelItem;
    },_createLabelMenuBalloon: function(label, labelItem) {
        return new FormBalloon({width: 105,excludeCloseButton: true,excludeActionButtons: true,positionAdjustment: {horizontal: -13,vertical: -4},showStem: false,additionalClassNames: ['dropdown_menu'],onPostShow: function() {
                j(labelItem).addClass('hover')
            },onClose: this._cleanupLabelMenu.bind(this, labelItem),enableVerticalFlip: true,builder: this._buildLabelMenuContent.bind(this, label)});
    },_cleanupLabelMenu: function(labelItem) {
        j(labelItem).removeClass('hover');
        j(this.menuContents).remove();
    },_buildLabelMenuContent: function(label) {
        var html = "<ul>";
        if (!this.project.labelRepository.isEpicLabel(label)) {
            html += "<li><a class=\"destroy\" href=\"#\">Delete</a></li>";
        }
        html += "<li><a class=\"rename\">Rename</a></li>";
        html += "<li><a class=\"show_stories\">Show Stories</a></li>";
        if (this.project.epicsEnabled() && !this.project.labelRepository.isEpicLabel(label)) {
            html += "<li><a class=\"convert_to_epic\">Convert to Epic</a></li>";
        }
        html += "</ul>";
        this.menuContents = j(html).get(0);
        j('.destroy', this.menuContents).on('click', j.proxy(this._deleteCallback, this, label));
        j('.rename', this.menuContents).on('click', j.proxy(this._openRenameDialog, this, label));
        j('.show_stories', this.menuContents).on('click', j.proxy(this._onLabelClick, this, label));
        if (this.project.epicsEnabled() && !this.project.labelRepository.isEpicLabel(label)) {
            j('.convert_to_epic', this.menuContents).on('click', j.proxy(this._onConvertToEpic, this, label));
        }
        return this.menuContents;
    },_onConvertToEpic: function(label) {
        this.project.commandQueue.enqueue(new Tracker.AddEpic({name: label,label: label}, this.project));
        this._closeLabelMenuPopup();
    },_deleteCallback: function(label, event) {
        event.stopPropagation();
        event.preventDefault();
        if (this._confirmDelete()) {
            this.project.commandQueue.enqueue(new DeleteLabel(this.project, label));
            this._closeLabelMenuPopup();
        }
    },_addLabelIcons: function(label, labelItem) {
        var menuGear = j("<span><span class=\"menu_gear\"></span><span class=\"down_arrow\"></span></span>");
        j(labelItem).append(menuGear);
        j(labelItem).click(j.proxy(function(menuGear) {
            this._closeLabelMenuPopup();
            this.labelMenuPopup = this._createLabelMenuBalloon(label, labelItem);
            this.labelMenuPopup.attachTo(menuGear.get(0));
            this.labelMenuPopup.show();
        }, this, menuGear));
    },_confirmDelete: function() {
        return confirm("Are you sure you'd like to delete this label?");
    },_closeLabelMenuPopup: function() {
        if (this.labelMenuPopup) {
            this.labelMenuPopup.close();
        }
    },_openRenameDialog: function(label) {
        var dialog = this._renderRenameLabelDialog();
        this._closeLabelMenuPopup();
        var toField = dialog.select("input[type=text]").first();
        var fromField = dialog.select("input[type=hidden]").first();
        var submitButton = dialog.select("input.submit").first();
        var cancelButton = dialog.select("input.cancel").first();
        var errorMessage = dialog.select(".error_message").first();
        SimpleOverlay.create(function(overlay) {
            overlay.overlay.setOpacity(0.3);
            j(toField).keyup(j.proxy(function(event) {
                if (event.keyCode == Event.KEY_RETURN) {
                    this._onRenameLabelClick(overlay);
                }
            }, this));
            j(submitButton).click(j.proxy(this._onRenameLabelClick, this, overlay));
            j(cancelButton).click(function(e) {
                overlay.cancel(e.originalEvent);
            });
            fromField.value = label;
            toField.value = label;
            return dialog;
        }.bind(this));
        errorMessage.hide();
        dialog.show();
        toField.activate();
    },_renderRenameLabelDialog: function() {
        if (this._renameLabelDialog) {
            return this._renameLabelDialog;
        }
        var div = new Element("div", {id: "rename_label",style: "display: none;"});
        div.appendChild(new Element("label").insert("Rename Label"));
        div.appendChild(new Element("input", {type: "text"}));
        div.appendChild(new Element("input", {type: "hidden"}));
        div.appendChild(new Element("input", {type: "button",value: "Save",className: "submit"}));
        div.appendChild(new Element("input", {type: "button",value: "Cancel",className: "cancel"}));
        div.appendChild(new Element("div", {className: "error_message",style: "display: none;"}));
        this._renameLabelDialog = div;
        return div;
    },_renderEmptyLabels: function() {
        var listItem = new Element("li");
        listItem.appendChild(new Element("span").update("There are no labels."));
        return listItem;
    },_onRenameLabelClick: function(overlay) {
        var dialog = this._renameLabelDialog;
        var from = $F(dialog.select("input[type=hidden]").first());
        var to = $F(dialog.select("input[type=text]").first()).strip().toLowerCase();
        var error = dialog.select("div.error_message").first();
        if (to == "" || from == to) {
            error.update("Please enter a new label");
            error.show();
        } else if (this.project.getLabelNames().contains(to)) {
            error.update("Label already exists");
            error.show();
        } else {
            this.project.commandQueue.enqueue(new RenameLabel(this.project, from, to));
            status("Renamed label '" + from + "' to '" + to + "'");
            overlay.cancel();
        }
    },_onLabelClick: function(label) {
        this._closeLabelMenuPopup();
        app.showPanelForLabel(label);
    }});
BugToolExternalStoryPreviewWidget = Class.create();
BugToolExternalStoryPreviewWidget.prototype = Object.extend(new ExternalStoryPreviewWidget(), {additionalClassNames: function() {
        return "bugTool";
    },_storyIconName: function() {
        return this.integration.getIntegrationType() + "_icon.png"
    },_secondRowContent: function() {
        var contentDiv = Element.create('div');
        var reportedByDiv = Element.newDiv(this._reportedByText(), {className: 'reportedBy'});
        var dateText = this._dateText();
        var createdAtDiv = Element.newDiv(dateText, {className: 'createdAt'});
        contentDiv.appendChild(reportedByDiv);
        contentDiv.appendChild(createdAtDiv);
        contentDiv.appendChild(Element.create('div', {className: 'clear'}));
        return contentDiv;
    },_dateText: function() {
        return this.externalStory.getCreatedAt() != null ? this.externalStory.getCreatedAt().timeAgo() : '';
    },_thirdRowContent: function() {
        var contentDiv = Element.create('div');
        var stateDiv = Element.newDiv(this._stateText(), {className: 'state'});
        contentDiv.appendChild(stateDiv);
        contentDiv.appendChild(this._createExternalStoryIdDiv());
        contentDiv.appendChild(Element.create('div', {className: 'clear'}));
        return contentDiv;
    },_externalUrl: function() {
        return this.integration.getExternalUrl(this.externalStory.id());
    },_appendLinkPrefix: function(div) {
        return div.appendChild(Element.newSpan('id:'));
    },_stateText: function() {
        return this.externalStory.getState();
    },_externalLinkText: function() {
        return this.externalStory.id();
    },_createExternalStoryIdDiv: function() {
        var externalStoryIdDiv = Element.create('div', {className: 'idText'});
        this._appendLinkPrefix(externalStoryIdDiv);
        var linkElement = Element.newLink(this._externalLinkText(), {className: 'id',target: "_blank",href: this._externalUrl()})
        externalStoryIdDiv.appendChild(linkElement);
        return externalStoryIdDiv;
    },_reportedByText: function() {
        if (this.integration.isOther()) {
            return "requested by " + this.externalStory.getRequestedBy();
        } else {
            return "reported by " + this.externalStory.getRequestedBy();
        }
    }});
GetSatisfactionExternalStoryPreviewWidget = Class.create();
GetSatisfactionExternalStoryPreviewWidget.prototype = Object.extend(new BugToolExternalStoryPreviewWidget(), {_storyIconName: function() {
        return "getsat_" + this._getStyle() + "_icon.png";
    },_appendLinkPrefix: function(div) {
    },_stateText: function() {
        return StringUtils.capitalize(this._getStyle());
    },_dateText: function() {
        return this.externalStory.getExtras().last_active_at ? this.externalStory.getExtras().last_active_at.timeAgo() : '';
    },_externalLinkText: function() {
        return 'view';
    },_reportedByText: function() {
        var meTooCount = this.externalStory.getExtras().me_too_count || 1;
        if (this._getStyle() == 'idea') {
            if (meTooCount > 1) {
                return String(meTooCount) + " people like this idea";
            } else {
                return String(meTooCount) + " person likes this idea";
            }
        } else {
            if (meTooCount > 1) {
                return String(meTooCount) + " people have this problem";
            } else {
                return String(meTooCount) + " person has this problem";
            }
        }
    },_getStyle: function() {
        return this.externalStory.getExtras().style;
    }});
var SavedSearchesWidget = Class.create();
SavedSearchesWidget.prototype = Object.extend(new SidebarItemWidget(), {initialize: function(sidebarWidget, savedSearches) {
        this.super_init("SavedSearches", "savedSearches");
        this.sidebarType = SidebarWidget.SAVED_SEARCHES;
        this.sidebarWidget = sidebarWidget;
        this.savedSearches = savedSearches;
        this._subscribeToEvents();
    },_subscribeToEvents: function() {
        this.savedSearches.events.subscribe(this, "update");
    },_unsubscribeFromEvents: function() {
        this.savedSearches.events.unsubscribe(this, "update");
    },getTitle: function() {
        return "Saved Searches";
    },numberOfElements: function() {
        return this.savedSearches.size();
    },_renderHeader: function() {
        return new Element("h3").insert("My Saved Searches");
    },_renderList: function() {
        var savedSearchesList = new Element("ul");
        if (this.savedSearches.size()) {
            this.savedSearches.each(function(savedSearch) {
                savedSearchesList.appendChild(this._renderSavedSearchItem(savedSearch));
            }.bind(this));
        } else {
            savedSearchesList.appendChild(this._renderEmptySavedSearches());
        }
        return savedSearchesList;
    },_confirmDelete: function() {
        return confirm("Are you sure you'd like to delete this saved search?");
    },_renderSavedSearchItem: function(savedSearch) {
        var savedSearchName = savedSearch.name.escapeHTML().truncate(30);
        var savedSearchTerm = savedSearch.search_term;
        9
        var savedSearchItem = new Element("li", {className: "list_item"});
        var deleteCallback = savedSearch.id ? function(event) {
            event.stopImmediatePropagation();
            if (this._confirmDelete()) {
                this.savedSearches.remove(savedSearch.id);
            }
        }.bind(this) : function() {
        };
        var deleteSavedSearchIcon = new Element("a").update('Remove');
        deleteSavedSearchIcon.addClassName('destroy');
        j(deleteSavedSearchIcon).click(deleteCallback);
        var savedSearchLink = new Element("a", {href: '#'}).update(savedSearchName);
        savedSearchLink.addClassName('link');
        j(savedSearchLink).click(function(e) {
            app.showSearchFor(savedSearchTerm);
            e.preventDefault();
            e.stopPropagation();
        });
        savedSearchItem.appendChild(deleteSavedSearchIcon);
        savedSearchItem.appendChild(savedSearchLink);
        return savedSearchItem;
    },_renderEmptySavedSearches: function() {
        var listItem = new Element("li");
        listItem.appendChild(new Element("span").update("There are no saved searches."));
        return listItem;
    }});
SidebarWidget = Class.create(AbstractPanelViewWidget, {initialize: function(project) {
        this.super_init("SidebarWidget", "sidebarWidget");
        this.project = project;
        this.widgets = [];
        this.widgets.push(new LabelsWidget(this, this.project));
        this.widgets.push(new SavedSearchesWidget(this, app.savedSearches));
    },getTitle: function() {
        return "Labels & Searches";
    },fillInWidgets: function() {
    },render: function() {
        this.renderedElement = new Element("div", {className: "list"});
        this.paint();
        return this.renderedElement;
    },postRender: function() {
        j(this.renderedElement).trigger('sidebar:postRender', this);
    },paint: function() {
        if (this.renderedElement) {
            var itemsElement = new Element("div", {className: "items"});
            var inner = new Element.newDiv('', {className: 'inner scrolling_item_list'});
            itemsElement.appendChild(inner);
            j(inner).on('scroll', function() {
                j(this).trigger("list:didScroll");
            });
            this.renderedElement.update("");
            this.renderedElement.appendChild(this._createBottomDiv());
            this.widgets.each(function(widget) {
                inner.appendChild(widget.render());
            });
            this.renderedElement.appendChild(itemsElement);
        }
    }});
SidebarWidget.LABELS = "labels";
SidebarWidget.SAVED_SEARCHES = "saved_searches";
BaseFullModelWidget = Class.create(AbstractPanelViewWidget, {initialize: function(project, model, modelDetails) {
        this.project = project;
        this.model = model;
        this.modelDetails = modelDetails;
        this.shouldCreateDetailsWidget = !modelDetails;
    },fillInWidgets: function() {
    },_destroy: function() {
        if (this.modelDetails) {
            this.modelDetails.destroy();
        }
        this.j().remove();
    },render: function() {
        var classes = ['full_model', this.shouldCreateDetailsWidget ? 'new_dom' : 'existing_dom'];
        this.renderedElement = new Element("div", {className: classes.join(" ")});
        this.paint();
        return this.renderedElement;
    },postShow: function() {
        if (this.shouldCreateDetailsWidget) {
            this.modelDetails.afterAddedToDom();
        } else {
            this.modelDetails.afterMaximize();
        }
    },collapse: function() {
        app.layout._closeAllPanels();
        app.layout.restoreFromFullScreenPanel();
    },minimize: function(close) {
        var modelDetails = this.modelDetails;
        j(modelDetails.renderedElement).detach();
        if (modelDetails.parentWidget.detailElement) {
            modelDetails.parentWidget.detailElement.appendChild(modelDetails.renderedElement);
            this.collapse();
        } else {
            this.collapse();
            app.showStory(this.model, modelDetails);
        }
        this.modelDetails = null;
        modelDetails.afterMinimize(close);
    },paint: function() {
        if (this.renderedElement) {
            var div = j("<div class='item'><div class='storyItem'></div></div>");
            div.find(".storyItem").append(this.shouldCreateDetailsWidget ? this.modelDetails.render() : this.modelDetails.renderedElement);
            this.renderedElement.appendChild(div.get(0));
        }
    },additionalPanelLinks: function additionalPanelLinks() {
        var panelLinks = [];
        var closeFullPageLink = j("<a class='panelLink closePanel close_full_page' href='#' title='Close'></a>");
        closeFullPageLink.click(j.proxy(this.modelDetails.saveAttachmentsAndClose, this.modelDetails));
        panelLinks.push(closeFullPageLink.get(0));
        var minimizeLink = j("<a class='panelLink minimize' href='#' title='show in project'></a>");
        minimizeLink.click(j.proxy(function(e) {
            this.minimize()
        }, this));
        panelLinks.push(minimizeLink.get(0));
        return panelLinks;
    }});
FullEpicWidget = Class.create(BaseFullModelWidget, {initialize: function($super, project, epic, modelDetails) {
        $super(project, epic, modelDetails);
        this.super_init("FullEpicWidget", "fullEpicWidget");
        this.modelDetails || (this.modelDetails = new EpicDetailsWidget(epic, this, {sidebar: true}));
    },getTitle: function() {
        return "Contained In Epics";
    }});
FullStoryWidget = Class.create(BaseFullModelWidget, {initialize: function($super, project, story, modelDetails) {
        $super(project, story, modelDetails);
        this.super_init("FullStoryWidget", "fullStoryWidget");
        this.modelDetails || (this.modelDetails = new StoryDetailsWidget(story, this, {sidebar: true}));
        this._widgetSource = this._getWidgetSource();
    },postShow: function($super) {
        $super();
        this._widgetSource.events.subscribe(this, 'update');
    },getTitle: function() {
        return "Contained in " + this._getName();
    },onUpdate: function() {
        if (!this.model.isDeleted() && this.shouldCreateDetailsWidget && !_(this._widgetSource.myDomainObjects()).include(this.model)) {
            this.collapse();
            app.layout.revealItem(this.model);
        }
    },_getName: function() {
        var name;
        if (this.model.isUnscheduled()) {
            name = "Icebox"
        } else {
            var currentIteration = this.project.getCurrentIteration();
            var storyIteration = this.project.getIterationContainingStory(this.model);
            if (!currentIteration) {
                name = "Backlog";
            } else if (storyIteration.getNumber() < currentIteration.getNumber()) {
                name = "Done";
            } else if (storyIteration.getNumber() == currentIteration.getNumber()) {
                name = "Current";
            } else {
                name = "Backlog";
            }
        }
        return name;
    },_getWidgetSource: function() {
        var project = this.project;
        var widgetSource = {Icebox: function() {
                return new IceboxWidgetSource(project);
            },Current: function() {
                return new CurrentWidgetSource(project);
            },Backlog: function() {
                return new BacklogWidgetSource(project);
            },Done: function() {
                return new DoneWidgetSource(project);
            }}[this._getName()];
        if (widgetSource) {
            return widgetSource();
        } else {
            throw "no widget source for " + this._getName();
        }
    },_destroy: function($super) {
        $super();
        this._widgetSource.events.unsubscribe(this, 'update');
    }});
Tracker.TaskListWidget = Class.create(BaseModelWidget, {initialize: function initialize($super, model, readOnly) {
        $super(model);
        this.readOnly = readOnly;
    },configuration: function configuration() {
        var config = {domainEvents: ['taskChange'],renderedElementHtml: "<div class=\"" + this._renderedElementClassNames() + "\"></div>",placeholders: {"textarea.new_task": Tracker.TaskListWidget.ADD_A_TASK_TEXT},delegateEvents: {"click li.delete a": "onDeleteClick","click li.edit a": "onEditClick","blur div.desc_wrapper textarea": "onEditBlur","keyup div.desc_wrapper textarea": "onEditKeyUpOrKeyDown","keydown div.desc_wrapper textarea": "onEditKeyUpOrKeyDown","keyup textarea.new_task": "onNewTaskTextareaKeyUpOrKeyDown","keydown textarea.new_task": "onNewTaskTextareaKeyUpOrKeyDown","change li > input.complete": "onCompleteChange"}};
        config["delegateEvents"]['click input.add_task'] = "onAddTask";
        config["delegateEvents"]['click li input.save_task'] = "onSaveTask";
        return config;
    },paint: function paint() {
        var $taskList = j(Tracker.Template.render('task_list_template', {textareaHeightClass: Tracker.AutoResizer.HEIGHT_CLASS,textAreaValue: Tracker.TaskListWidget.ADD_A_TASK_TEXT,readOnly: this.isReadOnly()}));
        this.$taskListElement = $taskList.filter('.task_list');
        return $taskList;
    },hasAnyChanges: function hasAnyChanges() {
        return this.hasTaskInProgress();
    },updateDynamicValues: function updateDynamicValues() {
        var currentTasksUnderEdit = {};
        this.$taskListElement.find("li div:visible textarea").each(function() {
            var $textarea = j(this);
            var $li = $textarea.closest('li');
            if (!$li.data('saving')) {
                var taskId = $li.data("task_id");
                currentTasksUnderEdit[taskId] = $textarea.val();
            }
        });
        this._repaintTaskRows();
        for (var key in currentTasksUnderEdit) {
            var $row = this.j("li.task_" + key);
            $row.find("div textarea").val(currentTasksUnderEdit[key]);
            this._showEditDescription($row);
        }
        if (!this.readOnly) {
            this.$taskListElement.sortable({axis: 'y',containment: this.renderedElement,tolerance: 'pointer',opacity: 0.5,update: j.proxy(this._updateSortOrder, this)});
        }
        this._updateCount();
    },onDeleteClick: function onDeleteClick($target) {
        var commandHash = {id: this._getTaskIdForRow($target)};
        if (this.model.isNew()) {
            commandHash['story'] = this.model;
        } else {
            commandHash['story_id'] = this.model.id();
        }
        this._runCommand(new Tracker.DeleteTask(commandHash, this.project));
    },onEditClick: function onEditClick($target) {
        this._showEditDescription($target.closest('li.task_item'));
    },onEditBlur: function onEditBlur($target) {
        if (!this.isSaving && app.save_on_enter) {
            this._editTaskDescription($target);
        }
    },onEditKeyUpOrKeyDown: function onEditKeyUpOrKeyDown($target, event) {
        if (event.keyCode == Event.KEY_RETURN) {
            event.stopPropagation();
            event.preventDefault();
            if (app.save_on_enter) {
                this._editTask($target);
            }
        } else if (event.keyCode == Event.KEY_ESC) {
            this._repaintTaskRows();
        }
    },onSaveTask: function onSaveTask($target) {
        this._editTask($target.closest('li.task_item').find("textarea"));
    },onNewTaskTextareaKeyUpOrKeyDown: function onNewTaskTextareaKeyUpOrKeyDown($target, event) {
        if (event.keyCode == Event.KEY_RETURN) {
            event.stopPropagation();
            event.preventDefault();
            if (app.save_on_enter) {
                this.addTask();
            }
        }
    },onAddTask: function onAddTask() {
        this.addTask();
    },onCompleteChange: function onCompleteClick($target, event) {
        var task = this._getTaskForRow($target);
        this._runCommand(this._createEditTask(task, {complete: !task.complete()}));
    },getAllChanges: function getAllChanges() {
        var changes = {};
        var text = _(this.j('textarea.new_task').val() || '').trim();
        if (text != '' && text != Tracker.TaskListWidget.ADD_A_TASK_TEXT) {
            changes['taskText'] = text;
        }
        return changes;
    },hasTaskInProgress: function hasTaskInProgress() {
        var taskChanges = this.getAllChanges();
        return !_(taskChanges).isEmpty();
    },newTaskJsonHash: function newTaskJsonHash() {
        var hashes = [];
        this.j('.task_list .task_item').each(function(taskRow) {
            var $taskRow = j(this);
            hashes.push({description: $taskRow.find('label').text(),complete: $taskRow.find('input.complete').is(':checked')});
        });
        return hashes;
    },_showEditDescription: function _showEditDescription($li) {
        $li.find("div.desc_wrapper").show();
        $li.find("input.save_task").show();
        $li.find("label").hide();
        $li.find(".actions").hide();
        $li.find("div.desc_wrapper textarea").focus();
        $li.trigger("story:task:didBecomeEditable");
    },_getTaskForRow: function getTaskForRow($target) {
        return this.model.getTaskById(this._getTaskIdForRow($target));
    },_getTaskIdForRow: function getTaskForRow($target) {
        return $target.closest('li.task_item').data('task_id');
    },_createTaskRow: function(task) {
        var html = "";
        html += Tracker.Template.render('task_row_template', {id: task.id(),readOnly: this.readOnly,isDisabled: this._shouldDisableTask(task),description: task.description(),complete: task.complete(),position: this.model.getTaskPosition(task),edit_img_src: story_icon_path("task_edit.png"),delete_img_src: story_icon_path("task_delete.png")});
        var taskRow = j(html);
        taskRow.data('task_id', task.id());
        return taskRow.get(0);
    },_updateCount: function() {
        var taskCount = this.model.getTasks().length;
        this.j('label span.count').html(taskCount > 0 ? (" (" + taskCount + ")") : "");
    },_updateSortOrder: function(event, ui) {
        var updatedItem = ui.item, updatedTaskId = updatedItem.data('task_id'), newPosition = null;
        var task = this.model.getTaskById(updatedTaskId);
        if (this._shouldDisableTask(task)) {
            return false;
        }
        j('.task_list > li', this.renderedElement).each(function(index) {
            if (j(this).data('task_id') == updatedTaskId) {
                newPosition = index + 1;
            }
        });
        this._runCommand(this._createEditTask(task, {position: newPosition}));
    },_createEditTask: function _createEditTask(task, additionalParams) {
        var editHash = {id: task.id()};
        if (this.model.isNew()) {
            editHash['story'] = this.model;
        } else {
            editHash['story_id'] = this.model.id()
        }
        return new Tracker.EditTask(Object.extend(editHash, additionalParams), this.project);
    },_editTaskDescription: function _editTaskDescription($textarea) {
        if (!StringUtils.isWhitespace($textarea.val())) {
            var task = this._getTaskForRow($textarea);
            if (!task) {
                return;
            }
            var command = this._createEditTask(task, {description: $textarea.val()});
            $textarea.closest("li.task_item").data('saving', true);
            this._runCommand(command);
        } else {
            this._repaintTaskRows();
        }
    },_repaintTaskRows: function _repaintTaskRows() {
        this.$taskListElement.html("");
        this._addTaskRows();
        this._updateCount();
    },_addTaskRows: function _addTaskRows() {
        var $taskListElement = this.$taskListElement;
        for (var i = 0; i < this.model.getTasks().length; i++) {
            $taskListElement.append(this._createTaskRow(this.model.getTasks()[i]));
        }
    },_editTask: function _editTask($target) {
        if (!this.isSaving) {
            this._editTaskDescription($target);
        }
    },addTask: function addTask() {
        var $target = this.j('textarea.new_task');
        var text = $target.val().trim();
        if (!this.hasTaskInProgress()) {
            return;
        }
        if (text == Tracker.TaskListWidget.ADD_A_TASK_TEXT) {
            text = "";
        }
        var taskHash = {description: text,story: this.model};
        this._runCommand(new Tracker.AddTask(taskHash, this.project));
        $target.val('').focus();
        this.updateDynamicValues();
    },_renderedElementClassNames: function _renderedElementClassNames() {
        var classNames = "tasks";
        if (this.isReadOnly()) {
            classNames += " readonly";
        }
        classNames += " no_save_on_enter";
        return classNames;
    },_shouldDisableTask: function _shouldDisableTask(task) {
        if (!!this.readOnly) {
            return true;
        }
        return !this.model.isNew() && task.isNewRecord();
    }});
Tracker.TaskListWidget.ADD_A_TASK_TEXT = 'Add a task';
AttachmentList = Class.create(Widget, {initialize: function(model, parentWidget, options) {
        this.super_init("AttachmentList");
        this.model = model;
        this.options = options || {};
        this.project = this.model.project;
        this.parentWidget = parentWidget;
        this.readOnly = this.options.readOnly || false;
        this.isInFlyover = this.options.isInFlyover || false;
        this.thumbnailSize = this.options.thumbnailSize || "thumb";
        this.resources = [];
        this._attachmentlMenuPopup = [];
    },onResourceUpdate: function() {
        this.update();
    },update: function() {
        j(this.renderedElement).html('');
        this._paint();
    },render: function() {
        this.renderedElement = Element.newDiv("", {className: "section attachments",id: "attachment_field_for_" + this.modelId()});
        this._paint();
        return this.renderedElement;
    },modelId: function() {
        return (typeof (this.model.id) == 'function') ? this.model.id() : this.model.id;
    },createResourceList: function() {
        this._unsubscribeFromResourceEvents();
        var resourceList = j('<ol class="attachments_list"></ol>');
        this.resources = this.model.getAllResources().sort(function(a, b) {
            return a.getFilename().toLowerCase() > b.getFilename().toLowerCase() ? 1 : -1;
        });
        this.resources.each(function(resource) {
            resourceList.append(this.createResourceRow(resource));
        }.bind(this));
        return resourceList.get(0);
    },createResourceRow: function(resource) {
        var html = "";
        var template = '';
        var templateValues = {};
        var downloadHref = resource.getDownloadUrl() || "#";
        var common = {description: Element.breakUpLongWords(resource.description),uploadedBy: resource.getUploader().getName(),createdAt: resource.createdAt.asDateWithZone().asDisplayStringWithTime(),readOnly: this.readOnly,isInFlyover: this.isInFlyover,downloadHref: downloadHref};
        if (resource.isGoogleDocResource()) {
            template = 'google_doc_resource_info_template';
            templateValues = {kind: resource.kind.replace('/', '_'),filename: resource.getFilename(),filename_ellipsified: resource.getEllipsifiedFilename(this.isInFlyover ? 50 : null),text: resource.getFileExtension()}
        } else {
            var thumbnail = resource.thumbnail();
            template = 'attachment_info_template';
            templateValues = {filename: resource.filename,filename_ellipsified: resource.getEllipsifiedFilename(this.isInFlyover ? 46 : null),sizeInKb: Math.ceil(resource.size / 1024),src: this.thumbnailSize == "big" ? thumbnail.bigSrc : thumbnail.src,alt: thumbnail.alt,attachmentHref: downloadHref,inlineAttachment: resource.contentType != 'text/html' || app.inlineHtmlAttachments,thumbnailable: resource.thumbnailable,text: resource.getFileExtension(3) || 'file'};
        }
        Object.extend(templateValues, common);
        html += Tracker.Template.render(template, templateValues);
        var resourceRow = j(html);
        this._attachEventsAndAddData(resourceRow, resource);
        var menuGear = j(".menu_gear", resourceRow);
        this._buildCogwheelMenu(resource, menuGear);
        return resourceRow.get(0);
    },afterMaximize: function() {
        this.thumbnailSize = 'big';
        if (this.renderedElement) {
            this.update();
        }
    },afterMinimize: function() {
        this.thumbnailSize = 'thumb';
        if (this.renderedElement) {
            this.update();
        }
    },_destroy: function() {
        this._unsubscribeFromResourceEvents();
        j(this.renderedElement).remove();
        this.renderedElement = null;
    },_unsubscribeFromResourceEvents: function() {
        this.resources.each(function(resource) {
            resource.events.unsubscribe(this, 'resourceUpdate');
            this._closeAttachmentMenuPopup(resource);
        }.bind(this));
    },_paint: function() {
        var resourcesTable = this.createResourceList();
        this.renderedElement.appendChild(resourcesTable);
    },_attachEventsAndAddData: function($resourceRow, resource) {
        resource.events.subscribe(this, 'resourceUpdate');
        var resourceId = resource.getId();
        var self = this;
        $resourceRow.data('id', resourceId);
        j("a.remove", $resourceRow).click(function() {
            self._removeResource(resource);
        });
        j("button", $resourceRow).click(function() {
            self._saveDescription(resourceId, $resourceRow);
        });
        j("input", $resourceRow).keydown(function(e) {
            if (e.which == 13) {
                self._saveDescription(resourceId, $resourceRow);
            }
        });
        j("a.edit", $resourceRow).click(function() {
            j("li.description", $resourceRow).hide();
            j("li.edit_description", $resourceRow).show();
            j("li.edit_description input", $resourceRow).val(resource.getDescription());
        });
        j("a.cancel", $resourceRow).click(function() {
            j("li.description", $resourceRow).show();
            j("li.edit_description", $resourceRow).hide();
        });
    },_saveDescription: function(resourceId, unorderedList) {
        this.parentWidget.changeResourceDescription(resourceId, j('input', unorderedList).val());
        return false;
    },_removeResource: function(resource) {
        if (this._confirm("Remove this attachment?")) {
            this.parentWidget.detachResource(resource);
        }
    },_buildCogwheelMenu: function(resource, menuGear) {
        this._attachmentlMenuPopup[resource.getId()] = new FormBalloon({width: 105,excludeCloseButton: true,excludeActionButtons: true,positionAdjustment: {horizontal: -2,vertical: 0},showStem: false,additionalClassNames: ['dropdown_menu', 'epics'],onPostShow: function() {
                j(menuGear).addClass('hover')
            },onClose: function() {
                j(menuGear).removeClass('hover');
            },enableVerticalFlip: true,builder: j.proxy(this._buildAttachmentMenuContent, this, resource)});
        this._attachmentlMenuPopup[resource.getId()].attachTo(menuGear.get(0));
    },_buildAttachmentMenuContent: function(resource) {
        var downloadAction = "Download";
        var target = "";
        if (resource.isGoogleDocResource()) {
            downloadAction = "Open";
            target = "target='_blank'";
        }
        var self = this;
        var jElements = j(Tracker.Template.render("attachment_menu_gear_actions_template", {downloadUrl: resource.getDownloadUrl(),target: target,readOnly: this.readOnly || !this.model.canBeDeletedBy(this.project.getSigninMember()),isUploaded: resource.isUploaded(),downloadAction: downloadAction}));
        j('.delete', jElements).click(function() {
            self._attachmentlMenuPopup[resource.getId()].close();
            self._removeResource(resource);
        });
        j('.download', jElements).click(function() {
            self._attachmentlMenuPopup[resource.getId()].close();
        });
        return jElements.get(0);
    },_closeAttachmentMenuPopup: function(resource) {
        if (this._attachmentlMenuPopup[resource.getId()]) {
            j(this._attachmentlMenuPopup[resource.getId()].contents).remove();
            this._attachmentlMenuPopup[resource.getId()].detach();
            this._attachmentlMenuPopup[resource.getId()] = null;
        }
    },_confirm: function(msg) {
        return window.confirm(msg);
    }});
Panel = Class.create();
Panel.RENDER_ITEM_DELAY = 20;
Panel.DESTROY_DELAY = 250;
Panel.TITLE_HEIGHT = 26;
Panel.DEFAULT_MIN_WIDTH = 330;
Panel.DONE = "done";
Panel.CURRENT = "current";
Panel.BACKLOG = "backlog";
Panel.ICEBOX = "icebox";
Panel.RELEASES = "releases";
Panel.MY_WORK = "mywork";
Panel.HISTORY = "history";
Panel.STORY_HISTORY = "story_history";
Panel.EPIC_HISTORY = "epic_history";
Panel.SEARCH = "search";
Panel.CHARTS = "charts";
Panel.SIDEBAR = "sidebar";
Panel.EPICS = "epics";
Panel.EPIC_STORIES = "epic_stories";
Panel.FULL_STORY = "full_story";
Panel.FULL_EPIC = "full_epic";
Panel.UNCLONEABLE_PANELS = [Panel.HISTORY, Panel.STORY_HISTORY, Panel.SEARCH, Panel.SIDEBAR, Panel.EPICS, Panel.EPIC_STORIES, Panel.FULL_STORY, Panel.FULL_EPIC];
Panel.UNSAVEABLE_PANELS = [Panel.STORY_HISTORY, Panel.SEARCH, Panel.EPIC_STORIES, Panel.FULL_STORY, Panel.FULL_EPIC];
Panel.prototype = Object.extend(new Widget(), {initialize: function(panelId, layout, options) {
        if (options == undefined)
            options = {};
        this.super_init("Panel", panelId);
        this.id = panelId;
        this.layout = layout;
        this.shouldDelayRender = options["shouldDelayRender"] || false;
        this.isDroppable = options["isDroppable"] || false;
        this.storyHomeFunctor = options["storyHomeFunctor"];
        this.openPanelFunctor = options["openPanelFunctor"];
        this._closePanelFunctor = options["closePanelFunctor"];
        this.isExpandable = options["isExpandable"] || false;
        this.canSelectAll = options["canSelectAll"] || false;
        this.sortNumber = options["sortNumber"] || 0;
        this.type = options["panelType"];
        this.fixedWidth = options["fixedWidth"] || null;
        this.initialized = false;
        this.htmlClasses = options["htmlClasses"] || "";
        this.minWidth = options["minWidth"] || null;
        this._cloned = options.cloned || false;
        this._destroyOnClose = options.destroyOnClose || false;
        this._fullScreen = options.fullScreen || false;
    },viewHistory: function(storyOrEpic) {
        if (storyOrEpic.getType() == "epic") {
            this.layout.openEpicHistoryPanel(this, storyOrEpic);
        } else {
            this.layout.openStoryHistoryPanel(this, storyOrEpic);
        }
    },manifestInfo: function() {
        var manifest = {type: this.type};
        if (this.viewWidget && this.viewWidget.manifestInfo) {
            manifest.viewWidgetOptions = this.viewWidget.manifestInfo();
        }
        return manifest;
    },setViewWidget: function(viewWidget, fillIn) {
        if (this.initialized)
            return;
        this.viewWidget = viewWidget;
        this.viewWidget.setParent(this);
        if (fillIn) {
            this.viewWidget.fillInWidgets();
            this.initialized = true;
        }
    },render: function() {
        this.renderedElement = Element.create("td", {id: this.id,className: "panel " + this.type});
        this.renderedElement.addClassName(this.htmlClasses);
        if (this.shouldDelayRender) {
            this.renderedElement.appendChild(Element.newDiv('Loading...', {id: '_loading',className: 'panelLoading'}));
            ThreadManager.startThread("Panel.paint()", this.paint.bind(this), Layout.RENDER_DELAY);
        } else {
            this.paint();
        }
        return this.renderedElement;
    },paint: function() {
        j(this.renderedElement).empty().removeData().off();
        if (this.viewWidget == null) {
            throw new Error("viewWidget for " + this.id + " is null");
        }
        var headerLeft = Element.newDiv(null, {className: 'panelHeaderLeft'});
        var panelHeaderDiv = Element.newDiv(null, {className: 'panelHeader'});
        var headerRight = Element.newDiv(null, {className: 'panelHeaderRight'});
        this.renderedElement.appendChild(headerRight);
        this.renderedElement.appendChild(headerLeft);
        this.renderedElement.appendChild(panelHeaderDiv);
        this.titleElement = Element.newDiv(null, {id: this.htmlId() + "_title"});
        var closeLink = Element.newLinkToFunction(this.close.bind(this), {className: 'closePanel panelLink',id: this.htmlId() + "_close",title: "Close panel"}, "");
        this.titleElement.appendChild(closeLink);
        if (this.viewWidget.additionalPanelLinks) {
            this.viewWidget.additionalPanelLinks().each(function(link) {
                this.titleElement.appendChild(link);
            }.bind(this));
        }
        if (!Panel.UNCLONEABLE_PANELS.include(this.type)) {
            this.cloneLink = new Element("a", {href: "#",className: "panelLink cloneLink " + this.type + "CloneLink",title: "Clone Panel"});
            this.titleElement.appendChild(this.cloneLink);
            if (this.cloneButtonDisabledInitially) {
                this.disableCloneLink();
            }
            else {
                this.enableCloneLink();
            }
        }
        if (this.canSelectAll) {
            var selectAllLink = Element.newLinkToFunction(this.selectAll.bind(this), {className: 'panelLink',id: this.id + "_select_all_link"}, "Select All");
            this.titleElement.appendChild(selectAllLink);
            var deselectAllLink = Element.newLinkToFunction(this.deselectAll.bind(this), {className: 'panelLink',id: this.id + "_deselect_all_link"}, "Deselect All");
            $(deselectAllLink).hide();
            this.titleElement.appendChild(deselectAllLink);
        }
        if (this.isExpandable) {
            var collapseAllLink = Element.newLinkToFunction(this.collapseAll.bind(this), {className: 'collapseAllPanel panelLink',title: "Collapse All Iterations",id: this.htmlId() + "_collapse_all"}, "");
            this.titleElement.appendChild(collapseAllLink);
            var expandAllLink = Element.newLinkToFunction(this.expandAll.bind(this), {className: 'expandAllPanel panelLink',title: "Expand All Iterations",id: this.htmlId() + "_expand_all"}, "");
            this.titleElement.appendChild(expandAllLink);
        }
        this.titleElementText = new Element("span", {className: "panelTitle"}).insert(this.viewWidget.getTitle().toUpperCase());
        this.titleElementIntegration = new Element("span", {className: "external_icon"});
        this.titleElement.appendChild(this.titleElementText);
        this.titleElement.appendChild(this.titleElementIntegration);
        if (this.viewWidget.getSubtitle()) {
            this.titleElement.appendChild(new Element("span", {className: "panelSubtitle"}).insert(this.viewWidget.getSubtitle()));
        }
        panelHeaderDiv.appendChild(this.titleElement);
        this.renderedElement.appendChild(this.viewWidget.render());
        if (this.viewWidget.postRender) {
            this.viewWidget.postRender();
        }
        this.executeOpenPanelFunctor();
    },updateTitle: function() {
        if (this.titleElementText) {
            this.titleElementText.update(this.viewWidget.getTitle());
        }
    },disableCloneLink: function() {
        if (this.cloneLink) {
            if (!this.cloneLink.hasClassName("disabled")) {
                this.cloneLink.addClassName("disabled");
                j(this.cloneLink).off('click');
            }
        } else {
            this.cloneButtonDisabledInitially = true;
        }
    },enableCloneLink: function() {
        if (this.cloneLink) {
            this.cloneLink.removeClassName("disabled");
            j(this.cloneLink).click(this.clone.bind(this));
        } else if (this.shouldDelayRender) {
            ThreadManager.startThread("Panel.enableCloneLink()", this.enableCloneLink.bind(this), Layout.RENDER_DELAY);
        }
    },clone: function() {
        var clonePanel = this.layout.openPanel(this.type, {widget: this.viewWidget.clone(),cloned: true});
        this.layout._updatePanelCloneLink(this.type);
        return clonePanel;
    },executeOpenPanelFunctor: function() {
        if (this.openPanelFunctor) {
            var renderListener = {onDoneRendering: function() {
                    var boundOpenPanelFunctor = function() {
                        this.openPanelFunctor(this);
                    }.bind(this);
                    ThreadManager.startThread("openPanelFunctor", boundOpenPanelFunctor, 0);
                }.bind(this)};
            this.viewWidget.addRenderListener(renderListener);
        }
        this.viewWidget.open();
    },close: function() {
        this.layout.closePanel(this);
    },expandAll: function() {
        this.viewWidget.expandAll();
    },collapseAll: function() {
        this.viewWidget.collapseAll();
    },isSaveable: function() {
        return !Panel.UNSAVEABLE_PANELS.include(this.type);
    },show: function() {
        this.layout.showPanel(this.id);
    },isActive: function() {
        return this.layout.isPanelActive(this);
    },isFixedWidth: function() {
        return this.fixedWidth;
    },_destroy: function() {
        ThreadManager.startThread("cleanup listeners", this._cleanup.bind(this), Panel.DESTROY_DELAY);
    },_cleanup: function() {
        if (this.viewWidget && this.viewWidget.destroy) {
            this.viewWidget.destroy();
            this.viewWidget = null;
        }
        if (this.renderedElement) {
            this.disableCloneLink();
            j(this.renderedElement).empty().removeData().off();
            this.renderedElement = null;
        }
    },hasItems: function() {
        return this.viewWidget.itemsElement != null;
    },getWidth: function() {
        return Utils.width(this.renderedElement);
    },getHeight: function() {
        return Utils.height(this.renderedElement);
    },getCumulativeOffset: function() {
        return Element.cumulativeOffset(this.renderedElement);
    },getOffset: function getOffset() {
        return j(this.renderedElement).offset();
    },resize: function(widthPercent, heightPixels) {
        var jPanelElement = j(this.renderedElement);
        jPanelElement.trigger("panel:willResize");
        if (this.minWidth) {
            jPanelElement.css('min-width', this.minWidth + "px");
        }
        jPanelElement.css('width', widthPercent + "%");
        if (this.viewWidget.additionalTitleHeight) {
            heightPixels -= this.viewWidget.additionalTitleHeight;
        }
        this._setHeight(heightPixels);
        if (this.viewWidget && this.viewWidget.onResize) {
            this.viewWidget.onResize(widthPercent, heightPixels);
        }
        jPanelElement.trigger("panel:didResize");
    },isHomeToStoryInIteration: function(story, iteration) {
        return this.storyHomeFunctor(story, iteration);
    },isCloned: function() {
        return this._cloned;
    },isDestroyOnClose: function() {
        return this._destroyOnClose;
    },revealItem: function(story) {
        this.viewWidget.revealItem(story);
    },selectAll: function() {
        app.project.addSelectedModels(this.viewWidget.myDomainObjects());
        this._toggleSelectAll();
    },deselectAll: function() {
        app.project.removeSelectedModels(this.viewWidget.myDomainObjects());
        this._toggleSelectAll();
    },scrollBy: function(delta) {
        this.viewWidget.scrollBy(delta);
    },getScrollTop: function() {
        return this.viewWidget.getScrollTop();
    },scrollTo: function(scrollTop) {
        this.viewWidget.scrollTo(scrollTop);
    },showStory: function(story, modelDetails) {
        this.viewWidget.showStory(story, modelDetails);
    },postShow: function() {
        this.viewWidget.postShow();
    },isFullScreen: function() {
        return this._fullScreen;
    },_setHeight: function(heightPixels) {
        if (this.viewWidget.renderedElement != undefined) {
            Utils.setHeight(this.viewWidget.renderedElement, heightPixels);
        } else if (this.shouldDelayRender) {
            ThreadManager.startThread("Panel._setHeight()", this._setHeight.bind(this, heightPixels), Layout.RENDER_DELAY);
        }
    },_toggleSelectAll: function() {
        $(this.id + "_deselect_all_link").toggle();
        $(this.id + "_select_all_link").toggle();
    }});
SelectedStoriesWidget = Class.create(Widget, {initialize: function(project) {
        this.super_init("SelectedStories", "selectedStories");
        this.project = project;
        project.events.subscribeAsync(this, "update");
    },_createSelectedStoriesSummaryCell: function() {
        this.selectedStoriesSummaryElement = new Element("td").insert(this._getSelectedModelsSummaryText());
        this.selectedStoriesSummaryElement.setAttribute("id", "selected_stories_count");
        return this.selectedStoriesSummaryElement;
    },_createActionDropDownCell: function() {
        this.actionDropDownElement = Element.newDropDownBox("storyActions", this._generateActionOptionsArray(), "Action...", {});
        j(this.actionDropDownElement).change(this.actionDropDownOnChange.bind(this, this));
        return new Element("td").insert(this.actionDropDownElement);
    },_generateActionOptionsArray: function() {
        var optionsArray = [];
        optionsArray.push(["Action...", "Action...", false]);
        optionsArray.push(["delete", "Delete Stories", false]);
        return optionsArray;
    },render: function() {
        var firstRow = new Element("tr").insert(this._createActionDropDownCell());
        var secondRow = new Element("tr").insert(this._createSelectedStoriesSummaryCell());
        return new Element("table", {id: "selectedStoriesTable",className: "projectStatusTable"}).insert(new Element("tbody").insert(firstRow).insert(secondRow));
    },actionDropDownOnChange: function() {
        var selected = this.actionDropDownElement.selectedIndex;
        if (selected == 1) {
            this.project.deleteSelectedStories();
        }
        this.actionDropDownElement.selectedIndex = 0;
    },onUpdate: function(project) {
        this.selectedStoriesSummaryElement.innerHTML = this._getSelectedModelsSummaryText();
    },_getSelectedModelsSummaryText: function() {
        if (this.project.config.allowStorySelection) {
            return this.project.getNumberOfSelectedModels() + " stories selected";
        } else {
            return "";
        }
    }});
ReleaseBurnDownChart = Class.create(AbstractChart, {initialize: function(project, now) {
        this.super_init(project);
        this._now = now || DateUtils.now().atMidnight();
    },getTitle: function() {
        return "Release burn-down";
    },getDescription: function() {
        return "The Release Burn-Down chart shows progress through each release in the project." + "<ul><li>Using the 'Release' pull-down, you can choose from any of the releases in the project.</li>" + "<li>The X-axis shows the days in the release.</li>" + "<li>The Y-axis shows the point count of the remaining (unaccepted) stories in the release.</li>" + "<li>The 'Actual' line shows the true progress through the release.</li>" + "<li>If the release has a deadline, the 'Target Deadline' line shows the rate of progress through the release necessary to meet the deadline. The 'Target Deadline' line is green if the deadline is projected to be met, and red if not.</li>" + "<li>If the release is not yet complete, the 'Actual' line ends at today's date and the 'Projected' line shows expected future progress through the release based on the current velocity.</li>" + "<li>If the release is not yet complete, the chart covers all the stories from the end of the previous release through the end of the chosen release.</li></ul>";
    },getBusinessSummary: function() {
        if (!this.release) {
            return "There are no releases in this project.";
        }
        var result = null;
        var endDate = this.release.getEndDate();
        if (this.release.isAccepted()) {
            result = "This release finished on " + endDate.atNoon().asDateWithZone().asDisplayString();
        } else {
            result = "This release is projected to finish on " + endDate.atNoon().asDateWithZone().asDisplayString();
        }
        if (this.release.hasDeadline()) {
            var deadlineDate = this.release.getDeadline();
            if (deadlineDate >= endDate) {
                result += ", meeting its deadline of " + deadlineDate.atNoon().asDateWithZone().asDisplayString();
            } else {
                result += ", missing its deadline of " + deadlineDate.atNoon().asDateWithZone().asDisplayString();
            }
        }
        result += ".";
        if (!this.release.isAccepted()) {
            result += " There are " + this.release.getRemainingPoints() + " points remaining in this release.";
        }
        return result;
    },myRender: function() {
        var dropdownElement = this._renderReleasesDropdown();
        this.chartElement.appendChild(dropdownElement);
        this.yAxisLabel = Element.newDiv("Points remaining", {className: "chartYAxisLabel"});
        this.chartElement.appendChild(this.yAxisLabel);
        Element.hide(this.yAxisLabel);
        this.chartElement.appendChild(this.container);
        this.xAxisLabel = Element.newDiv("Date", {className: "chartXAxisLabel"});
        this.chartElement.appendChild(this.xAxisLabel);
        Element.hide(this.xAxisLabel);
    },_calculate: function() {
        this.release = null;
        var releaseId = this.selectedReleaseId();
        if (releaseId) {
            var releaseMarker = this._project.getStoryById(releaseId);
            if (releaseMarker) {
                var builder = new ReleaseBuilder(this._project, this._now);
                this.release = builder.forReleaseMarker(releaseMarker);
            }
        }
        if (!this.release) {
            return;
        }
        this.total = this.release.getTotalPoints();
        this.horizontalLabels = [];
        this.actualValues = [];
        this.projectedValues = [];
        this.deadlineValues = [];
        var count = 0;
        var startDate = this.release.getStartDate().atMidnight();
        var rawReleaseEndDate = this.release.getEndDate();
        if (rawReleaseEndDate == null) {
            return;
        }
        var releaseEndDate = rawReleaseEndDate.atMidnight().plusDays(1);
        var releaseDayCount = releaseEndDate.elapsedDaysFrom(startDate);
        this.deadline = this.release.hasDeadline() ? this.release.getDeadline().atMidnight() : null;
        if (this.deadline != null && this.deadline.isBefore(startDate)) {
            this.deadline = null;
        }
        var deadlineDayCount = this.deadline != null ? this.deadline.elapsedDaysFrom(startDate) : null;
        var endDate = releaseEndDate;
        if (this.deadline != null && releaseEndDate.isBefore(this.deadline)) {
            endDate = this.deadline;
        }
        var dayCount = endDate.elapsedDaysFrom(startDate);
        var targetHorizontalLabelCount = 4;
        var daysPerHorizontalLabel = Math.round(dayCount / targetHorizontalLabelCount);
        var actualValuesHit0 = false;
        this.includeProjectedSeries = !this.release.isAccepted();
        for (var day = startDate; count <= dayCount; day = day.plusDays(1)) {
            if (count % daysPerHorizontalLabel == 0) {
                this.horizontalLabels.push(day.atNoon().asDateWithZone().asDisplayStringNoYear());
            } else {
                this.horizontalLabels.push("");
            }
            var actualValue;
            if (!actualValuesHit0 && !this._now.isBefore(day)) {
                actualValue = this.release.getPointsRemainingAt(day.plusDays(1));
                this.actualValues.push(actualValue);
                if (this.includeProjectedSeries) {
                    this.projectedValues.push(actualValue);
                }
                if (actualValue == 0) {
                    actualValuesHit0 = true;
                }
            }
            if (this.deadline != null) {
                var deadlineValue = this.total - (this.total * count / deadlineDayCount);
                if (deadlineValue >= 0) {
                    this.deadlineValues.push(deadlineValue);
                }
            }
            count++;
        }
        if (this.includeProjectedSeries) {
            var daysLeft = releaseEndDate.elapsedDaysFrom(this._now);
            var remaining = this.release.getRemainingPoints();
            for (var i = 1; i <= daysLeft; i++) {
                var projectedValue = remaining - (remaining * i / daysLeft);
                this.projectedValues.push(projectedValue);
            }
        }
        if (this.deadline != null) {
            this.deadlineColor = this.deadline.isBefore(rawReleaseEndDate.plusDays(1).atMidnight()) ? "#FF0000" : "#00FF00";
        }
    },myPaint: function() {
        if (this.release) {
            Element.show(this.yAxisLabel);
            Element.show(this.xAxisLabel);
            this.chart.setDefaultType(CHART_LINE);
            this.chart.setHorizontalLabels(this.horizontalLabels);
            this.chart.setVerticalRange(0, this.total > 0 ? this.total : 1);
            this.chart.setGridDensity(this.horizontalLabels.length, this.total + 1 > 20 ? 20 : this.total + 2);
            this.chart.setShowLegend(true);
            if (this.deadline) {
                this.chart.add("Deadline Target", this.deadlineColor, this.deadlineValues);
            }
            if (this.includeProjectedSeries) {
                this.chart.add("Projected", "#000000", this.projectedValues);
            }
            this.chart.add("Actual", "#0000FF", this.actualValues);
            this.chart.draw();
        } else {
            Element.hide(this.yAxisLabel);
            Element.hide(this.xAxisLabel);
            this.chart = null;
        }
    },_renderReleasesDropdown: function() {
        var tableElement = Element.newTable(1, 2);
        Element.addCellToRow(tableElement.rows[0], 1);
        var options = [];
        tableElement.rows[0].cells[0].appendChild(Element.newDiv("Release:", {className: "chartLabel"}));
        var selectedId = null;
        this._project.getReleaseMarkers().each(function(marker) {
            var displayName = marker.getName();
            var className;
            if (marker.isAccepted()) {
                displayName += " (done)";
                className = "chartAcceptedReleaseOption";
            } else {
                className = "chartUnacceptedReleaseOption";
                if (selectedId == null) {
                    selectedId = marker.id();
                }
            }
            options.push([marker.id(), displayName, false, className]);
        });
        this._releasesDropdownElement = Element.newDropDownBox("release_id", options, selectedId, {className: "chartField"});
        Element.addCellToRow(tableElement.rows[0], 2, {className: 'chartField'});
        tableElement.rows[0].cells[1].appendChild(this._releasesDropdownElement);
        j(this._releasesDropdownElement).change(this.onUpdate.bind(this, this));
        return tableElement;
    },selectedReleaseId: function() {
        return eval(this._releasesDropdownElement.value);
    },hasCurrentRelease: function() {
        return this._project.getReleaseMarkers().length > 0;
    }});
RunningThreadWidget = Class.create(Widget, {initialize: function(threadManager) {
        this.super_init("RunningThreads");
        this.threadManager = threadManager;
        this.threadManager.runningThreadsChangedEvent.subscribe(this);
    },render: function() {
        var result = Element.newDiv();
        result.appendChild(Element.newDiv("Running threads", {className: "runningThreadsTitle"}));
        this.countElement = Element.newDiv("", {className: "runningThreadsCount"});
        result.appendChild(this.countElement);
        this.summaryElement = Element.newDiv("", {className: "runningThreadsSummary"});
        result.appendChild(this.summaryElement);
        this.update();
        return result;
    },update: function() {
        this.countElement.innerHTML = "Count: " + this.threadManager.numberOfRunningThreads();
        this.summaryElement.innerHTML = this.threadManager.threadSummaryString();
    },onRunningThreadsChanged: function(source) {
        this.update();
    }});
SearchWidget = Class.create(AbstractPanelViewWidget, {initialize: function(project, revealer, options) {
        this.super_init("Search", "results");
        this._options = Object.extend({renderAsynchronously: true,renderChunkSize: 25}, options || {});
        this._destroyed = false;
        this.project = project;
        this.searchSpec = {searchString: ""};
        this.searchWidgetSource = new StoryAndEpicSearchWidgetSource(this.project, this.searchSpec, revealer, this.searchComplete.bind(this), this.searchUnavailable.bind(this));
        this.statusWidget = new StatusWidget(this._options.newPanelId || "status");
        this.itemListWidget = new ItemListWidget("Search Results", this.getDescription(), this.searchWidgetSource, {renderAsynchronously: this._options.renderAsynchronously,renderChunkSize: this._options.renderChunkSize,statusWidget: this.statusWidget});
        this.timeouts = 0;
        this.isPinned = false;
    },getTitle: function() {
        return Element.breakUpLongWords(this.searchSpec.searchString.escapeHTML());
    },getDescription: function() {
        return "<p>Enter your search. Simple searches work and the results appear in the &quot;Search&quot; panel." + "  This search field also supports some advanced search features. For more information, please refer to the Tracker Help FAQ.</p>";
    },render: function() {
        var renderedElement = Element.newDiv('', {id: this.htmlId()});
        this.renderedElement = renderedElement;
        this.paint();
        j(this.renderedElement).on('click', '.done_bar', null, this.showDone.bind(this));
        return renderedElement;
    },paint: function() {
        this.renderedElement.className = "search";
        this.itemListDiv = this.itemListWidget.render();
        this.renderedElement.appendChild(this.itemListDiv);
        this.resetStatusClass();
    },pin: function() {
        if (!this.isPinned) {
            this.isPinned = true;
            this.pinPanelLink.addClassName('active');
        }
    },fillInWidgets: function() {
        this.itemListWidget.setParent(this);
        this.itemListWidget.fillInWidgets();
    },myDomainObjects: function() {
        return this.searchWidgetSource.myDomainObjects();
    },search: function(searchTerm) {
        this._searchStartTime = new Date();
        this.statusWidget.setVisible(true);
        this.statusWidget.updateStatus(SearchWidget.SEARCHING);
        searchTerm = searchTerm || "";
        if (!this.isPinned) {
            SearchWidget.getSearchStringField().value = searchTerm;
        }
        this.searchSpec.searchString = searchTerm.trim();
        this.updateMyPanel();
        this.searchWidgetSource.doSearch();
    },searchDoneStories: function() {
        var searchTerm = this.searchSpec.searchString + " includedone:true";
        if (!this.isPinned) {
            SearchWidget.getSearchStringField().value = searchTerm;
        }
        this.search(searchTerm);
    },saveSearch: function(name) {
        var savedSearchName = name.strip();
        if (savedSearchName.length) {
            app.savedSearches.add({name: savedSearchName,search_term: this.searchSpec.searchString});
        }
    },updateMyPanel: function() {
        if (this.panel) {
            this.panel.updateTitle();
        }
    },searchComplete: function() {
        if (this._destroyed) {
            return false;
        }
        this.statusWidget.setVisible(false);
        this.itemListWidget.onUpdate();
        this.j().trigger('panel:focus');
        Tracker.Analytics.trackTimedEvent("uiActions", "performSearch", this._searchStartTime, new Date());
    },searchUnavailable: function(response) {
        if (this._destroyed) {
            return false;
        }
        this._updateSearchResults(0);
        this.statusWidget.updateStatus(response || SearchWidget.UNAVAILABLE);
        this.statusWidget.addStatusClass('error');
    },_updateSearchResults: function(resultsCount) {
        this.resetStatusClass();
        if (resultsCount == 0) {
            this.statusWidget.addStatusClass('none');
        } else {
            this.statusWidget.addStatusClass('found');
        }
    },buildResultsMessage: function(searchString, count, totalHits, totalPoints, totalPointsCompleted) {
        var result = "";
        var pointsString = " (" + totalPoints + " points total, " + totalPointsCompleted + " points completed)";
        if (count == 0) {
            result += "Found no stories";
        } else if (count == 1) {
            result += "Found 1 story";
            result += pointsString;
        } else if (totalHits > count) {
            result += ("Matched " + totalHits + " stories, the first " + count + " are displayed.");
            result += " Please refine your search criteria";
        } else {
            result += ("Found " + count + " stories");
            result += pointsString;
        }
        return result;
    },setRenderSynchronously: function() {
        this.itemListWidget._options.renderAsynchronously = false;
    },viewHistory: function(story) {
        this.panel.viewHistory(story);
    },postShow: function() {
        if (!this.isPinned) {
            SearchWidget.getSearchStringField().focus();
        }
    },_destroy: function() {
        j("#showDoneStories").off('click', this.searchDoneStories);
        this.itemListWidget.destroy();
        this.itemListWidget = null;
        this._destroyed = true;
        this.searchWidgetSource = null;
    },resetStatusClass: function() {
        this.statusWidget.resetStatusClass("searchResults");
    },additionalPanelLinks: function() {
        var panelLinks = [];
        this.pinPanelLink = Element.newLinkToFunction(this.pin.bind(this), {className: 'pinPanel panelLink ' + (this.isPinned ? 'active' : ''),title: "Pin This Panel",id: this.htmlId() + "_pin"}, "");
        panelLinks.push(this.pinPanelLink);
        if (!this.project.isReadOnly()) {
            this.saveSearchLink = Element.newLink("Save", {href: "#",className: 'panelLink save',id: this.htmlId() + "_save_search_link",title: "Save This Search"});
            this.saveSearchBalloon = new FormBalloon({width: 250,description: "These will appear in the Labels &amp; Searches panel.",htmlClasses: "saved_search_balloon",builder: this._buildSaveSearch.bind(this),onApply: this._applySaveSearch.bind(this),applyButtonLabel: "Save"});
            this.saveSearchBalloon.attachTo(this.saveSearchLink);
            panelLinks.push(this.saveSearchLink);
        }
        return panelLinks;
    },showDone: function showDone(event) {
        if (j(event.currentTarget).hasClass('show_done_epics')) {
            this.searchWidgetSource.setShowDoneEpics(true);
        } else {
            this.searchWidgetSource.setShowDoneStories(true);
            this.searchDoneStories();
        }
    },_buildSaveSearch: function() {
        return new Element("div").update('<label>Save search as:</label><input type="text" name="name" />');
    },_applySaveSearch: function(serializedForm) {
        this.saveSearch(serializedForm.name);
    }});
SearchWidget.getSearchStringField = function() {
    return $("searchString");
};
SearchWidget.getLabelSearchString = function(label_name) {
    if (label_name.indexOf(' ') > -1) {
        return 'label:"' + label_name + '"';
    }
    return 'label:' + label_name;
};
Object.extend(SearchWidget, {SEARCHING: 'Searching...',EMPTY_SEARCH: 'Found no stories',UNAVAILABLE: 'Search is currently unavailable'});
ServerConnectivityWidget = Class.create(Widget, {initialize: function(pinger) {
        this.super_init("ServerConnectivity", "content");
        this.pinger = pinger;
        this.pinger.events.subscribe(this, "update");
    },onUpdate: function() {
        if (this.pinger.offline()) {
            j('#offlineMessage').show();
        } else {
            j('#offlineMessage').hide();
        }
    }});
StoryButtonsWidget = Class.create(Widget, {initialize: function(story, project, parentWidget, isReadOnly) {
        this.super_init("StoryButtons", "buttons");
        this.story = story;
        this.project = project;
        this.setParent(parentWidget);
        this.isReadOnly = isReadOnly;
        this._rejectionPopup = new FormBalloon({width: 350,builder: this._buildRejection.bind(this),onApply: this.apply.bind(this),applyButtonLabel: "Reject",eventTrigger: this._becomeVisible.bind(this)});
    },render: function() {
        var buttonsDiv = Element.newDiv('', {className: "storyPreviewButtons",id: this.htmlId()});
        this.renderedElement = buttonsDiv;
        if (this.project.allowsEstimationOf(this.story.getStoryType()) && this.story.isUnestimated() && !this.story.isAccepted() && !this.isReadOnly) {
            if (this.project.getPointScale().isCustom()) {
                this.renderCustomEstimateButtons(buttonsDiv);
            } else {
                this.renderEstimateButtons(buttonsDiv);
            }
        } else {
            this.renderActionButtons(buttonsDiv);
        }
        return this.renderedElement;
    },apply: function(serializedForm) {
        var reason = serializedForm.reject_reason;
        this.performAction(StoryAction.REJECT, reason);
    },renderCustomEstimateButtons: function(buttonsDiv) {
        buttonsDiv.addClassName('custom');
        var possiblePoints = this.project.getPossiblePoints();
        var stopBefore = Math.min(possiblePoints.length, StoryButtonsWidget.MAX_VALUES_IN_PREVIEW);
        for (var i = 0; i < stopBefore; ++i) {
            this.addCustomEstimateButton(buttonsDiv, possiblePoints[i]);
        }
        this.additionalPossiblePoints = possiblePoints.slice(stopBefore, possiblePoints.length);
        if (this.additionalPossiblePoints.length > 0) {
            var link = Element.newLinkToFunction(function() {
            }, {className: 'expand_points'}, "+");
            buttonsDiv.appendChild(link);
            var numDigits = 0;
            for (var i = 0; i < this.additionalPossiblePoints.length; i++) {
                numDigits++;
                if (this.additionalPossiblePoints[i] > 9) {
                    numDigits++;
                }
                if (this.additionalPossiblePoints[i] > 99) {
                    numDigits++;
                }
            }
            var balloonWidth = 0;
            balloonWidth += 6 * this.additionalPossiblePoints.length;
            balloonWidth += 7 * numDigits;
            this.balloon = new FormBalloon({width: balloonWidth,builder: this._buildAddtionalCustomPoints.bind(this),disabled: true,excludeCloseButton: true,stemImageName: 'box_call_out_pointer_custom_points.png',stemImageOffset: -8,additionalClassNames: ['custom_points'],closeOnUpdate: true});
            this.balloon.attachTo(link);
        }
    },_buildAddtionalCustomPoints: function() {
        var contents = new Element('ol', {className: "custom"});
        for (var i = 0; i < this.additionalPossiblePoints.length; ++i) {
            var liElement = new Element('li');
            this.addCustomEstimateButton(liElement, this.additionalPossiblePoints[i]);
            contents.appendChild(liElement);
        }
        return contents;
    },addCustomEstimateButton: function(parentElement, estimate) {
        var onclickFunction = this.changeEstimateTo.bind(this, estimate);
        var link = Element.newLinkToFunction(onclickFunction, {className: "custom"}, estimate);
        parentElement.appendChild(link);
    },renderEstimateButtons: function(buttonsDiv) {
        var possiblePoints = this.project.getPossiblePoints();
        for (var i = 0; i < possiblePoints.length; ++i) {
            this.addEstimateButton(buttonsDiv, possiblePoints[i]);
        }
    },renderActionButtons: function(buttonsDiv) {
        var actions = this.story.getAvailableActions();
        actions.each(function(action) {
            this.addActionButton(buttonsDiv, action.getName());
        }.bind(this));
    },showEditIcons: function(showIcons) {
        var icons = this.renderedElement.childNodes;
        for (var i = 0; i < icons.length; i++) {
            if (showIcons) {
                Element.show(icons[i]);
            } else {
                Element.hide(icons[i]);
            }
        }
    },addEstimateButton: function(parentElement, estimate) {
        var onclickFunction = this.changeEstimateTo.bind(this, estimate);
        var estimateText = "Estimate: " + estimate.toString() + (estimate == 1 ? " point" : " points");
        var attributes = {id: this.htmlId() + "_estimate" + estimate + "Button",className: 'estimateButton notDblclickable',src: story_icon_path("select_" + estimate + "pt_" + this.project.getPointScaleName() + ".gif"),title: estimateText};
        var link = Element.newImageLink(attributes, {"click": onclickFunction,"mousedown": this.onMouseDown.bind(this)});
        parentElement.appendChild(link);
    },addActionButton: function(parentElement, action) {
        var className = this.isReadOnly ? 'disabledStateChangeButton notDblclickable' : 'stateChangeButton notDblclickable';
        className += ' ' + action;
        var attributes = {id: this.htmlId() + "_" + action + "Button",className: className,href: '#'};
        var link;
        var text = StringUtils.capitalize(action);
        if (this.isReadOnly) {
            link = Element.newLinkToFunction(j.noop, attributes, text);
        } else {
            var onclickFunction = this["on" + text + "Click"].bind(this);
            attributes["mousedown"] = this.onMouseDown.bind(this);
            link = Element.newLinkToFunction(onclickFunction, attributes, text);
            if (action == "reject") {
                this._rejectionPopup.attachTo(link);
            }
        }
        parentElement.appendChild(link);
    },cancelRejection: function() {
        this._rejectionPopup.close();
    },performAction: function(action, noteText) {
        if (noteText && !StringUtils.isWhitespace(noteText)) {
            var noteParams = {"text": noteText};
        }
        var command = new PerformStoryAction(this.project, this.story, action, this.project.getSigninMemberId(), noteParams);
        document.fire("storyAction:performed");
        j(this.renderedElement).trigger('panel:resize');
        this.story.project.commandQueue.enqueue(command);
    },changeEstimateTo: function(toNewEstimate) {
        if (this.balloon) {
            this.balloon.close();
        }
        var command = new ChangeStoryEstimate(this.story, toNewEstimate);
        this.story.project.commandQueue.enqueue(command);
    },onStartClick: function() {
        this.performAction(StoryAction.START);
    },onDeliverClick: function() {
        this.performAction(StoryAction.DELIVER);
    },onFinishClick: function() {
        this.performAction(StoryAction.FINISH);
    },onAcceptClick: function() {
        this.performAction(StoryAction.ACCEPT);
    },onRejectClick: function(event) {
        this.closeRejectBalloon_cached = this.closeRejectBalloon.bind(this);
        document.observe("storyAction:performed", this.closeRejectBalloon_cached);
    },closeRejectBalloon: function() {
        this._rejectionPopup.close();
        document.stopObserving("storyAction:performed", this.closeRejectBalloon_cached);
    },onRestartClick: function() {
        this.performAction(StoryAction.RESTART);
    },onMouseDown: function(event) {
        event.stopImmediatePropagation();
    },_buildRejection: function() {
        this.contents = new Element('div');
        this.contents.className = "reject_reason";
        this.contents.update('<label>Reason for rejection (optional):</label>' + '<textarea class="autoresize expand30-10000" name="reject_reason"></textarea>');
        return this.contents;
    },_becomeVisible: function() {
        j(this.contents).trigger("story:reject_reason:didBecomeVisible");
    },_noteParentSet: function(parent) {
        this.parent = parent;
    },_destroy: function() {
    }});
StoryButtonsWidget.MAX_VALUES_IN_PREVIEW = 5;
StoryDetailsWidget = Class.create(BaseDetailsWidget, {DELETE_COMMAND: Tracker.DeleteStory,initialize: function($super, model, parentWidget, options) {
        options = options || {};
        $super(model, parentWidget, options);
        this._showGridSelectForEstimate = (this.project.getPointScale().getPossiblePoints().length < 6 || !this.project.getPointScale().isCustom()) && !this.readOnly && this.model.isNew();
    },configuration: function configuration($super) {
        var baseConfig = $super();
        j.extend(baseConfig['delegateEvents'], {"click .stateChangeButton": "onStateChangeFromButton","click .clear_release_date": "onClearReleaseDate","keyup input.external_id": "onExternalIdChange","new_story_on_epic .details": "onCreatingStoryOnEpic","click .readonly_cl_numbers": "onClNumbersFocus","focus .cl_numbers": "onClNumbersFocus","click .readonly_cl_numbers a": "onClNumbersAnchorClick","keyup .cl_numbers": "updateDirtyState"});
        if (this.model.project.areTasksEnabled()) {
            j.extend(baseConfig['childWidgets'], {'.task_list_placeholder': [Tracker.TaskListWidget, [this.model, this.isReadOnly()]]});
        }
        return baseConfig;
    },onClNumbersAnchorClick: function onClNumbersAnchorClick($element, event) {
        event.stopPropagation();
    },onClNumbersFocus: function() {
        var $readOnlyClNumbers = this.j('.readonly_cl_numbers');
        if (!$readOnlyClNumbers.is(":visible")) {
            return;
        }
        $readOnlyClNumbers.hide();
        var $clNumbersArea = this.j('.cl_numbers');
        $clNumbersArea.closest('div').css({height: 'auto',overflow: 'visible'});
        this.clNumbersArea = $clNumbersArea;
        Element.putCursorAtEnd($clNumbersArea.get(0));
        $clNumbersArea.closest('form').trigger("story:cl_numbers:didBecomeEditable");
    },onCreatingStoryOnEpic: function($target, event, epic) {
        this.getLabelsInput().labelWidget('addLabel', epic.label());
        this.getLabelsInput().data('uneditedValue', epic.label());
    },afterAddedToDom: function afterAddedToDom($super) {
        if (this.model.isNew()) {
            this.makeRadioInputs();
        } else {
            this._setupChosenSelect("story_type", this.onStoryTypeChange);
        }
        if (!this._showGridSelectForEstimate) {
            this._setupChosenSelect("estimate", this.onEstimateChange);
        }
        this._setupChosenSelect("current_state", this.onStateChangeFromSelect);
        this._setupChosenSelect("requested_by_id");
        this._setupChosenSelect("owned_by_id");
        if (app.project.config.allowSourceControlTracking === true) {
            this.j(".cl_numbers_container").css({height: 0,overflow: 'hidden'});
        }
        if (!this.readOnly) {
            this.j(".accepted_at").datepicker({minDate: new Date('2006/01/01'),maxDate: new Date().asDateWithZone().adjustedDate,showOn: "button",showAnim: "slideDown",autoSize: true,buttonText: "",defaultDate: null,onSelect: function(dateText, inst) {
                    this._addDateToAcceptedState();
                    this.updateDirtyState();
                }.bind(this)});
            this.j(".release_date").datepicker({showOn: "button",showAnim: "slideDown",autoSize: true,buttonText: "",defaultDate: null,onSelect: function(dateText, inst) {
                    this._readDatepickerElement(this.j(".release_date"), this._getDeadline());
                    this._updateReleaseDateText();
                    this.updateDirtyState();
                }.bind(this)});
        }
        this._setupLabelWidget("label");
        this._updateOtherIntegration();
        $super();
    },_setupLabelWidget: function _setupLabelWidget() {
        var $input = this._getInputElement("labels");
        $input.labelWidget({readOnly: this.readOnly,initialLabels: this.model.getLabels(),availableLabels: j.proxy(function() {
                return this.labelRepository.getLabels();
            }, app.project),addLabelCallback: j.proxy(this.updateDirtyState, this),removeLabelCallback: j.proxy(this.updateDirtyState, this),click: j.proxy(app.showPanelForLabel, app)});
    },getLabelsInput: function getLabelsInput() {
        return this._getInputElement("labels");
    },destroy: function destroy($super) {
        if (!this.readOnly && !this.isDestroyed) {
            if (this.j(".accepted_at").data('datepicker')) {
                this.j(".accepted_at").datepicker('destroy');
            }
            if (this.j(".release_date").data('datepicker')) {
                this.j(".release_date").datepicker('destroy');
            }
        }
        $super();
    },setValues: function($super) {
        $super();
        this._setField("story_type", this.model.getStoryType().getName());
        this._setField("deadline", this.model.getDeadline() ? this.model.getDeadline().asDateWithZone().getTime() : null);
        if (this.model.isReleaseMarker()) {
            this.j(".release_date_row").show();
        }
        this._setField("estimate", this.model.getEstimate());
        this._setField("external_id", this.model.getExternalId());
        this._setField("name", this.model.getName());
        this._setField("description", this.model.getDescription());
        this._setField("requested_by_id", this.model.getRequestedById());
        this._setField("current_state", this.model.getCurrentState().getName());
        this._setField("owned_by_id", this.model.getOwnedById());
        if (!this._hasFieldBeenEdited("accepted_at")) {
            this._setField("accepted_at", this.model.getAcceptedAt() ? this.model.getAcceptedAt().asDateWithZone().getTime() : null);
            if (this.model.getCurrentState() == StoryState.ACCEPTED) {
                this._updateAcceptedAtDisplayString(new Date(this._getAccepted_at()));
            }
        }
        if (this.model.isReleaseMarker()) {
            this._updateReleaseDateText();
        }
        this._setField("labels", this.model.getLabelsString());
        this._setField("cl_numbers", this.model.getCLNumbers());
    },defineInputSelectors: function defineInputSelectors() {
        return {name: ".story_name",description: ".description_area",estimate: 'select.estimate',story_type: 'select.story_type',current_state: 'select.state',requested_by_id: 'select.requester',owned_by_id: 'select.owner',accepted_at: ".accepted_at",deadline: ".release_date",labels: "input.labels",external_id: "input.external_id",cl_numbers: "textarea.cl_numbers"}
    },sectionAArgs: function sectionAArgs() {
        return {estimateOptions: this.getEstimateOptions(),typeOptions: this.getTypeOptions(),requesterOptions: this.getMemberOptions(this.model.getRequestedById()),stateOptions: this.getStateOptions(this.model.getStoryType()),storyState: this.model.getCurrentState(),isEstimatable: this.model.isEstimatable(),pointscaleClassname: "point_scale_" + this.project.getPointScaleName(),estimateOffsetInPointscale: "estimate_pos" + (this.project.getPointScale().getIndexOf(this.model.getEstimate()) + 1),customPointScale: this.project.getPointScale().isCustom(),customEstimate: (this.project.getPointScale().isCustom() && this.model.getEstimate() != -1) ? this.model.getEstimate() : '',showGridSelectForEstimate: this._showGridSelectForEstimate,ownerOptions: this.getOwnerOptions(this.model.getOwnedById()),storyTypeName: this.model.getStoryType().getName(),stateChangeButtonHtml: this._getStateChangeButtonHtml(this.model.getStoryType(), this.model.getCurrentState()),integration: this.model.getIntegration(),externalId: this.model.getExternalId(),externalIdLabel: this.model.getExternalIdLabel(),allowSourceControlTracking: this.project.config.allowSourceControlTracking};
    },sectionBArgs: function sectionBArgs() {
        return {taskOptions: ""};
    },onClearReleaseDate: function onClearReleaseDate($target, event) {
        var $element = this.j('.release_date');
        $element.datepicker('setDate', '');
        this._setDeadline($element, null);
        this._updateReleaseDateText();
        this.updateDirtyState();
    },onExternalIdChange: function onExternalIdChange($target, event) {
        this._updateOtherIntegration();
        this.updateDirtyState();
    },makeRadioInputs: function makeRadioInputs() {
        this.storyTypeRadio = this.j('select.story_type.radio').gridselz({className: 'radio story_type',selectedClassName: 'selected',buildItemContentCallback: function(select, option, li) {
                li.addClass(option.attr('value'));
                return '<div/>';
            },onFocusCallback: function(event, select) {
                select.closest('li.clearfix').addClass('focused');
            }.bind(this),onChangeCallback: this.onStoryTypeChange.bind(this),onBlurCallback: function(event, select) {
                select.closest('li.clearfix').removeClass('focused');
            }.bind(this)});
        this.estimateRadio = this.j('select.estimate.radio').gridselz({className: 'radio estimate point_scale_' + this.project.getPointScale().getName(),selectedClassName: 'selected',buildItemContentCallback: function(select, option, li, index) {
                li.addClass('estimate_pos' + index);
                return this.project.getPointScale().isCustom() ? '<em>' + option.attr('value') + '</em>' : '<em/>';
            }.bind(this),onFocusCallback: function(event, select) {
                select.closest('li.clearfix').addClass('focused');
            }.bind(this),onChangeCallback: function() {
                this.updateDirtyState();
            }.bind(this),onBlurCallback: function(event, select) {
                select.closest('li.clearfix').removeClass('focused');
            }.bind(this)});
    },getEstimateOptions: function getEstimateOptions() {
        var possiblePoints = this.project.getPointScale().getPossiblePoints();
        var unestimatedDisabled = this.model.requiresEstimate() ? " disabled" : "";
        var options = ['<option value="-1"' + unestimatedDisabled + (this.model.getEstimate() == -1 ? ' selected="selected"' : '') + '>Unestimated</option>'];
        for (var i = 0; i < possiblePoints.length; i += 1) {
            var selected = (this.model.getEstimate() == possiblePoints[i]) ? ' selected="selected"' : '';
            options.push('<option' + selected + ' value="' + possiblePoints[i] + '">' + possiblePoints[i] + " point".pluralize(possiblePoints[i]) + '</option>');
        }
        return options.join('');
    },getTypeOptions: function getTypeOptions() {
        var options = [];
        StoryType.all.each(function(type) {
            var selected = this.model.getStoryType() == type ? ' selected="selected"' : '';
            options.push('<option' + selected + ' value="' + type.getName() + '">' + this._getOption(type.getDisplayName()) + '</option>');
        }.bind(this));
        return options.join('');
    },getOwnerOptions: function getOwnerOptions(selectedMember) {
        return '<option value="-1">none</option>' + this.getMemberOptions(selectedMember);
    },getMemberOptions: function getMemberOptions(selectedMemberId) {
        var members = this.project.members.allActiveCollaborators();
        var selectedMember = this.project.getMember(selectedMemberId);
        if (selectedMember && !members.contains(selectedMember)) {
            members.push(selectedMember);
            members = Members.sort(members);
        }
        var optionsString = "";
        for (var i = 0; i < members.length; i++) {
            var member = members[i];
            var selected = member.getId() == selectedMemberId ? " selected=\"selected\"" : "";
            optionsString += '<option value="' + member.getId() + '"' + selected + '>' + Element.cleanupText(member.getDisplayName()) + '</option>';
        }
        return optionsString;
    },getStateOptions: function getStateOptions(storyType) {
        if (this.model.getCurrentState() == StoryState.UNSCHEDULED) {
            return '<option value="' + StoryState.UNSCHEDULED.getName() + '">' + StoryState.UNSCHEDULED.getDisplayName() + '</option>';
        }
        var states = this.model.getAvailableStates(storyType);
        var optionsString = "";
        for (var i = 0; i < states.length; i++) {
            optionsString += '<option value="' + states[i].getName() + '"';
            if (states[i] == this.model.getCurrentState()) {
                optionsString += ' selected="selected"';
            }
            optionsString += '>' + states[i].getDisplayName() + '</option>'
        }
        return optionsString;
    },onStoryTypeChange: function onStoryTypeChange(event) {
        this._handleStoryTypeChange(this._getStoryTypeObject(), false);
    },onEstimateChange: function onEstimateChange(event) {
        this.updateDirtyState();
        this._updateEstimateIcon(j(event.target).val());
    },onStateChangeFromSelect: function onStateChangeFromSelect() {
        var newStateName = this._getInputElement("current_state").val();
        this._handleStateChange(newStateName, true, false);
    },onStateChangeFromButton: function onStateChangeFromButton($button) {
        var stateSelectElement = $button.closest('.right').find('select.state'), actionName = $button.text().toLowerCase(), newStateName = this.model.getNewStateForAction(StoryState.valueOf(stateSelectElement.val()), actionName, this._getStoryTypeObject()).getName();
        if (actionName == 'start' || actionName == 'restart') {
            this._setOwned_by_id(this.j('select.owner'), app.memberId);
        }
        this._handleStateChange(newStateName, false, false);
    },writeChildWidgetChangesToTopLevelModel: function writeChildWidgetChangesToTopLevelModel($super) {
        if (this._hasTaskInProgress()) {
            this._taskListWidget().addTask();
        }
        $super();
    },canBeClosed: function canBeClosed($super) {
        if (this._getAccepted_at()) {
            var acceptedAtDate = new Date(this._getAccepted_at());
            if (this._isDateBeforeProjectStartDate(acceptedAtDate) && !confirm("This will cause a reload for everyone on the project, are you sure you meant to set the accepted at date before your first iteration?")) {
                return false;
            } else if (this._isDateBeforeShownDoneIterations(acceptedAtDate) && !confirm("The new accepted date is before the first shown iteration.\n This story may not be visible on the client if you continue.\n Click OK to continue.")) {
                return false;
            }
        }
        return $super();
    },maximize: function maximize() {
        app.layout.openPanel(Panel.FULL_STORY, {viewWidgetOptions: {story: this.model,modelDetails: this}});
    },_hasWidgetBeenEdited: function _hasWidgetBeenEdited($super) {
        return this._hasTaskInProgress() || $super();
    },_isDateBeforeProjectStartDate: function(date) {
        return !Date.equalsMDYYYY(date, this.model.getAcceptedAt()) && date.getTime() < this.project.getStartDate().getTime();
    },_isDateBeforeShownDoneIterations: function(date) {
        return !Date.equalsMDYYYY(date, this.model.getAcceptedAt()) && date.getTime() < this.project.getFirstVisibleIterationStartDate().getTime() && this.project.getDoneIterations().length > 0
    },_updateOtherIntegration: function _updateOtherIntegration() {
        var integration = this.model.getIntegration();
        if (!integration) {
            return;
        }
        var $anchor = this.j('.integration.' + integration.getIntegrationType() + ' a.icon');
        var $span = this.j('.integration.' + integration.getIntegrationType() + ' span.icon');
        if ($anchor.length == 0) {
            return;
        }
        var externalId = this._getInputElement("external_id").val();
        if (integration && integration.canChangeExternalStoryId() && externalId) {
            $anchor.show();
            $span.hide();
            $anchor.attr("href", this.model.getIntegration().getExternalUrl(externalId));
        } else {
            $anchor.hide();
            $span.show();
        }
    },_hasTaskInProgress: function() {
        if (this.isReadOnly()) {
            return false;
        }
        if (!this._taskListWidget()) {
            return false;
        }
        return this._taskListWidget() ? this._taskListWidget().hasTaskInProgress() : false;
    },_handleStoryTypeChange: function _handleStoryTypeChange(newStoryTypeString, isExternalChange) {
        this.updateDirtyState();
        var newStoryType = StoryType.valueOf(newStoryTypeString);
        this.j(".story_type.icon").attr("class", "story_type icon " + newStoryType.getName());
        if (this.project.allowsEstimationOf(newStoryType)) {
            this._enableEstimateControl();
            if (this.model.isActive()) {
                if (this._showGridSelectForEstimate) {
                    var unestimatedOption = this.estimateRadio.find('option[value="-1"]');
                    unestimatedOption.attr('disabled', true);
                    this.estimateRadio.trigger('gridselz:update');
                } else {
                    this.j("select.estimate option[value='-1']").attr('disabled', true);
                    this.j("select.estimate").trigger("liszt:updated");
                }
            }
        } else {
            this._unestimate();
            this._disableEstimateControl();
        }
        if (this.isReadOnly()) {
            this._disableEstimateControl();
        }
        if (newStoryType == StoryType.RELEASE) {
            this._updateReleaseDateText();
            this.j('.release_date_row').show();
        } else {
            this.j('.release_date_row').hide();
        }
        var currentStateName = this._getInputElement("current_state").val();
        var options = this.getStateOptions(newStoryType);
        this.j(".state.chzn-select").html(options);
        var newStateName = currentStateName;
        if (newStoryType && newStoryType.containsState) {
            if (!newStoryType.containsState(this.model.getAvailableStates(newStoryType), currentStateName)) {
                newStateName = StoryState.UNSTARTED.getName();
            }
        }
        this._handleStateChange(newStateName, false, isExternalChange);
    },_handleStateChange: function _handleStateChange(newStateName, changedFromSelect, isExternalChange) {
        if (!changedFromSelect) {
            this._updateStateSelect(newStateName);
        }
        if (newStateName != StoryState.ACCEPTED.getName()) {
            this._setAccepted_at(this._getInputElement('accepted_at'), null);
        } else {
            this._updateAcceptedAtIfNecessary(isExternalChange);
        }
        this._updateStateButtons(newStateName, this._getStoryTypeObject());
        this.updateDirtyState();
        this.j('li.state input.save_on_enter').focus();
    },_updateAcceptedAtDisplayString: function _updateAcceptedAtDisplayString(dateToDisplay) {
        this.j('.state .chzn-single span').html("Accepted on " + dateToDisplay.asDisplayString());
    },_updateAcceptedAtIfNecessary: function _updateAcceptedAtIfNecessary(isExternalChange) {
        var acceptedAt = this._getAccepted_at() ? new Date(this._getAccepted_at()) : new Date().asDateWithZone();
        if (isExternalChange) {
            acceptedAt = this.model.getAcceptedAt().asDateWithZone();
        }
        this._setField('accepted_at', acceptedAt.getTime(), !isExternalChange, true);
        this._updateAcceptedAtDisplayString(acceptedAt);
    },_readDatepickerElement: function _readDatepickerElement($element, modelValue) {
        var valueDate = null;
        if (this.readOnly) {
            valueDate = modelValue;
        } else {
            valueDate = $element.datepicker('getDate').atNoon().asDateWithZone().atNoon();
        }
        $element.data("current_value", valueDate.getTime());
        return valueDate;
    },_addDateToAcceptedState: function _addDateToAcceptedState() {
        var valueDate = this._readDatepickerElement(this.j(".accepted_at"), this._getAccepted_at());
        this._updateAcceptedAtDisplayString(valueDate);
    },_updateReleaseDateText: function _updateReleaseDateText() {
        var releaseDateMsec = this.j('.release_date').data('current_value');
        var newReleaseDate = releaseDateMsec ? new Date(releaseDateMsec).atNoon().asDateWithZone().atNoon() : null;
        var formattedDate = !newReleaseDate ? "None" : newReleaseDate.asDisplayString();
        this.j('.release_date_text').html(formattedDate);
    },_updateStateButtons: function _updateStateButtons(newStateName, newStoryType) {
        var storyType = newStoryType || this.model.getStoryType();
        this.j('.storyPreviewButtons').html(this._getStateChangeButtonHtml(storyType, newStateName));
        if (newStateName == 'accepted') {
            this.j(".storyPreviewButtons").hide();
            this.j(".accepted_at_container").show();
        } else {
            this.j(".accepted_at_container").hide();
            this.j(".storyPreviewButtons").show();
        }
    },_updateStateSelect: function _updateStateSelect(newStateName) {
        var elem = this._getInputElement("current_state");
        elem.val(newStateName);
        elem.trigger("liszt:updated");
    },_getStateChangeButtonHtml: function _getStateChangeButtonHtml(storyType, storyState) {
        return j(Story.getAvailableActions(storyType, storyState)).map(function(i, action) {
            return "<a class='stateChangeButton " + action.getName() + "' href='#' tabindex='-1'>" + action.getName().capitalize() + "</a>";
        }).get().join("\n");
    },_hasDeadlineBeenEdited: function _hasDeadlineBeenEdited() {
        return this._hasDateValuesChanged(this.j('.release_date'));
    },_getDeadline: function _getDeadline() {
        return this.j(".release_date").data("current_value");
    },_setDeadline: function _setDeadline($element, value) {
        this._setDateValue($element, value);
    },_getCl_numbers: function _getCl_numbers() {
        if (app.project.config.allowSourceControlTracking === false) {
            return '';
        }
        return this._getInputElement("cl_numbers").val() ? this._getInputElement("cl_numbers").val().gsub(" ", "") : "";
    },_setCl_numbers: function($element, value) {
        if (app.project.config.allowSourceControlTracking === false) {
            return;
        }
        $element.val(value);
        var clNumbers = value.split(',');
        var links = [];
        for (var i = 0; i < clNumbers.length; i++) {
            var linkValue = clNumbers[i];
            links.push('<a target="_blank" href="' + this.project.config.sourceControlBaseUrl + _.escape(linkValue) + '">' + _.escape(linkValue) + '</a>');
        }
        this.j('.readonly_cl_numbers').html(links.join("<span>,</span>"));
    },_hasAccepted_atBeenEdited: function _hasAccepted_atBeenEdited() {
        return this._hasDateValuesChanged(this.j('.accepted_at'));
    },_getAccepted_at: function _getAccepted_at() {
        return this.j('.accepted_at').data("current_value");
    },_setAccepted_at: function _setAccepted_at($element, value) {
        this._setDateValue($element, value);
    },_hasDateValuesChanged: function($dateElement) {
        var uneditedValue = $dateElement.data("uneditedValue");
        var currentValue = $dateElement.data("current_value");
        if (!uneditedValue && currentValue) {
            return true;
        }
        if (uneditedValue && !currentValue) {
            return true;
        }
        if (uneditedValue && currentValue) {
            return new Date(currentValue).toMDYYYY() != new Date(uneditedValue).toMDYYYY();
        }
        return false;
    },_setDateValue: function _setDateValue($element, value) {
        $element.data('current_value', value);
        if (!this.readOnly) {
            $element.datepicker('setDate', !!value ? new Date(value) : '');
        }
    },_setRequested_by_id: function _setRequested_by_id($element, value) {
        $element.val(value).trigger('liszt:updated');
    },_setOwned_by_id: function($element, value) {
        $element.val(value).trigger('liszt:updated');
    },_setEstimate: function _setEstimate($element, value) {
        if (this._showGridSelectForEstimate) {
            $element.val(value).trigger('gridselz:update');
        } else {
            $element.val(value).trigger("liszt:updated");
        }
    },_getStoryTypeObject: function _getStoryTypeObject() {
        return StoryType.valueOf(this._getStory_type());
    },_getStory_type: function _getStory_type() {
        return this.j('select.story_type').val();
    },_setStory_type: function _setStory_type($element, value) {
        if (this._getStory_type() != value) {
            $element.val(value).trigger("liszt:updated");
            this._handleStoryTypeChange(value, true);
        }
    },_setCurrent_state: function _setCurrent_state($element, value) {
        this._updateStateSelect(value);
        this._updateStateButtons(value);
    },_setLabels: function _setLabels($element, value) {
        $element.val(value).labelWidget('labels', value === '' ? [] : value.split(','));
    },_updateEstimateIcon: function _updateEstimateIcon(newEstimate) {
        var icon = this.j(".story_estimate.icon");
        var pointScale = this.project.getPointScale();
        icon.attr("class", "story_estimate icon estimate_pos" +
        (pointScale.getIndexOf(parseInt(newEstimate)) + 1));
        if (pointScale.isCustom()) {
            icon.text(newEstimate == -1 ? '' : newEstimate);
        }
    },_enableEstimateControl: function() {
        if (!this.j("select.estimate").is(":disabled")) {
            return;
        }
        var estimate = this.model.getEstimate();
        this._setEstimate(this.j("select.estimate"), estimate);
        if (this._showGridSelectForEstimate) {
            this.estimateRadio.gridselz('enable');
        } else {
            this._updateEstimateIcon(estimate);
            this.j("select.estimate").removeAttr("disabled");
            this.j("select.estimate").next().find("a.chzn-single").attr('tabIndex', 0);
            this.j("select.estimate").trigger("liszt:updated");
        }
    },_disableEstimateControl: function() {
        if (this._showGridSelectForEstimate) {
            this.estimateRadio.gridselz('disable');
        } else {
            this.j("select.estimate").attr("disabled", true);
            this.j("select.estimate").trigger("liszt:updated");
        }
    },_unestimate: function _unestimate() {
        this._setEstimate(this.j("select.estimate"), Story.UNESTIMATED);
        if (!this._showGridSelectForEstimate) {
            this._updateEstimateIcon(Story.UNESTIMATED);
        }
    },_addAdditionalSaveCommandJson: function($super, commandJson) {
        if (commandJson.labels) {
            commandJson.labels = commandJson.labels.split(',');
        }
        if (this.model.isNew()) {
            if (commandJson['story_type'] == null) {
                commandJson['story_type'] = StoryType.FEATURE.getName();
            }
            if (this._taskListWidget()) {
                var taskJson = this._taskListWidget().newTaskJsonHash();
                commandJson['tasks'] = taskJson;
            }
        }
        if (this.project.getDefaultIntegration() && commandJson.external_id != null) {
            if (commandJson.external_id.blank()) {
                commandJson.integration_id = '';
            } else {
                commandJson.integration_id = this.project.getDefaultIntegration().getId();
            }
        }
        $super(commandJson);
    },_taskListWidget: function _taskListWidget() {
        return this.model.project.areTasksEnabled() ? this._childWidgets['.task_list_placeholder'] : null;
    },_getOption: function _getOption(option) {
        if (this.model.isNew()) {
            return option + " (" + option[0] + ")";
        } else {
            return option;
        }
    }});
StoryFlyoverWidget = Class.create(BaseModelWidget, {configuration: function configuration() {
        var childWidgets = {'.comments.section': [Tracker.CommentsWidget, [this.model, true, {isInFlyover: true}]]};
        if (this.model.project.areTasksEnabled()) {
            childWidgets['.tasks.section'] = [Tracker.TaskListWidget, [this.model, true]];
        }
        return {domainEvents: [],childWidgets: childWidgets};
    },paint: function paint() {
        var estimateText;
        if (this.model.project.getPointScale().isCustom()) {
            if (this.model.isEstimated()) {
                estimateText = this.model.getEstimate() + " pt".pluralize(this.model.getEstimate());
            } else {
                estimateText = 'Unestimated';
            }
        } else {
            estimateText = StoryIconHelper.getStoryEstimateIconTitle(this.model);
        }
        return Tracker.Template.render('story_flyover_template', {name: this.model.getName(),description: this.model.getDescription(),estimateText: estimateText,storyId: this.model.getId(),storyType: this.model.getStoryType().getDisplayName(),storyTypeIconPath: StoryIconHelper.getStoryTypeIconPath(this.model),storyEstimateIconPath: StoryIconHelper.getStoryEstimateIconPath(this.model),showEstimate: this.model.project.allowsEstimationOf(this.model.getStoryType()),hasCustomPointScale: this.model.project.getPointScale().isCustom(),requester: this.model.getRequestedBy().getName(),createdAt: this.model.getCreatedAt().asDateWithZone().asDisplayStringWithTime(),hasTasks: this.model.project.areTasksEnabled() && this.model.getTasks().length > 0,hasDescription: this.model.hasDescription(),hasComments: this.model.hasComments(),integration: this.model.getIntegration() || null,externalId: this.model.getExternalId(),externalIdLabel: this.model.getExternalIdLabel()});
    },afterAddedToDom: function afterAddedToDom($super) {
        this._storyLabelsWidget = new StoryLabelsWidget(this.model.getLabels(), this, this.model.project);
        this.j('.labels_container').append(this._storyLabelsWidget.render());
        $super();
    }});
StoryIconsWidget = Class.create(IconsWidget, {initialize: function($super, story, project, storyPreviewWidget, storyFlyoverContainer) {
        $super("StoryIcons", "story", story, project, storyPreviewWidget, storyFlyoverContainer);
        this.model.events.subscribe(this, "attachmentUpdate");
        this.model.events.subscribe(this, "commentChange");
        this.model.events.subscribe(this, "taskChange");
    },_destroy: function() {
        this.super_destroy();
        this.model.events.unsubscribe(this, "attachmentUpdate");
        this.model.events.unsubscribe(this, "commentChange");
        this.model.events.unsubscribe(this, "taskChange");
        j(this.renderedElement).remove();
        this.modelIconsDiv = null;
        this.renderedElement = null;
    },onTaskChange: function() {
        this._repaint();
    },_paint: function() {
        this.super_paint();
        this._addStoryTypeIcon(this.modelIconsDiv);
        this._addEstimateIcon(this.modelIconsDiv);
        this._addCommentAndAttachmentsIcon(this.modelIconsDiv);
    },_addCommentAndAttachmentsIcon: function(toElement) {
        if (this.model.hasComments() || this.model.hasDescription() || this.model.hasTasks()) {
            if (this._project.allowsAttachments() && this.model.hasResources()) {
                this.commentsAndAttachmentsIcon = Element.newImage(story_icon_path("story_flyover_attachment_icon.png"), {className: 'flyoverIcon'});
            } else {
                this.commentsAndAttachmentsIcon = Element.newImage(story_icon_path("story_flyover_icon.png"), {className: 'flyoverIcon'});
            }
        } else if (this._project.allowsAttachments() && this.model.hasResources()) {
            this.commentsAndAttachmentsIcon = Element.newImage(story_icon_path("story_flyover_attachment_only_icon.png"), {className: 'flyoverIcon'});
        }
        if (this.commentsAndAttachmentsIcon) {
            toElement.appendChild(this.commentsAndAttachmentsIcon);
        }
    },showStatusIcons: function(isCollapsed) {
        if (isCollapsed) {
            Element.show(this.modelTypeIcon);
            Element.show(this.estimateIcon);
            if (this.commentsAndAttachmentsIcon) {
                Element.show(this.commentsAndAttachmentsIcon);
            }
        } else {
            Element.hide(this.modelTypeIcon);
            Element.hide(this.estimateIcon);
            if (this.commentsAndAttachmentsIcon) {
                Element.hide(this.commentsAndAttachmentsIcon);
            }
        }
    },_spinnerIconStorySuffix: function() {
        if (!this.model.isReleaseMarker()) {
            return "";
        }
        return this.model.isPastDeadline() ? "_release_pastdeadline" : "_release";
    },_addStoryTypeIcon: function(toElement) {
        this.modelTypeIcon = new StoryTypeIconWidget(this.model, ".png").render();
        toElement.appendChild(this.modelTypeIcon);
    },_addEstimateIcon: function(toElement) {
        this.estimateIcon = this._createEstimateIcon();
        toElement.appendChild(this.estimateIcon);
    },_createEstimateIcon: function() {
        var srcFile;
        var estimateText;
        var height;
        var mySuffix = "_" + this._project.getPointScaleName() + this._suffix;
        if (this._project.getPointScale().isCustom()) {
            var estimate = this.model.isEstimated() ? this.model.getEstimate() : "&nbsp;";
            return j("<span class='estimate'>" + estimate + "</span>").get(0);
        }
        if (this.model.isEstimatable() || this.model.isEstimated()) {
            if (this.model.isUnestimated()) {
                srcFile = "estimate_unestimated" + mySuffix;
                estimateText = "Unestimated";
            } else {
                if (this._project.getPointScale().isCustom()) {
                    return j("<span class='estimate'>" + this.model.getEstimate() + "</span>").get(0);
                }
                srcFile = "estimate_" + this.model.getEstimate() + "pt" + mySuffix;
                estimateText = "Estimate: " + this.model.getEstimate() + " " + (this.model.getEstimate() == 1 ? "point" : "points");
            }
        } else {
            srcFile = "estimate_0pt" + mySuffix;
        }
        return Element.newImage(story_icon_path(srcFile), {width: 6,height: height,className: 'estimateIcon',title: estimateText});
    },_metaInfoLine: function() {
        var requestedBy = this.model.getRequestedBy();
        var createdAt = this.model.getCreatedAt();
        var metaStoryInfo = Element.newDiv("", {className: "metaInfo"});
        var requestdByInfo = "Requested";
        if (requestedBy) {
            requestdByInfo += ' by ' + requestedBy.getName().escapeHTML();
        }
        if (createdAt) {
            requestdByInfo += ' on ' + createdAt.asDateWithZone().asDisplayStringWithTime();
        }
        metaStoryInfo.appendChild(Element.newDiv(requestdByInfo, {className: "left"}));
        if (this.model.isEstimatable() || this.model.isEstimated()) {
            var estimateInfo = Element.newDiv("", {className: 'right infoSection'});
            if (!this._project.getPointScale().isCustom()) {
                var estimateIcon = this._createEstimateIcon();
                estimateIcon.addClassName("left");
                estimateInfo.appendChild(estimateIcon);
            }
            var pointsInfo = null;
            if (this.model.isEstimated()) {
                pointsInfo = (this.model.getEstimate() + " pt").pluralize(this.model.getEstimate());
            } else {
                pointsInfo = "Unestimated";
            }
            estimateInfo.appendChild(Element.newDiv(pointsInfo, {className: "left text"}));
            estimateInfo.appendChild(Element.newDiv("", {className: 'clear'}));
            metaStoryInfo.appendChild(estimateInfo);
        }
        var storyTypeInfo = Element.newDiv("", {className: 'right infoSection'});
        metaStoryInfo.appendChild(storyTypeInfo);
        storyTypeInfo.appendChild(new StoryTypeIconWidget(this.model, ".png", "left", "small").render());
        storyTypeInfo.appendChild(Element.newDiv(StringUtils.capitalize(this.model.getStoryType().getName()), {className: "left text"}));
        storyTypeInfo.appendChild(Element.newDiv("", {className: 'clear'}));
        metaStoryInfo.appendChild(Element.newDiv("", {className: 'clear'}));
        return metaStoryInfo;
    },_createFlyoverContentsDiv: function _createFlyoverContentsDiv() {
        return new StoryFlyoverWidget(this.model);
    }});
StoryLabelsWidget = Class.create(Widget, {initialize: function(labels, parentWidget, project) {
        this.super_init("StoryLabels", "labels");
        this._labels = labels;
        this.project = project;
        this.setParent(parentWidget);
    },_noteParentSet: function(parent) {
        this.parent = parent;
    },addClickableLabel: function(parentElement, labelString, className) {
        var escapedLabelString = labelString.escapeHTML();
        var onclickFunction = this.onLabelClick.bind(this, labelString);
        var options = {className: className,title: escapedLabelString,id: this.htmlId() + "_" + StringUtils.underscored(labelString) + "_label"};
        var labelElement = Element.newLinkToFunction(onclickFunction, options, escapedLabelString);
        parentElement.appendChild(labelElement);
    },render: function() {
        var labelsDiv = Element.newSpan('', {id: this.htmlId() + "_story[label_list]",className: "storyLabels"});
        this.renderedElement = labelsDiv;
        var labels = this._labels;
        var first_label = true;
        labels.each(function(label) {
            if (!first_label) {
                labelsDiv.appendChild(Element.newTextNode(', '));
            }
            this.addClickableLabel(labelsDiv, label, this.project.labelRepository.isEpicLabel(label) ? 'epic_label' : '');
            first_label = false;
        }.bind(this));
        if (first_label) {
            labelsDiv.addClassName("empty");
        }
        return this.renderedElement;
    },onLabelClick: function(label_string) {
        app.showPanelForLabel(label_string);
    },refresh: function() {
        var isUnderEdit = this.parent.isExpanded();
        if (isUnderEdit) {
            Element.hide(this.renderedElement);
        } else {
            Element.show(this.renderedElement);
        }
    },_destroy: function() {
        if (this.renderedElement) {
            this.j().remove();
            this.renderedElement = null;
        }
    }});
(function($) {
    function Widget(config) {
        this.wrapper = j("<div class='wrapper'></div>");
        this.element = j('<input class="labels" />').attr('name', "story[labels]");
        this.wrapper.append(this.element);
        this.element.labelWidget(config);
    }
    $.extend(Widget.prototype, {render: function render() {
            return this.wrapper[0];
        },labels: function labels(values) {
            return this.element.labelWidget("labels", values);
        }});
    this.StoryLabelsEditWidget = Widget;
}).call(window, jQuery);
(function($) {
    $.fn.labelWidget = function labelWidget(arg) {
        if (methods[arg]) {
            var methodArgs = Array.prototype.slice.call(arguments, 1);
            return methods[arg].apply(this, methodArgs);
        }
        else {
            return setup(this, arg);
        }
    };
    function isIpad() {
        return (/iphone|ipad/gi).test(navigator.appVersion);
    }
    var methods = {labels: function labels(values, disableSort) {
            if (values === undefined) {
                return this.val().squashSplit(',');
            }
            var sorted = values;
            var options = this.data('__widget__');
            if (!options) {
                return;
            }
            if (!disableSort) {
                sorted = values.sort();
            }
            var list = this.siblings('div.labels').find('ul').empty();
            $.each(sorted, function(i, label) {
                list.append(template.visibleLabel(label, options));
            });
            return this.val(sorted.join(','));
        },addLabel: function addLabel(label) {
            var addition = $.trim(label).toLowerCase();
            var existing = this.labelWidget('labels');
            var options = this.data('__widget__');
            var visibleInput = options.elements.visibleInput;
            var callback = options.callbacks.addLabel;
            if (addition.length) {
                if (options.limit) {
                    updateVisibleInput(options, [addition]);
                    this.labelWidget('labels', [addition]);
                    options.elements.container.find('ul li:first input').focus();
                } else if ($.inArray(addition, existing) == -1) {
                    this.labelWidget('labels', $.merge(existing, [addition]), true);
                }
                if (callback) {
                    callback.call(this, label);
                }
            }
            visibleInput.val('').autocomplete('search').autocomplete('close');
        },removeLabel: function removeLabel(label_value) {
            var options = this.data('__widget__');
            var callback = options.callbacks.removeLabel;
            this.labelWidget('labels', $.grep(this.labelWidget('labels'), function(label) {
                return label !== ("" + label_value);
            }));
            if (callback) {
                callback.call(this, label_value);
            }
            updateVisibleInput(options);
        }};
    $(document).on("panel:didResize panel:resize", "td.panel", function(e) {
        $('div.labels input.create', this).trigger('resized');
    });
    function setup(element, options) {
        if (!$.isArray(options.availableLabels())) {
            throw "availableLabels option must return an array";
        }
        if (!element.data('__widget__') === undefined) {
            throw "Reinitializing this is unsupported";
        }
        element.hide().after(template.ui(options.initialLabels).clone());
        $.extend(options, {elements: {hiddenInput: element,container: element.siblings('div.labels'),visibleInput: element.siblings('div.labels').find('input.create')},callbacks: {addLabel: options.addLabelCallback,removeLabel: options.removeLabelCallback}});
        if (!options.labelClassFunctor) {
            options.labelClassFunctor = function(label) {
                return app.project.labelRepository.isEpicLabel(label) ? 'epic_label' : '';
            }
        }
        if (options.readOnly) {
            options.elements.container.addClass("read-only").removeClass('saveable');
            options.elements.visibleInput.attr('disabled', true);
        }
        if (options.limit) {
            options.elements.container.addClass('limit');
        }
        createLocalBindings(options);
        addDelegators(options);
        attachAutocomplete(options);
        element.data('__widget__', options);
        element.labelWidget('labels', options.initialLabels);
        updateVisibleInput(options);
        return element;
    }
    function updateVisibleInput(options, labels) {
        var visibleInput = options.elements.visibleInput;
        if (options.limit) {
            labels || (labels = options.elements.hiddenInput.labelWidget('labels'));
            visibleInput.toggleClass('hidden', labels.length >= 1).attr('tabindex', labels.length >= 1 ? -1 : BaseWidget.MAGIC_TABINDEX);
        }
    }
    function attachAutocomplete(options) {
        var source = function filteredLabels(request, response) {
            response(j.ui.autocomplete.filter($.grep(options.availableLabels(), function(label) {
                return $.inArray(label, options.elements.hiddenInput.labelWidget('labels')) == -1;
            }), request.term));
        };
        options.elements.hiddenInput.data('autocompleteSource', source);
        options.elements.visibleInput.autocomplete({delay: 0,minLength: 0,source: source,position: {of: options.elements.container},appendTo: options.elements.visibleInput.closest('.wrapper'),open: function open(e, ui) {
                options.elements.container.addClass('active').siblings('ul.ui-autocomplete').width(options.elements.container.outerWidth() - 2);
            },close: function close(e, ui) {
                options.elements.container.removeClass('active');
            },select: function select(e, ui) {
                e.preventDefault();
                options.elements.hiddenInput.labelWidget('addLabel', ui.item.value);
                options.elements.visibleInput.val('');
                options.elements.visibleInput.attr('placeholder', '');
            }});
    }
    function createLocalBindings(options) {
        options.elements.container.on('widget:save', function(event) {
            var inputEmpty = options.elements.visibleInput.val() === '';
            if (!inputEmpty) {
                options.elements.hiddenInput.labelWidget('addLabel', options.elements.visibleInput.val());
                event.stopPropagation();
            }
        });
        options.elements.visibleInput.on('keydown', function(event) {
            var commandCharacters = [$.ui.keyCode.COMMA, $.ui.keyCode.ENTER, $.ui.keyCode.TAB];
            var inputEmpty = options.elements.visibleInput.val() === '';
            var tabOut = $.ui.keyCode.TAB === event.which && inputEmpty;
            if (event.which == 222) {
                event.stopImmediatePropagation();
                return false;
            }
            else if ($.inArray(event.which, commandCharacters) !== -1) {
                if (tabOut) {
                    return true;
                }
                options.elements.hiddenInput.labelWidget('addLabel', options.elements.visibleInput.val());
                options.elements.visibleInput.attr('placeholder', '');
                event.stopImmediatePropagation();
                return false;
            }
            if (((event.which === $.ui.keyCode.LEFT) || (event.which === $.ui.keyCode.BACKSPACE)) && inputEmpty) {
                $('li:last-child input', options.elements.container.find('ul')).focus();
                event.stopImmediatePropagation();
            }
            if (event.which === $.ui.keyCode.ESCAPE) {
                if (!options.elements.container.hasClass('active')) {
                    options.elements.visibleInput.data('autocomplete').term = '';
                }
                event.stopPropagation();
            }
        });
        var input = options.elements.visibleInput;
        var resizer = $('<span />').css({'position': 'relative','top': '-10000em','left': '-10000em','width': 'auto','fontSize': input.css('fontSize'),'fontFamily': input.css('fontFamily'),'fontWeight': input.css('fontWeight'),'letterSpacing': input.css('letterSpacing'),'whiteSpace': 'nowrap'});
        if (!isIpad()) {
            resizer.insertAfter(input);
        }
        if (!options.limit) {
            input.on('keyup change resized', function(event) {
                var container = options.elements.container;
                var pad = 20;
                var min = 100;
                var max = container.width() - pad;
                var value = input.val();
                resizer.text(value);
                var currentWidth = input.width();
                var resizerWidth = resizer.width() + (parseInt(input.css('fontSize')) * 3);
                var updatedWidth = (resizerWidth >= min) ? Math.min(resizerWidth, max) : min;
                var shouldResize = (updatedWidth < currentWidth && updatedWidth >= min) || (updatedWidth > min && updatedWidth < max) || currentWidth >= max || (updatedWidth == max && currentWidth < max);
                if (shouldResize) {
                    input.width(updatedWidth);
                }
            });
        }
        input.on('resized', function(event) {
            if (options.elements.container.hasClass('active')) {
                input.autocomplete('search');
            }
        });
    }
    function addDelegators(options) {
        options.elements.container.parent().on('click', 'div.labels', function() {
            options.elements.visibleInput.focus();
        });
        options.elements.container.on('click', 'li', function() {
            var callback = options.click || $.noop;
            callback($(this).attr('data-value'));
            return false;
        }).on('click', '.labels_dropdown_arrow', function() {
            options.elements.visibleInput.focus();
            options.elements.visibleInput.autocomplete('search');
            return false;
        }).on('click', 'a.remove', function() {
            options.elements.hiddenInput.labelWidget('removeLabel', $(this).parent().attr('data-value'));
            return false;
        }).on('focus', 'li', function(e) {
            $(this).addClass('active');
        }).on('blur', 'li', function() {
            $(this).removeClass('active');
        }).on('keydown', 'li', function(event) {
            if (event.which == $.ui.keyCode.DOWN) {
                options.elements.visibleInput.focus();
                options.elements.visibleInput.autocomplete('search');
                event.stopPropagation();
                event.preventDefault();
            }
        }).on('keydown', 'li input', function(event) {
            var li = $(this).closest('li');
            switch (event.which) {
                case $.ui.keyCode.LEFT:
                    li.prev().find('input').focus();
                    break;
                case $.ui.keyCode.RIGHT:
                    var next = li.next().find('input');
                    if (next.length) {
                        next.focus();
                    }
                    else {
                        options.elements.visibleInput.focus();
                    }
                    break;
                case $.ui.keyCode.BACKSPACE:
                    if (options.elements.visibleInput.val() === '') {
                        options.elements.visibleInput.focus();
                        options.elements.hiddenInput.labelWidget('removeLabel', li.data('value'));
                        event.preventDefault();
                        break;
                    }
            }
        });
    }
    var template = {ui: function(initialLabels) {
            var placeHolderText = (!initialLabels || initialLabels.length == 0) ? "Add a label" : '';
            return $('<div class="labels saveable"><span class="labels_dropdown_arrow"><img src="' + story_icon_path("labels_dropdown.png") + '"/></span><ul/>' + '<input type="text" placeholder="' + placeHolderText + '" class="create"  tabindex="10" spellcheck="false" /></div>');
        },visibleLabel: function item(label, options) {
            return '<li class="' + options.labelClassFunctor(label) + '" data-value="' + label + '" style="position:relative;">' + '<a class="text"><span class="label_text">' + Element.getDisplayLabel(label, options) + '</span></a>' + '<a class="remove"><span class="label_remove"></span></a>' + (isIpad() ? "" : '<input style="width:0;height:0;position:absolute;left:-10000em;" tabIndex="' + (options.limit ? "10" : "-1") + '"/></li>');
        }};
})(jQuery);
StoryPreviewWidget = Class.create(BasePreviewWidget, {initialize: function($super, story, project, itemListWidget, revealer) {
        $super(story, project, itemListWidget, revealer, "StoryPreview");
        this._subscribeToEvents();
        this._storyLabelsWidget = null;
        this.isShowingChange = false;
        this._pendingUpdateCount = 0;
        this.shortCutKeysDisabled = false;
        this._headerVisible = true;
    },_subscribeToEvents: function() {
        this.model.events.subscribe(this, "update", "statusChange", "startPendingUpdate", "stopPendingUpdate", "selectionUpdate", "highlight");
        this._subscribeToProjectIfNecessary();
    },_unsubscribeFromEvents: function() {
        this.model.events.unsubscribe(this, "update", "statusChange", "startPendingUpdate", "stopPendingUpdate", "selectionUpdate", "highlight");
        this.project.events.unsubscribe(this, "update");
    },isHeaderVisible: function() {
        return this._headerVisible;
    },_isSelected: function() {
        return this.project.isSelectedModel(this.model);
    },_subscribeToProjectIfNecessary: function() {
        var eventRegistry = this.project.events;
        if (this.model.isReleaseMarker()) {
            eventRegistry.subscribeAsync(this, "update");
        } else {
            eventRegistry.unsubscribe(this, "update");
        }
    },onUpdate: function(source) {
        if (source instanceof Project) {
            if (this.model.hasDeadline() && !this.model.isUnscheduled()) {
                this._refreshEditStuff(false);
            }
            return;
        }
        this._recreatePreviewWidget();
        this._subscribeToProjectIfNecessary();
    },_recreatePreviewWidget: function() {
        if (this.renderedElement) {
            this._updateClassName();
            this.iconsWidget.destroy();
            if (this._storyLabelsWidget) {
                this._storyLabelsWidget.destroy();
            }
            this._refreshPreviewElement();
            this._refreshEditStuff(false);
            this._recreateDraggable();
        }
    },_destroyEditWidget: function() {
        if (this.editWidget) {
            this.editWidget.destroy();
            this._clearEditWidget();
            this.editWidget = null;
        }
    },_destroy: function() {
        this._destroyEditWidget();
        if (this.iconsWidget) {
            this.iconsWidget.destroy();
        }
        if (this.buttonsWidget) {
            this.buttonsWidget.destroy();
        }
        if (this._storyLabelsWidget) {
            this._storyLabelsWidget.destroy();
        }
        this._unsubscribeFromEvents();
        if (this.renderedElement) {
            j(this.renderedElement).remove();
            this.renderedElement = null;
        }
        this.parent = null;
    },_noteParentSet: function(parent) {
        this.parent = parent;
    },_recreateDraggable: function() {
        this.itemListWidget.destroyDraggableContainedWidget(this);
        if (this.isDraggable() || this.isHoverable()) {
            this.itemListWidget.createDraggableContainedWidget(this);
        }
        this._refreshCursorForTitle();
    },showChange: function(opacity) {
        if (this.renderedElement) {
            if (opacity == 0.0) {
                this.elementsToFlash().css('backgroundColor', '');
                this.isShowingChange = false;
            } else {
                this.elementsToFlash().css('backgroundColor', Flash.calculateColor(opacity, this._originalBackgroundColor));
                this.isShowingChange = true;
            }
            this.afterShowChange(opacity);
        }
    },elementsToFlash: function elementToFlash() {
        return j(this.renderedElement);
    },afterShowChange: function afterShowChange(opacity) {
        this._updateClassName();
        if (this.editWidget) {
            this.editWidget.showChange(opacity);
        }
    },onStatusChange: function(story, opacity) {
        if (!this.hasRevealer()) {
            this.showChange(opacity);
        }
    },onStartPendingUpdate: function(story) {
        this._pendingUpdateCount++;
        if (this._pendingUpdateCount > 0 && this.iconsWidget) {
            this.iconsWidget.showSpinnerIcon();
        }
    },onStopPendingUpdate: function(story) {
        this._pendingUpdateCount--;
        if (this._pendingUpdateCount <= 0 && this.iconsWidget) {
            this.iconsWidget.hideSpinnerIcon();
        }
    },onSelectionUpdate: function(story) {
        if (this._isSelected()) {
            Element.addClassName(this.renderedElement, "selected");
        } else {
            Element.removeClassName(this.renderedElement, "selected");
        }
    },onHighlight: function(story) {
        j(this.renderedElement).removeClass('drag_highlight').effect("highlight", {}, 2000)
    },render: function() {
        var self = this;
        this.renderedElement = Element.newDiv('', {id: this.htmlId()});
        this._paint();
        j(this.renderedElement).click(this._onClick.bind(this)).on('dblclick', '.storyPreviewHeader', function() {
            self.onEditClick.apply(self, arguments);
        });
        return this.renderedElement;
    },dragGroupForStory: function(story) {
        var state = null;
        if (story.isAccepted()) {
            state = "Accepted";
        } else if (story.isActive()) {
            state = "Active";
        } else {
            state = "Inactive";
        }
        var type = story.isReleaseMarker() ? "Release" : "Story";
        return state + type;
    },getDragGroup: function() {
        return this.dragGroupForStory(this.model);
    },getDropGroup: function getDropGroup() {
        var dropGroup;
        if (this.model.isAccepted()) {
            dropGroup = "InvalidDropGroup";
        } else if (this.model.isActive()) {
            if (this.model.isReleaseMarker()) {
                var nextStory = this.model.getNextNonReleaseStory();
                if (nextStory && !nextStory.isActive()) {
                    dropGroup = "BoundaryStory";
                } else {
                    dropGroup = "ActiveStory";
                }
            } else {
                dropGroup = "ActiveStory";
            }
        } else {
            var prevStory = this.model.getPreviousStory();
            if (prevStory && prevStory.isActive() && this.model.isUnstarted()) {
                var prevWidget = this.parent.prevWidget(this);
                if (prevWidget && prevWidget.containedWidget.isIterationHeader) {
                    dropGroup = "InactiveStory"
                } else {
                    dropGroup = "BoundaryStory";
                }
            } else {
                dropGroup = "InactiveStory";
            }
        }
        return dropGroup;
    },_onClick: function(event) {
        var eventTarget = event.target;
        if (eventTarget && (eventTarget.tagName == "SELECT" || (eventTarget.tagName == "INPUT" && eventTarget.type == "file"))) {
            this.shortCutKeysDisabled = !this.shortCutKeysDisabled;
        } else {
            this.shortCutKeysDisabled = false;
        }
    },hasRevealButton: function() {
        return this.hasRevealer() && this.project.getStoryById(this.model.id()) != null
    },_paintTitleElement: function() {
        this.titleTextElement = Element.newDiv('', {id: this.getTitleHtmlId(),className: "storyPreviewText"});
        this._storyLabelsWidget = new StoryLabelsWidget(this.model.getLabels(), this, this.project);
        this.titleTextElement.appendChild(this._storyLabelsWidget.render());
        var title_span = Element.newSpan(this._getTitle(), {className: "story_name",cleanupText: true,breakUpLongWords: true});
        if (this.model.isOwned()) {
            title_span.appendChild(document.createTextNode(" ("));
            title_span.appendChild(this._getOwnerAcronymElement());
            title_span.appendChild(document.createTextNode(")"));
        }
        title_span.onselectstart = function() {
            return false
        };
        this._refreshCursorForTitle();
        this.titleTextElement.appendChild(title_span)
    },_refreshCursorForTitle: function() {
        this.titleTextElement.style.cursor = this.isDraggable() ? 'move' : "default";
    },_paint: function() {
        this._updateClassName();
        this._paintPreviewElement();
        this.renderedElement.appendChild(this.storyHeader);
        this.detailElement = Element.create("div", {className: "storyDetailElement"});
        this.renderedElement.appendChild(this.detailElement);
        this._setOriginalBackground();
    },_refreshPreviewElement: function() {
        j(this.storyHeader).remove();
        this._paintPreviewElement();
        this.renderedElement.insertBefore(this.storyHeader, this.detailElement);
    },_paintPreviewElement: function() {
        this.storyHeader = Element.create("div", {className: 'storyPreviewHeader'});
        if (!this.model.isNew()) {
            if (this.project.config.allowStorySelection) {
                this.renderStorySelector();
            }
            var readOnly = this.isReadOnly();
            this.buttonsWidget = new StoryButtonsWidget(this.model, this.project, this, readOnly);
            var buttonsElement = this.buttonsWidget.render();
            this.storyHeader.appendChild(buttonsElement);
            if (this.hasRevealButton()) {
                this.revealLink = Element.newLinkToFunction(this.onRevealClick.bind(this), {className: "revealLink reveal",title: "Reveal"}, '');
                buttonsElement.appendChild(this.revealLink);
            }
        }
        this.iconsWidget = new StoryIconsWidget(this.model, this.project, this, document.body);
        this.storyHeader.appendChild(this.iconsWidget.render());
        this._paintTitleElement();
        this.storyHeader.appendChild(this.titleTextElement);
    },renderStorySelector: function() {
        var storySelectorDiv = Element.newDiv('&nbsp;', {className: 'storySelector notDblclickable',unselectable: 'on'});
        j(storySelectorDiv).on('click', j.proxy(this.onSelectClick, this));
        this.storyHeader.appendChild(storySelectorDiv);
    },_onStoryTitleEnter: function() {
    },onTitleClickClearText: function() {
        if (this.value == "Enter new story title here") {
            this.value = "";
        }
    },_getTitle: function() {
        return this.model.getName() || "";
    },_getOwnerAcronymElement: function() {
        var ownedby = this.model.getOwnedBy();
        return Element.newLinkToFunction(function() {
            app.showSearchFor("mywork:" + ownedby.getInitials())
        }, {title: ownedby.getName(),className: "storyOwnerInitials"}, ownedby.getInitials().escapeHTML());
    },getTitleHtmlId: function() {
        return this.htmlId() + "_details";
    },getNextSiblingId: function() {
        return (this.project.findStoryAfter(this.model)).id();
    },onSelectClick: function(event) {
        if (this._isSelected()) {
            this.itemListWidget.unselectStory(this.model);
        } else {
            if ((event && event.shiftKey) || (window.event && window.event.shiftKey)) {
                this.itemListWidget.selectRange(this.model);
            } else {
                this.itemListWidget.selectStory(this.model);
            }
        }
    },onEditClick: function(event) {
        if (this.model.isUnsaved()) {
            return;
        }
        if (j(event.currentTarget).is('.notDblclickable')) {
            return;
        }
        if (this.isExpanded()) {
            if (this.isReadOnly())
                this.collapse();
            else
                this._fireClickAndCollapse();
        } else {
            this.expand();
        }
    },_fireClickAndCollapse: function() {
        this.collapse();
    },expand: function() {
        var t = new Date();
        this._expanded = true;
        this._refreshEditStuff();
        this.scrollToVisible();
        this._headerVisible = false;
        Tracker.Analytics.trackTimedEvent('uiActions', 'expandStory', t, new Date());
    },collapse: function() {
        this._closeFullPageViewIfPresent('full_story');
        this._expanded = false;
        this._refreshEditStuff();
        this._recreateDraggable();
        this._headerVisible = true;
        j(this.renderedElement).trigger('story:didCollapse').trigger('panel:resize');
    },removeFromItemList: function($super, id) {
        this._closeFullPageViewIfPresent('full_story');
        $super(id);
    },paintEditWidget: function() {
        if (this.editWidget.renderedElement) {
            this.detailElement.appendChild(this.editWidget.renderedElement);
        } else {
            this._clearEditWidget();
            this.detailElement.appendChild(this.editWidget.render());
            this.editWidget.afterAddedToDom();
        }
    },_clearEditWidget: function() {
        j(this.detailElement).empty().removeData().off();
    },_openStoryDetailsWidget: function(repaintDetails) {
        if (repaintDetails == undefined) {
            repaintDetails = true;
        }
        this._updateClassNamesOnOpen();
        if (!this.editWidget) {
            this.editWidget = new StoryDetailsWidget(this.model, this);
        }
        j(this.storyHeader).hide();
        if (repaintDetails) {
            this.paintEditWidget();
        }
        this._disableDraggable();
        j(this.renderedElement).trigger('details:didExpand').trigger('panel:resize');
    },_closeStoryDetailsWidget: function() {
        this._updateClassNamesOnClose();
        this._destroyEditWidget();
        if (!this._headerVisible) {
            j(this.storyHeader).show();
        }
    },_updateClassName: function() {
        if (this.isExpanded()) {
            this._updateClassNamesOnOpen();
        } else {
            this._updateClassNamesOnClose();
        }
    },_refreshEditStuff: function(repaintDetails) {
        if (this.isExpanded()) {
            this._openStoryDetailsWidget(repaintDetails);
        } else {
            this._closeStoryDetailsWidget();
        }
        this._refreshButtonsWidget();
        if (this.iconsWidget) {
            this.iconsWidget.refresh();
        }
        if (this._storyLabelsWidget) {
            this._storyLabelsWidget.refresh();
        }
    },scrollToVisible: function() {
        var widgetHeight = this.getDimensions().height;
        var absoluteTopOfWidget = this.getAbsolutePosition().y;
        var absoluteBottomOfWidget = absoluteTopOfWidget + widgetHeight;
        var panelHeight = this.itemListWidget.getDimensions().height;
        var absoluteTopOfPanel = this.itemListWidget.getAbsolutePosition().y;
        var absoluteBottomOfPanel = panelHeight + absoluteTopOfPanel;
        var belowBottomOfPanel = absoluteBottomOfWidget - absoluteBottomOfPanel;
        var belowTopOfPanel = absoluteTopOfWidget - absoluteTopOfPanel;
        if (belowBottomOfPanel > 0) {
            this.itemListWidget.scrollBy(Math.min(belowBottomOfPanel, belowTopOfPanel));
        }
    },getDomElement: function() {
        return this.renderedElement;
    },_refreshButtonsWidget: function() {
        if (this.buttonsWidget != null) {
            this.buttonsWidget.showEditIcons(!this.isExpanded());
        }
    },_attachClassNames: function(classNames) {
        if (this.renderedElement) {
            this.renderedElement.className = classNames.join(" ");
        }
    },_initializeClassNames: function() {
        var classNames = ["draggableItem", "storyItem", "story_item_" + this.model.getId()];
        classNames.push(this.model.getCurrentState());
        if (this.project.allowsEstimationOf(this.model.getStoryType()) && this.model.isUnestimated()) {
            classNames.push("unestimatedText");
        }
        if (this._isSelected()) {
            classNames.push("selected");
        }
        if (this.isReadOnly()) {
            classNames.push("readOnly");
        }
        return classNames;
    },_updateClassNamesOnOpen: function() {
        var classNames = this._initializeClassNames();
        classNames.push("underEdit");
        return this._attachClassNames(classNames);
    },_updateClassNamesOnClose: function() {
        var classNames = this._initializeClassNames();
        classNames.push("notUnderEdit");
        if (this.model.isReleaseMarker()) {
            if (this.model.isAccepted()) {
                classNames.push("releaseMarkerAccepted");
            } else if (this.model.isPastDeadline()) {
                classNames.push("releaseMarkerPastDeadline");
            } else {
                classNames.push("releaseMarkerNotAccepted");
            }
        }
        else if (this.isHoverable() && !this.isShowingChange) {
            classNames.push("hoverable");
        }
        return this._attachClassNames(classNames);
    },isHoverable: function() {
        return !this.isExpanded() && !this.isReadOnly() && !this.isInSearchPanel() && !this.isInMyWorkPanel() && !this.model.isBeingCreated() && (this.model.isUnstarted() || this.model.isUnscheduled() || this.model.isActive());
    },isDraggable: function() {
        return !this.isExpanded() && !this.isReadOnly() && !this.isInReleasePanel() && !this.model.isBeingCreated() && (this.model.isUnsaved() || this.model.isUnstarted() || this.model.isUnscheduled() || this.model.isActive());
    },getPanelHtmlId: function() {
        return this.itemListWidget.getPanelHtmlId();
    },getStoryId: function() {
        return this.model.id();
    },getStory: function() {
        return this.model;
    },getMoveAfterStory: function(project) {
        return this.model.getPreviousStory();
    },getMoveBeforeStory: function(project) {
        return this.model;
    },getProject: function() {
        return this.project;
    },notifyDroppedOn: function(targetWidget, options) {
        var containedWidget = targetWidget.containedWidget;
        if (containedWidget && containedWidget.model && containedWidget.model.getType && containedWidget.model.getType() == "epic") {
            new EpicController(this.project).handleStoryDrop(this, containedWidget);
        } else {
            var prevWidget = targetWidget.parent.prevWidget(targetWidget);
            new StoryController(this.project).handleDragDrop(this, prevWidget, targetWidget, options);
        }
    },isReadOnly: function isReadOnly() {
        return this.project.isReadOnly() || this.model.isBeingCreated();
    },additionalHoverClass: function() {
        return this.model.isReleaseMarker() ? 'dark' : '';
    },prevWidget: function() {
        return this.parent.prevWidget();
    },nextWidget: function() {
        return this.parent.nextWidget();
    }});
Object.extend(StoryPreviewWidget.prototype, Widget.PanelModule);
StoryTypeBreakdownChart = Class.create();
StoryTypeBreakdownChart.prototype = Object.extend(new AbstractChart(), {initialize: function(project) {
        this.super_init(project);
        this.typeSelectionWidget = new StoryTypeSelectionWidget(this);
    },getTitle: function() {
        return "Story Type Breakdown";
    },getDescription: function() {
        return "The Story Type Breakdown chart shows the number of stories accepted for done iterations, broken down by story type.  The number of points completed is also shown.  You can hide or show each of the story types using the checkboxes below the chart.  You can also decide whether to stack the data. using the Stack checkox.";
    },getBusinessSummary: function() {
        if (this.pointsValues.length > 1) {
            var featuresPerIterationString = Math.round(10 * this.featureCount / this.iterationCount) / 10;
            var choresPerIterationString = Math.round(10 * this.choreCount / this.iterationCount) / 10;
            var bugsPerIterationString = Math.round(10 * this.bugCount / this.iterationCount) / 10;
            return "In the average iteration, " + featuresPerIterationString + " features, " + choresPerIterationString + " chores, and " + bugsPerIterationString + " bugs are accepted.";
        } else {
            return "";
        }
    },myRender: function() {
        this.chartElement.appendChild(Element.newDiv("Story Count, Points Accepted", {className: "chartYAxisLabel"}));
        this.chartElement.appendChild(this.container);
        this.chartElement.appendChild(Element.newDiv("Iteration", {className: "chartXAxisLabel"}));
        this.renderedElement.appendChild(this.typeSelectionWidget.render());
    },_calculate: function() {
        this._calculating = true;
        var doneIterations = this._project.getVisibleDoneIterations();
        this.iterationCount = doneIterations.length;
        this.horizontalLabels = [];
        var MAX_LABELS = 15;
        var targetHorizontalLabelCount = doneIterations.length <= MAX_LABELS ? doneIterations.length : MAX_LABELS;
        var iterationsPerHorizontalLabel = Math.round(doneIterations.length / targetHorizontalLabelCount);
        this.horizontalLabels.push("");
        for (var i = 0; i < doneIterations.length; i++) {
            if (i % iterationsPerHorizontalLabel == 0) {
                this.horizontalLabels.push(doneIterations[i].getNumber());
            } else {
                this.horizontalLabels.push("");
            }
        }
        var theory = this._project.getTheory();
        this.featureValues = [0];
        this.featureCount = 0;
        this.choreValues = [0];
        this.choreCount = 0;
        this.bugValues = [0];
        this.bugCount = 0;
        this.pointsValues = [0];
        doneIterations.each(function(iteration) {
            var completed = iteration.getVelocity().getCompleted();
            this.pointsValues.push(completed);
            var featureCount = iteration.getFeatureCount();
            this.featureValues.push(featureCount);
            this.featureCount += featureCount;
            var choreCount = iteration.getChoreCount();
            this.choreValues.push(choreCount);
            this.choreCount += choreCount;
            var bugCount = iteration.getBugCount();
            this.bugValues.push(bugCount);
            this.bugCount += bugCount;
        }.bind(this));
    },myPaint: function() {
        if (this.pointsValues.length <= 1) {
            return;
        }
        this.chart.setHorizontalLabels(this.horizontalLabels);
        var xDensity = this.horizontalLabels.length;
        var yDensity = 20;
        this.chart.setGridDensity(xDensity, yDensity);
        this.chart.setShowLegend(true);
        this.chart.setVerticalRange(0, 20);
        var shouldStack = this.typeSelectionWidget.shouldStack();
        var seriesType = shouldStack ? CHART_AREA | CHART_STACKED : CHART_AREA;
        if (this.typeSelectionWidget.shouldIncludeFeatures()) {
            this.chart.add('Features', '#0000CC', this.featureValues.copy(), seriesType);
        }
        if (this.typeSelectionWidget.shouldIncludeChores()) {
            this.chart.add('Chores', '#000000', this.choreValues.copy(), seriesType);
        }
        if (this.typeSelectionWidget.shouldIncludeBugs()) {
            this.chart.add('Bugs', '#DD0000', this.bugValues.copy(), seriesType);
        }
        this.chart.add('Points', '#FFCC33', this.pointsValues.copy(), CHART_LINE);
        this.chart.draw();
    }});
StoryTypeSelectionWidget = Class.create();
StoryTypeSelectionWidget.prototype = Object.extend(new Widget(), {initialize: function(parent) {
        this.setParent(parent);
    },_noteParentSet: function(parent) {
        this._parent = parent;
    },render: function() {
        this.renderedElement = Element.newDiv(null, {className: "storyTypeBreakdownChartTypeSelection"});
        var tableElement = Element.newTable(2, 7, {});
        tableElement.rows[0].cells[0].appendChild(Element.newDiv("Include:", {className: "chartText"}));
        this.featureCheckbox = Element.newCheckbox("shouldIncludeType", StoryType.FEATURE.getName(), true, this._repaint.bind(this));
        tableElement.rows[0].cells[1].appendChild(this.featureCheckbox);
        tableElement.rows[0].cells[2].appendChild(Element.newDiv("Features", {className: "chartTextFeature"}));
        this.choreCheckbox = Element.newCheckbox("shouldIncludeType", StoryType.CHORE.getName(), true, this._repaint.bind(this));
        tableElement.rows[0].cells[3].appendChild(this.choreCheckbox);
        tableElement.rows[0].cells[4].appendChild(Element.newDiv("Chores", {className: "chartTextChore"}));
        this.bugCheckbox = Element.newCheckbox("shouldIncludeType", StoryType.BUG.getName(), true, this._repaint.bind(this));
        tableElement.rows[0].cells[5].appendChild(this.bugCheckbox);
        tableElement.rows[0].cells[6].appendChild(Element.newDiv("Bugs", {className: "chartTextBug"}));
        tableElement.rows[1].cells[0].appendChild(Element.newDiv("Stack?", {className: "chartText"}));
        this.stackCheckbox = Element.newCheckbox("stack", "true", false, this._repaint.bind(this));
        tableElement.rows[1].cells[1].appendChild(this.stackCheckbox);
        this.renderedElement.appendChild(tableElement);
        return this.renderedElement;
    },_repaint: function() {
        this._parent.paint();
    },shouldStack: function() {
        return this.stackCheckbox.checked;
    },shouldIncludeFeatures: function() {
        return this.featureCheckbox.checked;
    },shouldIncludeChores: function() {
        return this.choreCheckbox.checked;
    },shouldIncludeBugs: function() {
        return this.bugCheckbox.checked;
    }});
StoryTypeIconWidget = Class.create();
StoryTypeIconWidget.prototype = Object.extend(new Widget(), {initialize: function(story, suffix, iconClass, size) {
        this.super_init("StoryTypeIcon", "icon");
        this._story = story;
        this._suffix = suffix || ".png";
        this._iconClass = iconClass || "storyTypeIcon";
        this._size = size ? "_" + size : "";
    },render: function() {
        return Element.newImage(StoryIconHelper.getStoryTypeIconPath(this._story, this._suffix), {className: this._iconClass});
    }});
ReloadPopupWidget = Class.create(Widget, {initialize: function(reloadCaller, message) {
        this.super_init("reloadPopup", "reloadPopup");
        this._popup = null;
        this._message = message;
        this._reloadCaller = reloadCaller;
    },render: function() {
        this.renderedElement = Element.newDiv('', {id: this.htmlId() + '_reload_popup_widget'});
        this.paint();
        return this.renderedElement;
    },paint: function() {
        var messageContainer = Element.newDiv("", {className: "messageContainer"});
        messageContainer.appendChild(Element.newDiv(this._message));
        messageContainer.appendChild(Element.newDiv("Please click 'OK' to reload Tracker."));
        this.renderedElement.appendChild(messageContainer);
        var okButtonContainer = Element.newDiv("", {className: 'okButtonContainer'});
        okButtonContainer.appendChild(Element.newButton(" Ok ", this.reload.bind(this), {id: this.htmlId() + "_ok_button",className: 'okButton'}));
        this.renderedElement.appendChild(okButtonContainer);
    },reload: function() {
        this.hidePopup();
        if (this._reloadCaller) {
            this._reloadCaller.reload();
        }
    },hidePopup: function() {
        this._popup.hide();
        Element.remove($(this.htmlId()));
    },showPopup: function() {
        var placement = Pivotal.Placement.CENTER_IN_WINDOW;
        this._popup = new Pivotal.Popup(this.htmlId(), {placement: placement,popupCssClass: 'timeoutPopup',maskBackgroundColor: "black",scrollableElementIds: Layout.SCROLLABLE_ELEMENT_IDS});
        var myself = this.render();
        $(this.htmlId()).appendChild(myself);
        this._popup.showPopupWithMask();
    },htmlId: function() {
        return "timeout_popup";
    }});
VelocityChart = Class.create();
VelocityChart.prototype = Object.extend(new AbstractChart(), {initialize: function(project) {
        this.super_init(project);
    },getTitle: function() {
        return "Velocity";
    },getDescription: function() {
        return "The Velocity chart shows the accepted point count for done iterations." + "<ul><li>The X-axis shows the iteration number.</li>" + "<li>The Y-axis shows the accepted story point count.</li>" + "<li>The 'Actual' bars show the number of points completed in each done iteration.</li>" + "<li>The 'Running Velocity' line shows the velocity as calculated at the time of the done iteration.</li>" + "<li>The 'Mean' line shows the mean (average) velocity calculated over all done iterations.</li></ul>";
    },getBusinessSummary: function() {
        if (this.actualValues.length > 1) {
            return "Over the project's visible history, the mean (average) Velocity is " + (Math.round(10 * this.overallMean) / 10) + "." + " The standard deviation is " + (Math.round(10 * this.standardDeviation) / 10) + "." + " The volatility is " + (Math.round(10 * this.volatility) / 10) + "%.";
        } else {
            return "";
        }
    },myRender: function() {
        this.chartElement.appendChild(Element.newDiv("Points accepted", {className: "chartYAxisLabel"}));
        this.chartElement.appendChild(this.container);
        this.chartElement.appendChild(Element.newDiv("Iteration", {className: "chartXAxisLabel"}));
    },_calculate: function() {
        var doneIterations = this._project.getVisibleDoneIterations();
        this.horizontalLabels = [];
        var MAX_LABELS = 15;
        var targetHorizontalLabelCount = doneIterations.length <= MAX_LABELS ? doneIterations.length : MAX_LABELS;
        var iterationsPerHorizontalLabel = Math.round(doneIterations.length / targetHorizontalLabelCount);
        this.horizontalLabels.push("");
        for (var i = 0; i < doneIterations.length; i++) {
            if (i % iterationsPerHorizontalLabel == 0) {
                this.horizontalLabels.push(doneIterations[i].getNumber());
            } else {
                this.horizontalLabels.push("");
            }
        }
        var theory = this._project.getTheory();
        this.maximum = 0;
        this.actualValues = [0];
        this.runningVelocityValues = [0];
        for (var i = 0; i < doneIterations.length; i++) {
            var completed = doneIterations[i].getVelocity().getCompleted();
            this.actualValues.push(completed);
            if (this.maximum < completed) {
                this.maximum = completed;
            }
            var noDataFunctor = function() {
                return completed;
            };
            var derived = theory.deriveFrom(doneIterations.slice(0, i), noDataFunctor);
            this.runningVelocityValues.push(derived);
            if (this.maximum < derived) {
                this.maximum = derived;
            }
        }
        this.overallMean = this.mean();
        this.meanValues = [];
        for (var i = 0; i < this.actualValues.length; i++) {
            this.meanValues.push(this.overallMean);
        }
        var sumOfSquares = 0;
        this.actualValues.each(function(value) {
            var differenceFromMean = value - this.overallMean;
            sumOfSquares += Math.pow(differenceFromMean, 2);
        }.bind(this));
        var variance = sumOfSquares / this.actualValues.length;
        this.standardDeviation = Math.pow(variance, 0.5);
        this.volatility = this.overallMean == 0 ? 0 : 100 * this.standardDeviation / this.overallMean;
    },myPaint: function() {
        if (this.actualValues.length <= 1) {
            return;
        }
        this.chart.setHorizontalLabels(this.horizontalLabels);
        var xDensity = this.horizontalLabels.length;
        var yDensity = this.maximum + 1 > 20 ? 20 : this.maximum + 1;
        this.chart.setGridDensity(xDensity, yDensity);
        this.chart.setShowLegend(true);
        this.chart.setVerticalRange(0, this.maximum);
        this.chart.add('Actual', '#A0C1D6', this.actualValues, CHART_BAR);
        this.chart.add('Running Velocity', '#000000', this.runningVelocityValues, CHART_LINE);
        this.chart.add('Mean', '#0000BB', this.meanValues, CHART_LINE);
        this.chart.setBarWidth(-5);
        this.chart.draw();
    },mean: function() {
        var total = 0;
        var actualValuesCount = this.actualValues.length;
        if (actualValuesCount < 2) {
            return 0;
        }
        for (var i = 1; i < actualValuesCount; i++) {
            total += this.actualValues[i];
        }
        return total / (actualValuesCount - 1);
    }});
VelocityWidget = Class.create();
VelocityWidget.prototype = Object.extend(new Widget(), {initialize: function(project) {
        this.super_init("Velocity", "velocity");
        this.project = project;
        project.events.subscribeAsync(this, "update");
    },render: function() {
        var topRow = new Element("tr").insert(this._createVelocityLabelCell()).insert(this._createCurrentVelocityCell());
        this._createOverrideBalloon().attachTo(topRow);
        return new Element("table", {id: "projectStatus",className: "projectStatusTable"}).insert(new Element("tbody").insert(topRow));
    },onUpdate: function(project) {
        this._reloadVelocityText();
    },apply: function(serializedForm) {
        this.project.overrideTheory(new FixedTheory(parseInt(serializedForm.velocity_override)));
    },revert: function() {
        if (this.project.isVelocityOverridden()) {
            this.project.revertTheory();
        }
    },reset: function(balloon) {
        balloon.contents.select("input[name=velocity_override]")[0].value = this._getVelocityText();
    },validator: function(serializedForm) {
        var value = parseInt(serializedForm.velocity_override);
        return (isNaN(value) || value <= 0) ? [{name: 'velocity_override',message: 'Must be greater than zero'}] : null;
    },appendToElement: function(element) {
        if (element != null) {
            element.appendChild(this.render());
        }
    },_createOverrideBalloon: function(trigger) {
        return new FormBalloon({description: "<p>Use this to experiment with different velocities.</p><p>Iterations in Current and Backlog will be temporarily recalculated based on the velocity you enter. No other user will see your overridden velocity.</p>",width: 200,builder: this._buildOverride.bind(this),onApply: this.apply.bind(this),onRevert: this.revert.bind(this),onReset: this.reset.bind(this),positionAdjustment: {horizontal: 0,vertical: -6},validator: this.validator.bind(this)});
    },_createVelocityLabelCell: function() {
        return new Element("td", {className: "velocityLabel"}).insert('velocity');
    },_createCurrentVelocityCell: function() {
        this.currentVelocityElement = new Element("div", {className: 'projectVelocity',id: this.htmlId() + '_projectVelocity'}).insert(this._getVelocityText());
        return new Element("td").insert(this.currentVelocityElement);
    },_getVelocityText: function() {
        return this.project.getProjectedCapacity();
    },_getTheoryText: function() {
        return this.project.getTheory().getDisplayText();
    },_reloadVelocityText: function() {
        this.currentVelocityElement.innerHTML = this._getVelocityText();
    },_buildOverride: function() {
        var contents = new Element('div', {className: "override_velocity"});
        contents.update('<p>' + this._getTheoryText() + '</p>' + '<label>Override Velocity:</label>' + '<input type="text" name="velocity_override" />' + '<span>pts.</span>');
        return contents;
    }});
HintsWidget = Class.create();
HintsWidget.prototype = Object.extend(new Widget(), {initialize: function(project, hintSuggester) {
        this.super_init("Hints", "hints");
        this.project = project;
        this.hintSuggester = hintSuggester;
        this.project.events.subscribeAsync(this, "historyUpdate");
        this._isShowing = false;
        this.hintsDisabled = false;
    },render: function() {
        this.element = new Element("div", {style: 'display:none',id: 'hint'});
        this.messageElement = new Element("div", {className: 'message'});
        var icon = Element.newImage(story_icon_path("lightbulb.png"), {className: 'icon',width: "28",height: "28"});
        this.disableHints = Element.newCheckbox('disableHints', null, true, this._disableHints.bind(this)).addClassName('hint-disabler');
        this.disableMessage = Element.newSpan('Show hints', {className: 'hint-label'});
        j(this.disableMessage).click(this._disableHints.bind(this));
        this.element.appendChild(this.messageElement);
        this.element.appendChild(icon);
        this.element.appendChild(this.createCloseButton());
        var disableHintsElement = Element.newDiv("");
        this.element.appendChild(disableHintsElement);
        disableHintsElement.appendChild(this.disableHints);
        disableHintsElement.appendChild(this.disableMessage);
        this.disableHints.setAttribute("checked", "checked");
        return this.element;
    },createCloseButton: function() {
        var img = new Element('img', {src: images_root_path('application/icons/close_button_overlay.png'),'class': 'close_button'});
        img.setAttribute('onmouseout', "this.src='" + images_root_path('application/icons/close_button_overlay.png') + "'");
        img.setAttribute('onmouseover', "this.src='" + images_root_path('application/icons/close_button_overlay_hover.png') + "'");
        j(img).click(this._handleCloseButton.bind(this));
        return img;
    },_handleCloseButton: function() {
        Effect.Fade(this.element);
        this._isShowing = false;
    },_disableHints: function() {
        this._handleCloseButton();
        this.project.events.unsubscribe(this, "historyUpdate");
        this.hintsDisabled = true;
        app._serverProxy.sendAjaxRequest('/profile/update_non_secured', "person[show_hints]=false&authenticity_token=" + encodeURIComponent(AUTH_TOKEN), "PUT", {});
    },appendToElement: function(element) {
        if (element != null) {
            element.appendChild(this.render());
        }
    },showHint: function() {
        if (this.isScreencastShowing() || this.hintsDisabled) {
            return;
        }
        var previousHint = this.hint;
        this.hint = this.hintSuggester.makeSuggestion();
        if (this.hint == previousHint) {
            return;
        }
        if (this.hint) {
            if (!this.element) {
                this.render();
            }
            if (!this._isShowing) {
                this.messageElement.innerHTML = this.hint.getHintText();
                Effect.Appear(this.element);
                this._isShowing = true;
            } else {
                Effect.Fade(this.element, {duration: 0.75});
                setTimeout(function() {
                    this.messageElement.innerHTML = this.hint.getHintText();
                    Effect.Appear(this.element, {duration: 0.5})
                }.bind(this), 1500);
            }
        } else {
            Effect.Fade(this.element);
            this._isShowing = false;
            this.hint = null;
        }
    },isShowing: function() {
        return this._isShowing;
    },isScreencastShowing: function() {
        return $('tutorial_popup') && $('tutorial_popup').visible();
    },onHistoryUpdate: function(project) {
        this.showHint();
    }});
HistoricalBurnDownChartWidget = Class.create(BaseWidget, {initialize: function initialize($super, project) {
        $super(project);
        this._serverProxy = new ServerProxy();
    },getJsonUrl: function getJsonUrl() {
        return '/projects/' + this.project.getId() + '/story_snapshots';
    },fetch: function fetch() {
        var loading_spinner = this.j('.loading_spinner');
        loading_spinner.show();
        if (this._serverProxy.currentAjaxRequest) {
            this._serverProxy.abort();
        }
        this._serverProxy.sendAjaxRequest(this.getJsonUrl(), {}, 'get', {onSuccess: function(data) {
                this._data = data;
                this.updateDynamicValues();
                loading_spinner.hide();
            }.bind(this),onFailure: function(data) {
                loading_spinner.hide();
            },onConnectivityFailure: function() {
                loading_spinner.hide();
            }});
    },paint: function paint() {
        return "<div style='position: absolute; bottom: 0; left: 0; z-index: 10000; border-radius: 6px; padding: 5px; background: rgba(128,128,128,0.5)' class='historical_chart_container'>" + "<div style='width: 900px; height: 400px;'>" + "<div class='highchart'></div>" + "<span class='loading_spinner' style='position: absolute; display: none; border: 2px solid #999; border-radius: 10%; z-index: 3001; width: 40px; height: 40px; top: 50%; margin-top: -20px; left: 50%; margin-left: -20px; opacity: 0.9; background: #eee url(" + story_icon_path('ajax-loader.gif') + ") scroll no-repeat center center'></span>" + "</div>" + "</div>";
    },updateDynamicValues: function updateDynamicValues() {
        if (!this.canFetchData()) {
            return;
        }
        if (this._data) {
            this.renderChart();
        } else {
            this.fetch();
        }
    },getTitle: function getTitle() {
        return "Project Burn-Down";
    },canFetchData: function canFetchData() {
        return true;
    },initFakeHighchartsIfNeeded: function initFakeHighchartsIfNeeded() {
        if (!window.Highcharts) {
            window.Highcharts = {Chart: function() {
                    window.console && console.log("No highcharts installed :-(");
                    return null;
                },setOptions: j.noop,fake: true};
        }
    },renderChart: function renderChart() {
        var serieses = [];
        this.initFakeHighchartsIfNeeded();
        $H(this._data).each(function(pair, z) {
            var taken_on = Date.parse(pair.key.replace(/\-/g, "/")), points = pair.value;
            $H(points).each(function(pair, i) {
                var state = pair.key, sum = pair.value;
                if (!serieses[i]) {
                    serieses[i] = {name: state.capitalize(),data: []};
                }
                serieses[i]['data'].push([taken_on, sum]);
            });
        });
        if (this._chart && !Highcharts.fake) {
            if (serieses.length > 0) {
                serieses.each(function(series, idx) {
                    var oldSeries = this._chart.series[idx];
                    if (oldSeries) {
                        oldSeries.setData(series.data, false);
                    } else {
                        this._chart.addSeries(series, false);
                    }
                }.bind(this));
            } else {
                this._chart.series.each(function(series) {
                    series.setData([], false);
                });
            }
            this._chart.setTitle({text: this.getTitle()});
            this._chart.redraw();
        } else {
            Highcharts.setOptions({global: {useUTC: false}});
            this._chart = new Highcharts.Chart({chart: {renderTo: this.j(".highchart").get(0),defaultSeriesType: 'area',spacingRight: 20},plotOptions: {area: {stacking: 'normal'}},title: {text: this.getTitle()},xAxis: {type: 'datetime',tickInterval: 24 * 3600 * 1000},yAxis: {title: {text: "Points"}},colors: ['#DAEBCF', '#F6AF1C', '#416e9b', '#c3c3a1', '#C23456', '#E0E0E0', '#E3EFF7'],series: serieses});
        }
    }});
HistoricalIterationBurnDownChartWidget = Class.create(HistoricalBurnDownChartWidget, {initialize: function initialize($super, project) {
        $super(project);
        this._iteration = project.getCurrentIteration();
    },configuration: function configuration() {
        return {delegateEvents: {"change select.iterations": "onIterationChanged"}}
    },canFetchData: function canFetchData() {
        return !!this._iteration;
    },getJsonUrl: function getJsonUrl() {
        return '/projects/' + this.project.getId() + '/iterations/' + this._iteration.getStart().toYYYYMD() + '/story_snapshots';
    },paint: function paint($super) {
        var parentH = j($super());
        var h = j("<div><select class='iterations'></select></div>");
        var currentIterationNumber = this.project.getCurrentIteration().getNumber();
        this.project.getIterations().each(function(iteration) {
            if (iteration.getNumber() > currentIterationNumber + 2 || iteration.getNumber() < currentIterationNumber - 2) {
                return;
            }
            var text = "Iteration " + iteration.getNumber();
            if (iteration.getNumber() == currentIterationNumber) {
                text += " (current)";
            }
            h.find("select").append(j("<option></option>", {value: iteration.getNumber(),selected: this._iteration == iteration}).text(text));
        }.bind(this));
        parentH.prepend(h);
        return parentH.get(0);
    },getTitle: function() {
        return "Iteration " + this._iteration.getNumber() + " Burn-Down";
    },onIterationChanged: function() {
        this._data = undefined;
        this._iteration = this.project.getIterationByNumber(this.j("select.iterations").val());
        this.updateDynamicValues();
    }});
HistoricalLabelBurnDownChartWidget = Class.create(HistoricalBurnDownChartWidget, {initialize: function initialize($super, project) {
        $super(project);
        this._labelName = project.getLabelNames()[0];
    },configuration: function configuration() {
        return {delegateEvents: {"change select.labels": "onLabelChanged"}}
    },canFetchData: function canFetchData() {
        return !!this._labelName;
    },getJsonUrl: function getJsonUrl() {
        return '/projects/' + this.project.getId() + '/labels/' + encodeURIComponent(this._labelName) + '/story_snapshots';
    },paint: function paint($super) {
        var parentH = j($super());
        var h = j("<div><select class='labels'></select></div>");
        this.project.getLabelNames().each(function(label) {
            h.find("select").append(j("<option></option>", {value: label,selected: this._labelName == label}).text(label));
        }.bind(this));
        parentH.prepend(h);
        return parentH.get(0);
    },getTitle: function() {
        return '"' + this._labelName + '" Burn-Down';
    },onLabelChanged: function() {
        this._data = undefined;
        this._labelName = this.j("select.labels").val();
        this.updateDynamicValues();
    }});
HistoricalReleaseBurnDownChartWidget = Class.create(HistoricalBurnDownChartWidget, {initialize: function initialize($super, project) {
        $super(project);
        this._release = project.getReleaseMarkers()[0];
    },configuration: function configuration() {
        return {delegateEvents: {"change select.releases": "onReleaseChanged"}}
    },canFetchData: function canFetchData() {
        return !!this._release;
    },getJsonUrl: function getJsonUrl() {
        return '/projects/' + this.project.getId() + '/releases/' + this._release.getId() + '/story_snapshots';
    },paint: function paint($super) {
        var parentH = j($super());
        var h = j("<div><select class='releases'></select></div>");
        this.project.getReleaseMarkers().each(function(release) {
            h.find("select").append(j("<option></option>", {value: release.getId(),selected: this._release == release}).text(release.getName()));
        }.bind(this));
        parentH.prepend(h);
        return parentH.get(0);
    },getTitle: function() {
        return this._release.getName() + " Burn-Down";
    },onReleaseChanged: function() {
        this._data = undefined;
        this._release = this.project.getStoryById(this.j("select.releases").val());
        this.updateDynamicValues();
    }});
TextWidget = Class.create(BaseWidget, {initialize: function initialize($super, id, message) {
        $super();
        this._id = id;
        this._message = message;
        this.widgetType = 'TextWidget';
    },paint: function paint() {
        return Tracker.Template.render('text_template', {id: this._id,message: this._message});
    },id: function id() {
        return this._id;
    },isDraggable: function() {
        return false;
    },isHoverable: function() {
        return false;
    },setParent: function setParent(parentWidget) {
        this.parentWidget = parentWidget;
    }});
AbstractWidgetSource = Class.create();
AbstractWidgetSource.DEFAULT_ITERATIONS_TO_EXPAND = 5;
AbstractWidgetSource.prototype = {loggers: {},initialize: function() {
    },super_init: function(project, sourceType) {
        this.project = project;
        this.sourceType = sourceType;
        this.previousIterations = [];
        this.events = new EventChannelRegistry(this, "update", "toggleIteration");
        this._subscribeToTopLevelEvents();
    },allowsAdds: function() {
        return true;
    },_unsubscribeFromTopLevelEvents: function() {
        this.project.events.unsubscribe(this, "update");
    },_subscribeToTopLevelEvents: function() {
        this.project.events.subscribe(this, "update");
    },destroy: function() {
        this._unsubscribeFromTopLevelEvents();
        this._destroy();
    },_destroy: function() {
    },onUpdate: function(source) {
        this.events.fire("update");
    },clone: function() {
        var cloneSource = new this.klass(this.project);
        cloneSource.project = this.project;
        cloneSource.sourceType = this.sourceType;
        if (this.shownIterations) {
            cloneSource.shownIterations = this.shownIterations;
            cloneSource.previousIterations = this.previousIterations;
        }
        return cloneSource;
    },_extractStoriesAndIntroduceIterationsAndDeadlines: function(iterations) {
        this.createOrUpdateShownIterations(iterations);
        var result = [];
        for (var i = 0; i < iterations.length; ++i) {
            var iteration = iterations[i];
            result.push(iteration);
            if (this.isShowingIteration(iteration.getNumber())) {
                var domainObject = iteration.getStoriesAndDeadlines();
                for (var k = 0; k < domainObject.length; ++k) {
                    result.push(domainObject[k]);
                }
            }
        }
        return result;
    },createOrUpdateShownIterations: function(iterations) {
        if (!this.shownIterations) {
            this.shownIterations = this.filterDefaultShownIterationNumbers(iterations);
        } else {
            this.shownIterations = this.shownIterations.concat(this.calculateNewIterationNumbers(this.previousIterations, iterations));
            this.removeNonexistantIterations(iterations);
        }
        this.previousIterations = iterations;
    },calculateNewIterationNumbers: function(previousIterations, currentIterations) {
        var previousIterationNumbers = previousIterations.map(function(iteration) {
            return iteration.getNumber()
        });
        var currentIterationNumbers = currentIterations.map(function(iteration) {
            return iteration.getNumber()
        });
        var newIterationNumbers = [];
        currentIterationNumbers.each(function(iterationNumber) {
            if (!previousIterationNumbers.include(iterationNumber)) {
                newIterationNumbers.push(iterationNumber);
            }
        });
        return newIterationNumbers;
    },getShownIterations: function() {
        if (!this.shownIterations) {
            this.createOrUpdateShownIterations(this.getMyIterations());
        }
        return this.shownIterations;
    },setShownIterations: function(shownIterations) {
        this.shownIterations = shownIterations;
    },filterDefaultShownIterationNumbers: function(iterations) {
        return iterations.slice(0, AbstractWidgetSource.DEFAULT_ITERATIONS_TO_EXPAND).map(function(iteration) {
            return iteration.getNumber();
        });
    },removeNonexistantIterations: function(iterations) {
        var iterationNumbers = iterations.map(function(iteration) {
            return iteration.getNumber();
        });
        this.setShownIterations(this.getShownIterations().select(function(iterationNumber) {
            return iterationNumbers.indexOf(iterationNumber) != -1;
        }));
    },toggleIteration: function(iterationNumber) {
        this.isShowingIteration(iterationNumber) ? this.hideIteration(iterationNumber) : this.showIteration(iterationNumber);
    },isShowingIteration: function(iterationNumber) {
        return this.getShownIterations().indexOf(iterationNumber) != -1;
    },showIteration: function(iterationNumber) {
        this.getShownIterations().push(iterationNumber);
        this.events.fire("update");
        this.events.fire("toggleIteration");
    },hideIteration: function(iterationNumber) {
        this.setShownIterations(this.getShownIterations().select(function(number) {
            return iterationNumber != number;
        }));
        this.events.fire("update");
        this.events.fire("toggleIteration");
    },showAllIterations: function() {
        this.setShownIterations(this.getExpandableItems().map(function(iteration) {
            return iteration.getNumber();
        }));
        this.events.fire('update');
        this.events.fire("toggleIteration");
    },hideAllIterations: function() {
        this.setShownIterations([]);
        this.events.fire('update');
        this.events.fire("toggleIteration");
    },_createWidget: function(domainObject, itemListWidget) {
        var containedWidget;
        var itemWidgetId;
        if (this._isIterationId(domainObject.id())) {
            containedWidget = new IterationHeaderWidget(domainObject, this.project, itemListWidget);
            itemWidgetId = domainObject.id();
        } else if (this._isDeadlineId(domainObject.id())) {
            containedWidget = new DeadlineBarWidget(domainObject, this.project, itemListWidget);
            itemWidgetId = domainObject.id();
        } else {
            containedWidget = new StoryPreviewWidget(domainObject, this.project, itemListWidget, this.revealer);
            itemWidgetId = 'story' + domainObject.id();
        }
        return new ItemWidget(itemWidgetId, containedWidget, itemListWidget);
    },createWidgetForId: function(id, itemListWidget) {
        var domainObject;
        if (this._isIterationId(id)) {
            domainObject = this.project.getIterationByNumber(Iteration.iterationNumberFromId(id));
        } else if (this._isDeadlineId(id)) {
            domainObject = this.project.getDeadline(id);
        } else if (this._isNewStoryId(id)) {
            domainObject = this.project.newStory();
        } else {
            domainObject = this.project.getStoryById(id);
        }
        if (domainObject) {
            return this._createWidget(domainObject, itemListWidget);
        } else {
            return null;
        }
    },_isIterationId: function(id) {
        return ("" + id).indexOf("iteration") == 0;
    },_isDeadlineId: function(id) {
        return ("" + id).indexOf("deadline") == 0;
    },_isNewStoryId: function(id) {
        return (id == Story.NEW_STORY_ID);
    },_isEpicId: function _isEpicId(id) {
        return ("" + id).indexOf("epic") == 0;
    },createWidgets: function(itemListWidget) {
        var itemWidgets = [];
        var domainObjects = this.myDomainObjects();
        for (var i = 0; i < domainObjects.length; ++i) {
            itemWidgets.push(this._createWidget(domainObjects[i], itemListWidget));
        }
        return itemWidgets;
    },idsInOrder: function() {
        return this.myDomainObjects().collect(function(domainObject) {
            return domainObject.id();
        });
    },storyIdsInOrder: function() {
        return _(this.idsInOrder()).map(function(x) {
            return typeof (x) === "string" ? parseInt(x.substring("story".length)) : x;
        });
    },getCount: function() {
        return this.idsInOrder().length;
    },getExpandableItems: function() {
    },getEndOfListWidget: function(itemListWidget, msg) {
        return new EndOfListWidget(itemListWidget, msg);
    }};
BaseWidgetSource = Class.create(AbstractWidgetSource, {onUpdate: function onUpdate($super) {
        this.cacheSources(this.getViewSources());
        $super();
    },createWidgets: function(itemListWidget) {
        var itemWidgets = [];
        var domainObjects = this.getViewSources();
        this.cacheSources(domainObjects);
        for (var i = 0; i < domainObjects.length; ++i) {
            itemWidgets.push(this._createWidget(domainObjects[i], itemListWidget));
        }
        return itemWidgets;
    },clearSourcesCache: function clearSourcesCache() {
        this.widgetSourceById = null;
    },cacheSources: function cacheSources(sources) {
        this.widgetSourceById = {};
        for (var i = 0; i < sources.length; i++) {
            var source = sources[i];
            this.widgetSourceById[source.id()] = source;
        }
    },createWidgetForId: function(id, itemListWidget) {
        if (this.widgetSourceById == undefined) {
            this.cacheSources(this.getViewSources());
        }
        if (this._isNewStoryId(id)) {
            widgetSource = new StoryPreviewSource(this.project.newStory());
            return this._createWidget(widgetSource, itemListWidget);
        }
        var widgetSource = this.widgetSourceById[id];
        if (widgetSource) {
            return this._createWidget(widgetSource, itemListWidget);
        } else {
            return null;
        }
    },getViewSources: function() {
        throw "Implement me";
    },myDomainObjects: function() {
        return _(this.getViewSources()).pluck('model').compact();
    },idsInOrder: function() {
        return this.getViewSources().map(function(v) {
            return v.id()
        })
    },_createWidget: function _createWidget(widgetSource, itemListWidget) {
        return new ItemWidget(widgetSource.id(), widgetSource.createWidget(itemListWidget, this.revealer), itemListWidget);
    }});
HeaderSource = Class.create({initialize: function(name, description) {
        this._name = name;
        this._id = StringUtils.underscored(name.toLowerCase()).trim() + "_header";
        this._description = description;
    },id: function() {
        return this._id;
    },setDescription: function(description) {
        this._description = description;
    },setName: function(name) {
        this._name = name;
    },createWidget: function(itemListWidget, revealer) {
        return new HeaderWidget(this._id, this._name, this._description);
    }});
PreviewSource = Class.create({initialize: function(model, usePrefix) {
        this.model = model;
        this.usePrefix = usePrefix;
    },id: function() {
        return this.usePrefix ? this.prefix + this.model.id() : this.model.id();
    },createWidget: function(itemListWidget, revealer) {
        return new this.previewClass(this.model, this.model.project, itemListWidget, revealer);
    }});
StoryPreviewSource = Class.create(PreviewSource, {prefix: 'story',previewClass: StoryPreviewWidget});
EpicPreviewSource = Class.create(PreviewSource, {prefix: 'epic',previewClass: EpicPreviewWidget});
ShowDoneSource = Class.create({initialize: function(message, type) {
        this.message = message;
        this.type = type;
    },id: function() {
        return "show_done_" + this.type;
    },createWidget: function(itemListWidget, revealer) {
        return new ShowDoneWidget(this.id(), this.message);
    }});
BacklogWidgetSource = Class.create(AbstractWidgetSource, {initialize: function(project) {
        this.super_init(project, 'backlog');
        this.klass = BacklogWidgetSource;
    },myDomainObjects: function() {
        return this._extractStoriesAndIntroduceIterationsAndDeadlines(this.getMyIterations());
    },getExpandableItems: function() {
        return this.getMyIterations();
    },_getBacklogIterations: function() {
        return this.project.getBacklogIterations();
    },_getCurrentAndBacklogIterations: function() {
        return [this.project.getCurrentIteration()].concat(this.project.getBacklogIterations()).compact();
    },getMyIterations: function() {
        return this._getBacklogIterations();
    }});
j.extend(BacklogWidgetSource, {includeCurrent: function(includeCurrent) {
        if (includeCurrent) {
            BacklogWidgetSource.prototype.getMyIterations = BacklogWidgetSource.prototype._getCurrentAndBacklogIterations;
        } else {
            BacklogWidgetSource.prototype.getMyIterations = BacklogWidgetSource.prototype._getBacklogIterations;
        }
    }});
CurrentWidgetSource = Class.create();
CurrentWidgetSource.prototype = Object.extend(new AbstractWidgetSource(), {initialize: function(project) {
        this.super_init(project, 'current');
        this.klass = CurrentWidgetSource;
    },myDomainObjects: function() {
        return this._extractStoriesAndIntroduceIterationsAndDeadlines(this.getMyIterations());
    },getMyIterations: function() {
        var current = this.project.getCurrentIteration();
        return current ? [current] : [];
    }});
DoneWidgetSource = Class.create();
DoneWidgetSource.prototype = Object.extend(new AbstractWidgetSource(), {initialize: function(project) {
        this.super_init(project, 'done');
        this.klass = DoneWidgetSource;
    },allowsAdds: function() {
        return false;
    },myDomainObjects: function() {
        return this._extractStoriesAndIntroduceIterationsAndDeadlines(this.getMyIterations());
    },getExpandableItems: function() {
        return this.getMyIterations();
    },getMyIterations: function() {
        return this.project.getVisibleDoneIterations();
    },filterDefaultShownIterationNumbers: function(iterations) {
        return iterations.slice(-3).map(function(iteration) {
            return iteration.getNumber();
        });
    }});
SeparationSource = function(id, displayText, epic) {
    this._id = id;
    this.displayText = displayText;
    this.epic = epic;
};
SeparationSource.prototype.id = function() {
    return this._id;
};
SeparationSource.prototype.createWidget = function(itemListWidget, revealer) {
    var epic = this.epic;
    var moveStoryBeforeFunctor = function(project, dragStory) {
        if (dragStory && dragStory.isUnsaved()) {
            return project.getUnscheduledStories().first();
        }
        return epic.getStories().detect(function(story) {
            return dragStory != story && story.isUnscheduled();
        });
    };
    var moveStoryAfterFunctor = function(project, dragStory) {
        return epic.getStories().copy().reverse().detect(function(story) {
            return !story.isUnscheduled() && story != dragStory && (dragStory && project.canMoveStoryAfter(dragStory, story));
        }) || epic.project.findStoryAtBottomOfBucket(dragStory ? dragStory.getBucket() - 1 : StoryState.getBucketForState(StoryState.UNSCHEDULED));
    };
    return new SeparationLineWidget(this.epic.project, this.displayText, moveStoryBeforeFunctor, moveStoryAfterFunctor);
};
EpicStoriesWidgetSource = Class.create(BaseWidgetSource, {initialize: function(epic) {
        this.super_init(epic.project, "Epic Stories");
        this.epic = epic;
        this.project = epic.project;
        this.klass = EpicStoriesWidgetSource;
        this.revealer = app;
        this.doneStories = [];
        this.withDoneStories = false;
        this._subscribeToEvents();
        this._searchSource = new StorySearchWidgetSource(this.project, {searchString: "label:\"" + this.epic.label() + "\" includedone:true state:accepted"}, undefined, function() {
            this._updateDoneStories(this._searchSource.searchResults)
        }.bind(this), function() {
            this._updateSearchNotAvailable()
        }.bind(this));
    },_unsubscribeFromEvents: function() {
        this.epic.events.unsubscribe(this, "update");
    },_subscribeToEvents: function() {
        this.epic.events.subscribe(this, "update");
    },_destroy: function() {
        this._unsubscribeFromEvents();
    },getViewSources: function() {
        var currentIteration = this.project.getCurrentIteration();
        var results = this.withDoneStories ? this.doneStories.map(function(s) {
            return new StoryPreviewSource(s);
        }) : [];
        var separationSource = new SeparationSource('icebox_stories_separation_line', 'icebox stories', this.epic);
        var insertedIceboxMarker = false;
        this.epic.getStories().each(function(story) {
            if (!currentIteration || !story.isAccepted() || story.getAcceptedAt().isAfter(currentIteration.getStart())) {
                if (!insertedIceboxMarker && story.isUnscheduled()) {
                    results.push(separationSource);
                    insertedIceboxMarker = true;
                }
                results.push(new StoryPreviewSource(story));
            }
        });
        if (!insertedIceboxMarker) {
            results.push(separationSource);
        }
        return results;
    },getAcceptedStoriesBeforeCurrentIteration: function(stories) {
        var currentIteration = this.project.getCurrentIteration();
        return stories.select(function(story) {
            return story.isAccepted() && (!currentIteration || story.getAcceptedAt().isBefore(currentIteration.getStart()));
        });
    },_updateDoneStories: function _updateDoneStories(doneStories) {
        this.doneStories = this.getAcceptedStoriesBeforeCurrentIteration(doneStories);
        if (this.doneStories.length > 0) {
            this.onUpdate();
        }
        if (this.statusWidget) {
            this.statusWidget.hide();
        }
    },_updateSearchNotAvailable: function _updateSearchNotAvailable() {
        if (this.statusWidget) {
            this.statusWidget.isLoading = false;
            this.statusWidget.updateMessage("Done stories are currently unavailable.");
        }
    },loadDoneStories: function loadDoneStories(statusWidget) {
        this.statusWidget = statusWidget;
        this.withDoneStories = true;
        if (this.project.hasAllIterations()) {
            this._updateDoneStories(this.epic.getStories());
        } else {
            this._searchSource.doSearch();
        }
    },getEndOfListWidget: function(itemListWidget, msg) {
        return new LabeledPanelEndOfListWidget(itemListWidget, msg, function() {
            return this.epic.label()
        }.bind(this));
    }});
EpicsWidgetSource = Class.create();
EpicsWidgetSource.prototype = Object.extend(new AbstractWidgetSource(), {initialize: function(project) {
        this.super_init(project, "Epics");
        this.klass = EpicsWidgetSource;
        this._showDoneEpics = false;
        this._subscribeToEvents();
    },onUpdate: function() {
    },onEpicUpdate: function() {
        this.events.fire("update");
    },onUpdateAffectingEpicSize: function() {
        this.onEpicUpdate();
    },_subscribeToEvents: function() {
        this.project.events.subscribe(this, "epicUpdate");
        this.project.events.subscribe(this, "updateAffectingEpicSize");
    },_unsubscribeFromEvents: function() {
        this.project.events.unsubscribe(this, "epicUpdate");
        this.project.events.unsubscribe(this, "updateAffectingEpicSize");
    },_destroy: function() {
        this._unsubscribeFromEvents();
    },myDomainObjects: function() {
        var partitionedEpics = this.getEpicsByGroups();
        var epics = (this._showDoneEpics) ? partitionedEpics.done : [];
        epics = epics.concat(partitionedEpics.accepted);
        epics = epics.concat(partitionedEpics.active);
        return epics;
    },getEpicsByGroups: function() {
        var groups = _(this.project.getEpics()).groupBy(function(epic) {
            return epic.isDone() ? 'done' : epic.isAccepted() ? 'accepted' : 'active';
        });
        return _({done: [],accepted: [],active: []}).extend(groups);
    },getHeaderMessage: function() {
        var count = this.getEpicsByGroups().done.length;
        return count ? "show " + count + " done " + "epic".pluralize(count) : "";
    },showDoneEpics: function() {
        this._showDoneEpics = true;
        this.events.fire('update');
    },isShowingDoneEpics: function() {
        return this._showDoneEpics;
    },createWidgetForId: function(id, itemListWidget) {
        var domainObject;
        if (id == Epic.NEW_EPIC_ID) {
            domainObject = new Epic({id: Epic.NEW_EPIC_ID}, this.project)
        } else {
            domainObject = this.project.epics.findById(id);
        }
        return this._createWidget(domainObject, itemListWidget);
    },_createWidget: function(domainObject, itemListWidget) {
        var containedWidget = new EpicPreviewWidget(domainObject, this.project, itemListWidget);
        var itemWidgetId = 'epic' + (domainObject.isNew() ? Epic.NEW_EPIC_ID : domainObject.id());
        return new ItemWidget(itemWidgetId, containedWidget, itemListWidget);
    },getEndOfListWidget: function getEndOfListWidget(itemListWidget, msg) {
        return new EpicEndOfListWidget(itemListWidget, msg);
    }});
HistoryItemWidgetSource = Class.create();
HistoryItemWidgetSource.prototype = Object.extend(new AbstractWidgetSource(), {initialize: function(project, historyJson, revealer) {
        this.super_init(project, "history");
        this.project = project;
        this.revealer = revealer;
        this.historyItemById = {};
        this.historyJson = historyJson || [];
        this.generateHistoryItems();
        this.klass = HistoryItemWidgetSource;
        this._subscribeToEvents();
    },allowsAdds: function() {
        return false;
    },_subscribeToEvents: function() {
        this.project.events.subscribe(this, "historyUpdate");
    },_unsubscribeFromEvents: function() {
        this.project.events.unsubscribe(this, "historyUpdate");
    },_destroy: function() {
        this.historyJson = null;
        this.historyItems = null;
        this._unsubscribeFromEvents();
    },onUpdate: function() {
    },onHistoryUpdate: function(project, lastCommand) {
        if (lastCommand.showInHistory()) {
            this.addCommandToHistoryItem(lastCommand, true);
            this.events.fire("update");
        }
    },myDomainObjects: function() {
        return this.historyItems;
    },createWidgetForId: function(id, itemListWidget) {
        return this._createWidget(this.historyItemById[id], itemListWidget);
    },_createWidget: function(historyItem, itemListWidget) {
        return new ItemWidget(historyItem.id, new ProjectHistoryItemWidget(historyItem, this.revealer), itemListWidget);
    },idsInOrder: function() {
        return this.historyItems.map(function(item) {
            return item.id
        });
    },getMyIterations: function() {
        return [];
    },generateHistoryItems: function() {
        this.historyItems = [];
        for (var i = this.historyJson.length - 1; i >= 0; i--) {
            try {
                var command = Command.build(this.project, this.historyJson[i]);
                this.addCommandToHistoryItem(command, true);
            } catch (e) {
                if (!(e instanceof Tracker.UnknownCommandError)) {
                    throw e;
                }
            }
        }
    },findExistingItemFor: function(command) {
        for (var i = 0; i < this.historyItems.length; i++) {
            var historyItem = this.historyItems[i];
            if (historyItem.shouldContain(command)) {
                return historyItem;
            }
        }
        return null;
    },addCommandToHistoryItem: function(command, onTop) {
        var historyItem = this.findExistingItemFor(command);
        if (historyItem) {
            historyItem.addCommand(command);
            this.historyItems = this.historyItems.without(historyItem);
            this.historyItems.unshift(historyItem);
        } else {
            historyItem = new HistoryItem(this.project, command);
            if (onTop) {
                this.historyItems.unshift(historyItem);
            } else {
                this.historyItems.push(historyItem);
            }
            this.historyItemById[command.getVersion()] = historyItem;
        }
    }});
IceboxWidgetSource = Class.create();
IceboxWidgetSource.prototype = Object.extend(new AbstractWidgetSource(), {initialize: function(project) {
        this.super_init(project, "icebox");
        this.klass = IceboxWidgetSource;
    },myDomainObjects: function() {
        return this.project.getUnscheduledStories();
    },getMyIterations: function() {
        return [];
    }});
IntegrationWidgetSource = Class.create(AbstractWidgetSource, {initialize: function(project, integration, externalStoriesCompleteCallback, externalStoriesUnavailableCallback) {
        this.super_init(project, 'lighthouse');
        this.project = project;
        this.integration = integration;
        this.externalStories = [];
        this._serverProxy = new ServerProxy();
        this._externalStoriesCompleteCallback = externalStoriesCompleteCallback || function() {
        };
        this._externalStoriesUnavailableCallback = externalStoriesUnavailableCallback || function(response, e) {
        };
        this._subscribeToEvents();
    },allowsAdds: function() {
        return false;
    },_subscribeToEvents: function() {
        this.project.events.subscribe(this, "addStory");
    },_unsubscribeFromEvents: function() {
        this.project.events.unsubscribe(this, "addStory");
    },_destroy: function() {
        this.externalStories = null;
        this._unsubscribeFromEvents();
    },_getNextTempId: function() {
        return this.project.getNextTempStoryId();
    },onAddStory: function(project, story) {
        if (story.isExternallyLinked() && story.getIntegrationId() == this.integration.getId()) {
            var removeIndex = this._indexOfStoryExternalId(story.getExternalId());
            if (removeIndex == -1) {
                return;
            }
            this.externalStories.splice(removeIndex, 1);
            this.events.fire("update");
        }
    },_indexOfStoryExternalId: function(externalId) {
        for (var i = 0; i < this.externalStories.length; i++) {
            if (this.externalStories[i].getId() == externalId) {
                return i;
            }
        }
        return -1;
    },load: function() {
        try {
            this.setLastErrorMessage("");
            var params = "project_id=" + this.project.id;
            this._serverProxy.sendAjaxRequest('/projects/' + this.project.getId() + '/integrations/' + this.integration.getId() + '/external_stories?exclude_linked=true', params, 'get', {onSuccess: this._successCallback.bind(this),onFailure: this._externalStoriesUnavailableCallback.bind(this),onConnectivityFailure: this._externalStoriesUnavailableCallback.bind(this),onException: this._externalStoriesUnavailableCallback.bind(this)});
        } catch (e) {
            var message = "Exception trying to Send Client error to Server - " + e.toString();
            status(message);
        }
    },myDomainObjects: function() {
        return this.externalStories;
    },_parseResult: function(responseJson) {
        this.externalStories = [];
        for (var i = 0; i < responseJson.external_stories.length; i++) {
            var storyJson = responseJson.external_stories[i];
            var story = new ExternalStory(storyJson, this.project);
            this.externalStories.push(story);
        }
    },_successCallback: function(responseJson) {
        if (responseJson.status == "ERROR") {
            this.setLastErrorMessage(responseJson.message);
            this._externalStoriesUnavailableCallback();
        } else {
            this._parseResult(responseJson);
            this.events.fire("update");
            this._externalStoriesCompleteCallback();
        }
    },getLastErrorMessage: function() {
        return this._lastErrorMessage;
    },setLastErrorMessage: function(value) {
        this._lastErrorMessage = value;
        return this.getLastErrorMessage();
    },_getStoryById: function(id) {
        if (this.externalStories == null) {
            return null;
        }
        for (var i = 0; i < this.externalStories.length; i++) {
            if (this.externalStories[i].getId() == id) {
                return this.externalStories[i];
            }
        }
        return null;
    },createWidgetForId: function(id, itemListWidget) {
        var externalStory = this._getStoryById(id);
        return new ItemWidget(externalStory.getId(), this._createNewExternalStoryPreviewWidget(externalStory, this.integration, this.project, itemListWidget), itemListWidget);
    },_sanitizeHtmlId: function(text) {
        return text.replace(/[^\w]+/g, '').replace(/_/g, '-');
    },_createNewExternalStoryPreviewWidget: function(externalStory, integration, project, itemListWidget) {
        throw "Subclasses should override the _createNewExternalStoryPreviewWidget function";
    }});
IntegrationWidgetSource.widgetSourceClassForIntegrationType = function(integrationType) {
    switch (integrationType) {
        case 'jira':
            return BugToolIntegrationWidgetSource;
            break;
        case 'lighthouse':
            return BugToolIntegrationWidgetSource;
            break;
        case 'other':
            return BugToolIntegrationWidgetSource;
            break;
        case 'get_satisfaction':
            return GetSatisfactionIntegrationWidgetSource;
            break;
        default:
            return BugToolIntegrationWidgetSource;
    }
};
BugToolIntegrationWidgetSource = Class.create();
BugToolIntegrationWidgetSource.prototype = {_createNewExternalStoryPreviewWidget: function(externalStory, integration, project, itemListWidget) {
        return new BugToolExternalStoryPreviewWidget(externalStory, integration, project, itemListWidget);
    }};
Object.overrides(BugToolIntegrationWidgetSource, IntegrationWidgetSource);
GetSatisfactionIntegrationWidgetSource = Class.create();
GetSatisfactionIntegrationWidgetSource.prototype = {_createNewExternalStoryPreviewWidget: function(externalStory, integration, project, itemListWidget) {
        return new GetSatisfactionExternalStoryPreviewWidget(externalStory, integration, project, itemListWidget);
    }};
Object.overrides(GetSatisfactionIntegrationWidgetSource, BugToolIntegrationWidgetSource);
MyWorkWidgetSource = Class.create();
MyWorkWidgetSource.prototype = Object.extend(new AbstractWidgetSource(), {initialize: function(project, revealer) {
        this.super_init(project, 'mywork');
        this.klass = MyWorkWidgetSource;
        this.revealer = revealer;
    },allowsAdds: function() {
        return false;
    },myDomainObjects: function() {
        return this.project.getStoriesForSigninMember();
    },_createWidget: function(domainObject, itemListWidget) {
        var containedWidget;
        var itemWidgetId;
        containedWidget = new StoryPreviewWidget(domainObject, this.project, itemListWidget, this.revealer);
        itemWidgetId = 'story' + domainObject.id();
        return new ItemWidget(itemWidgetId, containedWidget, itemListWidget);
    },getMyIterations: function() {
        return [];
    }});
ReleaseWidgetSource = Class.create();
ReleaseWidgetSource.prototype = Object.extend(new AbstractWidgetSource(), {initialize: function(project) {
        this.super_init(project, "release");
        this.klass = ReleaseWidgetSource;
    },myDomainObjects: function() {
        return this.project.getReleaseMarkers();
    },getMyIterations: function() {
        return [];
    },allowsAdds: function() {
        return false;
    }});
StorySearchWidgetSource = Class.create();
StorySearchWidgetSource.prototype = Object.extend(new BaseWidgetSource(), {initialize: function(project, searchSpec, revealer, searchCompleteCallback, searchUnavailableCallback) {
        this.super_init(project, "search");
        this.klass = StorySearchWidgetSource;
        this.revealer = revealer;
        this._searchSpec = searchSpec;
        this.searchResults = [];
        this._totalHits = 0;
        this._totalHitsWithDone = 0;
        this._totalPoints = 0;
        this._totalPointsCompleted = 0;
        this._searchCompleteCallback = searchCompleteCallback;
        this._searchUnavailableCallback = searchUnavailableCallback;
        this._serverProxy = StorySearchWidgetSource._createServerProxy();
        this._searchSuccessful = false;
    },allowsAdds: function() {
        return false;
    },_destroy: function() {
        this.searchResults = null;
    },getViewSources: function() {
        var filtered_results = [];
        for (var i = 0; i < this.searchResults.length; i++) {
            var story = this.searchResults[i];
            if (!story.isDeleted()) {
                filtered_results.push(new StoryPreviewSource(story));
            }
        }
        return filtered_results;
    },_successCallback: function(responseJson) {
        this._searching = false;
        if (responseJson.status == "ERROR") {
            this._searchUnavailableCallback(responseJson.message);
        } else {
            this._searchSuccessful = true;
            this._parseResult(responseJson);
            this.clearSourcesCache();
            this._searchCompleteCallback();
        }
    },doSearch: function() {
        try {
            this._searchSuccessful = false;
            this._searching = true;
            this.onUpdate();
            if (this._searchSpec.searchString.length == 0) {
                this._searchSuccessful = true;
                this._parseResult({story: {stories: [],total_hits: 0,total_hits_with_done: 0,total_points: 0,total_points_completed: 0},epic: {epics: []}});
                this.clearSourcesCache();
                this._searchCompleteCallback();
                return;
            }
            var params = "project_id=" + this.project.id;
            params += "&search_string=" + encodeURIComponent(this._searchSpec.searchString);
            params += '&authenticity_token=' + encodeURIComponent(AUTH_TOKEN);
            this._serverProxy.sendAjaxRequest('/api/story/search', params, 'post', {onSuccess: this._successCallback.bind(this),onFailure: this._searchUnavailableCallback.bind(this),onConnectivityFailure: this._searchUnavailableCallback.bind(this),onException: this._searchUnavailableCallback.bind(this)});
        } catch (e) {
            var message = "Exception trying to Send Client error to Server - " + e.toString();
            status(message);
        }
    },_parseResult: function(responseJson) {
        this.searchResults = [];
        var storyResponse = responseJson['story'];
        for (var i = 0; i < storyResponse.stories.length; i++) {
            var storyJson = storyResponse.stories[i];
            var story = this.project.getStoryById(storyJson.id);
            if (!story && storyJson.json) {
                story = new Story(storyJson.json.parseJSON(), this.project);
            }
            if (story) {
                this.searchResults.push(story);
            }
        }
        if (storyResponse.resources) {
            for (var j = 0; j < storyResponse.resources.length; j++) {
                var resource = new Resource(storyResponse.resources[j].json.parseJSON(), this.project);
                this.project.resources.addResource(resource);
            }
        }
        this._totalHits = storyResponse.total_hits;
        this._totalHitsWithDone = storyResponse.total_hits_with_done;
        this._totalPoints = storyResponse.total_points;
        this._totalPointsCompleted = storyResponse.total_points_completed;
    },getCount: function() {
        return this.searchResults.length;
    },getTotalHits: function() {
        return this._totalHits;
    },getTotalHitsWithDone: function() {
        return this._totalHitsWithDone;
    },getTotalPoints: function() {
        return this._totalPoints;
    },getTotalPointsCompleted: function() {
        return this._totalPointsCompleted;
    },getMyIterations: function() {
        return [];
    }});
StorySearchWidgetSource._createServerProxy = function _createServerProxy() {
    return new ServerProxy();
};
StoryAndEpicSearchWidgetSource = Class.create(StorySearchWidgetSource, {initialize: function($super, project, searchSpec, revealer, searchCompleteCallback, searchUnavailableCallback) {
        $super(project, searchSpec, revealer, searchCompleteCallback, searchUnavailableCallback);
        this.klass = StoryAndEpicSearchWidgetSource;
        this.searchResults = {stories: [],epics: []};
        this._showDoneEpics = false;
        this._showDoneStories = false;
    },getViewSources: function() {
        var filteredResults = [];
        var model;
        if (!this._searchSuccessful) {
            return filteredResults;
        }
        if (this.project.epicsEnabled()) {
            var epicCount = this.searchResults.epics.length;
            var doneCount = 0;
            for (var i = 0; i < epicCount; i++) {
                model = this.searchResults.epics[i];
                if (!model.isDeleted() && (this._showDoneEpics || !model.isDone())) {
                    filteredResults.push(new EpicPreviewSource(model, true));
                }
                if (model.isDone()) {
                    doneCount++;
                }
            }
            if (!this._showDoneEpics && doneCount > 0) {
                var pluralizedEpic = "epic".pluralize(doneCount);
                filteredResults.unshift(new ShowDoneSource("show " + doneCount + " matching done " + pluralizedEpic, "epics"));
                epicCount -= doneCount;
            }
            if (epicCount > 0) {
                filteredResults.unshift(new HeaderSource('Epics', epicCount + ' epic'.pluralize(epicCount)));
            }
        }
        var storyCount = this.searchResults.stories.length;
        var storySource = new HeaderSource('Stories', null);
        filteredResults.push(storySource);
        doneCount = this.getTotalHitsWithDone() - this.getTotalHits();
        if (!this._showDoneStories && doneCount > 0) {
            var pluralizedStory = "story".pluralize(doneCount, "stories");
            filteredResults.push(new ShowDoneSource("show " + doneCount + " matching done " + pluralizedStory, "stories"));
        }
        if (storyCount == 0) {
            filteredResults.push(new TextSource("no_matching_stories", "no matching stories found"));
        }
        var points = 0;
        for (var j = 0; j < storyCount; j++) {
            model = this.searchResults.stories[j];
            if (!model.isDeleted()) {
                points += model.isEstimatable() && model.isEstimated() ? model.getEstimate() : 0;
                filteredResults.push(new StoryPreviewSource(model, true));
            }
        }
        var description = storyCount + ' story'.pluralize(storyCount, ' stories') + ', ' + points + ' point'.pluralize(points);
        if (this.getTotalHits() > storyCount) {
            description += ' shown (' + this.getTotalHits() + ' stories matched)';
        }
        storySource.setDescription(description);
        return filteredResults;
    },doSearch: function($super) {
        this.setShowDoneEpics(false);
        this.setShowDoneStories(false);
        if (this._searchSpec.searchString.include("includedone:true")) {
            this.setShowDoneStories(true);
        }
        $super();
    },setShowDoneEpics: function(showEpics) {
        this._showDoneEpics = showEpics;
        if (showEpics) {
            this._searchSuccessful = false;
            this.onUpdate();
            this._searchSuccessful = true;
            this.clearSourcesCache();
            this.onUpdate();
        }
    },setShowDoneStories: function(showStories) {
        this._showDoneStories = showStories;
    },_parseResult: function(responseJson) {
        this.searchResults = {stories: [],epics: []};
        var storyResponse = responseJson['story'];
        for (var i = 0; i < storyResponse.stories.length; i++) {
            var storyJson = storyResponse.stories[i];
            var story = this.project.getStoryById(storyJson.id);
            if (!story && storyJson.json) {
                story = new Story(storyJson.json.parseJSON(), this.project);
            }
            if (story) {
                this.searchResults.stories.push(story);
            }
        }
        if (storyResponse.resources) {
            for (var j = 0; j < storyResponse.resources.length; j++) {
                var resource = new Resource(storyResponse.resources[j].json.parseJSON(), this.project);
                this.project.resources.addResource(resource);
            }
        }
        var epicResponse = responseJson['epic'];
        for (var k = 0; k < epicResponse.epics.length; k++) {
            var epicJson = epicResponse.epics[k];
            var epic = this.project.getEpicById(epicJson.id);
            this.searchResults.epics.push(epic);
        }
        this._totalHits = storyResponse.total_hits;
        this._totalHitsWithDone = storyResponse.total_hits_with_done;
        this._totalPoints = storyResponse.total_points;
        this._totalPointsCompleted = storyResponse.total_points_completed;
    },_createWidget: function($super, widgetSource, itemListWidget) {
        var itemWidget = $super(widgetSource, itemListWidget);
        itemWidget.setId(widgetSource.id());
        return itemWidget;
    }});
BaseHistoryWidgetSource = Class.create(AbstractWidgetSource, {initialize: function(project, model) {
        this.super_init(project, "storyHistory");
        this.project = project;
        this.model = model;
        this.klass = StoryHistoryWidgetSource;
        this.project.events.subscribe(this, "historyUpdate");
        this.history = null;
        this.historyByVersion = null;
        this.onDataLoadHappened = false;
        this._subscribeToEvents();
    },_subscribeToEvents: function() {
        this.project.events.subscribe(this, "historyUpdate");
    },_unsubscribeFromEvents: function() {
        this.project.events.unsubscribe(this, "historyUpdate");
    },_destroy: function() {
        this.history = null;
        this._unsubscribeFromEvents();
    },onDataLoad: function(history) {
        this.history = history.reverse();
        this.historyByVersion = {};
        for (var i = 0; i < this.history.length; i++) {
            this.historyByVersion[this.history[i].getVersion()] = this.history[i];
        }
        this.onDataLoadHappened = true;
        this.events.fire("update");
    },onHistoryUpdate: function(project, lastCommand) {
        if (!this.onDataLoadHappened) {
            app.sendClientErrorToServer("StoryHistoryWidgetSource#onHistoryUpdate was called before StoryHistoryWidgetSource#onDataLoad");
        } else {
            if (lastCommand.affectsModel(this.model)) {
                this.history.unshift(lastCommand);
                this.historyByVersion[lastCommand.getVersion()] = lastCommand;
                this.events.fire("update");
            }
        }
    },myDomainObjects: function() {
        if (!this.history) {
            this.history = [];
            this.historyByVersion = {};
            this.fetchHistory();
        }
        return this.history;
    },idsInOrder: function() {
        return this.history.collect(function(domainObject) {
            return parseInt(domainObject.getVersion());
        });
    },createWidgetForId: function(id, itemListWidget) {
        return this._createWidget(this.historyByVersion[id], itemListWidget);
    },_createWidget: function(command, itemListWidget) {
        return new ItemWidget(command.getVersion(), StoryHistoryCommandWidget.forCommand(this.project, command, null, true), itemListWidget);
    },fetchHistory: function() {
        throw "Implement fetchHistory()";
    },getMyIterations: function() {
        return [];
    }});
EpicHistoryWidgetSource = Class.create(BaseHistoryWidgetSource, {fetchHistory: function() {
        this.project.getHistoryForEpic(this.model, this.onDataLoad.bind(this));
    }});
StoryHistoryWidgetSource = Class.create(BaseHistoryWidgetSource, {fetchHistory: function() {
        this.project.getHistoryForStory(this.model, this.onDataLoad.bind(this));
    }});
TextSource = Class.create({initialize: function(id, message) {
        this._id = id;
        this._message = message;
    },id: function() {
        return this._id;
    },createWidget: function(itemListWidget, revealer) {
        return new TextWidget(this._id, this._message);
    }});
HotKeys = Class.create();
HotKeys.useMetaKey = navigator.userAgent && navigator.userAgent.toLowerCase().indexOf('mac') != -1;
HotKeys.prototype = {initialize: function(element) {
        this.createHotKeys();
        this.createHelpDialog();
        this.element = element;
        Event.observe(this.element, 'keypress', this.handleKeypress.bind(this));
    },createHotKeys: function() {
        var saveKey = HotKeys.useMetaKey ? "<Cmd> + s" : "<Ctrl> + s"
        this.shortcuts = [{key: "/",description: "search",action: function() {
                    this.doSearch();
                }}, {key: "?",description: "help (this)",action: function() {
                    this.toggleHelp();
                }}, {key: "escape",description: "close help",action: function() {
                    this.hideHelp();
                },hideInHelp: true}, {key: "a",description: "add story",action: function() {
                    this.addStory();
                }}, {key: saveKey,description: "save currently open story",action: function() {
                }}, {key: "<Shift> + enter",description: "save comment being edited",action: function() {
                }}, {key: "<Shift> + b",description: "toggle backlog",action: function() {
                    this.togglePanel(Panel.BACKLOG);
                }}, {key: "<Shift> + g",description: "toggle charts (graphs)",action: function() {
                    this.togglePanel(Panel.CHARTS);
                }}, {key: "<Shift> + d",description: "toggle done",action: function() {
                    this.togglePanel(Panel.DONE);
                }}, {key: "<Shift> + h",description: "toggle history",action: function() {
                    this.togglePanel(Panel.HISTORY);
                }}, {key: "<Shift> + i",description: "toggle icebox",action: function() {
                    this.togglePanel(Panel.ICEBOX);
                }}, {key: "<Shift> + w",description: "toggle my work",action: function() {
                    this.togglePanel(Panel.MY_WORK);
                }}, {key: "<Shift> + l",description: "toggle labels & searches",action: function() {
                    this.togglePanel(Panel.SIDEBAR);
                }}];
        if (app.layout.isCurrentInBacklog) {
            this.shortcuts.push({key: "<Shift> + c",description: "toggle current",action: function() {
                    this.togglePanel(Panel.BACKLOG);
                }})
        } else {
            this.shortcuts.push({key: "<Shift> + c",description: "toggle current",action: function() {
                    this.togglePanel(Panel.CURRENT);
                }})
        }
        if (app.project.epicsEnabled()) {
            this.shortcuts.push({key: "e",description: "add epic",action: function() {
                    app.layout.addEpic();
                }});
            this.shortcuts.push({key: "<Shift> + e",description: "toggle epics panel",action: function() {
                    this.togglePanel(Panel.EPICS);
                }});
        }
        this.keysToActions = {};
        for (var i = 0; i < this.shortcuts.length; i++) {
            this.keysToActions[this.shortcuts[i].key] = this.shortcuts[i].action;
        }
    },createHelpDialog: function() {
        this.helpDialog = new Element("div").setStyle({display: "none"});
        this.helpDialog.id = "keyboard_shortcuts_help";
        var helpDialogItems = new Element("div").setStyle({margin: "2em"});
        helpDialogItems.insert(new Element("h4").update("Keyboard Shortcuts"));
        for (var i = 0; i < this.shortcuts.length; i++) {
            var shortcut = this.shortcuts[i];
            if (!shortcut.hideInHelp) {
                var helpItem = new Element('p');
                var helpItemName = new Element('span').update(shortcut.description);
                helpItem.insert(helpItemName);
                helpItem.insert(shortcut.key.escapeHTML());
                helpDialogItems.insert(helpItem);
            }
        }
        var closeHelpLink = new Element("a", {href: "#",style: "color: yellow; font-weight: normal;"}).insert("close");
        closeHelpLink.observe("click", function() {
            this.hideHelp()
        }.bind(this));
        helpDialogItems.insert(new Element("span").insert(new Element("span", {colspan: 2,style: "text-align: right;"}).insert(closeHelpLink)));
        this.helpDialog.insert(helpDialogItems);
        Element.insert(document.body, {top: this.helpDialog});
    },togglePanel: function(panel) {
        this.hideHelp();
        app.layout.togglePanel(panel);
    },hideHelp: function() {
        this.helpDialog.hide();
    },toggleHelp: function() {
        if (this.helpDialog.visible()) {
            this.helpDialog.hide();
        } else {
            this.helpDialog.show();
        }
    },addStory: function() {
        this.hideHelp();
        var addStoryButton = $("addstory_control_button");
        if (addStoryButton) {
            j(addStoryButton).click();
        }
    },doSearch: function() {
        this.hideHelp();
        $("searchString").focus();
    },handleKeypress: function(e) {
        e = this._getEvent(e);
        var target = e.target;
        if (["INPUT", "TEXTAREA", "SELECT"].include(target.nodeName)) {
            return true;
        }
        var code = this._getKeyCode(e);
        var character = String.fromCharCode(code).toLowerCase();
        var modifier = this._getKeyModifier(e);
        if (modifier.length > 0 && character.match(/[a-z]/)) {
            character = modifier + character;
        }
        if (code == Event.KEY_ESC) {
            character = "escape";
        }
        var action = this.keysToActions[character];
        if (action) {
            action.call(this);
            e.stop();
            return false;
        } else {
            return true;
        }
    },_getEvent: function(e) {
        return e || window.event;
    },_getKeyCode: function(e) {
        return e.keyCode || e.which;
    },_getKeyModifier: function(e) {
        var modifierText = "";
        if (e.ctrlKey) {
            modifierText += "<Ctrl> + ";
        }
        if (e.metaKey) {
            modifierText += "<Cmd> + ";
        }
        if (e.altKey) {
            modifierText += "<Alt> + ";
        }
        if (e.shiftKey) {
            modifierText += "<Shift> + ";
        }
        return modifierText;
    },destroy: function() {
        Event.stopObserving(this.element, 'keypress');
        document.body.removeChild(this.helpDialog);
    }};
